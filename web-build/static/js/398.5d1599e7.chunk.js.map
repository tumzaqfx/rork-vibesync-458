{"version":3,"file":"static/js/398.5d1599e7.chunk.js","mappings":"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","sources":["utils/email-templates.ts","utils/email-service.ts"],"sourcesContent":["import { EmailTemplate } from '@/types/email';\n\nconst baseStyles = `\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n    background-color: #f5f5f5;\n    color: #1a1a1a;\n  }\n  .email-container {\n    max-width: 600px;\n    margin: 0 auto;\n    background-color: #ffffff;\n  }\n  .email-header {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    padding: 40px 20px;\n    text-align: center;\n  }\n  .email-logo {\n    font-size: 32px;\n    font-weight: bold;\n    color: #ffffff;\n    margin: 0;\n  }\n  .email-body {\n    padding: 40px 30px;\n  }\n  .email-title {\n    font-size: 24px;\n    font-weight: 600;\n    color: #1a1a1a;\n    margin: 0 0 20px 0;\n  }\n  .email-text {\n    font-size: 16px;\n    line-height: 1.6;\n    color: #4a4a4a;\n    margin: 0 0 20px 0;\n  }\n  .email-list {\n    margin: 20px 0;\n    padding-left: 20px;\n  }\n  .email-list li {\n    font-size: 16px;\n    line-height: 1.8;\n    color: #4a4a4a;\n    margin-bottom: 10px;\n  }\n  .email-button {\n    display: inline-block;\n    padding: 14px 32px;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: #ffffff !important;\n    text-decoration: none;\n    border-radius: 8px;\n    font-weight: 600;\n    font-size: 16px;\n    margin: 20px 0;\n  }\n  .email-footer {\n    padding: 30px;\n    text-align: center;\n    background-color: #f9f9f9;\n    border-top: 1px solid #e0e0e0;\n  }\n  .email-footer-text {\n    font-size: 14px;\n    color: #888888;\n    margin: 5px 0;\n  }\n  .email-footer-link {\n    color: #667eea;\n    text-decoration: none;\n  }\n  .email-divider {\n    height: 1px;\n    background-color: #e0e0e0;\n    margin: 30px 0;\n  }\n  .email-highlight {\n    background-color: #f0f4ff;\n    padding: 15px;\n    border-radius: 8px;\n    margin: 20px 0;\n  }\n  @media (prefers-color-scheme: dark) {\n    body {\n      background-color: #1a1a1a;\n      color: #ffffff;\n    }\n    .email-container {\n      background-color: #2a2a2a;\n    }\n    .email-title {\n      color: #ffffff;\n    }\n    .email-text, .email-list li {\n      color: #cccccc;\n    }\n    .email-footer {\n      background-color: #1f1f1f;\n      border-top-color: #3a3a3a;\n    }\n    .email-highlight {\n      background-color: #2f3542;\n    }\n  }\n  @media only screen and (max-width: 600px) {\n    .email-body {\n      padding: 30px 20px;\n    }\n    .email-title {\n      font-size: 20px;\n    }\n    .email-text {\n      font-size: 15px;\n    }\n  }\n`;\n\nconst createEmailHTML = (content: string): string => `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta name=\"color-scheme\" content=\"light dark\">\n  <meta name=\"supported-color-schemes\" content=\"light dark\">\n  <style>${baseStyles}</style>\n</head>\n<body>\n  <div class=\"email-container\">\n    <div class=\"email-header\">\n      <h1 class=\"email-logo\">VibeSync</h1>\n    </div>\n    ${content}\n    <div class=\"email-footer\">\n      <p class=\"email-footer-text\">You are receiving this email because you have an account with VibeSync.</p>\n      <p class=\"email-footer-text\">\n        <a href=\"{unsubscribe_link}\" class=\"email-footer-link\">Manage email preferences</a> | \n        <a href=\"{unsubscribe_link}\" class=\"email-footer-link\">Unsubscribe</a>\n      </p>\n      <p class=\"email-footer-text\">&copy; 2025 VibeSync. All rights reserved.</p>\n    </div>\n  </div>\n</body>\n</html>\n`;\n\nexport const emailTemplates: Record<string, EmailTemplate> = {\n  welcome: {\n    type: 'welcome',\n    subject: 'Welcome to VibeSync – Your World of Vibes & Connection 🎶',\n    htmlBody: createEmailHTML(`\n      <div class=\"email-body\">\n        <h2 class=\"email-title\">Hi {username},</h2>\n        <p class=\"email-text\">Welcome to VibeSync — where vibes, voice notes, and real connections come alive. 🎧</p>\n        <p class=\"email-text\">With VibeSync, you can:</p>\n        <ul class=\"email-list\">\n          <li>Post and comment with voice notes to make conversations feel real</li>\n          <li>Share vibes and playlists with friends</li>\n          <li>Discover people near you through our Friendship Heatmap</li>\n          <li>Sync experiences in real-time</li>\n        </ul>\n        <p class=\"email-text\">👉 Get started now and set up your profile.</p>\n        <a href=\"https://vibesync.com/profile/setup\" class=\"email-button\">Start Vibing</a>\n      </div>\n    `),\n    textBody: `Hi {username},\\n\\nWelcome to VibeSync — where vibes, voice notes, and real connections come alive.\\n\\nWith VibeSync, you can:\\n- Post and comment with voice notes to make conversations feel real\\n- Share vibes and playlists with friends\\n- Discover people near you through our Friendship Heatmap\\n- Sync experiences in real-time\\n\\nGet started now: https://vibesync.com/profile/setup`,\n    category: 'transactional',\n  },\n\n  email_verification: {\n    type: 'email_verification',\n    subject: 'Verify Your Email to Unlock VibeSync 🚀',\n    htmlBody: createEmailHTML(`\n      <div class=\"email-body\">\n        <h2 class=\"email-title\">Hi {username},</h2>\n        <p class=\"email-text\">Thanks for signing up! Please confirm your email to unlock all VibeSync features.</p>\n        <a href=\"{verify_link}\" class=\"email-button\">Verify My Email</a>\n        <p class=\"email-text\" style=\"color: #888888; font-size: 14px;\">This link will expire in {expiry}.</p>\n      </div>\n    `),\n    textBody: `Hi {username},\\n\\nThanks for signing up! Please confirm your email to unlock all VibeSync features.\\n\\nVerify your email: {verify_link}\\n\\nThis link will expire in {expiry}.`,\n    category: 'transactional',\n  },\n\n  password_reset: {\n    type: 'password_reset',\n    subject: 'Reset Your VibeSync Password 🔑',\n    htmlBody: createEmailHTML(`\n      <div class=\"email-body\">\n        <h2 class=\"email-title\">Hi {username},</h2>\n        <p class=\"email-text\">We received a request to reset your VibeSync password. If it was you, click below to set a new password.</p>\n        <a href=\"{reset_link}\" class=\"email-button\">Reset Password</a>\n        <p class=\"email-text\" style=\"color: #888888; font-size: 14px;\">This link will expire in {expiry}.</p>\n        <div class=\"email-divider\"></div>\n        <p class=\"email-text\" style=\"font-size: 14px;\">If you didn't request this, you can ignore this email.</p>\n      </div>\n    `),\n    textBody: `Hi {username},\\n\\nWe received a request to reset your VibeSync password. If it was you, click below to set a new password.\\n\\nReset password: {reset_link}\\n\\nThis link will expire in {expiry}.\\n\\nIf you didn't request this, you can ignore this email.`,\n    category: 'transactional',\n  },\n\n  account_recovery: {\n    type: 'account_recovery',\n    subject: 'Need Help Recovering Your VibeSync Account? 🛡️',\n    htmlBody: createEmailHTML(`\n      <div class=\"email-body\">\n        <h2 class=\"email-title\">Hi {username},</h2>\n        <p class=\"email-text\">We noticed you requested help recovering your account. To keep your account secure, follow the steps below:</p>\n        <ul class=\"email-list\">\n          <li>Click the secure recovery link</li>\n          <li>Verify your identity by confirming the code sent to your phone/email</li>\n          <li>Reset your password and review recent activity</li>\n        </ul>\n        <a href=\"{recovery_link}\" class=\"email-button\">Start Account Recovery</a>\n        <div class=\"email-divider\"></div>\n        <p class=\"email-text\" style=\"font-size: 14px; color: #d32f2f;\">If you didn't request account recovery, please secure your account immediately or contact support.</p>\n      </div>\n    `),\n    textBody: `Hi {username},\\n\\nWe noticed you requested help recovering your account. To keep your account secure, follow the steps below:\\n\\n1. Click the secure recovery link\\n2. Verify your identity by confirming the code sent to your phone/email\\n3. Reset your password and review recent activity\\n\\nStart recovery: {recovery_link}\\n\\nIf you didn't request account recovery, please secure your account immediately or contact support.`,\n    category: 'transactional',\n  },\n\n  new_login_alert: {\n    type: 'new_login_alert',\n    subject: 'New Login Detected on Your VibeSync Account ⚠️',\n    htmlBody: createEmailHTML(`\n      <div class=\"email-body\">\n        <h2 class=\"email-title\">Hi {username},</h2>\n        <p class=\"email-text\">A new login was detected on your account.</p>\n        <div class=\"email-highlight\">\n          <p class=\"email-text\" style=\"margin: 5px 0;\"><strong>Device:</strong> {device}</p>\n          <p class=\"email-text\" style=\"margin: 5px 0;\"><strong>Location:</strong> {location}</p>\n          <p class=\"email-text\" style=\"margin: 5px 0;\"><strong>Time:</strong> {timestamp}</p>\n        </div>\n        <p class=\"email-text\">If this wasn't you, secure your account immediately.</p>\n        <a href=\"{secure_link}\" class=\"email-button\">Secure My Account</a>\n      </div>\n    `),\n    textBody: `Hi {username},\\n\\nA new login was detected on your account.\\n\\nDevice: {device}\\nLocation: {location}\\nTime: {timestamp}\\n\\nIf this wasn't you, secure your account immediately: {secure_link}`,\n    category: 'transactional',\n  },\n\n  friendship_follow: {\n    type: 'friendship_follow',\n    subject: '{friend_name} Just Followed You on VibeSync 🎉',\n    htmlBody: createEmailHTML(`\n      <div class=\"email-body\">\n        <h2 class=\"email-title\">Hi {username},</h2>\n        <p class=\"email-text\">Great news — <strong>{friend_name}</strong> just followed you on VibeSync!</p>\n        <p class=\"email-text\">Check out their profile and follow back to stay connected.</p>\n        <a href=\"{friend_profile_link}\" class=\"email-button\">View Profile</a>\n      </div>\n    `),\n    textBody: `Hi {username},\\n\\nGreat news — {friend_name} just followed you on VibeSync!\\n\\nCheck out their profile and follow back to stay connected.\\n\\nView profile: {friend_profile_link}`,\n    category: 'notification',\n  },\n\n  playlist_sync: {\n    type: 'playlist_sync',\n    subject: '{friend_name} Updated {playlist_name} on VibeSync 🎶',\n    htmlBody: createEmailHTML(`\n      <div class=\"email-body\">\n        <h2 class=\"email-title\">Hi {username},</h2>\n        <p class=\"email-text\"><strong>{friend_name}</strong> just updated <strong>{playlist_name}</strong> — new vibes and voice notes were added.</p>\n        <p class=\"email-text\">Don't miss out — open it now and vibe together.</p>\n        <a href=\"{playlist_link}\" class=\"email-button\">Open Playlist</a>\n      </div>\n    `),\n    textBody: `Hi {username},\\n\\n{friend_name} just updated {playlist_name} — new vibes and voice notes were added.\\n\\nDon't miss out — open it now and vibe together.\\n\\nOpen playlist: {playlist_link}`,\n    category: 'notification',\n  },\n\n  voice_note_interaction: {\n    type: 'voice_note_interaction',\n    subject: 'New Voice Note Reply from {friend_name} 🎤',\n    htmlBody: createEmailHTML(`\n      <div class=\"email-body\">\n        <h2 class=\"email-title\">Hi {username},</h2>\n        <p class=\"email-text\"><strong>{friend_name}</strong> replied to your vibe with a voice note:</p>\n        <div class=\"email-highlight\">\n          <p class=\"email-text\" style=\"font-style: italic;\">\"{snippet_text}…\"</p>\n        </div>\n        <p class=\"email-text\">Tap below to listen and reply.</p>\n        <a href=\"{vibe_link}\" class=\"email-button\">Listen Now</a>\n      </div>\n    `),\n    textBody: `Hi {username},\\n\\n{friend_name} replied to your vibe with a voice note:\\n\\n\"{snippet_text}…\"\\n\\nTap below to listen and reply: {vibe_link}`,\n    category: 'notification',\n  },\n\n  engagement_boost: {\n    type: 'engagement_boost',\n    subject: 'We Miss You at VibeSync 💜',\n    htmlBody: createEmailHTML(`\n      <div class=\"email-body\">\n        <h2 class=\"email-title\">Hi {username},</h2>\n        <p class=\"email-text\">It's been a while since your last vibe. Here's what you've missed:</p>\n        <ul class=\"email-list\">\n          <li><strong>{new_followers_count}</strong> new people followed you</li>\n          <li><strong>{friend_name}</strong> shared a new playlist</li>\n          <li>Trending vibes and voice notes in your city</li>\n        </ul>\n        <p class=\"email-text\">Jump back in and catch up on the community.</p>\n        <a href=\"https://vibesync.com\" class=\"email-button\">Open VibeSync</a>\n      </div>\n    `),\n    textBody: `Hi {username},\\n\\nIt's been a while since your last vibe. Here's what you've missed:\\n\\n- {new_followers_count} new people followed you\\n- {friend_name} shared a new playlist\\n- Trending vibes and voice notes in your city\\n\\nJump back in and catch up on the community: https://vibesync.com`,\n    category: 'promotional',\n  },\n\n  order_confirmed: {\n    type: 'order_confirmed',\n    subject: 'Your VibeSync Order #{order_id} is Confirmed ✅',\n    htmlBody: createEmailHTML(`\n      <div class=\"email-body\">\n        <h2 class=\"email-title\">Hi {username},</h2>\n        <p class=\"email-text\">Your order has been confirmed! We're preparing it for shipment.</p>\n        <div class=\"email-highlight\">\n          <p class=\"email-text\" style=\"margin: 5px 0;\"><strong>Order ID:</strong> #{order_id}</p>\n          <p class=\"email-text\" style=\"margin: 5px 0;\"><strong>Status:</strong> {order_status}</p>\n        </div>\n        <a href=\"{order_link}\" class=\"email-button\">View Order Details</a>\n      </div>\n    `),\n    textBody: `Hi {username},\\n\\nYour order has been confirmed! We're preparing it for shipment.\\n\\nOrder ID: #{order_id}\\nStatus: {order_status}\\n\\nView order details: {order_link}`,\n    category: 'transactional',\n  },\n\n  order_shipped: {\n    type: 'order_shipped',\n    subject: 'Your VibeSync Order #{order_id} is on the Way 📦',\n    htmlBody: createEmailHTML(`\n      <div class=\"email-body\">\n        <h2 class=\"email-title\">Hi {username},</h2>\n        <p class=\"email-text\">Great news! Your order has been shipped and is on its way to you.</p>\n        <div class=\"email-highlight\">\n          <p class=\"email-text\" style=\"margin: 5px 0;\"><strong>Order ID:</strong> #{order_id}</p>\n          <p class=\"email-text\" style=\"margin: 5px 0;\"><strong>Status:</strong> {order_status}</p>\n        </div>\n        <a href=\"{order_link}\" class=\"email-button\">Track Your Order</a>\n      </div>\n    `),\n    textBody: `Hi {username},\\n\\nGreat news! Your order has been shipped and is on its way to you.\\n\\nOrder ID: #{order_id}\\nStatus: {order_status}\\n\\nTrack your order: {order_link}`,\n    category: 'transactional',\n  },\n\n  order_delivered: {\n    type: 'order_delivered',\n    subject: 'Your VibeSync Order #{order_id} has Arrived 🎁',\n    htmlBody: createEmailHTML(`\n      <div class=\"email-body\">\n        <h2 class=\"email-title\">Hi {username},</h2>\n        <p class=\"email-text\">Your order has been delivered! We hope you love it.</p>\n        <div class=\"email-highlight\">\n          <p class=\"email-text\" style=\"margin: 5px 0;\"><strong>Order ID:</strong> #{order_id}</p>\n          <p class=\"email-text\" style=\"margin: 5px 0;\"><strong>Status:</strong> {order_status}</p>\n        </div>\n        <a href=\"{order_link}\" class=\"email-button\">View Order Details</a>\n      </div>\n    `),\n    textBody: `Hi {username},\\n\\nYour order has been delivered! We hope you love it.\\n\\nOrder ID: #{order_id}\\nStatus: {order_status}\\n\\nView order details: {order_link}`,\n    category: 'transactional',\n  },\n\n  seller_notification: {\n    type: 'seller_notification',\n    subject: \"You've Got a New Order on VibeSync Marketplace\",\n    htmlBody: createEmailHTML(`\n      <div class=\"email-body\">\n        <h2 class=\"email-title\">Hi {username},</h2>\n        <p class=\"email-text\">Congratulations! You have a new order on VibeSync Marketplace.</p>\n        <div class=\"email-highlight\">\n          <p class=\"email-text\" style=\"margin: 5px 0;\"><strong>Order ID:</strong> #{order_id}</p>\n        </div>\n        <p class=\"email-text\">Please prepare the order for shipment as soon as possible.</p>\n        <a href=\"{order_link}\" class=\"email-button\">View Order Details</a>\n      </div>\n    `),\n    textBody: `Hi {username},\\n\\nCongratulations! You have a new order on VibeSync Marketplace.\\n\\nOrder ID: #{order_id}\\n\\nPlease prepare the order for shipment as soon as possible.\\n\\nView order details: {order_link}`,\n    category: 'transactional',\n  },\n\n  policy_update: {\n    type: 'policy_update',\n    subject: \"Updates to VibeSync's Terms & Privacy Policy 📜\",\n    htmlBody: createEmailHTML(`\n      <div class=\"email-body\">\n        <h2 class=\"email-title\">Hi {username},</h2>\n        <p class=\"email-text\">We've made important updates to our Terms of Service and Privacy Policy.</p>\n        <p class=\"email-text\">Please review them to stay informed about how we protect and use your data.</p>\n        <a href=\"{update_link}\" class=\"email-button\">Read Updates</a>\n      </div>\n    `),\n    textBody: `Hi {username},\\n\\nWe've made important updates to our Terms of Service and Privacy Policy.\\n\\nPlease review them to stay informed about how we protect and use your data.\\n\\nRead updates: {update_link}`,\n    category: 'promotional',\n  },\n\n  monthly_digest: {\n    type: 'monthly_digest',\n    subject: 'Your VibeSync Recap – {month} ✨',\n    htmlBody: createEmailHTML(`\n      <div class=\"email-body\">\n        <h2 class=\"email-title\">Hi {username},</h2>\n        <p class=\"email-text\">Here's your month at a glance:</p>\n        <ul class=\"email-list\">\n          <li><strong>Top voice note:</strong> {top_voice_note_title}</li>\n          <li><strong>New followers:</strong> {followers_count}</li>\n          <li><strong>Top vibe in your area:</strong> {top_vibe_title}</li>\n        </ul>\n        <p class=\"email-text\">Ready for a fresh month of vibes?</p>\n        <a href=\"{explore_link}\" class=\"email-button\">Explore Now</a>\n      </div>\n    `),\n    textBody: `Hi {username},\\n\\nHere's your month at a glance:\\n\\n- Top voice note: {top_voice_note_title}\\n- New followers: {followers_count}\\n- Top vibe in your area: {top_vibe_title}\\n\\nReady for a fresh month of vibes?\\n\\nExplore now: {explore_link}`,\n    category: 'promotional',\n  },\n};\n","import {\n  EmailType,\n  EmailPayload,\n  EmailTemplate,\n  EmailQueueItem,\n  EmailPreferences,\n} from '@/types/email';\n\nconst SENDGRID_API_KEY = process.env.SENDGRID_API_KEY || '';\nconst AWS_SES_REGION = process.env.AWS_SES_REGION || 'us-east-1';\nconst AWS_ACCESS_KEY = process.env.AWS_ACCESS_KEY_ID || '';\nconst AWS_SECRET_KEY = process.env.AWS_SECRET_ACCESS_KEY || '';\nconst FROM_EMAIL = process.env.FROM_EMAIL || 'noreply@vibesync.com';\nconst FROM_NAME = process.env.FROM_NAME || 'VibeSync';\n\nexport class EmailService {\n  private provider: 'sendgrid' | 'aws-ses' | 'mock';\n\n  constructor() {\n    if (SENDGRID_API_KEY && SENDGRID_API_KEY !== '') {\n      this.provider = 'sendgrid';\n      console.log('[EmailService] Using SendGrid provider');\n    } else if (AWS_ACCESS_KEY && AWS_SECRET_KEY && AWS_ACCESS_KEY !== '' && AWS_SECRET_KEY !== '') {\n      this.provider = 'aws-ses';\n      console.log('[EmailService] Using AWS SES provider');\n    } else {\n      this.provider = 'mock';\n      console.log('[EmailService] No email provider configured. Using mock mode.');\n      console.log('[EmailService] To enable real emails, set SENDGRID_API_KEY or AWS credentials in .env');\n    }\n  }\n\n  async sendEmail(\n    to: string,\n    subject: string,\n    htmlBody: string,\n    textBody: string,\n    category: 'transactional' | 'promotional' | 'notification' = 'transactional'\n  ): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    console.log(`[EmailService] Sending ${category} email to ${to}: ${subject}`);\n\n    try {\n      switch (this.provider) {\n        case 'sendgrid':\n          return await this.sendViaSendGrid(to, subject, htmlBody, textBody, category);\n        case 'aws-ses':\n          return await this.sendViaAWSSES(to, subject, htmlBody, textBody);\n        case 'mock':\n          return this.sendViaMock(to, subject, htmlBody, textBody);\n        default:\n          throw new Error('Unknown email provider');\n      }\n    } catch (error) {\n      console.error('[EmailService] Error sending email:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  private async sendViaSendGrid(\n    to: string,\n    subject: string,\n    htmlBody: string,\n    textBody: string,\n    category: string\n  ): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const response = await fetch('https://api.sendgrid.com/v3/mail/send', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${SENDGRID_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        personalizations: [{ to: [{ email: to }] }],\n        from: { email: FROM_EMAIL, name: FROM_NAME },\n        subject,\n        content: [\n          { type: 'text/plain', value: textBody },\n          { type: 'text/html', value: htmlBody },\n        ],\n        categories: [category],\n        tracking_settings: {\n          click_tracking: { enable: true },\n          open_tracking: { enable: true },\n        },\n      }),\n    });\n\n    if (response.ok) {\n      const messageId = response.headers.get('x-message-id') || 'unknown';\n      return { success: true, messageId };\n    } else {\n      const error = await response.text();\n      return { success: false, error };\n    }\n  }\n\n  private async sendViaAWSSES(\n    to: string,\n    subject: string,\n    htmlBody: string,\n    textBody: string\n  ): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    console.log('[EmailService] AWS SES integration not fully implemented. Using mock.');\n    return this.sendViaMock(to, subject, htmlBody, textBody);\n  }\n\n  private sendViaMock(\n    to: string,\n    subject: string,\n    htmlBody: string,\n    textBody: string\n  ): { success: boolean; messageId: string } {\n    console.log('\\n========== MOCK EMAIL ==========');\n    console.log(`To: ${to}`);\n    console.log(`Subject: ${subject}`);\n    console.log('\\n--- Text Body ---');\n    console.log(textBody);\n    console.log('\\n--- HTML Body Preview ---');\n    console.log(`${htmlBody.substring(0, 500)}...`);\n    console.log('================================\\n');\n    return { success: true, messageId: `mock-${Date.now()}` };\n  }\n\n  async sendTemplateEmail(\n    template: EmailTemplate,\n    payload: EmailPayload\n  ): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const subject = this.replaceTokens(template.subject, payload);\n    const htmlBody = this.replaceTokens(template.htmlBody, payload);\n    const textBody = this.replaceTokens(template.textBody, payload);\n\n    return this.sendEmail(payload.email, subject, htmlBody, textBody, template.category);\n  }\n\n  private replaceTokens(template: string, payload: Record<string, any>): string {\n    let result = template;\n    for (const [key, value] of Object.entries(payload)) {\n      const token = `{${key}}`;\n      result = result.replace(new RegExp(token, 'g'), String(value || ''));\n    }\n    return result;\n  }\n\n  async verifyEmailDeliverability(email: string): Promise<boolean> {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n}\n\nexport class EmailQueue {\n  private queue: EmailQueueItem[] = [];\n  private processing = false;\n  private emailService: EmailService;\n\n  constructor() {\n    this.emailService = new EmailService();\n  }\n\n  async enqueue(\n    type: EmailType,\n    trigger: any,\n    payload: EmailPayload,\n    maxAttempts = 3\n  ): Promise<string> {\n    const item: EmailQueueItem = {\n      id: `email-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      type,\n      trigger,\n      payload,\n      status: 'pending',\n      attempts: 0,\n      maxAttempts,\n      createdAt: new Date().toISOString(),\n    };\n\n    this.queue.push(item);\n    console.log(`[EmailQueue] Enqueued ${type} email for ${payload.email}`);\n\n    if (!this.processing) {\n      this.processQueue();\n    }\n\n    return item.id;\n  }\n\n  private async processQueue(): Promise<void> {\n    if (this.processing || this.queue.length === 0) return;\n\n    this.processing = true;\n\n    while (this.queue.length > 0) {\n      const item = this.queue[0];\n\n      if (item.status === 'pending' || item.status === 'retrying') {\n        await this.processItem(item);\n      }\n\n      if (item.status === 'sent' || item.status === 'failed') {\n        this.queue.shift();\n      } else {\n        break;\n      }\n    }\n\n    this.processing = false;\n  }\n\n  private async processItem(item: EmailQueueItem): Promise<void> {\n    item.attempts++;\n    console.log(\n      `[EmailQueue] Processing ${item.type} (attempt ${item.attempts}/${item.maxAttempts})`\n    );\n\n    try {\n      const template = getEmailTemplate(item.type);\n      const result = await this.emailService.sendTemplateEmail(template, item.payload);\n\n      if (result.success) {\n        item.status = 'sent';\n        item.sentAt = new Date().toISOString();\n        console.log(`[EmailQueue] Successfully sent ${item.type} to ${item.payload.email}`);\n      } else {\n        throw new Error(result.error || 'Unknown error');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      console.error(`[EmailQueue] Error sending ${item.type}:`, errorMessage);\n\n      if (item.attempts >= item.maxAttempts) {\n        item.status = 'failed';\n        item.error = errorMessage;\n        console.error(`[EmailQueue] Failed to send ${item.type} after ${item.attempts} attempts`);\n      } else {\n        item.status = 'retrying';\n        await new Promise((resolve) => setTimeout(resolve, 1000 * item.attempts));\n      }\n    }\n  }\n\n  getQueueStatus(): {\n    pending: number;\n    sent: number;\n    failed: number;\n    retrying: number;\n  } {\n    return {\n      pending: this.queue.filter((i) => i.status === 'pending').length,\n      sent: this.queue.filter((i) => i.status === 'sent').length,\n      failed: this.queue.filter((i) => i.status === 'failed').length,\n      retrying: this.queue.filter((i) => i.status === 'retrying').length,\n    };\n  }\n}\n\nexport const emailQueue = new EmailQueue();\n\nfunction getEmailTemplate(type: EmailType): EmailTemplate {\n  const templates = require('./email-templates').emailTemplates;\n  const template = templates[type];\n  if (!template) {\n    throw new Error(`Email template not found: ${type}`);\n  }\n  return template;\n}\n"],"names":["createEmailHTML","content","emailTemplates","welcome","type","subject","htmlBody","textBody","category","email_verification","password_reset","account_recovery","new_login_alert","friendship_follow","playlist_sync","voice_note_interaction","engagement_boost","order_confirmed","order_shipped","order_delivered","seller_notification","policy_update","monthly_digest","SENDGRID_API_KEY","process","AWS_ACCESS_KEY","AWS_ACCESS_KEY_ID","AWS_SECRET_KEY","AWS_SECRET_ACCESS_KEY","FROM_EMAIL","FROM_NAME","EmailService","constructor","this","provider","console","log","sendEmail","to","sendViaSendGrid","sendViaAWSSES","sendViaMock","Error","error","success","message","response","fetch","method","headers","body","JSON","stringify","personalizations","email","from","name","value","categories","tracking_settings","click_tracking","enable","open_tracking","ok","messageId","get","text","substring","Date","now","sendTemplateEmail","template","payload","replaceTokens","result","key","Object","entries","token","replace","RegExp","String","verifyEmailDeliverability","test","EmailQueue","queue","processing","emailService","enqueue","trigger","maxAttempts","item","id","Math","random","toString","substr","status","attempts","createdAt","toISOString","push","processQueue","length","processItem","shift","require","getEmailTemplate","sentAt","errorMessage","Promise","resolve","setTimeout","getQueueStatus","pending","filter","i","sent","failed","retrying","emailQueue"],"sourceRoot":""}