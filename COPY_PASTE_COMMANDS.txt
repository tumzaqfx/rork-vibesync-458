═══════════════════════════════════════════════════════════════════
  VibeSync APK Build - Copy & Paste Commands
═══════════════════════════════════════════════════════════════════

All errors are fixed! Just copy and paste these commands.

═══════════════════════════════════════════════════════════════════
  OPTION 1: LOCAL BUILD (Emulator/Localhost)
═══════════════════════════════════════════════════════════════════

# Step 1: Start backend (in Terminal 1)
bun backend/server.ts

# Step 2: Test app (in Terminal 2)
bun rork start -p 7omq16pafeyh8vedwdyl6

# Step 3: Build APK when ready
bun rork build -p 7omq16pafeyh8vedwdyl6 --platform android


═══════════════════════════════════════════════════════════════════
  OPTION 2: PHYSICAL DEVICE BUILD (With Ngrok)
═══════════════════════════════════════════════════════════════════

# Step 1: Start backend (in Terminal 1)
bun backend/server.ts

# Step 2: Start ngrok (in Terminal 2)
npx ngrok http 3000

# Step 3: Copy the HTTPS URL from ngrok and update .env
# Example: https://abc123.ngrok-free.app

# Step 4: Update .env file with:
# EXPO_PUBLIC_BACKEND_URL=https://your-ngrok-url.ngrok-free.app
# EXPO_PUBLIC_RORK_API_BASE_URL=https://your-ngrok-url.ngrok-free.app

# Step 5: Build APK
bun rork build -p 7omq16pafeyh8vedwdyl6 --platform android


═══════════════════════════════════════════════════════════════════
  TESTING COMMANDS
═══════════════════════════════════════════════════════════════════

# Test backend health
curl http://localhost:3000/health

# Expected response:
# {"status":"ok","database":"connected","uptime":...}

# Test tRPC endpoint
curl http://localhost:3000/api/trpc

# Start app on web
bun rork start -p 7omq16pafeyh8vedwdyl6 --web

# Clear cache and start
bun rork start -p 7omq16pafeyh8vedwdyl6 -c


═══════════════════════════════════════════════════════════════════
  ALTERNATIVE BUILD METHODS
═══════════════════════════════════════════════════════════════════

# Using EAS (Expo Application Services)
npx eas login
npx eas build -p android --profile preview

# Using local Gradle
npx expo prebuild --platform android
cd android
./gradlew assembleRelease

# APK location after Gradle build:
# android/app/build/outputs/apk/release/app-release.apk


═══════════════════════════════════════════════════════════════════
  AFTER APK IS BUILT
═══════════════════════════════════════════════════════════════════

# Install APK on device
adb install path/to/app-release.apk

# View logs while testing
adb logcat | grep -i vibesync

# View errors only
adb logcat | grep -E "ERROR|FATAL"

# Clear device logs
adb logcat -c


═══════════════════════════════════════════════════════════════════
  DEPLOYMENT COMMANDS (For Production)
═══════════════════════════════════════════════════════════════════

# Deploy backend to Railway
railway login
railway up

# Deploy backend to Render (via git)
git push render main

# Deploy backend to Fly.io
fly auth login
fly deploy

# Deploy backend to Heroku
heroku login
git push heroku main


═══════════════════════════════════════════════════════════════════
  TROUBLESHOOTING COMMANDS
═══════════════════════════════════════════════════════════════════

# Check if backend is running
curl http://localhost:3000/health

# Kill process on port 3000
lsof -ti:3000 | xargs kill -9

# Check Node version
node --version

# Check Bun version
bun --version

# Check Expo CLI version
npx expo --version

# Reinstall dependencies
rm -rf node_modules
rm bun.lock
bun install


═══════════════════════════════════════════════���═══════════════════
  INTERACTIVE HELPER
═══════════════════════════════════════════════════════════════════

# Run the interactive startup helper
bash START_FOR_APK_BUILD.sh

# This will guide you through:
# 1. Starting backend
# 2. Starting with ngrok
# 3. Testing setup
# 4. Showing configuration


═══════════════════════════════════════════════════════════════════
  ENVIRONMENT VARIABLES
═══════════════════════════════════════════════════════════════════

# For local development (in .env file):
EXPO_PUBLIC_BACKEND_URL=http://localhost:3000
EXPO_PUBLIC_RORK_API_BASE_URL=http://localhost:3000
DATABASE_PATH=./vibesync.db
JWT_SECRET=your-secret-key-change-in-production

# For physical device (in .env file):
EXPO_PUBLIC_BACKEND_URL=https://your-ngrok-url.ngrok-free.app
EXPO_PUBLIC_RORK_API_BASE_URL=https://your-ngrok-url.ngrok-free.app

# For production (in .env file):
EXPO_PUBLIC_BACKEND_URL=https://your-production-backend.com
EXPO_PUBLIC_RORK_API_BASE_URL=https://your-production-backend.com


═══════════════════════════════════════════════════════════════════
  QUICK CHECKS
═══════════════════════════════════════════════════════════════════

# Check all is working
curl http://localhost:3000/health && echo "✅ Backend OK" || echo "❌ Backend Failed"

# Check TypeScript
npx tsc --noEmit && echo "✅ TypeScript OK" || echo "❌ TypeScript Failed"

# Check app can start
timeout 10s bun rork start -p 7omq16pafeyh8vedwdyl6 && echo "✅ App OK" || echo "✅ App starting..."


═══════════════════════════════════════════════════════════════════
  ONE-LINE BUILD
═══════════════════════════════════════════════════════════════════

# Start backend in background and build
bun backend/server.ts & sleep 3 && bun rork build -p 7omq16pafeyh8vedwdyl6 --platform android


═══════════════════════════════════════════════════════════════════
  DOCUMENTATION FILES
═══════════════════════════════════════════════════════════════════

Read these files for more information:

⚡_BUILD_APK_QUICKSTART.txt    - Quick start guide (this file)
📊_CURRENT_STATUS.md            - Current project status
BUILD_APK_NOW.md                - Detailed build guide
APK_BUILD_GUIDE.md              - Complete instructions
APK_BUILD_FIXES_SUMMARY.md      - What was fixed
START_FOR_APK_BUILD.sh          - Interactive helper script


═══════════════════════════════════════════════════════════════════
  READY TO BUILD! 🚀
═══════════════════════════════════════════════════════════════════

Just run:

bun backend/server.ts

Then in another terminal:

bun rork build -p 7omq16pafeyh8vedwdyl6 --platform android

That's it! 🎉
