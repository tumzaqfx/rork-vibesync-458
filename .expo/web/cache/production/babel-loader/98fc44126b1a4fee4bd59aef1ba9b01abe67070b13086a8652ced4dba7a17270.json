{"ast":null,"code":"import{useState,useCallback,useMemo}from'react';import AsyncStorage from'@react-native-async-storage/async-storage';import createContextHook from'@nkzw/create-context-hook';const STORAGE_KEY_REPORTS='@vibesync_reports';const STORAGE_KEY_BLOCKED='@vibesync_blocked_users';const REPORT_REASONS=[{id:'spam',label:'Spam',description:'Repetitive or unwanted content'},{id:'harassment',label:'Harassment or Bullying',description:'Targeting someone with harmful content'},{id:'hate_speech',label:'Hate Speech',description:'Content that promotes hatred or violence'},{id:'violence',label:'Violence or Dangerous Content',description:'Content showing or promoting violence'},{id:'nudity',label:'Nudity or Sexual Content',description:'Inappropriate sexual content'},{id:'misinformation',label:'False Information',description:'Deliberately misleading content'},{id:'copyright',label:'Copyright Violation',description:'Unauthorized use of copyrighted material'},{id:'impersonation',label:'Impersonation',description:'Pretending to be someone else'},{id:'other',label:'Other',description:'Something else not listed here'}];export const[ReportBlockProvider,useReportBlock]=createContextHook(()=>{const[reports,setReports]=useState([]);const[blockedUsers,setBlockedUsers]=useState([]);const loadData=useCallback(async()=>{try{const[reportsData,blockedData]=await Promise.all([AsyncStorage.getItem(STORAGE_KEY_REPORTS),AsyncStorage.getItem(STORAGE_KEY_BLOCKED)]);if(reportsData){setReports(JSON.parse(reportsData));}if(blockedData){setBlockedUsers(JSON.parse(blockedData));}}catch(error){console.error('[ReportBlock] Error loading data:',error);}},[]);const saveReports=useCallback(async newReports=>{try{await AsyncStorage.setItem(STORAGE_KEY_REPORTS,JSON.stringify(newReports));}catch(error){console.error('[ReportBlock] Error saving reports:',error);}},[]);const saveBlockedUsers=useCallback(async newBlocked=>{try{await AsyncStorage.setItem(STORAGE_KEY_BLOCKED,JSON.stringify(newBlocked));}catch(error){console.error('[ReportBlock] Error saving blocked users:',error);}},[]);const reportContent=useCallback(async(targetId,targetType,reason,description)=>{try{const newReport={id:`report_${Date.now()}`,reporterId:'current_user',targetId,targetType,reason,description,timestamp:new Date().toISOString(),status:'pending'};const updatedReports=[...reports,newReport];setReports(updatedReports);await saveReports(updatedReports);console.log('[ReportBlock] Content reported:',newReport);return true;}catch(error){console.error('[ReportBlock] Error reporting content:',error);return false;}},[reports,saveReports]);const blockUser=useCallback(async(userId,username,displayName,profileImage)=>{try{if(blockedUsers.some(u=>u.userId===userId)){console.log('[ReportBlock] User already blocked');return false;}const newBlockedUser={id:`block_${Date.now()}`,userId,username,displayName,profileImage,blockedAt:new Date().toISOString()};const updatedBlocked=[...blockedUsers,newBlockedUser];setBlockedUsers(updatedBlocked);await saveBlockedUsers(updatedBlocked);console.log('[ReportBlock] User blocked:',newBlockedUser);return true;}catch(error){console.error('[ReportBlock] Error blocking user:',error);return false;}},[blockedUsers,saveBlockedUsers]);const unblockUser=useCallback(async userId=>{try{const updatedBlocked=blockedUsers.filter(u=>u.userId!==userId);setBlockedUsers(updatedBlocked);await saveBlockedUsers(updatedBlocked);console.log('[ReportBlock] User unblocked:',userId);return true;}catch(error){console.error('[ReportBlock] Error unblocking user:',error);return false;}},[blockedUsers,saveBlockedUsers]);const isUserBlocked=useCallback(userId=>{return blockedUsers.some(u=>u.userId===userId);},[blockedUsers]);const getReportReasons=useCallback(()=>REPORT_REASONS,[]);return useMemo(()=>({reports,blockedUsers,reportContent,blockUser,unblockUser,isUserBlocked,getReportReasons,loadData}),[reports,blockedUsers,reportContent,blockUser,unblockUser,isUserBlocked,getReportReasons,loadData]);});","map":{"version":3,"names":["useState","useCallback","useMemo","AsyncStorage","createContextHook","STORAGE_KEY_REPORTS","STORAGE_KEY_BLOCKED","REPORT_REASONS","id","label","description","ReportBlockProvider","useReportBlock","reports","setReports","blockedUsers","setBlockedUsers","loadData","reportsData","blockedData","Promise","all","getItem","JSON","parse","error","console","saveReports","newReports","setItem","stringify","saveBlockedUsers","newBlocked","reportContent","targetId","targetType","reason","newReport","Date","now","reporterId","timestamp","toISOString","status","updatedReports","log","blockUser","userId","username","displayName","profileImage","some","u","newBlockedUser","blockedAt","updatedBlocked","unblockUser","filter","isUserBlocked","getReportReasons"],"sources":["/home/user/rork-vibesync-458/hooks/report-block-store.ts"],"sourcesContent":["import { useState, useCallback, useMemo } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport createContextHook from '@nkzw/create-context-hook';\n\nexport interface ReportReason {\n  id: string;\n  label: string;\n  description: string;\n}\n\nexport interface Report {\n  id: string;\n  reporterId: string;\n  targetId: string;\n  targetType: 'user' | 'post' | 'comment' | 'vibe' | 'story';\n  reason: string;\n  description?: string;\n  timestamp: string;\n  status: 'pending' | 'reviewed' | 'resolved';\n}\n\nexport interface BlockedUser {\n  id: string;\n  userId: string;\n  username: string;\n  displayName: string;\n  profileImage?: string;\n  blockedAt: string;\n}\n\nconst STORAGE_KEY_REPORTS = '@vibesync_reports';\nconst STORAGE_KEY_BLOCKED = '@vibesync_blocked_users';\n\nconst REPORT_REASONS: ReportReason[] = [\n  {\n    id: 'spam',\n    label: 'Spam',\n    description: 'Repetitive or unwanted content',\n  },\n  {\n    id: 'harassment',\n    label: 'Harassment or Bullying',\n    description: 'Targeting someone with harmful content',\n  },\n  {\n    id: 'hate_speech',\n    label: 'Hate Speech',\n    description: 'Content that promotes hatred or violence',\n  },\n  {\n    id: 'violence',\n    label: 'Violence or Dangerous Content',\n    description: 'Content showing or promoting violence',\n  },\n  {\n    id: 'nudity',\n    label: 'Nudity or Sexual Content',\n    description: 'Inappropriate sexual content',\n  },\n  {\n    id: 'misinformation',\n    label: 'False Information',\n    description: 'Deliberately misleading content',\n  },\n  {\n    id: 'copyright',\n    label: 'Copyright Violation',\n    description: 'Unauthorized use of copyrighted material',\n  },\n  {\n    id: 'impersonation',\n    label: 'Impersonation',\n    description: 'Pretending to be someone else',\n  },\n  {\n    id: 'other',\n    label: 'Other',\n    description: 'Something else not listed here',\n  },\n];\n\nexport const [ReportBlockProvider, useReportBlock] = createContextHook(() => {\n  const [reports, setReports] = useState<Report[]>([]);\n  const [blockedUsers, setBlockedUsers] = useState<BlockedUser[]>([]);\n\n  const loadData = useCallback(async () => {\n    try {\n      const [reportsData, blockedData] = await Promise.all([\n        AsyncStorage.getItem(STORAGE_KEY_REPORTS),\n        AsyncStorage.getItem(STORAGE_KEY_BLOCKED),\n      ]);\n\n      if (reportsData) {\n        setReports(JSON.parse(reportsData));\n      }\n      if (blockedData) {\n        setBlockedUsers(JSON.parse(blockedData));\n      }\n    } catch (error) {\n      console.error('[ReportBlock] Error loading data:', error);\n    }\n  }, []);\n\n  const saveReports = useCallback(async (newReports: Report[]) => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY_REPORTS, JSON.stringify(newReports));\n    } catch (error) {\n      console.error('[ReportBlock] Error saving reports:', error);\n    }\n  }, []);\n\n  const saveBlockedUsers = useCallback(async (newBlocked: BlockedUser[]) => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY_BLOCKED, JSON.stringify(newBlocked));\n    } catch (error) {\n      console.error('[ReportBlock] Error saving blocked users:', error);\n    }\n  }, []);\n\n  const reportContent = useCallback(async (\n    targetId: string,\n    targetType: 'user' | 'post' | 'comment' | 'vibe' | 'story',\n    reason: string,\n    description?: string\n  ): Promise<boolean> => {\n    try {\n      const newReport: Report = {\n        id: `report_${Date.now()}`,\n        reporterId: 'current_user',\n        targetId,\n        targetType,\n        reason,\n        description,\n        timestamp: new Date().toISOString(),\n        status: 'pending',\n      };\n\n      const updatedReports = [...reports, newReport];\n      setReports(updatedReports);\n      await saveReports(updatedReports);\n\n      console.log('[ReportBlock] Content reported:', newReport);\n      return true;\n    } catch (error) {\n      console.error('[ReportBlock] Error reporting content:', error);\n      return false;\n    }\n  }, [reports, saveReports]);\n\n  const blockUser = useCallback(async (\n    userId: string,\n    username: string,\n    displayName: string,\n    profileImage?: string\n  ): Promise<boolean> => {\n    try {\n      if (blockedUsers.some(u => u.userId === userId)) {\n        console.log('[ReportBlock] User already blocked');\n        return false;\n      }\n\n      const newBlockedUser: BlockedUser = {\n        id: `block_${Date.now()}`,\n        userId,\n        username,\n        displayName,\n        profileImage,\n        blockedAt: new Date().toISOString(),\n      };\n\n      const updatedBlocked = [...blockedUsers, newBlockedUser];\n      setBlockedUsers(updatedBlocked);\n      await saveBlockedUsers(updatedBlocked);\n\n      console.log('[ReportBlock] User blocked:', newBlockedUser);\n      return true;\n    } catch (error) {\n      console.error('[ReportBlock] Error blocking user:', error);\n      return false;\n    }\n  }, [blockedUsers, saveBlockedUsers]);\n\n  const unblockUser = useCallback(async (userId: string): Promise<boolean> => {\n    try {\n      const updatedBlocked = blockedUsers.filter(u => u.userId !== userId);\n      setBlockedUsers(updatedBlocked);\n      await saveBlockedUsers(updatedBlocked);\n\n      console.log('[ReportBlock] User unblocked:', userId);\n      return true;\n    } catch (error) {\n      console.error('[ReportBlock] Error unblocking user:', error);\n      return false;\n    }\n  }, [blockedUsers, saveBlockedUsers]);\n\n  const isUserBlocked = useCallback((userId: string): boolean => {\n    return blockedUsers.some(u => u.userId === userId);\n  }, [blockedUsers]);\n\n  const getReportReasons = useCallback(() => REPORT_REASONS, []);\n\n  return useMemo(() => ({\n    reports,\n    blockedUsers,\n    reportContent,\n    blockUser,\n    unblockUser,\n    isUserBlocked,\n    getReportReasons,\n    loadData,\n  }), [reports, blockedUsers, reportContent, blockUser, unblockUser, isUserBlocked, getReportReasons, loadData]);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}