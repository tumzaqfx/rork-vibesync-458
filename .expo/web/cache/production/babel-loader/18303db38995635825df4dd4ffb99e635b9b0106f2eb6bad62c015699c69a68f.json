{"ast":null,"code":"'use strict';import{useEvent}from\"./useEvent.js\";import{useHandler}from\"./useHandler.js\";import{WorkletEventHandler}from\"../WorkletEventHandler.js\";const _worklet_1071011404948_init_data={code:\"function reactNativeReanimated_useComposedEventHandlerJs1(event){const{workletsMap}=this.__closure;if(workletsMap[event.eventName]){workletsMap[event.eventName].forEach(function(worklet){return worklet(event);});}}\"};export function useComposedEventHandler(handlers){const workletsRecord={};const composedEventNames=new Set();const workletsMap={};handlers.filter(h=>h!==null).forEach(handler=>{const{workletEventHandler}=handler;if(workletEventHandler instanceof WorkletEventHandler){workletEventHandler.eventNames.forEach(eventName=>{composedEventNames.add(eventName);if(workletsMap[eventName]){workletsMap[eventName].push(workletEventHandler.worklet);}else{workletsMap[eventName]=[workletEventHandler.worklet];}const handlerName=eventName+`${workletsMap[eventName].length}`;workletsRecord[handlerName]=workletEventHandler.worklet;});}});const{doDependenciesDiffer}=useHandler(workletsRecord);return useEvent(function(){const reactNativeReanimated_useComposedEventHandlerJs1=function(event){if(workletsMap[event.eventName]){workletsMap[event.eventName].forEach(worklet=>worklet(event));}};reactNativeReanimated_useComposedEventHandlerJs1.__closure={workletsMap};reactNativeReanimated_useComposedEventHandlerJs1.__workletHash=1071011404948;reactNativeReanimated_useComposedEventHandlerJs1.__initData=_worklet_1071011404948_init_data;return reactNativeReanimated_useComposedEventHandlerJs1;}(),Array.from(composedEventNames),doDependenciesDiffer);}","map":{"version":3,"names":["useEvent","useHandler","WorkletEventHandler","_worklet_1071011404948_init_data","code","useComposedEventHandler","handlers","workletsRecord","composedEventNames","Set","workletsMap","filter","h","forEach","handler","workletEventHandler","eventNames","eventName","add","push","worklet","handlerName","length","doDependenciesDiffer","reactNativeReanimated_useComposedEventHandlerJs1","event","__closure","__workletHash","__initData","Array","from"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-reanimated/src/hook/useComposedEventHandler.ts"],"sourcesContent":["'use strict';\nimport { useEvent } from './useEvent';\nimport { useHandler } from './useHandler';\nimport { WorkletEventHandler } from '../WorkletEventHandler';\nimport type { ReanimatedEvent } from './commonTypes';\nimport type { WorkletFunction } from '../commonTypes';\nimport type { EventHandlerProcessed, EventHandlerInternal } from './useEvent';\n\ntype ComposedHandlerProcessed<\n  Event extends object,\n  Context extends Record<string, unknown> = Record<string, unknown>,\n> = EventHandlerProcessed<Event, Context>;\n\ntype ComposedHandlerInternal<Event extends object> =\n  EventHandlerInternal<Event>;\n\n/**\n * Lets you compose multiple event handlers based on\n * [useEvent](https://docs.swmansion.com/react-native-reanimated/docs/advanced/useEvent)\n * hook.\n *\n * @param handlers - An array of event handlers created using\n *   [useEvent](https://docs.swmansion.com/react-native-reanimated/docs/advanced/useEvent)\n *   hook.\n * @returns An object you need to pass to a coresponding \"onEvent\" prop on an\n *   `Animated` component (for example handlers responsible for `onScroll` event\n *   go to `onScroll` prop).\n * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useComposedEventHandler\n */\n// @ts-expect-error This overload is required by our API.\nexport function useComposedEventHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n>(\n  handlers: (EventHandlerProcessed<Event, Context> | null)[]\n): ComposedHandlerProcessed<Event, Context>;\n\nexport function useComposedEventHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n>(handlers: (EventHandlerProcessed<Event, Context> | null)[]) {\n  // Record of handlers' worklets to calculate deps diffs. We use the record type to match the useHandler API requirements\n  const workletsRecord: Record<string, WorkletFunction> = {};\n  // Summed event names for registration\n  const composedEventNames = new Set<string>();\n  // Map that holds worklets for specific handled events\n  const workletsMap: {\n    [key: string]: ((event: ReanimatedEvent<Event>) => void)[];\n  } = {};\n\n  handlers\n    .filter((h) => h !== null)\n    .forEach((handler) => {\n      // EventHandlerProcessed is the return type of useEvent and has to be force casted to EventHandlerInternal, because we need WorkletEventHandler object\n      const { workletEventHandler } =\n        handler as unknown as EventHandlerInternal<Context>;\n      if (workletEventHandler instanceof WorkletEventHandler) {\n        workletEventHandler.eventNames.forEach((eventName) => {\n          composedEventNames.add(eventName);\n\n          if (workletsMap[eventName]) {\n            workletsMap[eventName].push(workletEventHandler.worklet);\n          } else {\n            workletsMap[eventName] = [workletEventHandler.worklet];\n          }\n\n          const handlerName = eventName + `${workletsMap[eventName].length}`;\n          workletsRecord[handlerName] =\n            workletEventHandler.worklet as WorkletFunction;\n        });\n      }\n    });\n\n  const { doDependenciesDiffer } = useHandler(workletsRecord);\n\n  return useEvent<Event, Context>(\n    (event) => {\n      'worklet';\n      if (workletsMap[event.eventName]) {\n        workletsMap[event.eventName].forEach((worklet) => worklet(event));\n      }\n    },\n    Array.from(composedEventNames),\n    doDependenciesDiffer\n  ) as unknown as ComposedHandlerInternal<Event>;\n}\n"],"mappings":"AAAA,YAAY,CACZ,OAASA,QAAQ,KAAQ,eAAY,CACrC,OAASC,UAAU,KAAQ,iBAAc,CACzC,OAASC,mBAAmB,KAAQ,2BAAwB,OAAAC,gCAAA,EAAAC,IAAA,2NAkC5D,MAAO,SAAS,CAAAC,uBAAuBA,CAGrCC,QAA0D,CAAE,CAE5D,KAAM,CAAAC,cAA+C,CAAG,CAAC,CAAC,CAE1D,KAAM,CAAAC,kBAAkB,CAAG,GAAI,CAAAC,GAAG,CAAS,CAAC,CAE5C,KAAM,CAAAC,WAEL,CAAG,CAAC,CAAC,CAENJ,QAAQ,CACLK,MAAM,CAAEC,CAAC,EAAKA,CAAC,GAAK,IAAI,CAAC,CACzBC,OAAO,CAAEC,OAAO,EAAK,CAEpB,KAAM,CAAEC,mBAAoB,CAAC,CAC3BD,OAAmD,CACrD,GAAIC,mBAAmB,WAAY,CAAAb,mBAAmB,CAAE,CACtDa,mBAAmB,CAACC,UAAU,CAACH,OAAO,CAAEI,SAAS,EAAK,CACpDT,kBAAkB,CAACU,GAAG,CAACD,SAAS,CAAC,CAEjC,GAAIP,WAAW,CAACO,SAAS,CAAC,CAAE,CAC1BP,WAAW,CAACO,SAAS,CAAC,CAACE,IAAI,CAACJ,mBAAmB,CAACK,OAAO,CAAC,CAC1D,CAAC,IAAM,CACLV,WAAW,CAACO,SAAS,CAAC,CAAG,CAACF,mBAAmB,CAACK,OAAO,CAAC,CACxD,CAEA,KAAM,CAAAC,WAAW,CAAGJ,SAAS,CAAG,GAAGP,WAAW,CAACO,SAAS,CAAC,CAACK,MAAM,EAAE,CAClEf,cAAc,CAACc,WAAW,CAAC,CACzBN,mBAAmB,CAACK,OAA0B,CAClD,CAAC,CAAC,CACJ,CACF,CAAC,CAAC,CAEJ,KAAM,CAAEG,oBAAqB,CAAC,CAAGtB,UAAU,CAACM,cAAc,CAAC,CAE3D,MAAO,CAAAP,QAAQ,CACZ,iBAAAwB,gDAAA,SAAAA,CAAAC,KAAK,CAAK,CAET,GAAIf,WAAW,CAACe,KAAK,CAACR,SAAS,CAAC,CAAE,CAChCP,WAAW,CAACe,KAAK,CAACR,SAAS,CAAC,CAACJ,OAAO,CAAEO,OAAO,EAAKA,OAAO,CAACK,KAAK,CAAC,CAAC,CACnE,CACF,CAAC,CAAAD,gDAAA,CAAAE,SAAA,EAAAhB,WAAA,EAAAc,gDAAA,CAAAG,aAAA,eAAAH,gDAAA,CAAAI,UAAA,CAAAzB,gCAAA,QAAAqB,gDAAA,EALA,GAMDK,KAAK,CAACC,IAAI,CAACtB,kBAAkB,CAAC,CAC9Be,oBACF,CAAC,CACH","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}