{"ast":null,"code":"\"use strict\";import{CurrentRenderContext}from'@react-navigation/core';import*as React from'react';import{ServerContext}from\"./ServerContext.js\";import{jsx as _jsx}from\"react/jsx-runtime\";export const ServerContainer=React.forwardRef(function ServerContainer({children,location},ref){React.useEffect(()=>{console.error(\"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\");},[]);const current={};if(ref){const value={getCurrentOptions(){return current.options;}};if(typeof ref==='function'){ref(value);}else{ref.current=value;}}return(_jsx(ServerContext.Provider,{value:{location},children:_jsx(CurrentRenderContext.Provider,{value:current,children:children})}));});","map":{"version":3,"names":["CurrentRenderContext","React","ServerContext","jsx","_jsx","ServerContainer","forwardRef","children","location","ref","useEffect","console","error","current","value","getCurrentOptions","options","Provider"],"sources":["/home/user/rork-vibesync-458/node_modules/@react-navigation/native/src/ServerContainer.tsx"],"sourcesContent":["import { CurrentRenderContext } from '@react-navigation/core';\nimport * as React from 'react';\n\nimport { ServerContext, type ServerContextType } from './ServerContext';\nimport type { ServerContainerRef } from './types';\n\ntype Props = ServerContextType & {\n  children: React.ReactNode;\n};\n\n/**\n * Container component for server rendering.\n *\n * @param props.location Location object to base the initial URL for SSR.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which contains helper methods.\n */\nexport const ServerContainer = React.forwardRef(function ServerContainer(\n  { children, location }: Props,\n  ref: React.Ref<ServerContainerRef>\n) {\n  React.useEffect(() => {\n    console.error(\n      \"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\"\n    );\n  }, []);\n\n  // eslint-disable-next-line @eslint-react/no-unstable-context-value\n  const current: { options?: object } = {};\n\n  if (ref) {\n    const value = {\n      getCurrentOptions() {\n        return current.options;\n      },\n    };\n\n    // We write to the `ref` during render instead of `React.useImperativeHandle`\n    // This is because `useImperativeHandle` will update the ref after 'commit',\n    // and there's no 'commit' phase during SSR.\n    // Mutating ref during render is unsafe in concurrent mode, but we don't care about it for SSR.\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      // @ts-expect-error: the TS types are incorrect and say that ref.current is readonly\n      ref.current = value;\n    }\n  }\n\n  return (\n    // eslint-disable-next-line @eslint-react/no-unstable-context-value\n    <ServerContext.Provider value={{ location }}>\n      <CurrentRenderContext.Provider value={current}>\n        {children}\n      </CurrentRenderContext.Provider>\n    </ServerContext.Provider>\n  );\n});\n"],"mappings":"aAAA,OAASA,oBAAoB,KAAQ,wBAAwB,CAC7D,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAE9B,OAASC,aAAa,KAAgC,oBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAcxE,MAAO,MAAM,CAAAC,eAAe,CAAGJ,KAAK,CAACK,UAAU,CAAC,QAAS,CAAAD,eAAeA,CACtE,CAAEE,QAAQ,CAAEC,QAAgB,CAAC,CAC7BC,GAAkC,CAClC,CACAR,KAAK,CAACS,SAAS,CAAC,IAAM,CACpBC,OAAO,CAACC,KAAK,CACX,sFACF,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAGN,KAAM,CAAAC,OAA6B,CAAG,CAAC,CAAC,CAExC,GAAIJ,GAAG,CAAE,CACP,KAAM,CAAAK,KAAK,CAAG,CACZC,iBAAiBA,CAAA,CAAG,CAClB,MAAO,CAAAF,OAAO,CAACG,OAAO,CACxB,CACF,CAAC,CAMD,GAAI,MAAO,CAAAP,GAAG,GAAK,UAAU,CAAE,CAC7BA,GAAG,CAACK,KAAK,CAAC,CACZ,CAAC,IAAM,CAELL,GAAG,CAACI,OAAO,CAAGC,KAAK,CACrB,CACF,CAEA,OAEEV,IAAA,CAACF,aAAa,CAACe,QAAQ,EAACH,KAAK,CAAE,CAAEN,QAAS,CAAE,CAAAD,QAAA,CAC1CH,IAAA,CAACJ,oBAAoB,CAACiB,QAAQ,EAACH,KAAK,CAAED,OAAQ,CAAAN,QAAA,CAC3CA,QAAQ,CACoB,CAAC,CACV,GAE5B,CAAC,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}