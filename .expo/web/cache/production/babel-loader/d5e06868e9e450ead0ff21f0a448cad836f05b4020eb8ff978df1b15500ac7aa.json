{"ast":null,"code":"export function buildUrlForBundle(bundlePath){if(bundlePath.match(/^https?:\\/\\//)){return bundlePath;}if(typeof window.ReactNativeWebView!=='undefined'){return bundlePath;}return'/'+bundlePath.replace(/^\\/+/,'');}","map":{"version":3,"names":["buildUrlForBundle","bundlePath","match","window","ReactNativeWebView","replace"],"sources":["/home/user/rork-vibesync-458/node_modules/@expo/metro-runtime/src/async-require/buildUrlForBundle.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Given a path and some optional additional query parameters, create the dev server bundle URL.\n * @param bundlePath like `/foobar`\n * @param params like `{ platform: \"web\" }`\n * @returns a URL like \"/foobar.bundle?platform=android&modulesOnly=true&runModule=false&runtimeBytecodeVersion=null\"\n */\nexport function buildUrlForBundle(bundlePath: string): string {\n  if (bundlePath.match(/^https?:\\/\\//)) {\n    return bundlePath;\n  }\n\n  if (\n    // @ts-expect-error\n    typeof window.ReactNativeWebView !== 'undefined'\n  ) {\n    // In a webview, you cannot read from an absolute path.\n    return bundlePath;\n  }\n  // NOTE(EvanBacon): This must come from the window origin (at least in dev mode).\n  // Otherwise Metro will crash from attempting to load a bundle that doesn't exist.\n  return '/' + bundlePath.replace(/^\\/+/, '');\n}\n"],"mappings":"AAaA,MAAO,SAAS,CAAAA,iBAAiBA,CAACC,UAAkB,CAAU,CAC5D,GAAIA,UAAU,CAACC,KAAK,CAAC,cAAc,CAAC,CAAE,CACpC,MAAO,CAAAD,UAAU,CACnB,CAEA,GAEE,MAAO,CAAAE,MAAM,CAACC,kBAAkB,GAAK,WAAW,CAChD,CAEA,MAAO,CAAAH,UAAU,CACnB,CAGA,MAAO,GAAG,CAAGA,UAAU,CAACI,OAAO,CAAC,MAAM,CAAE,EAAE,CAAC,CAC7C","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}