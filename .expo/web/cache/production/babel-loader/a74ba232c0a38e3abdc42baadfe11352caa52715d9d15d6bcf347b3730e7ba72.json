{"ast":null,"code":"import{useCallback}from'react';import{attachHandlers}from'./attachHandlers';import{updateHandlers}from'./updateHandlers';import{needsToReattach}from'./needsToReattach';import{dropHandlers}from'./dropHandlers';import{useForceRender,validateDetectorChildren}from'./utils';import findNodeHandle from'../../../findNodeHandle';export function useDetectorUpdater(state,preparedGesture,gesturesToAttach,gestureConfig,webEventHandlersRef){const forceRender=useForceRender();const updateAttachedGestures=useCallback(skipConfigUpdate=>{const viewTag=findNodeHandle(state.viewRef);const didUnderlyingViewChange=viewTag!==state.previousViewTag;if(didUnderlyingViewChange||needsToReattach(preparedGesture,gesturesToAttach)){validateDetectorChildren(state.viewRef);dropHandlers(preparedGesture);attachHandlers({preparedGesture,gestureConfig,gesturesToAttach,webEventHandlersRef,viewTag});if(didUnderlyingViewChange){state.previousViewTag=viewTag;state.forceRebuildReanimatedEvent=true;forceRender();}}else if(!skipConfigUpdate){updateHandlers(preparedGesture,gestureConfig,gesturesToAttach);}},[forceRender,gestureConfig,gesturesToAttach,preparedGesture,state,webEventHandlersRef]);return updateAttachedGestures;}","map":{"version":3,"names":["useCallback","attachHandlers","updateHandlers","needsToReattach","dropHandlers","useForceRender","validateDetectorChildren","findNodeHandle","useDetectorUpdater","state","preparedGesture","gesturesToAttach","gestureConfig","webEventHandlersRef","forceRender","updateAttachedGestures","skipConfigUpdate","viewTag","viewRef","didUnderlyingViewChange","previousViewTag","forceRebuildReanimatedEvent"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/GestureDetector/useDetectorUpdater.ts"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { GestureType } from '../gesture';\nimport { ComposedGesture } from '../gestureComposition';\n\nimport {\n  AttachedGestureState,\n  GestureDetectorState,\n  WebEventHandler,\n} from './types';\nimport { attachHandlers } from './attachHandlers';\nimport { updateHandlers } from './updateHandlers';\nimport { needsToReattach } from './needsToReattach';\nimport { dropHandlers } from './dropHandlers';\nimport { useForceRender, validateDetectorChildren } from './utils';\nimport findNodeHandle from '../../../findNodeHandle';\n\n// Returns a function that's responsible for updating the attached gestures\n// If the view has changed, it will reattach the handlers to the new view\n// If the view remains the same, it will update the handlers with the new config\nexport function useDetectorUpdater(\n  state: GestureDetectorState,\n  preparedGesture: AttachedGestureState,\n  gesturesToAttach: GestureType[],\n  gestureConfig: ComposedGesture | GestureType,\n  webEventHandlersRef: React.RefObject<WebEventHandler>\n) {\n  const forceRender = useForceRender();\n  const updateAttachedGestures = useCallback(\n    // skipConfigUpdate is used to prevent unnecessary updates when only checking if the view has changed\n    (skipConfigUpdate?: boolean) => {\n      // If the underlying view has changed we need to reattach handlers to the new view\n      const viewTag = findNodeHandle(state.viewRef) as number;\n      const didUnderlyingViewChange = viewTag !== state.previousViewTag;\n\n      if (\n        didUnderlyingViewChange ||\n        needsToReattach(preparedGesture, gesturesToAttach)\n      ) {\n        validateDetectorChildren(state.viewRef);\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture,\n          gestureConfig,\n          gesturesToAttach,\n          webEventHandlersRef,\n          viewTag,\n        });\n\n        if (didUnderlyingViewChange) {\n          state.previousViewTag = viewTag;\n          state.forceRebuildReanimatedEvent = true;\n          forceRender();\n        }\n      } else if (!skipConfigUpdate) {\n        updateHandlers(preparedGesture, gestureConfig, gesturesToAttach);\n      }\n    },\n    [\n      forceRender,\n      gestureConfig,\n      gesturesToAttach,\n      preparedGesture,\n      state,\n      webEventHandlersRef,\n    ]\n  );\n\n  return updateAttachedGestures;\n}\n"],"mappings":"AAAA,OAAgBA,WAAhB,KAAmC,OAAnC,CASA,OAASC,cAAT,KAA+B,kBAA/B,CACA,OAASC,cAAT,KAA+B,kBAA/B,CACA,OAASC,eAAT,KAAgC,mBAAhC,CACA,OAASC,YAAT,KAA6B,gBAA7B,CACA,OAASC,cAAT,CAAyBC,wBAAzB,KAAyD,SAAzD,CACA,MAAO,CAAAC,cAAP,KAA2B,yBAA3B,CAKA,MAAO,SAAS,CAAAC,kBAATA,CACLC,KADK,CAELC,eAFK,CAGLC,gBAHK,CAILC,aAJK,CAKLC,mBALK,CAML,CACA,KAAM,CAAAC,WAAW,CAAGT,cAAc,EAAlC,CACA,KAAM,CAAAU,sBAAsB,CAAGf,WAAW,CAEvCgB,gBAAD,EAAgC,CAE9B,KAAM,CAAAC,OAAO,CAAGV,cAAc,CAACE,KAAK,CAACS,OAAP,CAA9B,CACA,KAAM,CAAAC,uBAAuB,CAAGF,OAAO,GAAKR,KAAK,CAACW,eAAlD,CAEA,GACED,uBAAuB,EACvBhB,eAAe,CAACO,eAAD,CAAkBC,gBAAlB,CAFjB,CAGE,CACAL,wBAAwB,CAACG,KAAK,CAACS,OAAP,CAAxB,CACAd,YAAY,CAACM,eAAD,CAAZ,CACAT,cAAc,CAAC,CACbS,eADa,CAEbE,aAFa,CAGbD,gBAHa,CAIbE,mBAJa,CAKbI,OALa,CAAD,CAAd,CAQA,GAAIE,uBAAJ,CAA6B,CAC3BV,KAAK,CAACW,eAAN,CAAwBH,OAAxB,CACAR,KAAK,CAACY,2BAAN,CAAoC,IAApC,CACAP,WAAW,GACZ,CACF,CAnBD,IAmBO,IAAI,CAACE,gBAAL,CAAuB,CAC5Bd,cAAc,CAACQ,eAAD,CAAkBE,aAAlB,CAAiCD,gBAAjC,CAAd,CACD,CACF,CA7BuC,CA8BxC,CACEG,WADF,CAEEF,aAFF,CAGED,gBAHF,CAIED,eAJF,CAKED,KALF,CAMEI,mBANF,CA9BwC,CAA1C,CAwCA,MAAO,CAAAE,sBAAP,CACD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}