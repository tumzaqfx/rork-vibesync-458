{"ast":null,"code":"export function rgbaToThumbHash(w,h,rgba){if(w>100||h>100)throw new Error(`${w}x${h} doesn't fit in 100x100`);const{PI,round,max,cos,abs}=Math;let avg_r=0,avg_g=0,avg_b=0,avg_a=0;for(let i=0,j=0;i<w*h;i++,j+=4){const alpha=rgba[j+3]/255;avg_r+=alpha/255*rgba[j];avg_g+=alpha/255*rgba[j+1];avg_b+=alpha/255*rgba[j+2];avg_a+=alpha;}if(avg_a){avg_r/=avg_a;avg_g/=avg_a;avg_b/=avg_a;}const hasAlpha=avg_a<w*h;const l_limit=hasAlpha?5:7;const lx=max(1,round(l_limit*w/max(w,h)));const ly=max(1,round(l_limit*h/max(w,h)));const l=[];const p=[];const q=[];const a=[];for(let i=0,j=0;i<w*h;i++,j+=4){const alpha=rgba[j+3]/255;const r=avg_r*(1-alpha)+alpha/255*rgba[j];const g=avg_g*(1-alpha)+alpha/255*rgba[j+1];const b=avg_b*(1-alpha)+alpha/255*rgba[j+2];l[i]=(r+g+b)/3;p[i]=(r+g)/2-b;q[i]=r-g;a[i]=alpha;}const encodeChannel=(channel,nx,ny)=>{let dc=0;const ac=[];let scale=0;const fx=[];for(let cy=0;cy<ny;cy++){for(let cx=0;cx*ny<nx*(ny-cy);cx++){let f=0;for(let x=0;x<w;x++)fx[x]=cos(PI/w*cx*(x+0.5));for(let y=0;y<h;y++)for(let x=0,fy=cos(PI/h*cy*(y+0.5));x<w;x++)f+=channel[x+y*w]*fx[x]*fy;f/=w*h;if(cx||cy){ac.push(f);scale=max(scale,abs(f));}else{dc=f;}}}if(scale)for(let i=0;i<ac.length;i++)ac[i]=0.5+0.5/scale*ac[i];return[dc,ac,scale];};const[l_dc,l_ac,l_scale]=encodeChannel(l,max(3,lx),max(3,ly));const[p_dc,p_ac,p_scale]=encodeChannel(p,3,3);const[q_dc,q_ac,q_scale]=encodeChannel(q,3,3);const[a_dc,a_ac,a_scale]=hasAlpha?encodeChannel(a,5,5):[];const isLandscape=w>h;const header24=round(63*l_dc)|round(31.5+31.5*p_dc)<<6|round(31.5+31.5*q_dc)<<12|round(31*l_scale)<<18|(hasAlpha?1:0)<<23;const header16=(isLandscape?ly:lx)|round(63*p_scale)<<3|round(63*q_scale)<<9|(isLandscape?1:0)<<15;const hash=[header24&255,header24>>8&255,header24>>16,header16&255,header16>>8];const ac_start=hasAlpha?6:5;let ac_index=0;if(hasAlpha)hash.push(round(15*a_dc)|round(15*a_scale)<<4);for(const ac of hasAlpha?[l_ac,p_ac,q_ac,a_ac]:[l_ac,p_ac,q_ac])for(const f of ac)hash[ac_start+(ac_index>>1)]|=round(15*f)<<((ac_index++&1)<<2);return new Uint8Array(hash);}export function thumbHashToRGBA(hash){const{PI,min,max,cos,round}=Math;const header24=hash[0]|hash[1]<<8|hash[2]<<16;const header16=hash[3]|hash[4]<<8;const l_dc=(header24&63)/63;const p_dc=(header24>>6&63)/31.5-1;const q_dc=(header24>>12&63)/31.5-1;const l_scale=(header24>>18&31)/31;const hasAlpha=header24>>23;const p_scale=(header16>>3&63)/63;const q_scale=(header16>>9&63)/63;const isLandscape=header16>>15;const lx=max(3,isLandscape?hasAlpha?5:7:header16&7);const ly=max(3,isLandscape?header16&7:hasAlpha?5:7);const a_dc=hasAlpha?(hash[5]&15)/15:1;const a_scale=(hash[5]>>4)/15;const ac_start=hasAlpha?6:5;let ac_index=0;const decodeChannel=(nx,ny,scale)=>{const ac=[];for(let cy=0;cy<ny;cy++)for(let cx=cy?0:1;cx*ny<nx*(ny-cy);cx++)ac.push(((hash[ac_start+(ac_index>>1)]>>((ac_index++&1)<<2)&15)/7.5-1)*scale);return ac;};const l_ac=decodeChannel(lx,ly,l_scale);const p_ac=decodeChannel(3,3,p_scale*1.25);const q_ac=decodeChannel(3,3,q_scale*1.25);const a_ac=hasAlpha?decodeChannel(5,5,a_scale):null;const ratio=thumbHashToApproximateAspectRatio(hash);const w=round(ratio>1?32:32*ratio);const h=round(ratio>1?32/ratio:32);const rgba=new Uint8Array(w*h*4),fx=[],fy=[];for(let y=0,i=0;y<h;y++){for(let x=0;x<w;x++,i+=4){let l=l_dc,p=p_dc,q=q_dc,a=a_dc;for(let cx=0,n=max(lx,hasAlpha?5:3);cx<n;cx++)fx[cx]=cos(PI/w*(x+0.5)*cx);for(let cy=0,n=max(ly,hasAlpha?5:3);cy<n;cy++)fy[cy]=cos(PI/h*(y+0.5)*cy);for(let cy=0,j=0;cy<ly;cy++)for(let cx=cy?0:1,fy2=fy[cy]*2;cx*ly<lx*(ly-cy);cx++,j++)l+=l_ac[j]*fx[cx]*fy2;for(let cy=0,j=0;cy<3;cy++){for(let cx=cy?0:1,fy2=fy[cy]*2;cx<3-cy;cx++,j++){const f=fx[cx]*fy2;p+=p_ac[j]*f;q+=q_ac[j]*f;}}if(hasAlpha)for(let cy=0,j=0;cy<5;cy++)for(let cx=cy?0:1,fy2=fy[cy]*2;cx<5-cy;cx++,j++)a+=a_ac[j]*fx[cx]*fy2;const b=l-2/3*p;const r=(3*l-b+q)/2;const g=r-q;rgba[i]=max(0,255*min(1,r));rgba[i+1]=max(0,255*min(1,g));rgba[i+2]=max(0,255*min(1,b));rgba[i+3]=max(0,255*min(1,a));}}return{w,h,rgba};}export function thumbHashToAverageRGBA(hash){const{min,max}=Math;const header=hash[0]|hash[1]<<8|hash[2]<<16;const l=(header&63)/63;const p=(header>>6&63)/31.5-1;const q=(header>>12&63)/31.5-1;const hasAlpha=header>>23;const a=hasAlpha?(hash[5]&15)/15:1;const b=l-2/3*p;const r=(3*l-b+q)/2;const g=r-q;return{r:max(0,min(1,r)),g:max(0,min(1,g)),b:max(0,min(1,b)),a};}export function thumbHashToApproximateAspectRatio(hash){const header=hash[3];const hasAlpha=hash[2]&0x80;const isLandscape=hash[4]&0x80;const lx=isLandscape?hasAlpha?5:7:header&7;const ly=isLandscape?header&7:hasAlpha?5:7;return lx/ly;}export function rgbaToDataURL(w,h,rgba){const row=w*4+1;const idat=6+h*(5+row);const bytes=[137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,w>>8,w&255,0,0,h>>8,h&255,8,6,0,0,0,0,0,0,0,idat>>>24,idat>>16&255,idat>>8&255,idat&255,73,68,65,84,120,1];const table=[0,498536548,997073096,651767980,1994146192,1802195444,1303535960,1342533948,-306674912,-267414716,-690576408,-882789492,-1687895376,-2032938284,-1609899400,-1111625188];let a=1,b=0;for(let y=0,i=0,end=row-1;y<h;y++,end+=row-1){bytes.push(y+1<h?0:1,row&255,row>>8,~row&255,row>>8^255,0);for(b=(b+a)%65521;i<end;i++){const u=rgba[i]&255;bytes.push(u);a=(a+u)%65521;b=(b+a)%65521;}}bytes.push(b>>8,b&255,a>>8,a&255,0,0,0,0,0,0,0,0,73,69,78,68,174,66,96,130);for(let[start,end]of[[12,29],[37,41+idat]]){let c=~0;for(let i=start;i<end;i++){c^=bytes[i];c=c>>>4^table[c&15];c=c>>>4^table[c&15];}c=~c;bytes[end++]=c>>>24;bytes[end++]=c>>16&255;bytes[end++]=c>>8&255;bytes[end++]=c&255;}return'data:image/png;base64,'+btoa(String.fromCharCode(...bytes));}export function thumbHashToDataURL(hash){const image=thumbHashToRGBA(hash);return rgbaToDataURL(image.w,image.h,image.rgba);}export function thumbHashStringToDataURL(thumbhash){const hash=Uint8Array.from(atob(thumbhash),c=>c.charCodeAt(0));return thumbHashToDataURL(hash);}","map":{"version":3,"names":["rgbaToThumbHash","w","h","rgba","Error","PI","round","max","cos","abs","Math","avg_r","avg_g","avg_b","avg_a","i","j","alpha","hasAlpha","l_limit","lx","ly","l","p","q","a","r","g","b","encodeChannel","channel","nx","ny","dc","ac","scale","fx","cy","cx","f","x","y","fy","push","length","l_dc","l_ac","l_scale","p_dc","p_ac","p_scale","q_dc","q_ac","q_scale","a_dc","a_ac","a_scale","isLandscape","header24","header16","hash","ac_start","ac_index","Uint8Array","thumbHashToRGBA","min","decodeChannel","ratio","thumbHashToApproximateAspectRatio","n","fy2","thumbHashToAverageRGBA","header","rgbaToDataURL","row","idat","bytes","table","end","u","start","c","btoa","String","fromCharCode","thumbHashToDataURL","image","thumbHashStringToDataURL","thumbhash","from","atob","charCodeAt"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-image/src/utils/thumbhash/thumbhash.ts"],"sourcesContent":["// Code copied and slightly modified from https://github.com/evanw/thumbhash\n\n/**\n * Encodes an RGBA image to a ThumbHash. RGB should not be premultiplied by A.\n *\n * @param w The width of the input image. Must be ≤100px.\n * @param h The height of the input image. Must be ≤100px.\n * @param rgba The pixels in the input image, row-by-row. Must have w*h*4 elements.\n * @returns The ThumbHash as a Uint8Array.\n */\n\nexport function rgbaToThumbHash(w: number, h: number, rgba: Uint8Array) {\n  // Encoding an image larger than 100x100 is slow with no benefit\n  if (w > 100 || h > 100) throw new Error(`${w}x${h} doesn't fit in 100x100`);\n  const { PI, round, max, cos, abs } = Math;\n\n  // Determine the average color\n  let avg_r = 0,\n    avg_g = 0,\n    avg_b = 0,\n    avg_a = 0;\n  for (let i = 0, j = 0; i < w * h; i++, j += 4) {\n    const alpha = rgba[j + 3] / 255;\n    avg_r += (alpha / 255) * rgba[j];\n    avg_g += (alpha / 255) * rgba[j + 1];\n    avg_b += (alpha / 255) * rgba[j + 2];\n    avg_a += alpha;\n  }\n  if (avg_a) {\n    avg_r /= avg_a;\n    avg_g /= avg_a;\n    avg_b /= avg_a;\n  }\n\n  const hasAlpha = avg_a < w * h;\n  const l_limit = hasAlpha ? 5 : 7; // Use fewer luminance bits if there's alpha\n  const lx = max(1, round((l_limit * w) / max(w, h)));\n  const ly = max(1, round((l_limit * h) / max(w, h)));\n  const l: number[] = []; // luminance\n  const p: number[] = []; // yellow - blue\n  const q: number[] = []; // red - green\n  const a: number[] = []; // alpha\n\n  // Convert the image from RGBA to LPQA (composite atop the average color)\n  for (let i = 0, j = 0; i < w * h; i++, j += 4) {\n    const alpha = rgba[j + 3] / 255;\n    const r = avg_r * (1 - alpha) + (alpha / 255) * rgba[j];\n    const g = avg_g * (1 - alpha) + (alpha / 255) * rgba[j + 1];\n    const b = avg_b * (1 - alpha) + (alpha / 255) * rgba[j + 2];\n    l[i] = (r + g + b) / 3;\n    p[i] = (r + g) / 2 - b;\n    q[i] = r - g;\n    a[i] = alpha;\n  }\n\n  // Encode using the DCT into DC (constant) and normalized AC (varying) terms\n  const encodeChannel = (channel: number[], nx: number, ny: number) => {\n    let dc = 0;\n    const ac: number[] = [];\n    let scale = 0;\n    const fx: number[] = [];\n    for (let cy = 0; cy < ny; cy++) {\n      for (let cx = 0; cx * ny < nx * (ny - cy); cx++) {\n        let f = 0;\n        for (let x = 0; x < w; x++) fx[x] = cos((PI / w) * cx * (x + 0.5));\n        for (let y = 0; y < h; y++)\n          for (let x = 0, fy = cos((PI / h) * cy * (y + 0.5)); x < w; x++)\n            f += channel[x + y * w] * fx[x] * fy;\n        f /= w * h;\n        if (cx || cy) {\n          ac.push(f);\n          scale = max(scale, abs(f));\n        } else {\n          dc = f;\n        }\n      }\n    }\n    if (scale) for (let i = 0; i < ac.length; i++) ac[i] = 0.5 + (0.5 / scale) * ac[i];\n    return [dc, ac, scale];\n  };\n  const [l_dc, l_ac, l_scale] = encodeChannel(l, max(3, lx), max(3, ly));\n  const [p_dc, p_ac, p_scale] = encodeChannel(p, 3, 3);\n  const [q_dc, q_ac, q_scale] = encodeChannel(q, 3, 3);\n  const [a_dc, a_ac, a_scale] = hasAlpha ? encodeChannel(a, 5, 5) : [];\n\n  // Write the constants\n  const isLandscape = w > h;\n  const header24 =\n    round(63 * (l_dc as number)) |\n    (round(31.5 + 31.5 * (p_dc as number)) << 6) |\n    (round(31.5 + 31.5 * (q_dc as number)) << 12) |\n    (round(31 * (l_scale as number)) << 18) |\n    ((hasAlpha ? 1 : 0) << 23);\n  const header16 =\n    (isLandscape ? ly : lx) |\n    (round(63 * (p_scale as number)) << 3) |\n    (round(63 * (q_scale as number)) << 9) |\n    ((isLandscape ? 1 : 0) << 15);\n  const hash = [\n    header24 & 255,\n    (header24 >> 8) & 255,\n    header24 >> 16,\n    header16 & 255,\n    header16 >> 8,\n  ];\n  const ac_start = hasAlpha ? 6 : 5;\n  let ac_index = 0;\n  if (hasAlpha) hash.push(round(15 * (a_dc as number)) | (round(15 * (a_scale as number)) << 4));\n\n  // Write the varying factors\n  for (const ac of hasAlpha ? [l_ac, p_ac, q_ac, a_ac] : [l_ac, p_ac, q_ac])\n    for (const f of ac as number[])\n      hash[ac_start + (ac_index >> 1)] |= round(15 * f) << ((ac_index++ & 1) << 2);\n  return new Uint8Array(hash);\n}\n\n/**\n * Decodes a ThumbHash to an RGBA image. RGB is not be premultiplied by A.\n *\n * @param hash The bytes of the ThumbHash.\n * @returns The width, height, and pixels of the rendered placeholder image.\n */\nexport function thumbHashToRGBA(hash: Uint8Array) {\n  const { PI, min, max, cos, round } = Math;\n\n  // Read the constants\n  const header24 = hash[0] | (hash[1] << 8) | (hash[2] << 16);\n  const header16 = hash[3] | (hash[4] << 8);\n  const l_dc = (header24 & 63) / 63;\n  const p_dc = ((header24 >> 6) & 63) / 31.5 - 1;\n  const q_dc = ((header24 >> 12) & 63) / 31.5 - 1;\n  const l_scale = ((header24 >> 18) & 31) / 31;\n  const hasAlpha = header24 >> 23;\n  const p_scale = ((header16 >> 3) & 63) / 63;\n  const q_scale = ((header16 >> 9) & 63) / 63;\n  const isLandscape = header16 >> 15;\n  const lx = max(3, isLandscape ? (hasAlpha ? 5 : 7) : header16 & 7);\n  const ly = max(3, isLandscape ? header16 & 7 : hasAlpha ? 5 : 7);\n  const a_dc = hasAlpha ? (hash[5] & 15) / 15 : 1;\n  const a_scale = (hash[5] >> 4) / 15;\n\n  // Read the varying factors (boost saturation by 1.25x to compensate for quantization)\n  const ac_start = hasAlpha ? 6 : 5;\n  let ac_index = 0;\n  const decodeChannel = (nx: number, ny: number, scale: number) => {\n    const ac: number[] = [];\n    for (let cy = 0; cy < ny; cy++)\n      for (let cx = cy ? 0 : 1; cx * ny < nx * (ny - cy); cx++)\n        ac.push(\n          (((hash[ac_start + (ac_index >> 1)] >> ((ac_index++ & 1) << 2)) & 15) / 7.5 - 1) * scale\n        );\n    return ac;\n  };\n  const l_ac = decodeChannel(lx, ly, l_scale);\n  const p_ac = decodeChannel(3, 3, p_scale * 1.25);\n  const q_ac = decodeChannel(3, 3, q_scale * 1.25);\n  const a_ac = hasAlpha ? decodeChannel(5, 5, a_scale) : null;\n\n  // Decode using the DCT into RGB\n  const ratio = thumbHashToApproximateAspectRatio(hash);\n  const w = round(ratio > 1 ? 32 : 32 * ratio);\n  const h = round(ratio > 1 ? 32 / ratio : 32);\n  const rgba = new Uint8Array(w * h * 4),\n    fx: number[] = [],\n    fy: number[] = [];\n  for (let y = 0, i = 0; y < h; y++) {\n    for (let x = 0; x < w; x++, i += 4) {\n      let l = l_dc,\n        p = p_dc,\n        q = q_dc,\n        a = a_dc;\n\n      // Precompute the coefficients\n      for (let cx = 0, n = max(lx, hasAlpha ? 5 : 3); cx < n; cx++)\n        fx[cx] = cos((PI / w) * (x + 0.5) * cx);\n      for (let cy = 0, n = max(ly, hasAlpha ? 5 : 3); cy < n; cy++)\n        fy[cy] = cos((PI / h) * (y + 0.5) * cy);\n\n      // Decode L\n      for (let cy = 0, j = 0; cy < ly; cy++)\n        for (let cx = cy ? 0 : 1, fy2 = fy[cy] * 2; cx * ly < lx * (ly - cy); cx++, j++)\n          l += l_ac[j] * fx[cx] * fy2;\n\n      // Decode P and Q\n      for (let cy = 0, j = 0; cy < 3; cy++) {\n        for (let cx = cy ? 0 : 1, fy2 = fy[cy] * 2; cx < 3 - cy; cx++, j++) {\n          const f = fx[cx] * fy2;\n          p += p_ac[j] * f;\n          q += q_ac[j] * f;\n        }\n      }\n\n      // Decode A\n      if (hasAlpha)\n        for (let cy = 0, j = 0; cy < 5; cy++)\n          for (let cx = cy ? 0 : 1, fy2 = fy[cy] * 2; cx < 5 - cy; cx++, j++)\n            a += a_ac![j] * fx[cx] * fy2;\n\n      // Convert to RGB\n      const b = l - (2 / 3) * p;\n      const r = (3 * l - b + q) / 2;\n      const g = r - q;\n      rgba[i] = max(0, 255 * min(1, r));\n      rgba[i + 1] = max(0, 255 * min(1, g));\n      rgba[i + 2] = max(0, 255 * min(1, b));\n      rgba[i + 3] = max(0, 255 * min(1, a));\n    }\n  }\n  return { w, h, rgba };\n}\n\n/**\n * Extracts the average color from a ThumbHash. RGB is not be premultiplied by A.\n *\n * @param hash The bytes of the ThumbHash.\n * @returns The RGBA values for the average color. Each value ranges from 0 to 1.\n */\nexport function thumbHashToAverageRGBA(hash: Uint8Array) {\n  const { min, max } = Math;\n  const header = hash[0] | (hash[1] << 8) | (hash[2] << 16);\n  const l = (header & 63) / 63;\n  const p = ((header >> 6) & 63) / 31.5 - 1;\n  const q = ((header >> 12) & 63) / 31.5 - 1;\n  const hasAlpha = header >> 23;\n  const a = hasAlpha ? (hash[5] & 15) / 15 : 1;\n  const b = l - (2 / 3) * p;\n  const r = (3 * l - b + q) / 2;\n  const g = r - q;\n  return {\n    r: max(0, min(1, r)),\n    g: max(0, min(1, g)),\n    b: max(0, min(1, b)),\n    a,\n  };\n}\n\n/**\n * Extracts the approximate aspect ratio of the original image.\n *\n * @param hash The bytes of the ThumbHash.\n * @returns The approximate aspect ratio (i.e. width / height).\n */\nexport function thumbHashToApproximateAspectRatio(hash: Uint8Array) {\n  const header = hash[3];\n  const hasAlpha = hash[2] & 0x80;\n  const isLandscape = hash[4] & 0x80;\n  const lx = isLandscape ? (hasAlpha ? 5 : 7) : header & 7;\n  const ly = isLandscape ? header & 7 : hasAlpha ? 5 : 7;\n  return lx / ly;\n}\n\n/**\n * Encodes an RGBA image to a PNG data URL. RGB should not be premultiplied by\n * A. This is optimized for speed and simplicity and does not optimize for size\n * at all. This doesn't do any compression (all values are stored uncompressed).\n *\n * @param w The width of the input image. Must be ≤100px.\n * @param h The height of the input image. Must be ≤100px.\n * @param rgba The pixels in the input image, row-by-row. Must have w*h*4 elements.\n * @returns A data URL containing a PNG for the input image.\n */\nexport function rgbaToDataURL(w: number, h: number, rgba: Uint8Array) {\n  const row = w * 4 + 1;\n  const idat = 6 + h * (5 + row);\n  const bytes = [\n    137,\n    80,\n    78,\n    71,\n    13,\n    10,\n    26,\n    10,\n    0,\n    0,\n    0,\n    13,\n    73,\n    72,\n    68,\n    82,\n    0,\n    0,\n    w >> 8,\n    w & 255,\n    0,\n    0,\n    h >> 8,\n    h & 255,\n    8,\n    6,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    idat >>> 24,\n    (idat >> 16) & 255,\n    (idat >> 8) & 255,\n    idat & 255,\n    73,\n    68,\n    65,\n    84,\n    120,\n    1,\n  ];\n  const table = [\n    0, 498536548, 997073096, 651767980, 1994146192, 1802195444, 1303535960, 1342533948, -306674912,\n    -267414716, -690576408, -882789492, -1687895376, -2032938284, -1609899400, -1111625188,\n  ];\n  let a = 1,\n    b = 0;\n  for (let y = 0, i = 0, end = row - 1; y < h; y++, end += row - 1) {\n    bytes.push(y + 1 < h ? 0 : 1, row & 255, row >> 8, ~row & 255, (row >> 8) ^ 255, 0);\n    for (b = (b + a) % 65521; i < end; i++) {\n      const u = rgba[i] & 255;\n      bytes.push(u);\n      a = (a + u) % 65521;\n      b = (b + a) % 65521;\n    }\n  }\n  bytes.push(\n    b >> 8,\n    b & 255,\n    a >> 8,\n    a & 255,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    73,\n    69,\n    78,\n    68,\n    174,\n    66,\n    96,\n    130\n  );\n  for (let [start, end] of [\n    [12, 29],\n    [37, 41 + idat],\n  ]) {\n    let c = ~0;\n    for (let i = start; i < end; i++) {\n      c ^= bytes[i];\n      c = (c >>> 4) ^ table[c & 15];\n      c = (c >>> 4) ^ table[c & 15];\n    }\n    c = ~c;\n    bytes[end++] = c >>> 24;\n    bytes[end++] = (c >> 16) & 255;\n    bytes[end++] = (c >> 8) & 255;\n    bytes[end++] = c & 255;\n  }\n  return 'data:image/png;base64,' + btoa(String.fromCharCode(...bytes));\n}\n\n/**\n * Decodes a ThumbHash to a PNG data URL. This is a convenience function that\n * just calls \"thumbHashToRGBA\" followed by \"rgbaToDataURL\".\n *\n * @param hash The bytes of the ThumbHash.\n * @returns A data URL containing a PNG for the rendered ThumbHash.\n */\nexport function thumbHashToDataURL(hash: Uint8Array): string {\n  const image = thumbHashToRGBA(hash);\n  return rgbaToDataURL(image.w, image.h, image.rgba);\n}\n\n/**\n * Convenience function added to the original thumbhash code, allows generating a thumbhash image directly from\n * thumbhash string.\n * @param thumbhash string from which thumbhashDataURL should be generated\n * @returns A data URL containing a PNG for the rendered ThumbHash\n */\nexport function thumbHashStringToDataURL(thumbhash: string): string {\n  const hash = Uint8Array.from(atob(thumbhash), (c) => c.charCodeAt(0));\n  return thumbHashToDataURL(hash);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}