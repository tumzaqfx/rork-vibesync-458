{"ast":null,"code":"import{buildUrlForBundle}from'./buildUrlForBundle';import{fetchThenEvalAsync}from'./fetchThenEval';export async function loadBundleAsync(bundlePath){const requestUrl=buildUrlForBundle(bundlePath);if(true){return fetchThenEvalAsync(requestUrl);}else{return fetchThenEvalAsync(requestUrl).then(()=>{const HMRClient=require('../HMRClient').default;HMRClient.registerBundle(requestUrl);});}}","map":{"version":3,"names":["buildUrlForBundle","fetchThenEvalAsync","loadBundleAsync","bundlePath","requestUrl","then","HMRClient","require","default","registerBundle"],"sources":["/home/user/rork-vibesync-458/node_modules/@expo/metro-runtime/src/async-require/loadBundle.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { buildUrlForBundle } from './buildUrlForBundle';\nimport { fetchThenEvalAsync } from './fetchThenEval';\n\n/**\n * Load a bundle for a URL using fetch + eval on native and script tag injection on web.\n *\n * @param bundlePath Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon.bundle?params=from-metro`.\n */\nexport async function loadBundleAsync(bundlePath: string): Promise<void> {\n  const requestUrl = buildUrlForBundle(bundlePath);\n\n  if (process.env.NODE_ENV === 'production') {\n    return fetchThenEvalAsync(requestUrl);\n  } else {\n    return fetchThenEvalAsync(requestUrl).then(() => {\n      const HMRClient = require('../HMRClient').default as typeof import('../HMRClient').default;\n      HMRClient.registerBundle(requestUrl);\n    });\n  }\n}\n"],"mappings":"AAMA,OAASA,iBAAiB,KAAQ,qBAAqB,CACvD,OAASC,kBAAkB,KAAQ,iBAAiB,CAOpD,MAAO,eAAe,CAAAC,eAAeA,CAACC,UAAkB,CAAiB,CACvE,KAAM,CAAAC,UAAU,CAAGJ,iBAAiB,CAACG,UAAU,CAAC,CAEhD,QAA2C,CACzC,MAAO,CAAAF,kBAAkB,CAACG,UAAU,CAAC,CACvC,CAAC,IAAM,CACL,MAAO,CAAAH,kBAAkB,CAACG,UAAU,CAAC,CAACC,IAAI,CAAC,IAAM,CAC/C,KAAM,CAAAC,SAAS,CAAGC,OAAO,CAAC,cAAc,CAAC,CAACC,OAAgD,CAC1FF,SAAS,CAACG,cAAc,CAACL,UAAU,CAAC,CACtC,CAAC,CAAC,CACJ,CACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}