{"ast":null,"code":"import{ContinousBaseGesture}from'./gesture';const _worklet_3631609729009_init_data={code:\"function changeEventCalculator_reactNativeGestureHandler_rotationGestureJs1(current,previous){let changePayload;if(previous===undefined){changePayload={rotationChange:current.rotation};}else{changePayload={rotationChange:current.rotation-previous.rotation};}return{...current,...changePayload};}\"};const changeEventCalculator=function(){const changeEventCalculator=function(current,previous){let changePayload;if(previous===undefined){changePayload={rotationChange:current.rotation};}else{changePayload={rotationChange:current.rotation-previous.rotation};}return Object.assign({},current,changePayload);};changeEventCalculator.__closure={};changeEventCalculator.__workletHash=3631609729009;changeEventCalculator.__initData=_worklet_3631609729009_init_data;return changeEventCalculator;}();export class RotationGesture extends ContinousBaseGesture{constructor(){super();this.handlerName='RotationGestureHandler';}onChange(callback){this.handlers.changeEventCalculator=changeEventCalculator;return super.onChange(callback);}}","map":{"version":3,"names":["ContinousBaseGesture","_worklet_3631609729009_init_data","code","changeEventCalculator","current","previous","changePayload","undefined","rotationChange","rotation","Object","assign","__closure","__workletHash","__initData","RotationGesture","constructor","handlerName","onChange","callback","handlers"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/rotationGesture.ts"],"sourcesContent":["import { ContinousBaseGesture } from './gesture';\nimport type { RotationGestureHandlerEventPayload } from '../GestureHandlerEventPayload';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\ntype RotationGestureChangeEventPayload = {\n  rotationChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<RotationGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<RotationGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: RotationGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      rotationChange: current.rotation,\n    };\n  } else {\n    changePayload = {\n      rotationChange: current.rotation - previous.rotation,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class RotationGesture extends ContinousBaseGesture<\n  RotationGestureHandlerEventPayload,\n  RotationGestureChangeEventPayload\n> {\n  constructor() {\n    super();\n\n    this.handlerName = 'RotationGestureHandler';\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        RotationGestureHandlerEventPayload & RotationGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, RotationGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type RotationGestureType = InstanceType<typeof RotationGesture>;\n"],"mappings":"AAAA,OAASA,oBAAT,KAAqC,WAArC,OAAAC,gCAAA,EAAAC,IAAA,kTAAAC,qBAAA,CAQA,iBAAAA,qBAAA,SAAAA,CACEC,OADF,CAEEC,QAFF,CAGE,CAEA,GAAI,CAAAC,aAAJ,CACA,GAAID,QAAQ,GAAKE,SAAjB,CAA4B,CAC1BD,aAAa,CAAG,CACdE,cAAc,CAAEJ,OAAO,CAACK,QADV,CAAhB,CAGD,CAJD,IAIO,CACLH,aAAa,CAAG,CACdE,cAAc,CAAEJ,OAAO,CAACK,QAAR,CAAmBJ,QAAQ,CAACI,QAD9B,CAAhB,CAGD,CAED,OAAAC,MAAA,CAAAC,MAAA,IAAYP,OAAL,CAAiBE,aAAA,EACzB,EAAAH,qBAAA,CAAAS,SAAA,IAAAT,qBAAA,CAAAU,aAAA,eAAAV,qBAAA,CAAAW,UAAA,CAAAb,gCAAA,QAAAE,qBAAA,EAjBD,GAmBA,MAAO,MAAM,CAAAY,eAAN,QAA8B,CAAAf,oBAGnC,CACAgB,WAAWA,CAAA,CAAG,CACZ,QAEA,KAAKC,WAAL,CAAmB,wBAAnB,CACD,CAEDC,QAAQA,CACNC,QADM,CAMN,CAEA,KAAKC,QAAL,CAAcjB,qBAAd,CAAsCA,qBAAtC,CACA,MAAO,OAAMe,QAAN,CAAeC,QAAf,CAAP,CACD,CAjBD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}