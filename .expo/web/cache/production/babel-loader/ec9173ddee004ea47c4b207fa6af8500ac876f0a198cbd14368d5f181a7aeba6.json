{"ast":null,"code":"function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}class Vector{constructor(length){_defineProperty(this,\"offset\",void 0);_defineProperty(this,\"length\",void 0);_defineProperty(this,\"elements\",void 0);this.offset=0;this.length=length;this.elements=new Array(length);}static fromVOL(values,offset,length){const result=new Vector(0);result.offset=offset;result.length=length;result.elements=values;return result;}get(index){return this.elements[this.offset+index];}set(index,value){this.elements[this.offset+index]=value;}dot(other){let result=0;for(let i=0;i<this.length;i++){result+=this.get(i)*other.get(i);}return result;}norm(){return Math.sqrt(this.dot(this));}}class Matrix{constructor(rows,columns){_defineProperty(this,\"columns\",void 0);_defineProperty(this,\"elements\",void 0);this.columns=columns;this.elements=new Array(rows*columns);}get(row,column){return this.elements[row*this.columns+column];}set(row,column,value){this.elements[row*this.columns+column]=value;}getRow(row){return Vector.fromVOL(this.elements,row*this.columns,this.columns);}}class PolynomialFit{constructor(degree){_defineProperty(this,\"coefficients\",void 0);this.coefficients=new Array(degree+1);}}const precisionErrorTolerance=1e-10;export default class LeastSquareSolver{constructor(x,y,w){_defineProperty(this,\"x\",void 0);_defineProperty(this,\"y\",void 0);_defineProperty(this,\"w\",void 0);this.x=x;this.y=y;this.w=w;}solve(degree){if(degree>this.x.length){return null;}const result=new PolynomialFit(degree);const m=this.x.length;const n=degree+1;const a=new Matrix(n,m);for(let h=0;h<m;h++){a.set(0,h,this.w[h]);for(let i=1;i<n;i++){a.set(i,h,a.get(i-1,h)*this.x[h]);}}const q=new Matrix(n,m);const r=new Matrix(n,m);for(let j=0;j<n;j+=1){for(let h=0;h<m;h+=1){q.set(j,h,a.get(j,h));}for(let i=0;i<j;i+=1){const dot=q.getRow(j).dot(q.getRow(i));for(let h=0;h<m;h+=1){q.set(j,h,q.get(j,h)-dot*q.get(i,h));}}const norm=q.getRow(j).norm();if(norm<precisionErrorTolerance){return null;}const inverseNorm=1.0/norm;for(let h=0;h<m;h+=1){q.set(j,h,q.get(j,h)*inverseNorm);}for(let i=0;i<n;i+=1){r.set(j,i,i<j?0.0:q.getRow(j).dot(a.getRow(i)));}}const wy=new Vector(m);for(let h=0;h<m;h+=1){wy.set(h,this.y[h]*this.w[h]);}for(let i=n-1;i>=0;i-=1){result.coefficients[i]=q.getRow(i).dot(wy);for(let j=n-1;j>i;j-=1){result.coefficients[i]-=r.get(i,j)*result.coefficients[j];}result.coefficients[i]/=r.get(i,i);}return result;}}","map":{"version":3,"names":["Vector","constructor","length","_defineProperty","offset","elements","Array","fromVOL","values","result","get","index","set","value","dot","other","i","norm","Math","sqrt","Matrix","rows","columns","row","column","getRow","PolynomialFit","degree","coefficients","precisionErrorTolerance","LeastSquareSolver","x","y","w","solve","m","n","a","h","q","r","j","inverseNorm","wy"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-gesture-handler/lib/module/web/tools/LeastSquareSolver.ts"],"sourcesContent":["// Implementation taken from Flutter's LeastSquareSolver\n// https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/gestures/lsq_solver.dart\n\nclass Vector {\n  private offset: number;\n  private length: number;\n  private elements: number[];\n\n  constructor(length: number) {\n    this.offset = 0;\n    this.length = length;\n    this.elements = new Array<number>(length);\n  }\n\n  public static fromVOL(\n    values: number[],\n    offset: number,\n    length: number\n  ): Vector {\n    const result = new Vector(0);\n\n    result.offset = offset;\n    result.length = length;\n    result.elements = values;\n\n    return result;\n  }\n\n  public get(index: number): number {\n    return this.elements[this.offset + index];\n  }\n\n  public set(index: number, value: number): void {\n    this.elements[this.offset + index] = value;\n  }\n\n  public dot(other: Vector): number {\n    let result = 0;\n    for (let i = 0; i < this.length; i++) {\n      result += this.get(i) * other.get(i);\n    }\n    return result;\n  }\n\n  public norm() {\n    return Math.sqrt(this.dot(this));\n  }\n}\n\nclass Matrix {\n  private columns: number;\n  private elements: number[];\n\n  constructor(rows: number, columns: number) {\n    this.columns = columns;\n    this.elements = new Array<number>(rows * columns);\n  }\n\n  public get(row: number, column: number): number {\n    return this.elements[row * this.columns + column];\n  }\n\n  public set(row: number, column: number, value: number): void {\n    this.elements[row * this.columns + column] = value;\n  }\n\n  public getRow(row: number): Vector {\n    return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n  }\n}\n\n// An nth degree polynomial fit to a dataset.\nclass PolynomialFit {\n  // The polynomial coefficients of the fit.\n  //\n  // For each `i`, the element `coefficients[i]` is the coefficient of\n  // the `i`-th power of the variable.\n  public coefficients: number[];\n\n  // Creates a polynomial fit of the given degree.\n  //\n  // There are n + 1 coefficients in a fit of degree n.\n  constructor(degree: number) {\n    this.coefficients = new Array<number>(degree + 1);\n  }\n}\n\nconst precisionErrorTolerance = 1e-10;\n\n// Uses the least-squares algorithm to fit a polynomial to a set of data.\nexport default class LeastSquareSolver {\n  // The x-coordinates of each data point.\n  private x: number[];\n  // The y-coordinates of each data point.\n  private y: number[];\n  // The weight to use for each data point.\n  private w: number[];\n\n  // Creates a least-squares solver.\n  //\n  // The [x], [y], and [w] arguments must not be null.\n  constructor(x: number[], y: number[], w: number[]) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n  }\n\n  // Fits a polynomial of the given degree to the data points.\n  //\n  // When there is not enough data to fit a curve null is returned.\n  public solve(degree: number): PolynomialFit | null {\n    if (degree > this.x.length) {\n      // Not enough data to fit a curve.\n      return null;\n    }\n\n    const result = new PolynomialFit(degree);\n\n    // Shorthands for the purpose of notation equivalence to original C++ code.\n    const m = this.x.length;\n    const n = degree + 1;\n\n    // Expand the X vector to a matrix A, pre-multiplied by the weights.\n    const a = new Matrix(n, m);\n    for (let h = 0; h < m; h++) {\n      a.set(0, h, this.w[h]);\n\n      for (let i = 1; i < n; i++) {\n        a.set(i, h, a.get(i - 1, h) * this.x[h]);\n      }\n    }\n\n    // Apply the Gram-Schmidt process to A to obtain its QR decomposition.\n\n    // Orthonormal basis, column-major ordVectorer.\n    const q = new Matrix(n, m);\n    // Upper triangular matrix, row-major order.\n    const r = new Matrix(n, m);\n\n    for (let j = 0; j < n; j += 1) {\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, a.get(j, h));\n      }\n      for (let i = 0; i < j; i += 1) {\n        const dot = q.getRow(j).dot(q.getRow(i));\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, q.get(j, h) - dot * q.get(i, h));\n        }\n      }\n\n      const norm = q.getRow(j).norm();\n      if (norm < precisionErrorTolerance) {\n        // Vectors are linearly dependent or zero so no solution.\n        return null;\n      }\n\n      const inverseNorm = 1.0 / norm;\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, q.get(j, h) * inverseNorm);\n      }\n      for (let i = 0; i < n; i += 1) {\n        r.set(j, i, i < j ? 0.0 : q.getRow(j).dot(a.getRow(i)));\n      }\n    }\n\n    // Solve R B = Qt W Y to find B. This is easy because R is upper triangular.\n    // We just work from bottom-right to top-left calculating B's coefficients.\n    const wy = new Vector(m);\n    for (let h = 0; h < m; h += 1) {\n      wy.set(h, this.y[h] * this.w[h]);\n    }\n    for (let i = n - 1; i >= 0; i -= 1) {\n      result.coefficients[i] = q.getRow(i).dot(wy);\n      for (let j = n - 1; j > i; j -= 1) {\n        result.coefficients[i] -= r.get(i, j) * result.coefficients[j];\n      }\n      result.coefficients[i] /= r.get(i, i);\n    }\n\n    return result;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}