{"ast":null,"code":"import{UnavailabilityError,Platform}from'expo-modules-core';import{ClipboardPasteButton}from'./ClipboardPasteButton';import ExpoClipboard from'./ExpoClipboard';const onClipboardEventName='onClipboardChanged';export async function getStringAsync(options={}){if(!ExpoClipboard.getStringAsync){throw new UnavailabilityError('Clipboard','getStringAsync');}return await ExpoClipboard.getStringAsync(options);}export async function setStringAsync(text,options={}){if(!ExpoClipboard.setStringAsync){throw new UnavailabilityError('Clipboard','setStringAsync');}return ExpoClipboard.setStringAsync(text,options);}export function setString(text){if(true){return ExpoClipboard.setString(text);}else{setStringAsync(text);}}export function hasStringAsync(){if(!ExpoClipboard.hasStringAsync){throw new UnavailabilityError('Clipboard','hasStringAsync');}return ExpoClipboard.hasStringAsync();}export async function getUrlAsync(){if(!ExpoClipboard.getUrlAsync){throw new UnavailabilityError('Clipboard','getUrlAsync');}return await ExpoClipboard.getUrlAsync();}export async function setUrlAsync(url){if(!ExpoClipboard.setUrlAsync){throw new UnavailabilityError('Clipboard','setUrlAsync');}return ExpoClipboard.setUrlAsync(url);}export async function hasUrlAsync(){if(!ExpoClipboard.hasUrlAsync){throw new UnavailabilityError('Clipboard','hasUrlAsync');}return await ExpoClipboard.hasUrlAsync();}export async function getImageAsync(options){if(!ExpoClipboard.getImageAsync){throw new UnavailabilityError('Clipboard','getImageAsync');}return await ExpoClipboard.getImageAsync(options);}export async function setImageAsync(base64Image){if(!ExpoClipboard.setImageAsync){throw new UnavailabilityError('Clipboard','setImageAsync');}return ExpoClipboard.setImageAsync(base64Image);}export async function hasImageAsync(){if(!ExpoClipboard.hasImageAsync){throw new UnavailabilityError('Clipboard','hasImageAsync');}return ExpoClipboard.hasImageAsync();}export function addClipboardListener(listener){const listenerWrapper=event=>{const wrappedEvent=Object.assign({},event,{get content(){console.warn(\"The 'content' property of the clipboard event is deprecated. Use 'getStringAsync()' instead to get clipboard content\");return'';}});listener(wrappedEvent);};return ExpoClipboard.addListener(onClipboardEventName,listenerWrapper);}export function removeClipboardListener(subscription){subscription.remove();}export const isPasteButtonAvailable=false?ExpoClipboard.isPasteButtonAvailable:false;export*from'./Clipboard.types';export{ClipboardPasteButton};","map":{"version":3,"names":["UnavailabilityError","Platform","ClipboardPasteButton","ExpoClipboard","onClipboardEventName","getStringAsync","options","setStringAsync","text","setString","hasStringAsync","getUrlAsync","setUrlAsync","url","hasUrlAsync","getImageAsync","setImageAsync","base64Image","hasImageAsync","addClipboardListener","listener","listenerWrapper","event","wrappedEvent","Object","assign","content","console","warn","addListener","removeClipboardListener","subscription","remove","isPasteButtonAvailable"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-clipboard/src/Clipboard.ts"],"sourcesContent":["import { type EventSubscription, UnavailabilityError, Platform } from 'expo-modules-core';\n\nimport type {\n  ClipboardImage,\n  ContentType,\n  GetImageOptions,\n  GetStringOptions,\n  SetStringOptions,\n} from './Clipboard.types';\nimport { ClipboardPasteButton } from './ClipboardPasteButton';\nimport ExpoClipboard from './ExpoClipboard';\n\nconst onClipboardEventName = 'onClipboardChanged';\n\ntype ClipboardEvent = {\n  /**\n   * @deprecated Returns empty string. Use [`getStringAsync()`](#getstringasyncoptions) instead to retrieve clipboard content.\n   */\n  content: string;\n  /**\n   * An array of content types that are available on the clipboard.\n   */\n  contentTypes: ContentType[];\n};\n\nexport { EventSubscription as Subscription, ClipboardEvent };\n\n/**\n * Gets the content of the user's clipboard. Calling this method on web will prompt\n * the user to grant your app permission to \"see text and images copied to the clipboard.\"\n *\n * @param options Options for the clipboard content to be retrieved.\n * @returns A promise that resolves to the content of the clipboard.\n */\nexport async function getStringAsync(options: GetStringOptions = {}): Promise<string> {\n  if (!ExpoClipboard.getStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'getStringAsync');\n  }\n  return await ExpoClipboard.getStringAsync(options);\n}\n\n/**\n * Sets the content of the user's clipboard.\n *\n * @param text The string to save to the clipboard.\n * @param options Options for the clipboard content to be set.\n * @returns On web, this returns a promise that fulfills to a boolean value indicating whether or not\n * the string was saved to the user's clipboard. On iOS and Android, the promise always resolves to `true`.\n */\nexport async function setStringAsync(\n  text: string,\n  options: SetStringOptions = {}\n): Promise<boolean> {\n  if (!ExpoClipboard.setStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'setStringAsync');\n  }\n  return ExpoClipboard.setStringAsync(text, options);\n}\n\n/**\n * Sets the content of the user's clipboard.\n * @deprecated Use [`setStringAsync()`](#setstringasynctext-options) instead.\n *\n * @returns On web, this returns a boolean value indicating whether or not the string was saved to\n * the user's clipboard. On iOS and Android, nothing is returned.\n */\nexport function setString(text: string): void {\n  if (Platform.OS === 'web') {\n    // on web, we need to return legacy method,\n    // because of different return type\n    return ExpoClipboard.setString(text);\n  } else {\n    setStringAsync(text);\n  }\n}\n\n/**\n * Returns whether the clipboard has text content. Returns true for both plain text and rich text (e.g. HTML).\n *\n * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n *\n * @returns A promise that fulfills to `true` if clipboard has text content, resolves to `false` otherwise.\n */\nexport function hasStringAsync(): Promise<boolean> {\n  if (!ExpoClipboard.hasStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasStringAsync');\n  }\n  return ExpoClipboard.hasStringAsync();\n}\n\n/**\n * Gets the URL from the user's clipboard.\n *\n * @returns A promise that fulfills to the URL in the clipboard.\n * @platform ios\n */\nexport async function getUrlAsync(): Promise<string | null> {\n  if (!ExpoClipboard.getUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'getUrlAsync');\n  }\n  return await ExpoClipboard.getUrlAsync();\n}\n\n/**\n * Sets a URL in the user's clipboard.\n *\n * This function behaves the same as [`setStringAsync()`](#setstringasynctext-options), except that\n * it sets the clipboard content type to be a URL. It lets your app or other apps know that the\n * clipboard contains a URL and behave accordingly.\n *\n * @param url The URL to save to the clipboard.\n * @platform ios\n */\nexport async function setUrlAsync(url: string): Promise<void> {\n  if (!ExpoClipboard.setUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'setUrlAsync');\n  }\n  return ExpoClipboard.setUrlAsync(url);\n}\n\n/**\n * Returns whether the clipboard has a URL content.\n *\n * @returns A promise that fulfills to `true` if clipboard has URL content, resolves to `false` otherwise.\n * @platform ios\n */\nexport async function hasUrlAsync(): Promise<boolean> {\n  if (!ExpoClipboard.hasUrlAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasUrlAsync');\n  }\n  return await ExpoClipboard.hasUrlAsync();\n}\n\n/**\n * Gets the image from the user's clipboard and returns it in the specified\n * format. Calling this method on web will prompt the user to grant your app\n * permission to \"see text and images copied to the clipboard.\"\n *\n * @param options A `GetImageOptions` object to specify the desired format of the image.\n * @returns If there was an image in the clipboard, the promise resolves to\n * a [`ClipboardImage`](#clipboardimage) object containing the base64 string and metadata of the image.\n * Otherwise, it resolves to `null`.\n *\n * @example\n * ```tsx\n * const img = await Clipboard.getImageAsync({ format: 'png' });\n * // ...\n * <Image source={{ uri: img?.data }} style={{ width: 200, height: 200 }} />\n * ```\n */\nexport async function getImageAsync(options: GetImageOptions): Promise<ClipboardImage | null> {\n  if (!ExpoClipboard.getImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'getImageAsync');\n  }\n  return await ExpoClipboard.getImageAsync(options);\n}\n\n/**\n * Sets an image in the user's clipboard.\n *\n * @param base64Image Image encoded as a base64 string, without MIME type.\n *\n * @example\n * ```tsx\n * const result = await ImagePicker.launchImageLibraryAsync({\n *   mediaTypes: ImagePicker.MediaTypeOptions.Images,\n *   base64: true,\n * });\n * await Clipboard.setImageAsync(result.base64);\n * ```\n */\nexport async function setImageAsync(base64Image: string): Promise<void> {\n  if (!ExpoClipboard.setImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'setImageAsync');\n  }\n  return ExpoClipboard.setImageAsync(base64Image);\n}\n\n/**\n * Returns whether the clipboard has an image content.\n *\n * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n *\n * @returns A promise that fulfills to `true` if clipboard has image content, resolves to `false` otherwise.\n */\nexport async function hasImageAsync(): Promise<boolean> {\n  if (!ExpoClipboard.hasImageAsync) {\n    throw new UnavailabilityError('Clipboard', 'hasImageAsync');\n  }\n  return ExpoClipboard.hasImageAsync();\n}\n\n/**\n * Adds a listener that will fire whenever the content of the user's clipboard changes. This method\n * is a no-op on Web.\n *\n * @param listener Callback to execute when listener is triggered. The callback is provided a\n * single argument that is an object containing information about clipboard contents.\n *\n * @example\n * ```typescript\n * Clipboard.addClipboardListener(({ contentTypes }: ClipboardEvent) => {\n *   if (contentTypes.includes(Clipboard.ContentType.PLAIN_TEXT)) {\n *     Clipboard.getStringAsync().then(content => {\n *       alert('Copy pasta! Here\\'s the string that was copied: ' + content)\n *     });\n *   } else if (contentTypes.includes(Clipboard.ContentType.IMAGE)) {\n *     alert('Yay! Clipboard contains an image');\n *   }\n * });\n * ```\n */\nexport function addClipboardListener(listener: (event: ClipboardEvent) => void): EventSubscription {\n  // TODO: Get rid of this wrapper once we remove deprecated `content` property (not before SDK47)\n  const listenerWrapper = (event: ClipboardEvent) => {\n    const wrappedEvent: ClipboardEvent = {\n      ...event,\n      get content(): string {\n        console.warn(\n          \"The 'content' property of the clipboard event is deprecated. Use 'getStringAsync()' instead to get clipboard content\"\n        );\n        return '';\n      },\n    };\n    listener(wrappedEvent);\n  };\n  return ExpoClipboard.addListener(onClipboardEventName, listenerWrapper);\n}\n\n/**\n * Removes the listener added by addClipboardListener. This method is a no-op on Web.\n *\n * @param subscription The subscription to remove (created by addClipboardListener).\n *\n * @example\n * ```typescript\n * const subscription = addClipboardListener(() => {\n *   alert('Copy pasta!');\n * });\n * removeClipboardListener(subscription);\n * ```\n */\nexport function removeClipboardListener(subscription: EventSubscription) {\n  subscription.remove();\n}\n\n/**\n * Property that determines if the `ClipboardPasteButton` is available.\n *\n * This requires the users device to be using at least iOS 16.\n *\n * `true` if the component is available, and `false` otherwise.\n */\nexport const isPasteButtonAvailable: boolean =\n  Platform.OS === 'ios' ? ExpoClipboard.isPasteButtonAvailable : false;\n\nexport * from './Clipboard.types';\nexport { ClipboardPasteButtonProps } from './ClipboardPasteButton';\n\nexport { ClipboardPasteButton };\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}