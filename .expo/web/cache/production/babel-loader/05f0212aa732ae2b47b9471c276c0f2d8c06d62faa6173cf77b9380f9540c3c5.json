{"ast":null,"code":"function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import{ContinousBaseGesture}from'./gesture';const _worklet_6555184671956_init_data={code:\"function changeEventCalculator_reactNativeGestureHandler_forceTouchGestureJs1(current,previous){let changePayload;if(previous===undefined){changePayload={forceChange:current.force};}else{changePayload={forceChange:current.force-previous.force};}return{...current,...changePayload};}\"};const changeEventCalculator=function(){const changeEventCalculator=function(current,previous){let changePayload;if(previous===undefined){changePayload={forceChange:current.force};}else{changePayload={forceChange:current.force-previous.force};}return Object.assign({},current,changePayload);};changeEventCalculator.__closure={};changeEventCalculator.__workletHash=6555184671956;changeEventCalculator.__initData=_worklet_6555184671956_init_data;return changeEventCalculator;}();export class ForceTouchGesture extends ContinousBaseGesture{constructor(){super();_defineProperty(this,\"config\",{});this.handlerName='ForceTouchGestureHandler';}minForce(force){this.config.minForce=force;return this;}maxForce(force){this.config.maxForce=force;return this;}feedbackOnActivation(value){this.config.feedbackOnActivation=value;return this;}onChange(callback){this.handlers.changeEventCalculator=changeEventCalculator;return super.onChange(callback);}}","map":{"version":3,"names":["ContinousBaseGesture","_worklet_6555184671956_init_data","code","changeEventCalculator","current","previous","changePayload","undefined","forceChange","force","Object","assign","__closure","__workletHash","__initData","ForceTouchGesture","constructor","_defineProperty","handlerName","minForce","config","maxForce","feedbackOnActivation","value","onChange","callback","handlers"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/forceTouchGesture.ts"],"sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport { ForceTouchGestureConfig } from '../ForceTouchGestureHandler';\nimport type { ForceTouchGestureHandlerEventPayload } from '../GestureHandlerEventPayload';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\nexport type ForceTouchGestureChangeEventPayload = {\n  forceChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: ForceTouchGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      forceChange: current.force,\n    };\n  } else {\n    changePayload = {\n      forceChange: current.force - previous.force,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class ForceTouchGesture extends ContinousBaseGesture<\n  ForceTouchGestureHandlerEventPayload,\n  ForceTouchGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & ForceTouchGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'ForceTouchGestureHandler';\n  }\n\n  /**\n   * A minimal pressure that is required before gesture can activate.\n   * Should be a value from range [0.0, 1.0]. Default is 0.2.\n   * @param force\n   */\n  minForce(force: number) {\n    this.config.minForce = force;\n    return this;\n  }\n\n  /**\n   * A maximal pressure that could be applied for gesture.\n   * If the pressure is greater, gesture fails. Should be a value from range [0.0, 1.0].\n   * @param force\n   */\n  maxForce(force: number) {\n    this.config.maxForce = force;\n    return this;\n  }\n\n  /**\n   * Value defining if haptic feedback has to be performed on activation.\n   * @param value\n   */\n  feedbackOnActivation(value: boolean) {\n    this.config.feedbackOnActivation = value;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        GestureUpdateEvent<\n          ForceTouchGestureHandlerEventPayload &\n            ForceTouchGestureChangeEventPayload\n        >\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, ForceTouchGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type ForceTouchGestureType = InstanceType<typeof ForceTouchGesture>;\n"],"mappings":"sLAAA,OAA4BA,oBAA5B,KAAwD,WAAxD,OAAAC,gCAAA,EAAAC,IAAA,qSAAAC,qBAAA,CASA,iBAAAA,qBAAA,SAAAA,CACEC,OADF,CAEEC,QAFF,CAGE,CAEA,GAAI,CAAAC,aAAJ,CACA,GAAID,QAAQ,GAAKE,SAAjB,CAA4B,CAC1BD,aAAa,CAAG,CACdE,WAAW,CAAEJ,OAAO,CAACK,KADP,CAAhB,CAGD,CAJD,IAIO,CACLH,aAAa,CAAG,CACdE,WAAW,CAAEJ,OAAO,CAACK,KAAR,CAAgBJ,QAAQ,CAACI,KADxB,CAAhB,CAGD,CAED,OAAAC,MAAA,CAAAC,MAAA,IAAYP,OAAL,CAAiBE,aAAA,EACzB,EAAAH,qBAAA,CAAAS,SAAA,IAAAT,qBAAA,CAAAU,aAAA,eAAAV,qBAAA,CAAAW,UAAA,CAAAb,gCAAA,QAAAE,qBAAA,EAjBD,GAmBA,MAAO,MAAM,CAAAY,iBAAN,QAAgC,CAAAf,oBAGrC,CAGAgB,WAAWA,CAAA,CAAG,CACZ,QADYC,eAAA,eAF+C,EAE/C,EAGZ,KAAKC,WAAL,CAAmB,0BAAnB,CACD,CAODC,QAAQA,CAACV,KAAD,CAAgB,CACtB,KAAKW,MAAL,CAAYD,QAAZ,CAAuBV,KAAvB,CACA,MAAO,KAAP,CACD,CAODY,QAAQA,CAACZ,KAAD,CAAgB,CACtB,KAAKW,MAAL,CAAYC,QAAZ,CAAuBZ,KAAvB,CACA,MAAO,KAAP,CACD,CAMDa,oBAAoBA,CAACC,KAAD,CAAiB,CACnC,KAAKH,MAAL,CAAYE,oBAAZ,CAAmCC,KAAnC,CACA,MAAO,KAAP,CACD,CAEDC,QAAQA,CACNC,QADM,CASN,CAEA,KAAKC,QAAL,CAAcvB,qBAAd,CAAsCA,qBAAtC,CACA,MAAO,OAAMqB,QAAN,CAAeC,QAAf,CAAP,CACD,CAnDD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}