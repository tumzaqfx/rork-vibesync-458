{"ast":null,"code":"import{useCallback,useEffect,useImperativeHandle}from'react';import{REGISTER_DOM_IMPERATIVE_HANDLE_PROPS}from'./injection';export function useDOMImperativeHandle(ref,init,deps){const isTargetWeb=typeof window.ReactNativeWebView==='undefined';const stubHandlerFactory=useCallback(()=>({}),deps??[]);useImperativeHandle(ref,isTargetWeb?init:stubHandlerFactory,deps);useEffect(()=>{if(!isTargetWeb){globalThis._domRefProxy=init();window.ReactNativeWebView.postMessage(JSON.stringify({type:REGISTER_DOM_IMPERATIVE_HANDLE_PROPS,data:Object.keys(globalThis._domRefProxy)}));}return()=>{if(!isTargetWeb){globalThis._domRefProxy=undefined;}};},deps);}","map":{"version":3,"names":["useCallback","useEffect","useImperativeHandle","REGISTER_DOM_IMPERATIVE_HANDLE_PROPS","useDOMImperativeHandle","ref","init","deps","isTargetWeb","window","ReactNativeWebView","stubHandlerFactory","globalThis","_domRefProxy","postMessage","JSON","stringify","type","data","Object","keys","undefined"],"sources":["/home/user/rork-vibesync-458/node_modules/expo/src/dom/dom-hooks.ts"],"sourcesContent":["import { useCallback, useEffect, useImperativeHandle, type DependencyList, type Ref } from 'react';\n\nimport type { DOMImperativeFactory } from './dom.types';\nimport { REGISTER_DOM_IMPERATIVE_HANDLE_PROPS } from './injection';\n\ndeclare namespace globalThis {\n  let _domRefProxy: undefined | unknown;\n}\n\n/**\n * A React `useImperativeHandle` like hook for DOM components.\n *\n */\nexport function useDOMImperativeHandle<T extends DOMImperativeFactory>(\n  ref: Ref<T>,\n  init: () => T,\n  deps?: DependencyList\n) {\n  // @ts-expect-error: Added via react-native-webview\n  const isTargetWeb = typeof window.ReactNativeWebView === 'undefined';\n\n  const stubHandlerFactory = useCallback(() => ({}) as T, deps ?? []);\n\n  // This standard useImperativeHandle hook is serving for web\n  useImperativeHandle(ref, isTargetWeb ? init : stubHandlerFactory, deps);\n\n  // This `globalThis._domRefProxy` is serving for native\n  useEffect(() => {\n    if (!isTargetWeb) {\n      globalThis._domRefProxy = init();\n      // TODO(@kitten): Type `ReactNativeWebView` and the message data\n      // @ts-expect-error: Added via react-native-webview\n      window.ReactNativeWebView.postMessage(\n        JSON.stringify({\n          type: REGISTER_DOM_IMPERATIVE_HANDLE_PROPS,\n          data: Object.keys(globalThis._domRefProxy as any),\n        })\n      );\n    }\n    return () => {\n      if (!isTargetWeb) {\n        globalThis._domRefProxy = undefined;\n      }\n    };\n  }, deps);\n}\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,SAAS,CAAEC,mBAAmB,KAAuC,OAAO,CAGlG,OAASC,oCAAoC,KAAQ,aAAa,CAUlE,MAAO,SAAS,CAAAC,sBAAsBA,CACpCC,GAAW,CACXC,IAAa,CACbC,IAAqB,CACrB,CAEA,KAAM,CAAAC,WAAW,CAAG,MAAO,CAAAC,MAAM,CAACC,kBAAkB,GAAK,WAAW,CAEpE,KAAM,CAAAC,kBAAkB,CAAGX,WAAW,CAAC,KAAO,CAAC,CAAC,CAAM,CAAEO,IAAI,EAAI,EAAE,CAAC,CAGnEL,mBAAmB,CAACG,GAAG,CAAEG,WAAW,CAAGF,IAAI,CAAGK,kBAAkB,CAAEJ,IAAI,CAAC,CAGvEN,SAAS,CAAC,IAAM,CACd,GAAI,CAACO,WAAW,CAAE,CAChBI,UAAU,CAACC,YAAY,CAAGP,IAAI,CAAC,CAAC,CAGhCG,MAAM,CAACC,kBAAkB,CAACI,WAAW,CACnCC,IAAI,CAACC,SAAS,CAAC,CACbC,IAAI,CAAEd,oCAAoC,CAC1Ce,IAAI,CAAEC,MAAM,CAACC,IAAI,CAACR,UAAU,CAACC,YAAmB,CAClD,CAAC,CACH,CAAC,CACH,CACA,MAAO,IAAM,CACX,GAAI,CAACL,WAAW,CAAE,CAChBI,UAAU,CAACC,YAAY,CAAGQ,SAAS,CACrC,CACF,CAAC,CACH,CAAC,CAAEd,IAAI,CAAC,CACV","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}