{"ast":null,"code":"\"use strict\";import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"linking\"];import{createComponentForStaticNavigation,createPathConfigForStaticNavigation}from'@react-navigation/core';import*as React from'react';import{NavigationContainer}from\"./NavigationContainer.js\";import{jsx as _jsx}from\"react/jsx-runtime\";export function createStaticNavigation(tree){const Component=createComponentForStaticNavigation(tree,'RootNavigator');function Navigation(_ref,ref){let{linking}=_ref,rest=_objectWithoutPropertiesLoose(_ref,_excluded);const linkingConfig=React.useMemo(()=>{const screens=createPathConfigForStaticNavigation(tree,{initialRouteName:linking?.config?.initialRouteName},linking?.enabled==='auto');if(!screens)return;return{path:linking?.config?.path,initialRouteName:linking?.config?.initialRouteName,screens};},[linking?.enabled,linking?.config?.path,linking?.config?.initialRouteName]);const memoizedLinking=React.useMemo(()=>{if(!linking){return undefined;}const enabled=typeof linking.enabled==='boolean'?linking.enabled:linkingConfig?.screens!=null;return Object.assign({},linking,{enabled,config:linkingConfig});},[linking,linkingConfig]);if(linking?.enabled===true&&linkingConfig?.screens==null){throw new Error('Linking is enabled but no linking configuration was found for the screens.\\n\\n'+'To solve this:\\n'+\"- Specify a 'linking' property for the screens you want to link to.\\n\"+\"- Or set 'linking.enabled' to 'auto' to generate paths automatically.\\n\\n\"+'See usage guide: https://reactnavigation.org/docs/static-configuration#linking');}return _jsx(NavigationContainer,Object.assign({},rest,{ref:ref,linking:memoizedLinking,children:_jsx(Component,{})}));}return React.forwardRef(Navigation);}","map":{"version":3,"names":["createComponentForStaticNavigation","createPathConfigForStaticNavigation","React","NavigationContainer","jsx","_jsx","createStaticNavigation","tree","Component","Navigation","_ref","ref","linking","rest","_objectWithoutPropertiesLoose","_excluded","linkingConfig","useMemo","screens","initialRouteName","config","enabled","path","memoizedLinking","undefined","Object","assign","Error","children","forwardRef"],"sources":["/home/user/rork-vibesync-458/node_modules/@react-navigation/native/src/createStaticNavigation.tsx"],"sourcesContent":["import {\n  createComponentForStaticNavigation,\n  createPathConfigForStaticNavigation,\n  type NavigationContainerRef,\n  type ParamListBase,\n  type StaticNavigation,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport { NavigationContainer } from './NavigationContainer';\nimport type { LinkingOptions } from './types';\n\ntype Props = Omit<\n  React.ComponentProps<typeof NavigationContainer>,\n  'linking' | 'children'\n> & {\n  /**\n   * Options for deep linking.\n   */\n  linking?: Omit<LinkingOptions<ParamListBase>, 'config' | 'enabled'> & {\n    /**\n     * Whether deep link handling should be enabled.\n     * Defaults to `true` if any `linking` options are specified, `false` otherwise.\n     *\n     * When 'auto' is specified, all leaf screens will get a autogenerated path.\n     * The generated path will be a kebab-case version of the screen name.\n     * This can be overridden for specific screens by specifying `linking` for the screen.\n     */\n    enabled?: 'auto' | true | false;\n    /**\n     * Additional configuration\n     */\n    config?: Omit<\n      NonNullable<LinkingOptions<ParamListBase>['config']>,\n      'screens'\n    >;\n  };\n};\n\n/**\n * Create a navigation component from a static navigation config.\n * The returned component is a wrapper around `NavigationContainer`.\n *\n * @param tree Static navigation config.\n * @returns Navigation component to use in your app.\n */\nexport function createStaticNavigation(tree: StaticNavigation<any, any, any>) {\n  const Component = createComponentForStaticNavigation(tree, 'RootNavigator');\n\n  function Navigation(\n    { linking, ...rest }: Props,\n    ref: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const linkingConfig = React.useMemo(() => {\n      const screens = createPathConfigForStaticNavigation(\n        tree,\n        { initialRouteName: linking?.config?.initialRouteName },\n        linking?.enabled === 'auto'\n      );\n\n      if (!screens) return;\n\n      return {\n        path: linking?.config?.path,\n        initialRouteName: linking?.config?.initialRouteName,\n        screens,\n      };\n    }, [\n      linking?.enabled,\n      linking?.config?.path,\n      linking?.config?.initialRouteName,\n    ]);\n\n    const memoizedLinking = React.useMemo(() => {\n      if (!linking) {\n        return undefined;\n      }\n\n      const enabled =\n        typeof linking.enabled === 'boolean'\n          ? linking.enabled\n          : linkingConfig?.screens != null;\n\n      return {\n        ...linking,\n        enabled,\n        config: linkingConfig,\n      };\n    }, [linking, linkingConfig]);\n\n    if (linking?.enabled === true && linkingConfig?.screens == null) {\n      throw new Error(\n        'Linking is enabled but no linking configuration was found for the screens.\\n\\n' +\n          'To solve this:\\n' +\n          \"- Specify a 'linking' property for the screens you want to link to.\\n\" +\n          \"- Or set 'linking.enabled' to 'auto' to generate paths automatically.\\n\\n\" +\n          'See usage guide: https://reactnavigation.org/docs/static-configuration#linking'\n      );\n    }\n\n    return (\n      <NavigationContainer {...rest} ref={ref} linking={memoizedLinking}>\n        <Component />\n      </NavigationContainer>\n    );\n  }\n\n  return React.forwardRef(Navigation);\n}\n"],"mappings":"wIAAA,OACEA,kCAAkC,CAClCC,mCAAmC,KAI9B,wBAAwB,CAC/B,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAE9B,OAASC,mBAAmB,KAAQ,0BAAuB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAqC5D,MAAO,SAAS,CAAAC,sBAAsBA,CAACC,IAAqC,CAAE,CAC5E,KAAM,CAAAC,SAAS,CAAGR,kCAAkC,CAACO,IAAI,CAAE,eAAe,CAAC,CAE3E,QAAS,CAAAE,UAAUA,CAAAC,IAAA,CAEjBC,GAAqD,CACrD,IAFA,CAAEC,OAAwB,CAAC,CAAAF,IAAA,CAAbG,IAAA,CAAAC,6BAAA,CAAAJ,IAAA,CAAAK,SAAA,EAGd,KAAM,CAAAC,aAAa,CAAGd,KAAK,CAACe,OAAO,CAAC,IAAM,CACxC,KAAM,CAAAC,OAAO,CAAGjB,mCAAmC,CACjDM,IAAI,CACJ,CAAEY,gBAAgB,CAAEP,OAAO,EAAEQ,MAAM,EAAED,gBAAiB,CAAC,CACvDP,OAAO,EAAES,OAAO,GAAK,MACvB,CAAC,CAED,GAAI,CAACH,OAAO,CAAE,OAEd,MAAO,CACLI,IAAI,CAAEV,OAAO,EAAEQ,MAAM,EAAEE,IAAI,CAC3BH,gBAAgB,CAAEP,OAAO,EAAEQ,MAAM,EAAED,gBAAgB,CACnDD,OACF,CAAC,CACH,CAAC,CAAE,CACDN,OAAO,EAAES,OAAO,CAChBT,OAAO,EAAEQ,MAAM,EAAEE,IAAI,CACrBV,OAAO,EAAEQ,MAAM,EAAED,gBAAgB,CAClC,CAAC,CAEF,KAAM,CAAAI,eAAe,CAAGrB,KAAK,CAACe,OAAO,CAAC,IAAM,CAC1C,GAAI,CAACL,OAAO,CAAE,CACZ,MAAO,CAAAY,SAAS,CAClB,CAEA,KAAM,CAAAH,OAAO,CACX,MAAO,CAAAT,OAAO,CAACS,OAAO,GAAK,SAAS,CAChCT,OAAO,CAACS,OAAO,CACfL,aAAa,EAAEE,OAAO,EAAI,IAAI,CAEpC,OAAAO,MAAA,CAAAC,MAAA,IACKd,OAAO,EACVS,OAAO,CACPD,MAAM,CAAEJ,aAAA,GAEZ,CAAC,CAAE,CAACJ,OAAO,CAAEI,aAAa,CAAC,CAAC,CAE5B,GAAIJ,OAAO,EAAES,OAAO,GAAK,IAAI,EAAIL,aAAa,EAAEE,OAAO,EAAI,IAAI,CAAE,CAC/D,KAAM,IAAI,CAAAS,KAAK,CACb,gFAAgF,CAC9E,kBAAkB,CAClB,uEAAuE,CACvE,2EAA2E,CAC3E,gFACJ,CAAC,CACH,CAEA,MACE,CAAAtB,IAAA,CAACF,mBAAmB,CAAAsB,MAAA,CAAAC,MAAA,IAAKb,IAAI,EAAEF,GAAG,CAAEA,GAAI,CAACC,OAAO,CAAEW,eAAgB,CAAAK,QAAA,CAChEvB,IAAA,CAACG,SAAS,GAAE,GACO,CAAC,CAE1B,CAEA,MAAO,CAAAN,KAAK,CAAC2B,UAAU,CAACpB,UAAU,CAAC,CACrC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}