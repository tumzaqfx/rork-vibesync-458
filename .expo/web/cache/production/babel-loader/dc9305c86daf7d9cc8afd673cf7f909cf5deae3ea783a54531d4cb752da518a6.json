{"ast":null,"code":"import{PermissionStatus,createPermissionHook,LegacyEventEmitter,Platform}from'expo-modules-core';import{isAudioEnabled,throwIfAudioIsDisabled}from'./AudioAvailability';import{RecordingOptionsPresets}from'./RecordingConstants';import{Sound}from'./Sound';import{_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS}from'../AV';import ExponentAV from'../ExponentAV';let _recorderExists=false;const eventEmitter=false?new LegacyEventEmitter(ExponentAV):null;export async function getPermissionsAsync(){return ExponentAV.getPermissionsAsync();}export async function requestPermissionsAsync(){return ExponentAV.requestPermissionsAsync();}export const usePermissions=createPermissionHook({getMethod:getPermissionsAsync,requestMethod:requestPermissionsAsync});export class Recording{_subscription=null;_canRecord=false;_isDoneRecording=false;_finalDurationMillis=0;_uri=null;_onRecordingStatusUpdate=null;_progressUpdateTimeoutVariable=null;_progressUpdateIntervalMillis=_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;_options=null;_cleanupForUnloadedRecorder=async finalStatus=>{this._canRecord=false;this._isDoneRecording=true;this._finalDurationMillis=finalStatus?.durationMillis??0;_recorderExists=false;if(this._subscription){this._subscription.remove();this._subscription=null;}this._disablePolling();return await this.getStatusAsync();};_pollingLoop=async()=>{if(isAudioEnabled()&&this._canRecord&&this._onRecordingStatusUpdate!=null){this._progressUpdateTimeoutVariable=setTimeout(this._pollingLoop,this._progressUpdateIntervalMillis);try{await this.getStatusAsync();}catch{this._disablePolling();}}};_disablePolling(){if(this._progressUpdateTimeoutVariable!=null){clearTimeout(this._progressUpdateTimeoutVariable);this._progressUpdateTimeoutVariable=null;}}_enablePollingIfNecessaryAndPossible(){if(isAudioEnabled()&&this._canRecord&&this._onRecordingStatusUpdate!=null){this._disablePolling();this._pollingLoop();}}_callOnRecordingStatusUpdateForNewStatus(status){if(this._onRecordingStatusUpdate!=null){this._onRecordingStatusUpdate(status);}}async _performOperationAndHandleStatusAsync(operation){throwIfAudioIsDisabled();if(this._canRecord){const status=await operation();this._callOnRecordingStatusUpdateForNewStatus(status);return status;}else{throw new Error('Cannot complete operation because this recorder is not ready to record.');}}static createAsync=async(options=RecordingOptionsPresets.LOW_QUALITY,onRecordingStatusUpdate=null,progressUpdateIntervalMillis=null)=>{const recording=new Recording();if(progressUpdateIntervalMillis){recording._progressUpdateIntervalMillis=progressUpdateIntervalMillis;}recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);await recording.prepareToRecordAsync(Object.assign({},options,{keepAudioActiveHint:true}));try{const status=await recording.startAsync();return{recording,status};}catch(err){recording.stopAndUnloadAsync().catch(_e=>{});throw err;}};getStatusAsync=async()=>{if(this._canRecord){return this._performOperationAndHandleStatusAsync(()=>ExponentAV.getAudioRecordingStatus());}const status={canRecord:false,isRecording:false,isDoneRecording:this._isDoneRecording,durationMillis:this._finalDurationMillis};this._callOnRecordingStatusUpdateForNewStatus(status);return status;};setOnRecordingStatusUpdate(onRecordingStatusUpdate){this._onRecordingStatusUpdate=onRecordingStatusUpdate;if(onRecordingStatusUpdate==null){this._disablePolling();}else{this._enablePollingIfNecessaryAndPossible();}this.getStatusAsync();}setProgressUpdateInterval(progressUpdateIntervalMillis){this._progressUpdateIntervalMillis=progressUpdateIntervalMillis;this.getStatusAsync();}async prepareToRecordAsync(options=RecordingOptionsPresets.LOW_QUALITY){throwIfAudioIsDisabled();if(_recorderExists){throw new Error('Only one Recording object can be prepared at a given time.');}if(this._isDoneRecording){throw new Error('This Recording object is done recording; you must make a new one.');}if(!options||!options.android||!options.ios){throw new Error('You must provide recording options for android and ios in order to prepare to record.');}const extensionRegex=/^\\.\\w+$/;if(!options.android.extension||!options.ios.extension||!extensionRegex.test(options.android.extension)||!extensionRegex.test(options.ios.extension)){throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);}if(!this._canRecord){if(eventEmitter){this._subscription=eventEmitter.addListener('Expo.Recording.recorderUnloaded',this._cleanupForUnloadedRecorder);}const{uri,status}=await ExponentAV.prepareAudioRecorder(options);_recorderExists=true;this._uri=uri;this._options=options;this._canRecord=true;const currentStatus=Object.assign({},status,{canRecord:true});this._callOnRecordingStatusUpdateForNewStatus(currentStatus);this._enablePollingIfNecessaryAndPossible();return currentStatus;}else{throw new Error('This Recording object is already prepared to record.');}}async getAvailableInputs(){return ExponentAV.getAvailableInputs();}async getCurrentInput(){return ExponentAV.getCurrentInput();}async setInput(inputUid){return ExponentAV.setInput(inputUid);}async startAsync(){return this._performOperationAndHandleStatusAsync(()=>ExponentAV.startAudioRecording());}async pauseAsync(){return this._performOperationAndHandleStatusAsync(()=>ExponentAV.pauseAudioRecording());}async stopAndUnloadAsync(){if(!this._canRecord){if(this._isDoneRecording){throw new Error('Cannot unload a Recording that has already been unloaded.');}else{throw new Error('Cannot unload a Recording that has not been prepared.');}}let stopResult;let stopError;try{stopResult=await ExponentAV.stopAudioRecording();}catch(err){stopError=err;}if(true&&stopResult?.uri!==undefined){this._uri=stopResult.uri;}await ExponentAV.unloadAudioRecorder();const status=await this._cleanupForUnloadedRecorder(stopResult);return stopError?Promise.reject(stopError):status;}getURI(){return this._uri;}async createNewLoadedSound(initialStatus={},onPlaybackStatusUpdate=null){console.warn(`createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`);return this.createNewLoadedSoundAsync(initialStatus,onPlaybackStatusUpdate);}async createNewLoadedSoundAsync(initialStatus={},onPlaybackStatusUpdate=null){if(this._uri==null||!this._isDoneRecording){throw new Error('Cannot create sound when the Recording has not finished!');}return Sound.createAsync({uri:this._uri},initialStatus,onPlaybackStatusUpdate,false);}}export{PermissionStatus};export*from'./RecordingConstants';export*from'./Recording.types';","map":{"version":3,"names":["PermissionStatus","createPermissionHook","LegacyEventEmitter","Platform","isAudioEnabled","throwIfAudioIsDisabled","RecordingOptionsPresets","Sound","_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS","ExponentAV","_recorderExists","eventEmitter","getPermissionsAsync","requestPermissionsAsync","usePermissions","getMethod","requestMethod","Recording","_subscription","_canRecord","_isDoneRecording","_finalDurationMillis","_uri","_onRecordingStatusUpdate","_progressUpdateTimeoutVariable","_progressUpdateIntervalMillis","_options","_cleanupForUnloadedRecorder","finalStatus","durationMillis","remove","_disablePolling","getStatusAsync","_pollingLoop","setTimeout","clearTimeout","_enablePollingIfNecessaryAndPossible","_callOnRecordingStatusUpdateForNewStatus","status","_performOperationAndHandleStatusAsync","operation","Error","createAsync","options","LOW_QUALITY","onRecordingStatusUpdate","progressUpdateIntervalMillis","recording","setOnRecordingStatusUpdate","prepareToRecordAsync","Object","assign","keepAudioActiveHint","startAsync","err","stopAndUnloadAsync","catch","_e","getAudioRecordingStatus","canRecord","isRecording","isDoneRecording","setProgressUpdateInterval","android","ios","extensionRegex","extension","test","toString","addListener","uri","prepareAudioRecorder","currentStatus","getAvailableInputs","getCurrentInput","setInput","inputUid","startAudioRecording","pauseAsync","pauseAudioRecording","stopResult","stopError","stopAudioRecording","undefined","unloadAudioRecorder","Promise","reject","getURI","createNewLoadedSound","initialStatus","onPlaybackStatusUpdate","console","warn","createNewLoadedSoundAsync"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-av/src/Audio/Recording.ts"],"sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  createPermissionHook,\n  LegacyEventEmitter,\n  type EventSubscription,\n  Platform,\n} from 'expo-modules-core';\n\nimport { isAudioEnabled, throwIfAudioIsDisabled } from './AudioAvailability';\nimport {\n  RecordingInput,\n  RecordingObject,\n  RecordingOptions,\n  RecordingStatus,\n} from './Recording.types';\nimport { RecordingOptionsPresets } from './RecordingConstants';\nimport { Sound, SoundObject } from './Sound';\nimport {\n  _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n} from '../AV';\nimport ExponentAV from '../ExponentAV';\n\nlet _recorderExists: boolean = false;\nconst eventEmitter = Platform.OS === 'android' ? new LegacyEventEmitter(ExponentAV) : null;\n\n/**\n * Checks user's permissions for audio recording.\n * @return A promise that resolves to an object of type `PermissionResponse`.\n * @platform android\n * @platform ios\n */\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  return ExponentAV.getPermissionsAsync();\n}\n\n/**\n * Asks the user to grant permissions for audio recording.\n * @return A promise that resolves to an object of type `PermissionResponse`.\n * @platform android\n * @platform ios\n */\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  return ExponentAV.requestPermissionsAsync();\n}\n\n/**\n * Check or request permissions to record audio.\n * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [permissionResponse, requestPermission] = Audio.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook({\n  getMethod: getPermissionsAsync,\n  requestMethod: requestPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * > **warning** **Warning**: Experimental for web.\n *\n * This class represents an audio recording. After creating an instance of this class, `prepareToRecordAsync`\n * must be called in order to record audio. Once recording is finished, call `stopAndUnloadAsync`. Note that\n * only one recorder is allowed to exist in the state between `prepareToRecordAsync` and `stopAndUnloadAsync`\n * at any given time.\n *\n * Note that your experience must request audio recording permissions in order for recording to function.\n * See the [`Permissions` module](/guides/permissions) for more details.\n *\n * Additionally, audio recording is [not supported in the iOS Simulator](/workflow/ios-simulator/#limitations).\n *\n * @example\n * ```ts\n * const recording = new Audio.Recording();\n * try {\n *   await recording.prepareToRecordAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY);\n *   await recording.startAsync();\n *   // You are now recording!\n * } catch (error) {\n *   // An error occurred!\n * }\n * ```\n *\n * @return A newly constructed instance of `Audio.Recording`.\n * @platform android\n * @platform ios\n */\nexport class Recording {\n  _subscription: EventSubscription | null = null;\n  _canRecord: boolean = false;\n  _isDoneRecording: boolean = false;\n  _finalDurationMillis: number = 0;\n  _uri: string | null = null;\n  _onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null;\n  _progressUpdateTimeoutVariable: number | null = null;\n  _progressUpdateIntervalMillis: number = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n  _options: RecordingOptions | null = null;\n\n  // Internal methods\n\n  _cleanupForUnloadedRecorder = async (finalStatus?: RecordingStatus) => {\n    this._canRecord = false;\n    this._isDoneRecording = true;\n    this._finalDurationMillis = finalStatus?.durationMillis ?? 0;\n    _recorderExists = false;\n    if (this._subscription) {\n      this._subscription.remove();\n      this._subscription = null;\n    }\n    this._disablePolling();\n    return await this.getStatusAsync(); // Automatically calls onRecordingStatusUpdate for the final state.\n  };\n\n  _pollingLoop = async () => {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._progressUpdateTimeoutVariable = setTimeout(\n        this._pollingLoop,\n        this._progressUpdateIntervalMillis\n      ) as any;\n      try {\n        await this.getStatusAsync();\n      } catch {\n        this._disablePolling();\n      }\n    }\n  };\n\n  _disablePolling() {\n    if (this._progressUpdateTimeoutVariable != null) {\n      clearTimeout(this._progressUpdateTimeoutVariable);\n      this._progressUpdateTimeoutVariable = null;\n    }\n  }\n\n  _enablePollingIfNecessaryAndPossible() {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._disablePolling();\n      this._pollingLoop();\n    }\n  }\n\n  _callOnRecordingStatusUpdateForNewStatus(status: RecordingStatus) {\n    if (this._onRecordingStatusUpdate != null) {\n      this._onRecordingStatusUpdate(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<RecordingStatus>\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n    if (this._canRecord) {\n      const status = await operation();\n      this._callOnRecordingStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because this recorder is not ready to record.');\n    }\n  }\n\n  /**\n   * Creates and starts a recording using the given options, with optional `onRecordingStatusUpdate` and `progressUpdateIntervalMillis`.\n   *\n   * ```ts\n   * const { recording, status } = await Audio.Recording.createAsync(\n   *   options,\n   *   onRecordingStatusUpdate,\n   *   progressUpdateIntervalMillis\n   * );\n   *\n   * // Which is equivalent to the following:\n   * const recording = new Audio.Recording();\n   * await recording.prepareToRecordAsync(options);\n   * recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n   * await recording.startAsync();\n   * ```\n   *\n   * @param options Options for the recording, including sample rate, bitrate, channels, format, encoder, and extension. If no options are passed to,\n   * the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`. See below for details on `RecordingOptions`.\n   * @param onRecordingStatusUpdate A function taking a single parameter `status` (a dictionary, described in `getStatusAsync`).\n   * @param progressUpdateIntervalMillis The interval between calls of `onRecordingStatusUpdate`. This value defaults to 500 milliseconds.\n   *\n   * @example\n   * ```ts\n   * try {\n   *   const { recording: recordingObject, status } = await Audio.Recording.createAsync(\n   *     Audio.RecordingOptionsPresets.HIGH_QUALITY\n   *   );\n   *   // You are now recording!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the following dictionary if creation succeeded.\n   */\n  static createAsync = async (\n    options: RecordingOptions = RecordingOptionsPresets.LOW_QUALITY,\n    onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null,\n    progressUpdateIntervalMillis: number | null = null\n  ): Promise<RecordingObject> => {\n    const recording: Recording = new Recording();\n    if (progressUpdateIntervalMillis) {\n      recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    }\n    recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n    await recording.prepareToRecordAsync({\n      ...options,\n      keepAudioActiveHint: true,\n    });\n    try {\n      const status = await recording.startAsync();\n      return { recording, status };\n    } catch (err) {\n      recording.stopAndUnloadAsync().catch((_e) => {\n        // Since there was an issue with starting, when trying calling stopAndUnloadAsync\n        // the promise is rejected which is unhandled\n        // lets catch it since its expected\n      });\n      throw err;\n    }\n  };\n\n  // Get status API\n\n  /**\n   * Gets the `status` of the `Recording`.\n   * @return A `Promise` that is resolved with the `RecordingStatus` object.\n   */\n  getStatusAsync = async (): Promise<RecordingStatus> => {\n    // Automatically calls onRecordingStatusUpdate.\n    if (this._canRecord) {\n      return this._performOperationAndHandleStatusAsync(() => ExponentAV.getAudioRecordingStatus());\n    }\n    const status = {\n      canRecord: false,\n      isRecording: false,\n      isDoneRecording: this._isDoneRecording,\n      durationMillis: this._finalDurationMillis,\n    };\n    this._callOnRecordingStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  /**\n   * Sets a function to be called regularly with the `RecordingStatus` of the `Recording`.\n   *\n   * `onRecordingStatusUpdate` will be called when another call to the API for this recording completes (such as `prepareToRecordAsync()`,\n   * `startAsync()`, `getStatusAsync()`, or `stopAndUnloadAsync()`), and will also be called at regular intervals while the recording can record.\n   * Call `setProgressUpdateInterval()` to modify the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n   *\n   * @param onRecordingStatusUpdate A function taking a single parameter `RecordingStatus`.\n   */\n  setOnRecordingStatusUpdate(onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null) {\n    this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n    if (onRecordingStatusUpdate == null) {\n      this._disablePolling();\n    } else {\n      this._enablePollingIfNecessaryAndPossible();\n    }\n    this.getStatusAsync();\n  }\n\n  /**\n   * Sets the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n   * See `setOnRecordingStatusUpdate` for details. This value defaults to 500 milliseconds.\n   * @param progressUpdateIntervalMillis The new interval between calls of `onRecordingStatusUpdate`.\n   */\n  setProgressUpdateInterval(progressUpdateIntervalMillis: number) {\n    this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    this.getStatusAsync();\n  }\n\n  // Record API\n\n  /**\n   * Loads the recorder into memory and prepares it for recording. This must be called before calling `startAsync()`.\n   * This method can only be called if the `Recording` instance has never yet been prepared.\n   *\n   * @param options `RecordingOptions` for the recording, including sample rate, bitrate, channels, format, encoder, and extension.\n   * If no options are passed to `prepareToRecordAsync()`, the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`.\n   *\n   * @return A `Promise` that is fulfilled when the recorder is loaded and prepared, or rejects if this failed. If another `Recording` exists\n   * in your experience that is currently prepared to record, the `Promise` will reject. If the `RecordingOptions` provided are invalid,\n   * the `Promise` will also reject. The promise is resolved with the `RecordingStatus` of the recording.\n   */\n  async prepareToRecordAsync(\n    options: RecordingOptions = RecordingOptionsPresets.LOW_QUALITY\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n\n    if (_recorderExists) {\n      throw new Error('Only one Recording object can be prepared at a given time.');\n    }\n\n    if (this._isDoneRecording) {\n      throw new Error('This Recording object is done recording; you must make a new one.');\n    }\n\n    if (!options || !options.android || !options.ios) {\n      throw new Error(\n        'You must provide recording options for android and ios in order to prepare to record.'\n      );\n    }\n\n    const extensionRegex = /^\\.\\w+$/;\n    if (\n      !options.android.extension ||\n      !options.ios.extension ||\n      !extensionRegex.test(options.android.extension) ||\n      !extensionRegex.test(options.ios.extension)\n    ) {\n      throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);\n    }\n\n    if (!this._canRecord) {\n      if (eventEmitter) {\n        this._subscription = eventEmitter.addListener(\n          'Expo.Recording.recorderUnloaded',\n          this._cleanupForUnloadedRecorder\n        );\n      }\n\n      const {\n        uri,\n        status,\n      }: {\n        uri: string | null;\n        // status is of type RecordingStatus, but without the canRecord field populated\n        status: Pick<RecordingStatus, Exclude<keyof RecordingStatus, 'canRecord'>>;\n      } = await ExponentAV.prepareAudioRecorder(options);\n      _recorderExists = true;\n      this._uri = uri;\n      this._options = options;\n      this._canRecord = true;\n\n      const currentStatus = { ...status, canRecord: true };\n      this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n      this._enablePollingIfNecessaryAndPossible();\n      return currentStatus;\n    } else {\n      throw new Error('This Recording object is already prepared to record.');\n    }\n  }\n\n  /**\n   * Returns a list of available recording inputs. This method can only be called if the `Recording` has been prepared.\n   * @return A `Promise` that is fulfilled with an array of `RecordingInput` objects.\n   */\n  async getAvailableInputs(): Promise<RecordingInput[]> {\n    return ExponentAV.getAvailableInputs();\n  }\n\n  /**\n   * Returns the currently-selected recording input. This method can only be called if the `Recording` has been prepared.\n   * @return A `Promise` that is fulfilled with a `RecordingInput` object.\n   */\n  async getCurrentInput(): Promise<RecordingInput> {\n    return ExponentAV.getCurrentInput();\n  }\n\n  /**\n   * Sets the current recording input.\n   * @param inputUid The uid of a `RecordingInput`.\n   * @return A `Promise` that is resolved if successful or rejected if not.\n   */\n  async setInput(inputUid: string): Promise<void> {\n    return ExponentAV.setInput(inputUid);\n  }\n\n  /**\n   * Begins recording. This method can only be called if the `Recording` has been prepared.\n   * @return A `Promise` that is fulfilled when recording has begun, or rejects if recording could not be started.\n   * The promise is resolved with the `RecordingStatus` of the recording.\n   */\n  async startAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.startAudioRecording());\n  }\n\n  /**\n   * Pauses recording. This method can only be called if the `Recording` has been prepared.\n   *\n   * > This is only available on Android API version 24 and later.\n   *\n   * @return A `Promise` that is fulfilled when recording has paused, or rejects if recording could not be paused.\n   * If the Android API version is less than 24, the `Promise` will reject. The promise is resolved with the\n   * `RecordingStatus` of the recording.\n   */\n  async pauseAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.pauseAudioRecording());\n  }\n\n  /**\n   * Stops the recording and deallocates the recorder from memory. This reverts the `Recording` instance\n   * to an unprepared state, and another `Recording` instance must be created in order to record again.\n   * This method can only be called if the `Recording` has been prepared.\n   *\n   * > On Android this method may fail with `E_AUDIO_NODATA` when called too soon after `startAsync` and\n   * > no audio data has been recorded yet. In that case the recorded file will be invalid and should be discarded.\n   *\n   * @return A `Promise` that is fulfilled when recording has stopped, or rejects if recording could not be stopped.\n   * The promise is resolved with the `RecordingStatus` of the recording.\n   */\n  async stopAndUnloadAsync(): Promise<RecordingStatus> {\n    if (!this._canRecord) {\n      if (this._isDoneRecording) {\n        throw new Error('Cannot unload a Recording that has already been unloaded.');\n      } else {\n        throw new Error('Cannot unload a Recording that has not been prepared.');\n      }\n    }\n    // We perform a separate native API call so that the state of the Recording can be updated with\n    // the final duration of the recording. (We cast stopStatus as Object to appease Flow)\n    let stopResult: RecordingStatus | undefined;\n    let stopError: Error | undefined;\n    try {\n      stopResult = await ExponentAV.stopAudioRecording();\n    } catch (err: any) {\n      stopError = err;\n    }\n\n    // Web has to return the URI at the end of recording, so needs a little destructuring\n    if (Platform.OS === 'web' && stopResult?.uri !== undefined) {\n      this._uri = stopResult.uri;\n    }\n\n    // Clean-up and return status\n    await ExponentAV.unloadAudioRecorder();\n    const status = await this._cleanupForUnloadedRecorder(stopResult);\n    return stopError ? Promise.reject(stopError) : status;\n  }\n\n  // Read API\n\n  /**\n   * Gets the local URI of the `Recording`. Note that this will only succeed once the `Recording` is prepared\n   * to record. On web, this will not return the URI until the recording is finished.\n   * @return A `string` with the local URI of the `Recording`, or `null` if the `Recording` is not prepared\n   * to record (or, on Web, if the recording has not finished).\n   */\n  getURI(): string | null {\n    return this._uri;\n  }\n\n  /**\n   * @deprecated Use `createNewLoadedSoundAsync()` instead.\n   */\n  async createNewLoadedSound(\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null\n  ): Promise<SoundObject> {\n    console.warn(\n      `createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`\n    );\n    return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n  }\n\n  /**\n   * Creates and loads a new `Sound` object to play back the `Recording`. Note that this will only succeed once the `Recording`\n   * is done recording and `stopAndUnloadAsync()` has been called.\n   *\n   * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n   * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet`\n   * and the default initial playback status.\n   * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n   * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject`.\n   */\n  async createNewLoadedSoundAsync(\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null\n  ): Promise<SoundObject> {\n    if (this._uri == null || !this._isDoneRecording) {\n      throw new Error('Cannot create sound when the Recording has not finished!');\n    }\n    return Sound.createAsync({ uri: this._uri }, initialStatus, onPlaybackStatusUpdate, false);\n  }\n}\n\nexport { PermissionResponse, PermissionStatus, PermissionHookOptions };\n\nexport * from './RecordingConstants';\n\nexport * from './Recording.types';\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}