{"ast":null,"code":"\"use strict\";import{getPathFromState,NavigationContainerRefContext,NavigationHelpersContext}from'@react-navigation/core';import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import{LinkingContext}from\"./LinkingContext.js\";const getStateFromParams=params=>{if(params?.state){return params.state;}if(params?.screen){return{routes:[{name:params.screen,params:params.params,state:params.screen?getStateFromParams(params.params):undefined}]};}return undefined;};export function useLinkProps({screen,params,href,action}){const root=React.useContext(NavigationContainerRefContext);const navigation=React.useContext(NavigationHelpersContext);const{options}=React.useContext(LinkingContext);const onPress=e=>{let shouldHandle=false;if(false||!e){e?.preventDefault?.();shouldHandle=true;}else{const hasModifierKey='metaKey'in e&&e.metaKey||'altKey'in e&&e.altKey||'ctrlKey'in e&&e.ctrlKey||'shiftKey'in e&&e.shiftKey;const isLeftClick='button'in e?e.button==null||e.button===0:true;const isSelfTarget=e.currentTarget&&'target'in e.currentTarget?[undefined,null,'','self'].includes(e.currentTarget.target):true;if(!hasModifierKey&&isLeftClick&&isSelfTarget){e.preventDefault?.();shouldHandle=true;}}if(shouldHandle){if(action){if(navigation){navigation.dispatch(action);}else if(root){root.dispatch(action);}else{throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");}}else{navigation?.navigate(screen,params);}}};const getPathFromStateHelper=options?.getPathFromState??getPathFromState;return{href:href??(true&&screen!=null?getPathFromStateHelper({routes:[{name:screen,params:params,state:getStateFromParams(params)}]},options?.config):undefined),accessibilityRole:'link',onPress};}","map":{"version":3,"names":["getPathFromState","NavigationContainerRefContext","NavigationHelpersContext","React","Platform","LinkingContext","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","href","action","root","useContext","navigation","options","onPress","e","shouldHandle","preventDefault","hasModifierKey","metaKey","altKey","ctrlKey","shiftKey","isLeftClick","button","isSelfTarget","currentTarget","includes","target","dispatch","Error","navigate","getPathFromStateHelper","config","accessibilityRole"],"sources":["/home/user/rork-vibesync-458/node_modules/@react-navigation/native/src/useLinkProps.tsx"],"sourcesContent":["import {\n  getPathFromState,\n  type NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  type NavigatorScreenParams,\n  type ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { type GestureResponderEvent, Platform } from 'react-native';\n\nimport { LinkingContext } from './LinkingContext';\n\nexport type LinkProps<\n  ParamList extends ReactNavigation.RootParamList,\n  RouteName extends keyof ParamList = keyof ParamList,\n> =\n  | ({\n      href?: string;\n      action?: NavigationAction;\n    } & (RouteName extends unknown\n      ? undefined extends ParamList[RouteName]\n        ? { screen: RouteName; params?: ParamList[RouteName] }\n        : { screen: RouteName; params: ParamList[RouteName] }\n      : never))\n  | {\n      href?: string;\n      action: NavigationAction;\n      screen?: undefined;\n      params?: undefined;\n    };\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error this is fine ðŸ”¥\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.screen Name of the screen to navigate to (e.g. `'Feeds'`).\n * @param props.params Params to pass to the screen to navigate to (e.g. `{ sort: 'hot' }`).\n * @param props.href Optional absolute path to use for the href (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport function useLinkProps<ParamList extends ReactNavigation.RootParamList>({\n  screen,\n  params,\n  href,\n  action,\n}: LinkProps<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      e?.preventDefault?.();\n      shouldHandle = true;\n    } else {\n      // ignore clicks with modifier keys\n      const hasModifierKey =\n        ('metaKey' in e && e.metaKey) ||\n        ('altKey' in e && e.altKey) ||\n        ('ctrlKey' in e && e.ctrlKey) ||\n        ('shiftKey' in e && e.shiftKey);\n\n      // only handle left clicks\n      const isLeftClick =\n        'button' in e ? e.button == null || e.button === 0 : true;\n\n      // let browser handle \"target=_blank\" etc.\n      const isSelfTarget =\n        e.currentTarget && 'target' in e.currentTarget\n          ? [undefined, null, '', 'self'].includes(e.currentTarget.target)\n          : true;\n\n      if (!hasModifierKey && isLeftClick && isSelfTarget) {\n        e.preventDefault?.();\n        shouldHandle = true;\n      }\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        // @ts-expect-error This is already type-checked by the prop types\n        navigation?.navigate(screen, params);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  return {\n    href:\n      href ??\n      (Platform.OS === 'web' && screen != null\n        ? getPathFromStateHelper(\n            {\n              routes: [\n                {\n                  // @ts-expect-error this is fine ðŸ”¥\n                  name: screen,\n                  // @ts-expect-error this is fine ðŸ”¥\n                  params: params,\n                  // @ts-expect-error this is fine ðŸ”¥\n                  state: getStateFromParams(params),\n                },\n              ],\n            },\n            options?.config\n          )\n        : undefined),\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}