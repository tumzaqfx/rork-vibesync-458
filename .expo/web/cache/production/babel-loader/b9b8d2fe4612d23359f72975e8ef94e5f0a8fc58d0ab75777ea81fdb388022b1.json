{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"onPress\"];import React from'react';import ExpoClipboardPasteButton from'./ExpoClipboardPasteButton';import{jsx as _jsx}from\"react/jsx-runtime\";export function ClipboardPasteButton(_ref){let{onPress}=_ref,restProps=_objectWithoutPropertiesLoose(_ref,_excluded);if(!ExpoClipboardPasteButton){if(false){console.warn(\"'ApplePasteButton' is not available.\");}return null;}const onPastePressed=({nativeEvent})=>{onPress(nativeEvent);};return _jsx(ExpoClipboardPasteButton,Object.assign({onPastePressed:onPastePressed},restProps));}","map":{"version":3,"names":["React","ExpoClipboardPasteButton","jsx","_jsx","ClipboardPasteButton","_ref","onPress","restProps","_objectWithoutPropertiesLoose","_excluded","console","warn","onPastePressed","nativeEvent","Object","assign"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-clipboard/src/ClipboardPasteButton.tsx"],"sourcesContent":["import React from 'react';\nimport { NativeSyntheticEvent, StyleProp, ViewProps, ViewStyle } from 'react-native';\n\nimport {\n  AcceptedContentType,\n  CornerStyleType,\n  DisplayModeType,\n  GetImageOptions,\n  PasteEventPayload,\n} from './Clipboard.types';\nimport ExpoClipboardPasteButton from './ExpoClipboardPasteButton';\n\n// @needsAudit\nexport type ClipboardPasteButtonProps = {\n  /**\n   * A callback that is called with the result of the paste action.\n   * Inspect the `type` property to determine the type of the pasted data.\n   *\n   * Can be one of `text` or `image`.\n   *\n   * @example\n   * ```ts\n   *   onPress={(data) => {\n   *     if (data.type === 'image') {\n   *       setImageData(data);\n   *    } else {\n   *       setTextData(data);\n   *     }\n   *   }}\n   * ```\n   */\n  onPress: (data: PasteEventPayload) => void;\n  /**\n   * The backgroundColor of the button.\n   * Leaving this as the default allows the color to adjust to the system theme settings.\n   */\n  backgroundColor?: string | null;\n  /**\n   * The foregroundColor of the button.\n   * @default 'white'\n   */\n  foregroundColor?: string | null;\n  /**\n   * The cornerStyle of the button.\n   * @default 'capsule'\n   *\n   * @see [Apple Documentation](https://developer.apple.com/documentation/uikit/uibutton/configuration/cornerstyle) for more details.\n   */\n  cornerStyle?: CornerStyleType | null;\n  /**\n   * The displayMode of the button.\n   * @default 'iconAndLabel'\n   *\n   * @see [Apple Documentation](https://developer.apple.com/documentation/uikit/uipastecontrol/displaymode) for more details.\n   */\n  displayMode?: DisplayModeType | null;\n  /**\n   * The custom style to apply to the button. Should not include `backgroundColor`, `borderRadius` or `color`\n   * properties.\n   */\n  style?: StyleProp<Omit<ViewStyle, 'backgroundColor' | 'borderRadius' | 'color'>>;\n  /**\n   * The options to use when pasting an image from the clipboard.\n   */\n  imageOptions?: GetImageOptions | null;\n  /**\n   * An array of the content types that will cause the button to become active.\n   * > Do not include `plain-text` and `html` at the same time as this will cause all text to be treated as `html`.\n   * @default ['plain-text', 'image']\n   */\n  acceptedContentTypes?: AcceptedContentType[];\n} & ViewProps;\n\n// @needsAudit\n/**\n * This component displays the `UIPasteControl` button on your screen. This allows pasting from the clipboard without requesting permission from the user.\n *\n * You should only attempt to render this if [`Clipboard.isPasteButtonAvailable`](#ispastebuttonavailable)\n * is `true`. This component will render nothing if it is not available, and you will get\n * a warning in development mode (`__DEV__ === true`).\n *\n * The properties of this component extend from `View`; however, you should not attempt to set\n * `backgroundColor`, `color` or `borderRadius` with the `style` property. Apple restricts customisation of this view.\n * Instead, you should use the backgroundColor and foregroundColor properties to set the colors of the button, the cornerStyle property to change the border radius,\n * and the displayMode property to change the appearance of the icon and label. The word \"Paste\" is not editable and neither is the icon.\n *\n * Make sure to attach height and width via the style props as without these styles, the button will\n * not appear on the screen.\n *\n * @see [Apple Documentation](https://developer.apple.com/documentation/uikit/uipastecontrol) for more details.\n */\nexport function ClipboardPasteButton({ onPress, ...restProps }: ClipboardPasteButtonProps) {\n  if (!ExpoClipboardPasteButton) {\n    if (__DEV__) {\n      console.warn(\"'ApplePasteButton' is not available.\");\n    }\n    return null;\n  }\n\n  const onPastePressed = ({ nativeEvent }: NativeSyntheticEvent<PasteEventPayload>) => {\n    onPress(nativeEvent);\n  };\n\n  return <ExpoClipboardPasteButton onPastePressed={onPastePressed} {...restProps} />;\n}\n"],"mappings":"2HAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAUzB,MAAO,CAAAC,wBAAwB,KAAM,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAiFlE,MAAM,SAAU,CAAAC,oBAAoBA,CAAAC,IAAA,CAAqD,IAApD,CAAEC,OAAqB,CAA6B,CAAAD,IAAA,CAAtCE,SAAS,CAAAC,6BAAA,CAAAH,IAAA,CAAAI,SAAA,EAC1D,GAAI,CAACR,wBAAwB,CAAE,CAC7B,SAAa,CACXS,OAAO,CAACC,IAAI,CAAC,sCAAsC,CAAC,CACtD,CACA,MAAO,KAAI,CACb,CAEA,KAAM,CAAAC,cAAc,CAAGA,CAAC,CAAEC,WAAW,CAA2C,GAAI,CAClFP,OAAO,CAACO,WAAW,CAAC,CACtB,CAAC,CAED,MAAO,CAAAV,IAAA,CAACF,wBAAwB,CAAAa,MAAA,CAAAC,MAAA,EAACH,cAAc,CAAEA,cAAe,EAAKL,SAAS,CAAC,CAAG,CACpF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}