{"ast":null,"code":"\"use strict\";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||(\"get\"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function(){return m[k];}};}Object.defineProperty(o,k2,desc);}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(){var ownKeys=function(o){ownKeys=Object.getOwnPropertyNames||function(o){var ar=[];for(var k in o)if(Object.prototype.hasOwnProperty.call(o,k))ar[ar.length]=k;return ar;};return ownKeys(o);};return function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k=ownKeys(mod),i=0;i<k.length;i++)if(k[i]!==\"default\")__createBinding(result,mod,k[i]);__setModuleDefault(result,mod);return result;};}();var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.series=void 0;exports.useLinking=useLinking;exports.getInitialURLWithTimeout=getInitialURLWithTimeout;const native_1=require(\"@react-navigation/native\");const fast_deep_equal_1=__importDefault(require(\"fast-deep-equal\"));const React=__importStar(require(\"react\"));const createMemoryHistory_1=require(\"./createMemoryHistory\");const getPathFromState_1=require(\"./getPathFromState\");const serverLocationContext_1=require(\"../global-state/serverLocationContext\");const findMatchingState=(a,b)=>{if(a===undefined||b===undefined||a.key!==b.key){return[undefined,undefined];}const aHistoryLength=a.history?a.history.length:a.routes.length;const bHistoryLength=b.history?b.history.length:b.routes.length;const aRoute=a.routes[a.index];const bRoute=b.routes[b.index];const aChildState=aRoute.state;const bChildState=bRoute.state;if(aHistoryLength!==bHistoryLength||aRoute.key!==bRoute.key||aChildState===undefined||bChildState===undefined||aChildState.key!==bChildState.key){return[a,b];}return findMatchingState(aChildState,bChildState);};const series=cb=>{let queue=Promise.resolve();const callback=()=>{queue=queue.then(cb);};return callback;};exports.series=series;const linkingHandlers=[];function useLinking(ref,{enabled=true,config,getStateFromPath=native_1.getStateFromPath,getPathFromState=native_1.getPathFromState,getActionFromState=native_1.getActionFromState},onUnhandledLinking){const independent=(0,native_1.useNavigationIndependentTree)();React.useEffect(()=>{if(true){return undefined;}if(independent){return undefined;}if(enabled!==false&&linkingHandlers.length){console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",'- Only a single instance of the root component is rendered'].join('\\n').trim());}const handler=Symbol();if(enabled!==false){linkingHandlers.push(handler);}return()=>{const index=linkingHandlers.indexOf(handler);if(index>-1){linkingHandlers.splice(index,1);}};},[enabled,independent]);const[history]=React.useState(createMemoryHistory_1.createMemoryHistory);const enabledRef=React.useRef(enabled);const configRef=React.useRef(config);const getStateFromPathRef=React.useRef(getStateFromPath);const getPathFromStateRef=React.useRef(getPathFromState);const getActionFromStateRef=React.useRef(getActionFromState);React.useEffect(()=>{enabledRef.current=enabled;configRef.current=config;getStateFromPathRef.current=getStateFromPath;getPathFromStateRef.current=getPathFromState;getActionFromStateRef.current=getActionFromState;});const validateRoutesNotExistInRootState=React.useCallback(state=>{const navigation=ref.current;const rootState=navigation?.getRootState();return state?.routes.some(r=>!rootState?.routeNames.includes(r.name));},[ref]);const server=React.useContext(serverLocationContext_1.ServerContext);const getInitialState=React.useCallback(()=>{let value;if(enabledRef.current){const location=server?.location??(true?window.location:undefined);const path=location?location.pathname+location.search:undefined;if(path){value=getStateFromPathRef.current(path,configRef.current);}onUnhandledLinking(path);}const thenable={then(onfulfilled){return Promise.resolve(onfulfilled?onfulfilled(value):value);},catch(){return thenable;}};return thenable;},[]);const previousIndexRef=React.useRef(undefined);const previousStateRef=React.useRef(undefined);const pendingPopStatePathRef=React.useRef(undefined);React.useEffect(()=>{previousIndexRef.current=history.index;return history.listen(()=>{const navigation=ref.current;if(!navigation||!enabled){return;}const{location}=window;const path=location.pathname+location.search+location.hash;const index=history.index;const previousIndex=previousIndexRef.current??0;previousIndexRef.current=index;pendingPopStatePathRef.current=path;const record=history.get(index);if(record?.path===path&&record?.state){navigation.resetRoot(record.state);return;}const state=getStateFromPathRef.current(path,configRef.current);if(state){onUnhandledLinking(path);if(validateRoutesNotExistInRootState(state)){return;}if(index>previousIndex||(index===previousIndex&&(!record||`${record?.path}${location.hash}`===path))){const action=getActionFromStateRef.current(state,configRef.current);if(action!==undefined){try{navigation.dispatch(action);}catch(e){console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e==='object'&&e!=null&&'message'in e?e.message:e}`);}}else{navigation.resetRoot(state);}}else{navigation.resetRoot(state);}}else{navigation.resetRoot(state);}});},[enabled,history,onUnhandledLinking,ref,validateRoutesNotExistInRootState]);React.useEffect(()=>{if(!enabled){return;}const getPathForRoute=(route,state)=>{let path;if(route?.path){const stateForPath=getStateFromPathRef.current(route.path,configRef.current);if(stateForPath){const focusedRoute=(0,native_1.findFocusedRoute)(stateForPath);if(focusedRoute&&focusedRoute.name===route.name&&(0,fast_deep_equal_1.default)(Object.assign({},focusedRoute.params),Object.assign({},route.params))){path=(0,getPathFromState_1.appendBaseUrl)(route.path);}}}if(path==null){path=getPathFromStateRef.current(state,configRef.current);}return path;};if(ref.current){const state=ref.current.getRootState();if(state){const route=(0,native_1.findFocusedRoute)(state);const path=getPathForRoute(route,state);if(previousStateRef.current===undefined){previousStateRef.current=state;}history.replace({path,state});}}const onStateChange=async()=>{const navigation=ref.current;if(!navigation||!enabled){return;}const previousState=previousStateRef.current;const state=navigation.getRootState();if(!state){return;}const pendingPath=pendingPopStatePathRef.current;const route=(0,native_1.findFocusedRoute)(state);const path=getPathForRoute(route,state);previousStateRef.current=state;pendingPopStatePathRef.current=undefined;const[previousFocusedState,focusedState]=findMatchingState(previousState,state);if(previousFocusedState&&focusedState&&path!==pendingPath){const historyDelta=(focusedState.history?focusedState.history.length:focusedState.routes.length)-(previousFocusedState.history?previousFocusedState.history.length:previousFocusedState.routes.length);if(historyDelta>0){history.push({path,state});}else if(historyDelta<0){const nextIndex=history.backIndex({path});const currentIndex=history.index;try{if(nextIndex!==-1&&nextIndex<currentIndex&&history.get(nextIndex-currentIndex)){await history.go(nextIndex-currentIndex);}else{await history.go(historyDelta);}history.replace({path,state});}catch{}}else{history.replace({path,state});}}else{history.replace({path,state});}};return ref.current?.addListener('state',(0,exports.series)(onStateChange));},[enabled,history,ref]);return{getInitialState};}function getInitialURLWithTimeout(){return false?'':window.location.href;}","map":{"version":3,"names":["exports","useLinking","getInitialURLWithTimeout","native_1","require","fast_deep_equal_1","__importDefault","React","__importStar","createMemoryHistory_1","getPathFromState_1","serverLocationContext_1","findMatchingState","a","b","undefined","key","aHistoryLength","history","length","routes","bHistoryLength","aRoute","index","bRoute","aChildState","state","bChildState","series","cb","queue","Promise","resolve","callback","then","linkingHandlers","ref","enabled","config","getStateFromPath","getPathFromState","getActionFromState","onUnhandledLinking","independent","useNavigationIndependentTree","useEffect","console","error","join","trim","handler","Symbol","push","indexOf","splice","useState","createMemoryHistory","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","validateRoutesNotExistInRootState","useCallback","navigation","rootState","getRootState","some","r","routeNames","includes","name","server","useContext","ServerContext","getInitialState","value","location","window","path","pathname","search","thenable","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","listen","hash","previousIndex","record","get","resetRoot","action","dispatch","e","warn","message","getPathForRoute","route","stateForPath","focusedRoute","findFocusedRoute","default","Object","assign","params","appendBaseUrl","replace","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","backIndex","currentIndex","go","addListener","href"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-router/src/fork/useLinking.ts"],"sourcesContent":["import {\n  LinkingOptions,\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  type NavigationContainerRef,\n  type NavigationState,\n  type ParamListBase,\n  useNavigationIndependentTree,\n} from '@react-navigation/native';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\n\nimport { createMemoryHistory } from './createMemoryHistory';\nimport { appendBaseUrl } from './getPathFromState';\nimport { ServerContext } from '../global-state/serverLocationContext';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nexport const series = (cb: () => Promise<void>) => {\n  let queue = Promise.resolve();\n  const callback = () => {\n    queue = queue.then(cb);\n  };\n  return callback;\n};\n\nconst linkingHandlers: symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase>;\n\nexport function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase> | null>,\n  {\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options,\n  onUnhandledLinking: (lastUnhandledLining: string | undefined) => void\n) {\n  const independent = useNavigationIndependentTree();\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const validateRoutesNotExistInRootState = React.useCallback(\n    (state: ResultState) => {\n      const navigation = ref.current;\n      const rootState = navigation?.getRootState();\n      // Make sure that the routes in the state exist in the root navigator\n      // Otherwise there's an error in the linking configuration\n      return state?.routes.some((r) => !rootState?.routeNames.includes(r.name));\n    },\n    [ref]\n  );\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ?? (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n\n      // If the link were handled, it gets cleared in NavigationContainer\n      onUnhandledLinking(path);\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const { location } = window;\n\n      const path = location.pathname + location.search + location.hash;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // If the link were handled, it gets cleared in NavigationContainer\n        onUnhandledLinking(path);\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        if (validateRoutesNotExistInRootState(state)) {\n          return;\n        }\n\n        if (\n          index > previousIndex ||\n          /* START FORK\n           *\n           * This is a workaround for React Navigation's handling of hashes (it doesn't handle them)\n           * When you click on <a href=\"#hash\">, the browser will first fire a popstate event\n           * and this callback will be called.\n           *\n           * From React Navigation's perspective, it's treating the new hash change like a back/forward\n           * button press, so it thinks it should reset the state. When we should\n           * be to be pushing the new state\n           *\n           * Our fix is to check if the index is the same as the previous index\n           * and if the incoming path is the same as the old path but with the hash added,\n           * then treat it as a push instead of a reset\n           *\n           * This also works for subsequent hash changes, as internally RN\n           * doesn't store the hash in the history state.\n           *\n           * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event#when_popstate_is_sent\n           */\n          (index === previousIndex && (!record || `${record?.path}${location.hash}` === path))\n          // END FORK\n        ) {\n          const action = getActionFromStateRef.current(state, configRef.current);\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${\n                  typeof e === 'object' && e != null && 'message' in e ? e.message : e\n                }`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, onUnhandledLinking, ref, validateRoutesNotExistInRootState]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (\n      route: ReturnType<typeof findFocusedRoute>,\n      state: NavigationState\n    ): string => {\n      let path;\n\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (\n            focusedRoute &&\n            focusedRoute.name === route.name &&\n            isEqual({ ...focusedRoute.params }, { ...route.params })\n          ) {\n            // START FORK - Ensure paths coming from events (e.g refresh) have the base URL\n            // path = route.path;\n            path = appendBaseUrl(route.path);\n            // END FORK\n          }\n        }\n      }\n\n      if (path == null) {\n        path = getPathFromStateRef.current(state, configRef.current);\n      }\n\n      // START FORK - ExpoRouter manually handles hashes. This code is intentionally removed\n      // const previousRoute = previousStateRef.current\n      //   ? findFocusedRoute(previousStateRef.current)\n      //   : undefined;\n\n      // Preserve the hash if the route didn't change\n      // if (\n      //   previousRoute &&\n      //   route &&\n      //   'key' in previousRoute &&\n      //   'key' in route &&\n      //   previousRoute.key === route.key\n      // ) {\n      //   path = path + location.hash;\n      // }\n      // END FORK\n\n      return path;\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history ? focusedState.history.length : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (\n              nextIndex !== -1 &&\n              nextIndex < currentIndex &&\n              // We should only go back if the entry exists and it's less than current index\n              history.get(nextIndex - currentIndex)\n            ) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  }, [enabled, history, ref]);\n\n  return {\n    getInitialState,\n  };\n}\n\nexport function getInitialURLWithTimeout(): string | null | Promise<string | null> {\n  return typeof window === 'undefined' ? '' : window.location.href;\n}\n"],"mappings":"osCA2EAA,OAAA,CAAAC,UAAA,CAAAA,UAAA,CAwXAD,OAAA,CAAAE,wBAAA,CAAAA,wBAAA,CAncA,MAAAC,QAAA,CAAAC,OAAA,6BAWA,MAAAC,iBAAA,CAAAC,eAAA,CAAAF,OAAA,qBACA,MAAAG,KAAA,CAAAC,YAAA,CAAAJ,OAAA,WAEA,MAAAK,qBAAA,CAAAL,OAAA,0BACA,MAAAM,kBAAA,CAAAN,OAAA,uBACA,MAAAO,uBAAA,CAAAP,OAAA,0CAQA,KAAM,CAAAQ,iBAAiB,CAAGA,CACxBC,CAAgB,CAChBC,CAAgB,GACkB,CAClC,GAAID,CAAC,GAAKE,SAAS,EAAID,CAAC,GAAKC,SAAS,EAAIF,CAAC,CAACG,GAAG,GAAKF,CAAC,CAACE,GAAG,CAAE,CACzD,MAAO,CAACD,SAAS,CAAEA,SAAS,CAAC,CAC/B,CAGA,KAAM,CAAAE,cAAc,CAAGJ,CAAC,CAACK,OAAO,CAAGL,CAAC,CAACK,OAAO,CAACC,MAAM,CAAGN,CAAC,CAACO,MAAM,CAACD,MAAM,CACrE,KAAM,CAAAE,cAAc,CAAGP,CAAC,CAACI,OAAO,CAAGJ,CAAC,CAACI,OAAO,CAACC,MAAM,CAAGL,CAAC,CAACM,MAAM,CAACD,MAAM,CAErE,KAAM,CAAAG,MAAM,CAAGT,CAAC,CAACO,MAAM,CAACP,CAAC,CAACU,KAAK,CAAC,CAChC,KAAM,CAAAC,MAAM,CAAGV,CAAC,CAACM,MAAM,CAACN,CAAC,CAACS,KAAK,CAAC,CAEhC,KAAM,CAAAE,WAAW,CAAGH,MAAM,CAACI,KAAsB,CACjD,KAAM,CAAAC,WAAW,CAAGH,MAAM,CAACE,KAAsB,CAOjD,GACET,cAAc,GAAKI,cAAc,EACjCC,MAAM,CAACN,GAAG,GAAKQ,MAAM,CAACR,GAAG,EACzBS,WAAW,GAAKV,SAAS,EACzBY,WAAW,GAAKZ,SAAS,EACzBU,WAAW,CAACT,GAAG,GAAKW,WAAW,CAACX,GAAG,CACnC,CACA,MAAO,CAACH,CAAC,CAAEC,CAAC,CAAC,CACf,CAEA,MAAO,CAAAF,iBAAiB,CAACa,WAAW,CAAEE,WAAW,CAAC,CACpD,CAAC,CAKM,KAAM,CAAAC,MAAM,CAAIC,EAAuB,EAAI,CAChD,GAAI,CAAAC,KAAK,CAAGC,OAAO,CAACC,OAAO,EAAE,CAC7B,KAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAK,CACpBH,KAAK,CAAGA,KAAK,CAACI,IAAI,CAACL,EAAE,CAAC,CACxB,CAAC,CACD,MAAO,CAAAI,QAAQ,CACjB,CAAC,CANYjC,OAAA,CAAA4B,MAAM,CAAAA,MAAA,CAQnB,KAAM,CAAAO,eAAe,CAAa,EAAE,CAIpC,QAAgB,CAAAlC,UAAUA,CACxBmC,GAAkE,CAClE,CACEC,OAAO,CAAG,IAAI,CACdC,MAAM,CACNC,gBAAgB,CAAGpC,QAAA,CAAAoC,gBAAuB,CAC1CC,gBAAgB,CAAGrC,QAAA,CAAAqC,gBAAuB,CAC1CC,kBAAkB,CAAGtC,QAAA,CAAAsC,kBAAyB,CACtC,CACVC,kBAAqE,EAErE,KAAM,CAAAC,WAAW,CAAG,GAAAxC,QAAA,CAAAyC,4BAA4B,GAAE,CAElDrC,KAAK,CAACsC,SAAS,CAAC,IAAK,CACnB,QAA2C,CACzC,MAAO,CAAA9B,SAAS,CAClB,CAEA,GAAI4B,WAAW,CAAE,CACf,MAAO,CAAA5B,SAAS,CAClB,CAEA,GAAIsB,OAAO,GAAK,KAAK,EAAIF,eAAe,CAAChB,MAAM,CAAE,CAC/C2B,OAAO,CAACC,KAAK,CACX,CACE,6KAA6K,CAC7K,uFAAuF,CACvF,4DAA4D,CAC7D,CACEC,IAAI,CAAC,IAAI,CAAC,CACVC,IAAI,EAAE,CACV,CACH,CAEA,KAAM,CAAAC,OAAO,CAAGC,MAAM,EAAE,CAExB,GAAId,OAAO,GAAK,KAAK,CAAE,CACrBF,eAAe,CAACiB,IAAI,CAACF,OAAO,CAAC,CAC/B,CAEA,MAAO,IAAK,CACV,KAAM,CAAA3B,KAAK,CAAGY,eAAe,CAACkB,OAAO,CAACH,OAAO,CAAC,CAE9C,GAAI3B,KAAK,CAAG,CAAC,CAAC,CAAE,CACdY,eAAe,CAACmB,MAAM,CAAC/B,KAAK,CAAE,CAAC,CAAC,CAClC,CACF,CAAC,CACH,CAAC,CAAE,CAACc,OAAO,CAAEM,WAAW,CAAC,CAAC,CAE1B,KAAM,CAACzB,OAAO,CAAC,CAAGX,KAAK,CAACgD,QAAQ,CAAC9C,qBAAA,CAAA+C,mBAAmB,CAAC,CAKrD,KAAM,CAAAC,UAAU,CAAGlD,KAAK,CAACmD,MAAM,CAACrB,OAAO,CAAC,CACxC,KAAM,CAAAsB,SAAS,CAAGpD,KAAK,CAACmD,MAAM,CAACpB,MAAM,CAAC,CACtC,KAAM,CAAAsB,mBAAmB,CAAGrD,KAAK,CAACmD,MAAM,CAACnB,gBAAgB,CAAC,CAC1D,KAAM,CAAAsB,mBAAmB,CAAGtD,KAAK,CAACmD,MAAM,CAAClB,gBAAgB,CAAC,CAC1D,KAAM,CAAAsB,qBAAqB,CAAGvD,KAAK,CAACmD,MAAM,CAACjB,kBAAkB,CAAC,CAE9DlC,KAAK,CAACsC,SAAS,CAAC,IAAK,CACnBY,UAAU,CAACM,OAAO,CAAG1B,OAAO,CAC5BsB,SAAS,CAACI,OAAO,CAAGzB,MAAM,CAC1BsB,mBAAmB,CAACG,OAAO,CAAGxB,gBAAgB,CAC9CsB,mBAAmB,CAACE,OAAO,CAAGvB,gBAAgB,CAC9CsB,qBAAqB,CAACC,OAAO,CAAGtB,kBAAkB,CACpD,CAAC,CAAC,CAEF,KAAM,CAAAuB,iCAAiC,CAAGzD,KAAK,CAAC0D,WAAW,CACxDvC,KAAkB,EAAI,CACrB,KAAM,CAAAwC,UAAU,CAAG9B,GAAG,CAAC2B,OAAO,CAC9B,KAAM,CAAAI,SAAS,CAAGD,UAAU,EAAEE,YAAY,EAAE,CAG5C,MAAO,CAAA1C,KAAK,EAAEN,MAAM,CAACiD,IAAI,CAAEC,CAAC,EAAK,CAACH,SAAS,EAAEI,UAAU,CAACC,QAAQ,CAACF,CAAC,CAACG,IAAI,CAAC,CAAC,CAC3E,CAAC,CACD,CAACrC,GAAG,CAAC,CACN,CAED,KAAM,CAAAsC,MAAM,CAAGnE,KAAK,CAACoE,UAAU,CAAChE,uBAAA,CAAAiE,aAAa,CAAC,CAE9C,KAAM,CAAAC,eAAe,CAAGtE,KAAK,CAAC0D,WAAW,CAAC,IAAK,CAC7C,GAAI,CAAAa,KAA8B,CAElC,GAAIrB,UAAU,CAACM,OAAO,CAAE,CACtB,KAAM,CAAAgB,QAAQ,CACZL,MAAM,EAAEK,QAAQ,GAAK,KAAgCC,MAAM,CAACD,QAAQ,CAAGhE,SAAS,CAAC,CAEnF,KAAM,CAAAkE,IAAI,CAAGF,QAAQ,CAAGA,QAAQ,CAACG,QAAQ,CAAGH,QAAQ,CAACI,MAAM,CAAGpE,SAAS,CAEvE,GAAIkE,IAAI,CAAE,CACRH,KAAK,CAAGlB,mBAAmB,CAACG,OAAO,CAACkB,IAAI,CAAEtB,SAAS,CAACI,OAAO,CAAC,CAC9D,CAGArB,kBAAkB,CAACuC,IAAI,CAAC,CAC1B,CAEA,KAAM,CAAAG,QAAQ,CAAG,CACflD,IAAIA,CAACmD,WAAsD,EACzD,MAAO,CAAAtD,OAAO,CAACC,OAAO,CAACqD,WAAW,CAAGA,WAAW,CAACP,KAAK,CAAC,CAAGA,KAAK,CAAC,CAClE,CAAC,CACDQ,KAAKA,CAAA,EACH,MAAO,CAAAF,QAAQ,CACjB,C,CACD,CAED,MAAO,CAAAA,QAAgD,CAEzD,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAG,gBAAgB,CAAGhF,KAAK,CAACmD,MAAM,CAAqB3C,SAAS,CAAC,CACpE,KAAM,CAAAyE,gBAAgB,CAAGjF,KAAK,CAACmD,MAAM,CAA8B3C,SAAS,CAAC,CAC7E,KAAM,CAAA0E,sBAAsB,CAAGlF,KAAK,CAACmD,MAAM,CAAqB3C,SAAS,CAAC,CAE1ER,KAAK,CAACsC,SAAS,CAAC,IAAK,CACnB0C,gBAAgB,CAACxB,OAAO,CAAG7C,OAAO,CAACK,KAAK,CAExC,MAAO,CAAAL,OAAO,CAACwE,MAAM,CAAC,IAAK,CACzB,KAAM,CAAAxB,UAAU,CAAG9B,GAAG,CAAC2B,OAAO,CAE9B,GAAI,CAACG,UAAU,EAAI,CAAC7B,OAAO,CAAE,CAC3B,OACF,CAEA,KAAM,CAAE0C,QAAQ,CAAE,CAAGC,MAAM,CAE3B,KAAM,CAAAC,IAAI,CAAGF,QAAQ,CAACG,QAAQ,CAAGH,QAAQ,CAACI,MAAM,CAAGJ,QAAQ,CAACY,IAAI,CAChE,KAAM,CAAApE,KAAK,CAAGL,OAAO,CAACK,KAAK,CAE3B,KAAM,CAAAqE,aAAa,CAAGL,gBAAgB,CAACxB,OAAO,EAAI,CAAC,CAEnDwB,gBAAgB,CAACxB,OAAO,CAAGxC,KAAK,CAChCkE,sBAAsB,CAAC1B,OAAO,CAAGkB,IAAI,CAKrC,KAAM,CAAAY,MAAM,CAAG3E,OAAO,CAAC4E,GAAG,CAACvE,KAAK,CAAC,CAEjC,GAAIsE,MAAM,EAAEZ,IAAI,GAAKA,IAAI,EAAIY,MAAM,EAAEnE,KAAK,CAAE,CAC1CwC,UAAU,CAAC6B,SAAS,CAACF,MAAM,CAACnE,KAAK,CAAC,CAClC,OACF,CAEA,KAAM,CAAAA,KAAK,CAAGkC,mBAAmB,CAACG,OAAO,CAACkB,IAAI,CAAEtB,SAAS,CAACI,OAAO,CAAC,CAIlE,GAAIrC,KAAK,CAAE,CAETgB,kBAAkB,CAACuC,IAAI,CAAC,CAGxB,GAAIjB,iCAAiC,CAACtC,KAAK,CAAC,CAAE,CAC5C,OACF,CAEA,GACEH,KAAK,CAAGqE,aAAa,GAoBpBrE,KAAK,GAAKqE,aAAa,GAAK,CAACC,MAAM,EAAI,GAAGA,MAAM,EAAEZ,IAAI,GAAGF,QAAQ,CAACY,IAAI,EAAE,GAAKV,IAAI,CAAC,CAAC,CAEpF,CACA,KAAM,CAAAe,MAAM,CAAGlC,qBAAqB,CAACC,OAAO,CAACrC,KAAK,CAAEiC,SAAS,CAACI,OAAO,CAAC,CAEtE,GAAIiC,MAAM,GAAKjF,SAAS,CAAE,CACxB,GAAI,CACFmD,UAAU,CAAC+B,QAAQ,CAACD,MAAM,CAAC,CAC7B,CAAE,MAAOE,CAAC,CAAE,CAGVpD,OAAO,CAACqD,IAAI,CACV,qDAAqDlB,IAAI,MACvD,MAAO,CAAAiB,CAAC,GAAK,QAAQ,EAAIA,CAAC,EAAI,IAAI,EAAI,SAAS,EAAI,CAAAA,CAAC,CAAGA,CAAC,CAACE,OAAO,CAAGF,CACrE,EAAE,CACH,CACH,CACF,CAAC,IAAM,CACLhC,UAAU,CAAC6B,SAAS,CAACrE,KAAK,CAAC,CAC7B,CACF,CAAC,IAAM,CACLwC,UAAU,CAAC6B,SAAS,CAACrE,KAAK,CAAC,CAC7B,CACF,CAAC,IAAM,CAELwC,UAAU,CAAC6B,SAAS,CAACrE,KAAK,CAAC,CAC7B,CACF,CAAC,CAAC,CACJ,CAAC,CAAE,CAACW,OAAO,CAAEnB,OAAO,CAAEwB,kBAAkB,CAAEN,GAAG,CAAE4B,iCAAiC,CAAC,CAAC,CAElFzD,KAAK,CAACsC,SAAS,CAAC,IAAK,CACnB,GAAI,CAACR,OAAO,CAAE,CACZ,OACF,CAEA,KAAM,CAAAgE,eAAe,CAAGA,CACtBC,KAA0C,CAC1C5E,KAAsB,GACZ,CACV,GAAI,CAAAuD,IAAI,CAIR,GAAIqB,KAAK,EAAErB,IAAI,CAAE,CACf,KAAM,CAAAsB,YAAY,CAAG3C,mBAAmB,CAACG,OAAO,CAACuC,KAAK,CAACrB,IAAI,CAAEtB,SAAS,CAACI,OAAO,CAAC,CAE/E,GAAIwC,YAAY,CAAE,CAChB,KAAM,CAAAC,YAAY,CAAG,GAAArG,QAAA,CAAAsG,gBAAgB,EAACF,YAAY,CAAC,CAEnD,GACEC,YAAY,EACZA,YAAY,CAAC/B,IAAI,GAAK6B,KAAK,CAAC7B,IAAI,EAChC,GAAApE,iBAAA,CAAAqG,OAAO,EAAAC,MAAA,CAAAC,MAAA,IAAMJ,YAAY,CAACK,MAAM,EAAAF,MAAA,CAAAC,MAAA,IAASN,KAAK,CAACO,MAAM,CAAE,CAAC,CACxD,CAGA5B,IAAI,CAAG,GAAAvE,kBAAA,CAAAoG,aAAa,EAACR,KAAK,CAACrB,IAAI,CAAC,CAElC,CACF,CACF,CAEA,GAAIA,IAAI,EAAI,IAAI,CAAE,CAChBA,IAAI,CAAGpB,mBAAmB,CAACE,OAAO,CAACrC,KAAK,CAAEiC,SAAS,CAACI,OAAO,CAAC,CAC9D,CAmBA,MAAO,CAAAkB,IAAI,CACb,CAAC,CAED,GAAI7C,GAAG,CAAC2B,OAAO,CAAE,CAGf,KAAM,CAAArC,KAAK,CAAGU,GAAG,CAAC2B,OAAO,CAACK,YAAY,EAAE,CAExC,GAAI1C,KAAK,CAAE,CACT,KAAM,CAAA4E,KAAK,CAAG,GAAAnG,QAAA,CAAAsG,gBAAgB,EAAC/E,KAAK,CAAC,CACrC,KAAM,CAAAuD,IAAI,CAAGoB,eAAe,CAACC,KAAK,CAAE5E,KAAK,CAAC,CAE1C,GAAI8D,gBAAgB,CAACzB,OAAO,GAAKhD,SAAS,CAAE,CAC1CyE,gBAAgB,CAACzB,OAAO,CAAGrC,KAAK,CAClC,CAEAR,OAAO,CAAC6F,OAAO,CAAC,CAAE9B,IAAI,CAAEvD,KAAK,CAAE,CAAC,CAClC,CACF,CAEA,KAAM,CAAAsF,aAAa,CAAG,KAAAA,CAAA,GAAW,CAC/B,KAAM,CAAA9C,UAAU,CAAG9B,GAAG,CAAC2B,OAAO,CAE9B,GAAI,CAACG,UAAU,EAAI,CAAC7B,OAAO,CAAE,CAC3B,OACF,CAEA,KAAM,CAAA4E,aAAa,CAAGzB,gBAAgB,CAACzB,OAAO,CAC9C,KAAM,CAAArC,KAAK,CAAGwC,UAAU,CAACE,YAAY,EAAE,CAGvC,GAAI,CAAC1C,KAAK,CAAE,CACV,OACF,CAEA,KAAM,CAAAwF,WAAW,CAAGzB,sBAAsB,CAAC1B,OAAO,CAClD,KAAM,CAAAuC,KAAK,CAAG,GAAAnG,QAAA,CAAAsG,gBAAgB,EAAC/E,KAAK,CAAC,CACrC,KAAM,CAAAuD,IAAI,CAAGoB,eAAe,CAACC,KAAK,CAAE5E,KAAK,CAAC,CAE1C8D,gBAAgB,CAACzB,OAAO,CAAGrC,KAAK,CAChC+D,sBAAsB,CAAC1B,OAAO,CAAGhD,SAAS,CAM1C,KAAM,CAACoG,oBAAoB,CAAEC,YAAY,CAAC,CAAGxG,iBAAiB,CAACqG,aAAa,CAAEvF,KAAK,CAAC,CAEpF,GACEyF,oBAAoB,EACpBC,YAAY,EAGZnC,IAAI,GAAKiC,WAAW,CACpB,CACA,KAAM,CAAAG,YAAY,CAChB,CAACD,YAAY,CAAClG,OAAO,CAAGkG,YAAY,CAAClG,OAAO,CAACC,MAAM,CAAGiG,YAAY,CAAChG,MAAM,CAACD,MAAM,GAC/EgG,oBAAoB,CAACjG,OAAO,CACzBiG,oBAAoB,CAACjG,OAAO,CAACC,MAAM,CACnCgG,oBAAoB,CAAC/F,MAAM,CAACD,MAAM,CAAC,CAEzC,GAAIkG,YAAY,CAAG,CAAC,CAAE,CAGpBnG,OAAO,CAACkC,IAAI,CAAC,CAAE6B,IAAI,CAAEvD,KAAK,CAAE,CAAC,CAC/B,CAAC,IAAM,IAAI2F,YAAY,CAAG,CAAC,CAAE,CAG3B,KAAM,CAAAC,SAAS,CAAGpG,OAAO,CAACqG,SAAS,CAAC,CAAEtC,IAAI,CAAE,CAAC,CAC7C,KAAM,CAAAuC,YAAY,CAAGtG,OAAO,CAACK,KAAK,CAElC,GAAI,CACF,GACE+F,SAAS,GAAK,CAAC,CAAC,EAChBA,SAAS,CAAGE,YAAY,EAExBtG,OAAO,CAAC4E,GAAG,CAACwB,SAAS,CAAGE,YAAY,CAAC,CACrC,CAEA,KAAM,CAAAtG,OAAO,CAACuG,EAAE,CAACH,SAAS,CAAGE,YAAY,CAAC,CAC5C,CAAC,IAAM,CAIL,KAAM,CAAAtG,OAAO,CAACuG,EAAE,CAACJ,YAAY,CAAC,CAChC,CAGAnG,OAAO,CAAC6F,OAAO,CAAC,CAAE9B,IAAI,CAAEvD,KAAK,CAAE,CAAC,CAClC,CAAE,KAAM,CAER,CACF,CAAC,IAAM,CAELR,OAAO,CAAC6F,OAAO,CAAC,CAAE9B,IAAI,CAAEvD,KAAK,CAAE,CAAC,CAClC,CACF,CAAC,IAAM,CAGLR,OAAO,CAAC6F,OAAO,CAAC,CAAE9B,IAAI,CAAEvD,KAAK,CAAE,CAAC,CAClC,CACF,CAAC,CAKD,MAAO,CAAAU,GAAG,CAAC2B,OAAO,EAAE2D,WAAW,CAAC,OAAO,CAAE,GAAA1H,OAAA,CAAA4B,MAAM,EAACoF,aAAa,CAAC,CAAC,CACjE,CAAC,CAAE,CAAC3E,OAAO,CAAEnB,OAAO,CAAEkB,GAAG,CAAC,CAAC,CAE3B,MAAO,CACLyC,e,CACD,CACH,CAEA,QAAgB,CAAA3E,wBAAwBA,CAAA,EACtC,MAAO,OAAgC,EAAE,CAAG8E,MAAM,CAACD,QAAQ,CAAC4C,IAAI,CAClE","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}