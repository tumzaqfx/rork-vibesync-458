{"ast":null,"code":"import PixelRatio from\"react-native-web/dist/exports/PixelRatio\";import{getAssetByID}from'@react-native/assets-registry/registry';const svgDataUriPattern=/^(data:image\\/svg\\+xml;utf8,)(.*)/;export function resolveAssetUri(source){let src={};if(typeof source==='number'){const asset=getAssetByID(source);if(asset==null){throw new Error(`Image: asset with ID \"${source}\" could not be found. Please check the image source or packager.`);}src={width:asset.width,height:asset.height,scale:asset.scales[0]};if(asset.scales.length>1){const preferredScale=PixelRatio.get();src.scale=asset.scales.reduce((prev,curr)=>Math.abs(curr-preferredScale)<Math.abs(prev-preferredScale)?curr:prev);}const scaleSuffix=src.scale!==1?`@${src.scale}x`:'';src.uri=asset?`${asset.httpServerLocation}/${asset.name}${scaleSuffix}.${asset.type}`:'';}else if(typeof source==='string'){src.uri=source;}else if(source&&!Array.isArray(source)&&typeof source.uri==='string'){src.uri=source.uri;}if(src.uri){var _src;const match=(_src=src)===null||_src===void 0||(_src=_src.uri)===null||_src===void 0?void 0:_src.match(svgDataUriPattern);if(match){const[,prefix,svg]=match;const encodedSvg=encodeURIComponent(svg);src.uri=`${prefix}${encodedSvg}`;return src;}}return src;}","map":{"version":3,"names":["getAssetByID","svgDataUriPattern","resolveAssetUri","source","src","asset","Error","width","height","scale","scales","length","preferredScale","PixelRatio","get","reduce","prev","curr","Math","abs","scaleSuffix","uri","httpServerLocation","name","type","Array","isArray","_src","match","prefix","svg","encodedSvg","encodeURIComponent"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-svg/src/lib/resolveAssetUri.ts"],"sourcesContent":["import {\n  ImageResolvedAssetSource,\n  PixelRatio,\n  type ImageProps as RNImageProps,\n} from 'react-native';\n// @ts-expect-error react-native/assets-registry doesn't export types.\nimport { getAssetByID } from '@react-native/assets-registry/registry';\n\nexport type PackagerAsset = {\n  __packager_asset: boolean;\n  fileSystemLocation: string;\n  httpServerLocation: string;\n  width?: number;\n  height?: number;\n  scales: Array<number>;\n  hash: string;\n  name: string;\n  type: string;\n};\n\nconst svgDataUriPattern = /^(data:image\\/svg\\+xml;utf8,)(.*)/;\n\n// Based on that function: https://github.com/necolas/react-native-web/blob/54c14d64dabd175e8055e1dc92e9196c821f9b7d/packages/react-native-web/src/exports/Image/index.js#L118-L156\nexport function resolveAssetUri(\n  source?: RNImageProps['source'] | string | number\n): Partial<ImageResolvedAssetSource> | null {\n  let src: Partial<ImageResolvedAssetSource> = {};\n  if (typeof source === 'number') {\n    // get the URI from the packager\n    const asset: PackagerAsset | null = getAssetByID(source);\n    if (asset == null) {\n      throw new Error(\n        `Image: asset with ID \"${source}\" could not be found. Please check the image source or packager.`\n      );\n    }\n    src = {\n      width: asset.width,\n      height: asset.height,\n      scale: asset.scales[0],\n    };\n    if (asset.scales.length > 1) {\n      const preferredScale = PixelRatio.get();\n      // Get the scale which is closest to the preferred scale\n      src.scale = asset.scales.reduce((prev, curr) =>\n        Math.abs(curr - preferredScale) < Math.abs(prev - preferredScale)\n          ? curr\n          : prev\n      );\n    }\n    const scaleSuffix = src.scale !== 1 ? `@${src.scale}x` : '';\n    src.uri = asset\n      ? `${asset.httpServerLocation}/${asset.name}${scaleSuffix}.${asset.type}`\n      : '';\n  } else if (typeof source === 'string') {\n    src.uri = source;\n  } else if (\n    source &&\n    !Array.isArray(source) &&\n    typeof source.uri === 'string'\n  ) {\n    src.uri = source.uri;\n  }\n\n  if (src.uri) {\n    const match = src?.uri?.match(svgDataUriPattern);\n    // inline SVG markup may contain characters (e.g., #, \") that need to be escaped\n    if (match) {\n      const [, prefix, svg] = match;\n      const encodedSvg = encodeURIComponent(svg);\n      src.uri = `${prefix}${encodedSvg}`;\n      return src;\n    }\n  }\n  return src;\n}\n"],"mappings":"iEAMA,OAASA,YAAY,KAAQ,wCAAwC,CAcrE,KAAM,CAAAC,iBAAiB,CAAG,mCAAmC,CAG7D,MAAO,SAAS,CAAAC,eAAeA,CAC7BC,MAAiD,CACP,CAC1C,GAAI,CAAAC,GAAsC,CAAG,CAAC,CAAC,CAC/C,GAAI,MAAO,CAAAD,MAAM,GAAK,QAAQ,CAAE,CAE9B,KAAM,CAAAE,KAA2B,CAAGL,YAAY,CAACG,MAAM,CAAC,CACxD,GAAIE,KAAK,EAAI,IAAI,CAAE,CACjB,KAAM,IAAI,CAAAC,KAAK,CACb,yBAAyBH,MAAM,kEACjC,CAAC,CACH,CACAC,GAAG,CAAG,CACJG,KAAK,CAAEF,KAAK,CAACE,KAAK,CAClBC,MAAM,CAAEH,KAAK,CAACG,MAAM,CACpBC,KAAK,CAAEJ,KAAK,CAACK,MAAM,CAAC,CAAC,CACvB,CAAC,CACD,GAAIL,KAAK,CAACK,MAAM,CAACC,MAAM,CAAG,CAAC,CAAE,CAC3B,KAAM,CAAAC,cAAc,CAAGC,UAAU,CAACC,GAAG,CAAC,CAAC,CAEvCV,GAAG,CAACK,KAAK,CAAGJ,KAAK,CAACK,MAAM,CAACK,MAAM,CAAC,CAACC,IAAI,CAAEC,IAAI,GACzCC,IAAI,CAACC,GAAG,CAACF,IAAI,CAAGL,cAAc,CAAC,CAAGM,IAAI,CAACC,GAAG,CAACH,IAAI,CAAGJ,cAAc,CAAC,CAC7DK,IAAI,CACJD,IACN,CAAC,CACH,CACA,KAAM,CAAAI,WAAW,CAAGhB,GAAG,CAACK,KAAK,GAAK,CAAC,CAAG,IAAIL,GAAG,CAACK,KAAK,GAAG,CAAG,EAAE,CAC3DL,GAAG,CAACiB,GAAG,CAAGhB,KAAK,CACX,GAAGA,KAAK,CAACiB,kBAAkB,IAAIjB,KAAK,CAACkB,IAAI,GAAGH,WAAW,IAAIf,KAAK,CAACmB,IAAI,EAAE,CACvE,EAAE,CACR,CAAC,IAAM,IAAI,MAAO,CAAArB,MAAM,GAAK,QAAQ,CAAE,CACrCC,GAAG,CAACiB,GAAG,CAAGlB,MAAM,CAClB,CAAC,IAAM,IACLA,MAAM,EACN,CAACsB,KAAK,CAACC,OAAO,CAACvB,MAAM,CAAC,EACtB,MAAO,CAAAA,MAAM,CAACkB,GAAG,GAAK,QAAQ,CAC9B,CACAjB,GAAG,CAACiB,GAAG,CAAGlB,MAAM,CAACkB,GAAG,CACtB,CAEA,GAAIjB,GAAG,CAACiB,GAAG,CAAE,KAAAM,IAAA,CACX,KAAM,CAAAC,KAAK,EAAAD,IAAA,CAAGvB,GAAG,UAAAuB,IAAA,YAAAA,IAAA,CAAHA,IAAA,CAAKN,GAAG,UAAAM,IAAA,iBAARA,IAAA,CAAUC,KAAK,CAAC3B,iBAAiB,CAAC,CAEhD,GAAI2B,KAAK,CAAE,CACT,KAAM,EAAGC,MAAM,CAAEC,GAAG,CAAC,CAAGF,KAAK,CAC7B,KAAM,CAAAG,UAAU,CAAGC,kBAAkB,CAACF,GAAG,CAAC,CAC1C1B,GAAG,CAACiB,GAAG,CAAG,GAAGQ,MAAM,GAAGE,UAAU,EAAE,CAClC,MAAO,CAAA3B,GAAG,CACZ,CACF,CACA,MAAO,CAAAA,GAAG,CACZ","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}