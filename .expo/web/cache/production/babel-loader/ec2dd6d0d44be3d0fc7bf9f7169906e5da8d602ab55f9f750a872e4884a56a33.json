{"ast":null,"code":"import AsyncStorage from'@react-native-async-storage/async-storage';import Platform from\"react-native-web/dist/exports/Platform\";export class SecurityUtils{static ENCRYPTION_KEY='vibesync_secure_key_v1';static async encryptData(data){try{const utf8Bytes=new TextEncoder().encode(data);const hexString=Array.from(utf8Bytes).map(byte=>byte.toString(16).padStart(2,'0')).join('');return hexString;}catch(error){console.error('Encryption error:',error);return data;}}static async decryptData(encryptedData){try{if(!encryptedData||encryptedData.trim()===''){return'';}const hexString=encryptedData;const bytes=new Uint8Array(hexString.length/2);for(let i=0;i<bytes.length;i++){bytes[i]=parseInt(hexString.substr(i*2,2),16);}return new TextDecoder('utf-8').decode(bytes);}catch(error){console.error('Decryption error:',error);return encryptedData;}}static async secureStore(key,value){try{const encrypted=await this.encryptData(value);await AsyncStorage.setItem(`secure_${key}`,encrypted);}catch(error){console.error('Secure store error:',error);throw error;}}static async secureRetrieve(key){try{const encrypted=await AsyncStorage.getItem(`secure_${key}`);if(!encrypted)return null;return await this.decryptData(encrypted);}catch(error){console.error('Secure retrieve error:',error);return null;}}static async secureRemove(key){try{await AsyncStorage.removeItem(`secure_${key}`);}catch(error){console.error('Secure remove error:',error);}}static sanitizeInput(input){return input.replace(/[<>]/g,'').replace(/javascript:/gi,'').replace(/on\\w+=/gi,'').trim();}static validateEmail(email){const emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;return emailRegex.test(email);}static validatePassword(password){const errors=[];if(password.length<8){errors.push('Password must be at least 8 characters');}if(!/[A-Z]/.test(password)){errors.push('Password must contain at least one uppercase letter');}if(!/[a-z]/.test(password)){errors.push('Password must contain at least one lowercase letter');}if(!/[0-9]/.test(password)){errors.push('Password must contain at least one number');}if(!/[!@#$%^&*]/.test(password)){errors.push('Password must contain at least one special character');}return{valid:errors.length===0,errors};}static generateSecureToken(){const array=new Uint8Array(32);if(true&&typeof crypto!=='undefined'){crypto.getRandomValues(array);}else{for(let i=0;i<array.length;i++){array[i]=Math.floor(Math.random()*256);}}return Array.from(array,byte=>byte.toString(16).padStart(2,'0')).join('');}static hashData(data){let hash=0;for(let i=0;i<data.length;i++){const char=data.charCodeAt(i);hash=(hash<<5)-hash+char;hash=hash&hash;}return hash.toString(36);}static isTokenExpired(expiryTime){return Date.now()>=expiryTime;}static getTokenExpiryTime(durationMs=3600000){return Date.now()+durationMs;}}export class RateLimiter{attempts=new Map();constructor(maxAttempts=5,windowMs=60000){this.maxAttempts=maxAttempts;this.windowMs=windowMs;}canAttempt(key){const now=Date.now();const record=this.attempts.get(key);if(!record||now>record.resetTime){this.attempts.set(key,{count:1,resetTime:now+this.windowMs});return true;}if(record.count>=this.maxAttempts){return false;}record.count++;return true;}getRemainingAttempts(key){const record=this.attempts.get(key);if(!record||Date.now()>record.resetTime){return this.maxAttempts;}return Math.max(0,this.maxAttempts-record.count);}reset(key){this.attempts.delete(key);}}","map":{"version":3,"names":["AsyncStorage","Platform","SecurityUtils","ENCRYPTION_KEY","encryptData","data","utf8Bytes","TextEncoder","encode","hexString","Array","from","map","byte","toString","padStart","join","error","console","decryptData","encryptedData","trim","bytes","Uint8Array","length","i","parseInt","substr","TextDecoder","decode","secureStore","key","value","encrypted","setItem","secureRetrieve","getItem","secureRemove","removeItem","sanitizeInput","input","replace","validateEmail","email","emailRegex","test","validatePassword","password","errors","push","valid","generateSecureToken","array","crypto","getRandomValues","Math","floor","random","hashData","hash","char","charCodeAt","isTokenExpired","expiryTime","Date","now","getTokenExpiryTime","durationMs","RateLimiter","attempts","Map","constructor","maxAttempts","windowMs","canAttempt","record","get","resetTime","set","count","getRemainingAttempts","max","reset","delete"],"sources":["/home/user/rork-vibesync-458/utils/security.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Platform } from 'react-native';\n\nexport class SecurityUtils {\n  private static readonly ENCRYPTION_KEY = 'vibesync_secure_key_v1';\n  \n  static async encryptData(data: string): Promise<string> {\n    try {\n      const utf8Bytes = new TextEncoder().encode(data);\n      const hexString = Array.from(utf8Bytes)\n        .map(byte => byte.toString(16).padStart(2, '0'))\n        .join('');\n      return hexString;\n    } catch (error) {\n      console.error('Encryption error:', error);\n      return data;\n    }\n  }\n\n  static async decryptData(encryptedData: string): Promise<string> {\n    try {\n      if (!encryptedData || encryptedData.trim() === '') {\n        return '';\n      }\n\n      const hexString = encryptedData;\n      const bytes = new Uint8Array(hexString.length / 2);\n      for (let i = 0; i < bytes.length; i++) {\n        bytes[i] = parseInt(hexString.substr(i * 2, 2), 16);\n      }\n      return new TextDecoder('utf-8').decode(bytes);\n    } catch (error) {\n      console.error('Decryption error:', error);\n      return encryptedData;\n    }\n  }\n\n  static async secureStore(key: string, value: string): Promise<void> {\n    try {\n      const encrypted = await this.encryptData(value);\n      await AsyncStorage.setItem(`secure_${key}`, encrypted);\n    } catch (error) {\n      console.error('Secure store error:', error);\n      throw error;\n    }\n  }\n\n  static async secureRetrieve(key: string): Promise<string | null> {\n    try {\n      const encrypted = await AsyncStorage.getItem(`secure_${key}`);\n      if (!encrypted) return null;\n      return await this.decryptData(encrypted);\n    } catch (error) {\n      console.error('Secure retrieve error:', error);\n      return null;\n    }\n  }\n\n  static async secureRemove(key: string): Promise<void> {\n    try {\n      await AsyncStorage.removeItem(`secure_${key}`);\n    } catch (error) {\n      console.error('Secure remove error:', error);\n    }\n  }\n\n  static sanitizeInput(input: string): string {\n    return input\n      .replace(/[<>]/g, '')\n      .replace(/javascript:/gi, '')\n      .replace(/on\\w+=/gi, '')\n      .trim();\n  }\n\n  static validateEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  static validatePassword(password: string): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n    \n    if (password.length < 8) {\n      errors.push('Password must be at least 8 characters');\n    }\n    if (!/[A-Z]/.test(password)) {\n      errors.push('Password must contain at least one uppercase letter');\n    }\n    if (!/[a-z]/.test(password)) {\n      errors.push('Password must contain at least one lowercase letter');\n    }\n    if (!/[0-9]/.test(password)) {\n      errors.push('Password must contain at least one number');\n    }\n    if (!/[!@#$%^&*]/.test(password)) {\n      errors.push('Password must contain at least one special character');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    };\n  }\n\n  static generateSecureToken(): string {\n    const array = new Uint8Array(32);\n    if (Platform.OS === 'web' && typeof crypto !== 'undefined') {\n      crypto.getRandomValues(array);\n    } else {\n      for (let i = 0; i < array.length; i++) {\n        array[i] = Math.floor(Math.random() * 256);\n      }\n    }\n    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n  }\n\n  static hashData(data: string): string {\n    let hash = 0;\n    for (let i = 0; i < data.length; i++) {\n      const char = data.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash;\n    }\n    return hash.toString(36);\n  }\n\n  static isTokenExpired(expiryTime: number): boolean {\n    return Date.now() >= expiryTime;\n  }\n\n  static getTokenExpiryTime(durationMs: number = 3600000): number {\n    return Date.now() + durationMs;\n  }\n}\n\nexport class RateLimiter {\n  private attempts: Map<string, { count: number; resetTime: number }> = new Map();\n  private readonly maxAttempts: number;\n  private readonly windowMs: number;\n\n  constructor(maxAttempts: number = 5, windowMs: number = 60000) {\n    this.maxAttempts = maxAttempts;\n    this.windowMs = windowMs;\n  }\n\n  canAttempt(key: string): boolean {\n    const now = Date.now();\n    const record = this.attempts.get(key);\n\n    if (!record || now > record.resetTime) {\n      this.attempts.set(key, { count: 1, resetTime: now + this.windowMs });\n      return true;\n    }\n\n    if (record.count >= this.maxAttempts) {\n      return false;\n    }\n\n    record.count++;\n    return true;\n  }\n\n  getRemainingAttempts(key: string): number {\n    const record = this.attempts.get(key);\n    if (!record || Date.now() > record.resetTime) {\n      return this.maxAttempts;\n    }\n    return Math.max(0, this.maxAttempts - record.count);\n  }\n\n  reset(key: string): void {\n    this.attempts.delete(key);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}