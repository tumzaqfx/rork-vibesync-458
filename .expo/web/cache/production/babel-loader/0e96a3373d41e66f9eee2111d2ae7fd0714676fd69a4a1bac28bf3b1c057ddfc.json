{"ast":null,"code":"import{useState,useEffect,useCallback,useMemo}from'react';import createContextHook from'@nkzw/create-context-hook';import AsyncStorage from'@react-native-async-storage/async-storage';import{mockUserStatusGroups}from'@/mocks/statuses';const STATUS_STORAGE_KEY='@vibesync_statuses';const VIEWED_STATUSES_KEY='@vibesync_viewed_statuses';export const[StatusProvider,useStatus]=createContextHook(()=>{const[statusGroups,setStatusGroups]=useState([]);const[uploadProgress,setUploadProgress]=useState([]);const[viewedStatuses,setViewedStatuses]=useState(new Set());const[isLoading,setIsLoading]=useState(true);const cleanExpiredStatuses=useCallback(()=>{const now=new Date();setStatusGroups(prev=>{const updated=prev.map(group=>Object.assign({},group,{statuses:group.statuses.filter(status=>status.isPinned||new Date(status.expiresAt)>now)})).filter(group=>group.statuses.length>0);if(updated.length!==prev.length){saveStatuses(updated);}return updated;});},[]);useEffect(()=>{loadStatuses();loadViewedStatuses();const interval=setInterval(cleanExpiredStatuses,60000);return()=>clearInterval(interval);},[cleanExpiredStatuses]);const loadStatuses=async()=>{try{const stored=await AsyncStorage.getItem(STATUS_STORAGE_KEY);if(stored){const parsed=JSON.parse(stored);setStatusGroups(parsed);}else{setStatusGroups(mockUserStatusGroups);await AsyncStorage.setItem(STATUS_STORAGE_KEY,JSON.stringify(mockUserStatusGroups));}}catch(error){console.error('[StatusStore] Error loading statuses:',error);setStatusGroups(mockUserStatusGroups);}finally{setIsLoading(false);}};const loadViewedStatuses=async()=>{try{const stored=await AsyncStorage.getItem(VIEWED_STATUSES_KEY);if(stored){setViewedStatuses(new Set(JSON.parse(stored)));}}catch(error){console.error('[StatusStore] Error loading viewed statuses:',error);}};const saveStatuses=async groups=>{try{await AsyncStorage.setItem(STATUS_STORAGE_KEY,JSON.stringify(groups));}catch(error){console.error('[StatusStore] Error saving statuses:',error);}};const saveViewedStatuses=async viewed=>{try{await AsyncStorage.setItem(VIEWED_STATUSES_KEY,JSON.stringify(Array.from(viewed)));}catch(error){console.error('[StatusStore] Error saving viewed statuses:',error);}};const uploadStatus=useCallback(async(type,content,options)=>{const statusId=`status-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;setUploadProgress(prev=>[...prev,{statusId,progress:0,status:'uploading'}]);try{await simulateUpload(statusId);const newStatus=Object.assign({id:statusId,userId:'current-user',username:'You',avatar:'https://i.pravatar.cc/150?img=50',verified:false,type},type==='photo'||type==='video'?{media:content}:{},type==='text'?{textContent:content}:{},type==='voice'?{voiceContent:content}:{},{overlays:options?.overlays,caption:options?.caption,createdAt:new Date().toISOString(),expiresAt:new Date(Date.now()+24*60*60*1000).toISOString(),isPinned:false,privacy:options?.privacy||'public',analytics:{views:0,replies:0,shares:0,viewers:[]}});setStatusGroups(prev=>{const existingGroupIndex=prev.findIndex(g=>g.userId==='current-user');let updated;if(existingGroupIndex>=0){updated=[...prev];updated[existingGroupIndex]=Object.assign({},updated[existingGroupIndex],{statuses:[newStatus,...updated[existingGroupIndex].statuses],lastStatusAt:newStatus.createdAt});}else{const newGroup={userId:'current-user',username:'You',avatar:'https://i.pravatar.cc/150?img=50',verified:false,statuses:[newStatus],hasUnviewed:false,lastStatusAt:newStatus.createdAt};updated=[newGroup,...prev];}saveStatuses(updated);return updated;});setUploadProgress(prev=>prev.map(p=>p.statusId===statusId?Object.assign({},p,{progress:100,status:'success'}):p));setTimeout(()=>{setUploadProgress(prev=>prev.filter(p=>p.statusId!==statusId));},2000);console.log('[StatusStore] Status uploaded successfully:',statusId);return statusId;}catch(error){console.error('[StatusStore] Upload error:',error);setUploadProgress(prev=>prev.map(p=>p.statusId===statusId?Object.assign({},p,{status:'error',error:'Upload failed'}):p));throw error;}},[]);const simulateUpload=statusId=>{return new Promise(resolve=>{let progress=0;const interval=setInterval(()=>{progress+=Math.random()*30;if(progress>=100){progress=100;clearInterval(interval);setUploadProgress(prev=>prev.map(p=>p.statusId===statusId?Object.assign({},p,{progress:100,status:'processing'}):p));setTimeout(()=>resolve(),500);}else{setUploadProgress(prev=>prev.map(p=>p.statusId===statusId?Object.assign({},p,{progress:Math.floor(progress)}):p));}},200);});};const markStatusAsViewed=useCallback(statusId=>{setViewedStatuses(prev=>{const updated=new Set(prev);updated.add(statusId);saveViewedStatuses(updated);return updated;});setStatusGroups(prev=>{const updated=prev.map(group=>Object.assign({},group,{hasUnviewed:group.statuses.some(s=>!viewedStatuses.has(s.id)&&s.id!==statusId)}));return updated;});},[viewedStatuses]);const addStatusView=useCallback((statusId,viewer)=>{setStatusGroups(prev=>{const updated=prev.map(group=>Object.assign({},group,{statuses:group.statuses.map(status=>{if(status.id===statusId){const viewerExists=status.analytics.viewers.some(v=>v.userId===viewer.userId);if(!viewerExists){return Object.assign({},status,{analytics:Object.assign({},status.analytics,{views:status.analytics.views+1,viewers:[...status.analytics.viewers,viewer]})});}}return status;})}));saveStatuses(updated);return updated;});},[]);const deleteStatus=useCallback(statusId=>{setStatusGroups(prev=>{const updated=prev.map(group=>Object.assign({},group,{statuses:group.statuses.filter(s=>s.id!==statusId)})).filter(group=>group.statuses.length>0);saveStatuses(updated);return updated;});},[]);const pinStatus=useCallback(statusId=>{setStatusGroups(prev=>{const updated=prev.map(group=>Object.assign({},group,{statuses:group.statuses.map(status=>status.id===statusId?Object.assign({},status,{isPinned:!status.isPinned}):status)}));saveStatuses(updated);return updated;});},[]);const muteUserStatus=useCallback(userId=>{setStatusGroups(prev=>{const updated=prev.map(group=>group.userId===userId?Object.assign({},group,{statuses:group.statuses.map(s=>Object.assign({},s,{isMuted:true}))}):group);saveStatuses(updated);return updated;});},[]);const hideUserStatus=useCallback(userId=>{setStatusGroups(prev=>{const updated=prev.filter(group=>group.userId!==userId);saveStatuses(updated);return updated;});},[]);const getStatusById=useCallback(statusId=>{for(const group of statusGroups){const status=group.statuses.find(s=>s.id===statusId);if(status)return status;}return undefined;},[statusGroups]);const getUserStatuses=useCallback(userId=>{const group=statusGroups.find(g=>g.userId===userId);return group?.statuses||[];},[statusGroups]);return useMemo(()=>({statusGroups,uploadProgress,viewedStatuses,isLoading,uploadStatus,markStatusAsViewed,addStatusView,deleteStatus,pinStatus,muteUserStatus,hideUserStatus,getStatusById,getUserStatuses}),[statusGroups,uploadProgress,viewedStatuses,isLoading,uploadStatus,markStatusAsViewed,addStatusView,deleteStatus,pinStatus,muteUserStatus,hideUserStatus,getStatusById,getUserStatuses]);});","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","createContextHook","AsyncStorage","mockUserStatusGroups","STATUS_STORAGE_KEY","VIEWED_STATUSES_KEY","StatusProvider","useStatus","statusGroups","setStatusGroups","uploadProgress","setUploadProgress","viewedStatuses","setViewedStatuses","Set","isLoading","setIsLoading","cleanExpiredStatuses","now","Date","prev","updated","map","group","Object","assign","statuses","filter","status","isPinned","expiresAt","length","saveStatuses","loadStatuses","loadViewedStatuses","interval","setInterval","clearInterval","stored","getItem","parsed","JSON","parse","setItem","stringify","error","console","groups","saveViewedStatuses","viewed","Array","from","uploadStatus","type","content","options","statusId","Math","random","toString","substr","progress","simulateUpload","newStatus","id","userId","username","avatar","verified","media","textContent","voiceContent","overlays","caption","createdAt","toISOString","privacy","analytics","views","replies","shares","viewers","existingGroupIndex","findIndex","g","lastStatusAt","newGroup","hasUnviewed","p","setTimeout","log","Promise","resolve","floor","markStatusAsViewed","add","some","s","has","addStatusView","viewer","viewerExists","v","deleteStatus","pinStatus","muteUserStatus","isMuted","hideUserStatus","getStatusById","find","undefined","getUserStatuses"],"sources":["/home/user/rork-vibesync-458/hooks/status-store.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\nimport createContextHook from '@nkzw/create-context-hook';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Status, UserStatusGroup, StatusUploadProgress, StatusType, StatusViewer } from '@/types/status';\nimport { mockUserStatusGroups } from '@/mocks/statuses';\n\nconst STATUS_STORAGE_KEY = '@vibesync_statuses';\nconst VIEWED_STATUSES_KEY = '@vibesync_viewed_statuses';\n\nexport const [StatusProvider, useStatus] = createContextHook(() => {\n  const [statusGroups, setStatusGroups] = useState<UserStatusGroup[]>([]);\n  const [uploadProgress, setUploadProgress] = useState<StatusUploadProgress[]>([]);\n  const [viewedStatuses, setViewedStatuses] = useState<Set<string>>(new Set());\n  const [isLoading, setIsLoading] = useState(true);\n\n  const cleanExpiredStatuses = useCallback(() => {\n    const now = new Date();\n    setStatusGroups(prev => {\n      const updated = prev\n        .map(group => ({\n          ...group,\n          statuses: group.statuses.filter(status => \n            status.isPinned || new Date(status.expiresAt) > now\n          ),\n        }))\n        .filter(group => group.statuses.length > 0);\n      \n      if (updated.length !== prev.length) {\n        saveStatuses(updated);\n      }\n      return updated;\n    });\n  }, []);\n\n  useEffect(() => {\n    loadStatuses();\n    loadViewedStatuses();\n    const interval = setInterval(cleanExpiredStatuses, 60000);\n    return () => clearInterval(interval);\n  }, [cleanExpiredStatuses]);\n\n  const loadStatuses = async () => {\n    try {\n      const stored = await AsyncStorage.getItem(STATUS_STORAGE_KEY);\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        setStatusGroups(parsed);\n      } else {\n        setStatusGroups(mockUserStatusGroups);\n        await AsyncStorage.setItem(STATUS_STORAGE_KEY, JSON.stringify(mockUserStatusGroups));\n      }\n    } catch (error) {\n      console.error('[StatusStore] Error loading statuses:', error);\n      setStatusGroups(mockUserStatusGroups);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadViewedStatuses = async () => {\n    try {\n      const stored = await AsyncStorage.getItem(VIEWED_STATUSES_KEY);\n      if (stored) {\n        setViewedStatuses(new Set(JSON.parse(stored)));\n      }\n    } catch (error) {\n      console.error('[StatusStore] Error loading viewed statuses:', error);\n    }\n  };\n\n  const saveStatuses = async (groups: UserStatusGroup[]) => {\n    try {\n      await AsyncStorage.setItem(STATUS_STORAGE_KEY, JSON.stringify(groups));\n    } catch (error) {\n      console.error('[StatusStore] Error saving statuses:', error);\n    }\n  };\n\n  const saveViewedStatuses = async (viewed: Set<string>) => {\n    try {\n      await AsyncStorage.setItem(VIEWED_STATUSES_KEY, JSON.stringify(Array.from(viewed)));\n    } catch (error) {\n      console.error('[StatusStore] Error saving viewed statuses:', error);\n    }\n  };\n\n  const uploadStatus = useCallback(async (\n    type: StatusType,\n    content: any,\n    options?: {\n      caption?: string;\n      overlays?: any[];\n      privacy?: string;\n    }\n  ): Promise<string> => {\n    const statusId = `status-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    \n    setUploadProgress(prev => [...prev, {\n      statusId,\n      progress: 0,\n      status: 'uploading',\n    }]);\n\n    try {\n      await simulateUpload(statusId);\n\n      const newStatus: Status = {\n        id: statusId,\n        userId: 'current-user',\n        username: 'You',\n        avatar: 'https://i.pravatar.cc/150?img=50',\n        verified: false,\n        type,\n        ...(type === 'photo' || type === 'video' ? { media: content } : {}),\n        ...(type === 'text' ? { textContent: content } : {}),\n        ...(type === 'voice' ? { voiceContent: content } : {}),\n        overlays: options?.overlays,\n        caption: options?.caption,\n        createdAt: new Date().toISOString(),\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n        isPinned: false,\n        privacy: (options?.privacy as any) || 'public',\n        analytics: {\n          views: 0,\n          replies: 0,\n          shares: 0,\n          viewers: [],\n        },\n      };\n\n      setStatusGroups(prev => {\n        const existingGroupIndex = prev.findIndex(g => g.userId === 'current-user');\n        let updated: UserStatusGroup[];\n\n        if (existingGroupIndex >= 0) {\n          updated = [...prev];\n          updated[existingGroupIndex] = {\n            ...updated[existingGroupIndex],\n            statuses: [newStatus, ...updated[existingGroupIndex].statuses],\n            lastStatusAt: newStatus.createdAt,\n          };\n        } else {\n          const newGroup: UserStatusGroup = {\n            userId: 'current-user',\n            username: 'You',\n            avatar: 'https://i.pravatar.cc/150?img=50',\n            verified: false,\n            statuses: [newStatus],\n            hasUnviewed: false,\n            lastStatusAt: newStatus.createdAt,\n          };\n          updated = [newGroup, ...prev];\n        }\n\n        saveStatuses(updated);\n        return updated;\n      });\n\n      setUploadProgress(prev => \n        prev.map(p => p.statusId === statusId \n          ? { ...p, progress: 100, status: 'success' as const }\n          : p\n        )\n      );\n\n      setTimeout(() => {\n        setUploadProgress(prev => prev.filter(p => p.statusId !== statusId));\n      }, 2000);\n\n      console.log('[StatusStore] Status uploaded successfully:', statusId);\n      return statusId;\n    } catch (error) {\n      console.error('[StatusStore] Upload error:', error);\n      setUploadProgress(prev => \n        prev.map(p => p.statusId === statusId \n          ? { ...p, status: 'error' as const, error: 'Upload failed' }\n          : p\n        )\n      );\n      throw error;\n    }\n  }, []);\n\n  const simulateUpload = (statusId: string): Promise<void> => {\n    return new Promise((resolve) => {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += Math.random() * 30;\n        if (progress >= 100) {\n          progress = 100;\n          clearInterval(interval);\n          setUploadProgress(prev => \n            prev.map(p => p.statusId === statusId \n              ? { ...p, progress: 100, status: 'processing' as const }\n              : p\n            )\n          );\n          setTimeout(() => resolve(), 500);\n        } else {\n          setUploadProgress(prev => \n            prev.map(p => p.statusId === statusId \n              ? { ...p, progress: Math.floor(progress) }\n              : p\n            )\n          );\n        }\n      }, 200);\n    });\n  };\n\n  const markStatusAsViewed = useCallback((statusId: string) => {\n    setViewedStatuses(prev => {\n      const updated = new Set(prev);\n      updated.add(statusId);\n      saveViewedStatuses(updated);\n      return updated;\n    });\n\n    setStatusGroups(prev => {\n      const updated = prev.map(group => ({\n        ...group,\n        hasUnviewed: group.statuses.some(s => !viewedStatuses.has(s.id) && s.id !== statusId),\n      }));\n      return updated;\n    });\n  }, [viewedStatuses]);\n\n  const addStatusView = useCallback((statusId: string, viewer: StatusViewer) => {\n    setStatusGroups(prev => {\n      const updated = prev.map(group => ({\n        ...group,\n        statuses: group.statuses.map(status => {\n          if (status.id === statusId) {\n            const viewerExists = status.analytics.viewers.some(v => v.userId === viewer.userId);\n            if (!viewerExists) {\n              return {\n                ...status,\n                analytics: {\n                  ...status.analytics,\n                  views: status.analytics.views + 1,\n                  viewers: [...status.analytics.viewers, viewer],\n                },\n              };\n            }\n          }\n          return status;\n        }),\n      }));\n      saveStatuses(updated);\n      return updated;\n    });\n  }, []);\n\n  const deleteStatus = useCallback((statusId: string) => {\n    setStatusGroups(prev => {\n      const updated = prev\n        .map(group => ({\n          ...group,\n          statuses: group.statuses.filter(s => s.id !== statusId),\n        }))\n        .filter(group => group.statuses.length > 0);\n      saveStatuses(updated);\n      return updated;\n    });\n  }, []);\n\n  const pinStatus = useCallback((statusId: string) => {\n    setStatusGroups(prev => {\n      const updated = prev.map(group => ({\n        ...group,\n        statuses: group.statuses.map(status => \n          status.id === statusId \n            ? { ...status, isPinned: !status.isPinned }\n            : status\n        ),\n      }));\n      saveStatuses(updated);\n      return updated;\n    });\n  }, []);\n\n  const muteUserStatus = useCallback((userId: string) => {\n    setStatusGroups(prev => {\n      const updated = prev.map(group => \n        group.userId === userId \n          ? { ...group, statuses: group.statuses.map(s => ({ ...s, isMuted: true })) }\n          : group\n      );\n      saveStatuses(updated);\n      return updated;\n    });\n  }, []);\n\n  const hideUserStatus = useCallback((userId: string) => {\n    setStatusGroups(prev => {\n      const updated = prev.filter(group => group.userId !== userId);\n      saveStatuses(updated);\n      return updated;\n    });\n  }, []);\n\n  const getStatusById = useCallback((statusId: string): Status | undefined => {\n    for (const group of statusGroups) {\n      const status = group.statuses.find(s => s.id === statusId);\n      if (status) return status;\n    }\n    return undefined;\n  }, [statusGroups]);\n\n  const getUserStatuses = useCallback((userId: string): Status[] => {\n    const group = statusGroups.find(g => g.userId === userId);\n    return group?.statuses || [];\n  }, [statusGroups]);\n\n  return useMemo(() => ({\n    statusGroups,\n    uploadProgress,\n    viewedStatuses,\n    isLoading,\n    uploadStatus,\n    markStatusAsViewed,\n    addStatusView,\n    deleteStatus,\n    pinStatus,\n    muteUserStatus,\n    hideUserStatus,\n    getStatusById,\n    getUserStatuses,\n  }), [\n    statusGroups,\n    uploadProgress,\n    viewedStatuses,\n    isLoading,\n    uploadStatus,\n    markStatusAsViewed,\n    addStatusView,\n    deleteStatus,\n    pinStatus,\n    muteUserStatus,\n    hideUserStatus,\n    getStatusById,\n    getUserStatuses,\n  ]);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}