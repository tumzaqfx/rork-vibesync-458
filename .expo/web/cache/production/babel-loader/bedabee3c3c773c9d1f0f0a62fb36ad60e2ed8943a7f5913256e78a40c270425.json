{"ast":null,"code":"\"use strict\";import{nanoid}from'nanoid/non-secure';import*as React from'react';import useLatestCallback from'use-latest-callback';import{NavigationHelpersContext}from\"./NavigationHelpersContext.js\";import{NavigationRouteContext}from\"./NavigationRouteContext.js\";import{PreventRemoveContext}from\"./PreventRemoveContext.js\";import{jsx as _jsx}from\"react/jsx-runtime\";const transformPreventedRoutes=preventedRoutesMap=>{const preventedRoutesToTransform=[...preventedRoutesMap.values()];const preventedRoutes=preventedRoutesToTransform.reduce((acc,{routeKey,preventRemove})=>{acc[routeKey]={preventRemove:acc[routeKey]?.preventRemove||preventRemove};return acc;},{});return preventedRoutes;};export function PreventRemoveProvider({children}){const[parentId]=React.useState(()=>nanoid());const[preventedRoutesMap,setPreventedRoutesMap]=React.useState(()=>new Map());const navigation=React.useContext(NavigationHelpersContext);const route=React.useContext(NavigationRouteContext);const preventRemoveContextValue=React.useContext(PreventRemoveContext);const setParentPrevented=preventRemoveContextValue?.setPreventRemove;const setPreventRemove=useLatestCallback((id,routeKey,preventRemove)=>{if(preventRemove&&(navigation==null||navigation?.getState().routes.every(route=>route.key!==routeKey))){throw new Error(`Couldn't find a route with the key ${routeKey}. Is your component inside NavigationContent?`);}setPreventedRoutesMap(prevPrevented=>{if(routeKey===prevPrevented.get(id)?.routeKey&&preventRemove===prevPrevented.get(id)?.preventRemove){return prevPrevented;}const nextPrevented=new Map(prevPrevented);if(preventRemove){nextPrevented.set(id,{routeKey,preventRemove});}else{nextPrevented.delete(id);}return nextPrevented;});});const isPrevented=[...preventedRoutesMap.values()].some(({preventRemove})=>preventRemove);React.useEffect(()=>{if(route?.key!==undefined&&setParentPrevented!==undefined){setParentPrevented(parentId,route.key,isPrevented);return()=>{setParentPrevented(parentId,route.key,false);};}return;},[parentId,isPrevented,route?.key,setParentPrevented]);const value=React.useMemo(()=>({setPreventRemove,preventedRoutes:transformPreventedRoutes(preventedRoutesMap)}),[setPreventRemove,preventedRoutesMap]);return _jsx(PreventRemoveContext.Provider,{value:value,children:children});}","map":{"version":3,"names":["nanoid","React","useLatestCallback","NavigationHelpersContext","NavigationRouteContext","PreventRemoveContext","jsx","_jsx","transformPreventedRoutes","preventedRoutesMap","preventedRoutesToTransform","values","preventedRoutes","reduce","acc","routeKey","preventRemove","PreventRemoveProvider","children","parentId","useState","setPreventedRoutesMap","Map","navigation","useContext","route","preventRemoveContextValue","setParentPrevented","setPreventRemove","id","getState","routes","every","key","Error","prevPrevented","get","nextPrevented","set","delete","isPrevented","some","useEffect","undefined","value","useMemo","Provider"],"sources":["/home/user/rork-vibesync-458/node_modules/@react-navigation/core/src/PreventRemoveProvider.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport { NavigationHelpersContext } from './NavigationHelpersContext';\nimport { NavigationRouteContext } from './NavigationRouteContext';\nimport {\n  type PreventedRoutes,\n  PreventRemoveContext,\n} from './PreventRemoveContext';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype PreventedRoutesMap = Map<\n  string,\n  {\n    routeKey: string;\n    preventRemove: boolean;\n  }\n>;\n\n/**\n * Util function to transform map of prevented routes to a simpler object.\n */\nconst transformPreventedRoutes = (\n  preventedRoutesMap: PreventedRoutesMap\n): PreventedRoutes => {\n  const preventedRoutesToTransform = [...preventedRoutesMap.values()];\n\n  const preventedRoutes = preventedRoutesToTransform.reduce<PreventedRoutes>(\n    (acc, { routeKey, preventRemove }) => {\n      acc[routeKey] = {\n        preventRemove: acc[routeKey]?.preventRemove || preventRemove,\n      };\n      return acc;\n    },\n    {}\n  );\n\n  return preventedRoutes;\n};\n\n/**\n * Component used for managing which routes have to be prevented from removal in native-stack.\n */\nexport function PreventRemoveProvider({ children }: Props) {\n  const [parentId] = React.useState(() => nanoid());\n  const [preventedRoutesMap, setPreventedRoutesMap] =\n    React.useState<PreventedRoutesMap>(() => new Map());\n\n  const navigation = React.useContext(NavigationHelpersContext);\n  const route = React.useContext(NavigationRouteContext);\n\n  const preventRemoveContextValue = React.useContext(PreventRemoveContext);\n  // take `setPreventRemove` from parent context - if exist it means we're in a nested context\n  const setParentPrevented = preventRemoveContextValue?.setPreventRemove;\n\n  const setPreventRemove = useLatestCallback(\n    (id: string, routeKey: string, preventRemove: boolean): void => {\n      if (\n        preventRemove &&\n        (navigation == null ||\n          navigation\n            ?.getState()\n            .routes.every((route) => route.key !== routeKey))\n      ) {\n        throw new Error(\n          `Couldn't find a route with the key ${routeKey}. Is your component inside NavigationContent?`\n        );\n      }\n\n      setPreventedRoutesMap((prevPrevented) => {\n        // values haven't changed - do nothing\n        if (\n          routeKey === prevPrevented.get(id)?.routeKey &&\n          preventRemove === prevPrevented.get(id)?.preventRemove\n        ) {\n          return prevPrevented;\n        }\n\n        const nextPrevented = new Map(prevPrevented);\n\n        if (preventRemove) {\n          nextPrevented.set(id, {\n            routeKey,\n            preventRemove,\n          });\n        } else {\n          nextPrevented.delete(id);\n        }\n\n        return nextPrevented;\n      });\n    }\n  );\n\n  const isPrevented = [...preventedRoutesMap.values()].some(\n    ({ preventRemove }) => preventRemove\n  );\n\n  React.useEffect(() => {\n    if (route?.key !== undefined && setParentPrevented !== undefined) {\n      // when route is defined (and setParentPrevented) it means we're in a nested stack\n      // route.key then will be the route key of parent\n      setParentPrevented(parentId, route.key, isPrevented);\n      return () => {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n\n    return;\n  }, [parentId, isPrevented, route?.key, setParentPrevented]);\n\n  const value = React.useMemo(\n    () => ({\n      setPreventRemove,\n      preventedRoutes: transformPreventedRoutes(preventedRoutesMap),\n    }),\n    [setPreventRemove, preventedRoutesMap]\n  );\n\n  return (\n    <PreventRemoveContext.Provider value={value}>\n      {children}\n    </PreventRemoveContext.Provider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}