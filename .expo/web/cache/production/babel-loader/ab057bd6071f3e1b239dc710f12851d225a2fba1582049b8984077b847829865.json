{"ast":null,"code":"'use strict';import{useHandler}from\"./useHandler.js\";import{useEvent}from\"./useEvent.js\";const EVENT_TYPE={UNDETERMINED:0,FAILED:1,BEGAN:2,CANCELLED:3,ACTIVE:4,END:5};const _worklet_3268817111188_init_data={code:\"function reactNativeReanimated_useAnimatedGestureHandlerJs1(e){const{useWeb,EVENT_TYPE,handlers,context}=this.__closure;const event=useWeb?e.nativeEvent:e;if(event.state===EVENT_TYPE.BEGAN&&handlers.onStart){handlers.onStart(event,context);}if(event.state===EVENT_TYPE.ACTIVE&&handlers.onActive){handlers.onActive(event,context);}if(event.oldState===EVENT_TYPE.ACTIVE&&event.state===EVENT_TYPE.END&&handlers.onEnd){handlers.onEnd(event,context);}if(event.oldState===EVENT_TYPE.BEGAN&&event.state===EVENT_TYPE.FAILED&&handlers.onFail){handlers.onFail(event,context);}if(event.oldState===EVENT_TYPE.ACTIVE&&event.state===EVENT_TYPE.CANCELLED&&handlers.onCancel){handlers.onCancel(event,context);}if((event.oldState===EVENT_TYPE.BEGAN||event.oldState===EVENT_TYPE.ACTIVE)&&event.state!==EVENT_TYPE.BEGAN&&event.state!==EVENT_TYPE.ACTIVE&&handlers.onFinish){handlers.onFinish(event,context,event.state===EVENT_TYPE.CANCELLED||event.state===EVENT_TYPE.FAILED);}}\"};export function useAnimatedGestureHandler(handlers,dependencies){const{context,doDependenciesDiffer,useWeb}=useHandler(handlers,dependencies);const handler=function(){const reactNativeReanimated_useAnimatedGestureHandlerJs1=function(e){const event=useWeb?e.nativeEvent:e;if(event.state===EVENT_TYPE.BEGAN&&handlers.onStart){handlers.onStart(event,context);}if(event.state===EVENT_TYPE.ACTIVE&&handlers.onActive){handlers.onActive(event,context);}if(event.oldState===EVENT_TYPE.ACTIVE&&event.state===EVENT_TYPE.END&&handlers.onEnd){handlers.onEnd(event,context);}if(event.oldState===EVENT_TYPE.BEGAN&&event.state===EVENT_TYPE.FAILED&&handlers.onFail){handlers.onFail(event,context);}if(event.oldState===EVENT_TYPE.ACTIVE&&event.state===EVENT_TYPE.CANCELLED&&handlers.onCancel){handlers.onCancel(event,context);}if((event.oldState===EVENT_TYPE.BEGAN||event.oldState===EVENT_TYPE.ACTIVE)&&event.state!==EVENT_TYPE.BEGAN&&event.state!==EVENT_TYPE.ACTIVE&&handlers.onFinish){handlers.onFinish(event,context,event.state===EVENT_TYPE.CANCELLED||event.state===EVENT_TYPE.FAILED);}};reactNativeReanimated_useAnimatedGestureHandlerJs1.__closure={useWeb,EVENT_TYPE,handlers,context};reactNativeReanimated_useAnimatedGestureHandlerJs1.__workletHash=3268817111188;reactNativeReanimated_useAnimatedGestureHandlerJs1.__initData=_worklet_3268817111188_init_data;return reactNativeReanimated_useAnimatedGestureHandlerJs1;}();if(useWeb){return handler;}return useEvent(handler,['onGestureHandlerStateChange','onGestureHandlerEvent'],doDependenciesDiffer);}","map":{"version":3,"names":["useHandler","useEvent","EVENT_TYPE","UNDETERMINED","FAILED","BEGAN","CANCELLED","ACTIVE","END","_worklet_3268817111188_init_data","code","useAnimatedGestureHandler","handlers","dependencies","context","doDependenciesDiffer","useWeb","handler","reactNativeReanimated_useAnimatedGestureHandlerJs1","e","event","nativeEvent","state","onStart","onActive","oldState","onEnd","onFail","onCancel","onFinish","__closure","__workletHash","__initData"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-reanimated/src/hook/useAnimatedGestureHandler.ts"],"sourcesContent":["'use strict';\nimport type {\n  DependencyList,\n  NativeEventWrapper,\n  ReanimatedEvent,\n} from './commonTypes';\nimport { useHandler } from './useHandler';\nimport { useEvent } from './useEvent';\n\nconst EVENT_TYPE = {\n  UNDETERMINED: 0,\n  FAILED: 1,\n  BEGAN: 2,\n  CANCELLED: 3,\n  ACTIVE: 4,\n  END: 5,\n} as const;\n\ntype StateType = (typeof EVENT_TYPE)[keyof typeof EVENT_TYPE];\n\n// This type comes from React Native Gesture Handler\n// import type { PanGestureHandlerGestureEvent as DefaultEvent } from 'react-native-gesture-handler';\ntype DefaultEvent = {\n  nativeEvent: {\n    readonly handlerTag: number;\n    readonly numberOfPointers: number;\n    readonly state: (typeof EVENT_TYPE)[keyof typeof EVENT_TYPE];\n    readonly x: number;\n    readonly y: number;\n    readonly absoluteX: number;\n    readonly absoluteY: number;\n    readonly translationX: number;\n    readonly translationY: number;\n    readonly velocityX: number;\n    readonly velocityY: number;\n  };\n};\n\ninterface PropsUsedInUseAnimatedGestureHandler {\n  handlerTag?: number;\n  numberOfPointers?: number;\n  state?: StateType;\n  oldState?: StateType;\n}\n\nexport type GestureHandlerEvent<Event extends object> =\n  | ReanimatedEvent<Event>\n  | Event;\n\ntype GestureHandler<\n  Event extends NativeEventWrapper<PropsUsedInUseAnimatedGestureHandler>,\n  Context extends Record<string, unknown>,\n> = (\n  eventPayload: ReanimatedEvent<Event>,\n  context: Context,\n  isCanceledOrFailed?: boolean\n) => void;\n\nexport interface GestureHandlers<\n  Event extends NativeEventWrapper<PropsUsedInUseAnimatedGestureHandler>,\n  Context extends Record<string, unknown>,\n> {\n  [key: string]: GestureHandler<Event, Context> | undefined;\n  onStart?: GestureHandler<Event, Context>;\n  onActive?: GestureHandler<Event, Context>;\n  onEnd?: GestureHandler<Event, Context>;\n  onFail?: GestureHandler<Event, Context>;\n  onCancel?: GestureHandler<Event, Context>;\n  onFinish?: GestureHandler<Event, Context>;\n}\n\n/**\n * @deprecated UseAnimatedGestureHandler is an old API which is no longer\n *   supported.\n *\n *   Please check\n *   https://docs.swmansion.com/react-native-gesture-handler/docs/guides/upgrading-to-2/\n *   for information about how to migrate to `react-native-gesture-handler` v2\n */\nexport function useAnimatedGestureHandler<\n  Event extends\n    NativeEventWrapper<PropsUsedInUseAnimatedGestureHandler> = DefaultEvent,\n  Context extends Record<string, unknown> = Record<string, unknown>,\n>(handlers: GestureHandlers<Event, Context>, dependencies?: DependencyList) {\n  type WebOrNativeEvent = Event | ReanimatedEvent<Event>;\n\n  const { context, doDependenciesDiffer, useWeb } = useHandler<Event, Context>(\n    handlers,\n    dependencies\n  );\n  const handler = (e: WebOrNativeEvent) => {\n    'worklet';\n    const event = useWeb\n      ? // On Web we get events straight from React Native and they don't have\n        // the `eventName` field there. To simplify the types here we just\n        // cast it as the field was available.\n        ((e as Event).nativeEvent as ReanimatedEvent<Event>)\n      : (e as ReanimatedEvent<Event>);\n\n    if (event.state === EVENT_TYPE.BEGAN && handlers.onStart) {\n      handlers.onStart(event, context);\n    }\n    if (event.state === EVENT_TYPE.ACTIVE && handlers.onActive) {\n      handlers.onActive(event, context);\n    }\n    if (\n      event.oldState === EVENT_TYPE.ACTIVE &&\n      event.state === EVENT_TYPE.END &&\n      handlers.onEnd\n    ) {\n      handlers.onEnd(event, context);\n    }\n    if (\n      event.oldState === EVENT_TYPE.BEGAN &&\n      event.state === EVENT_TYPE.FAILED &&\n      handlers.onFail\n    ) {\n      handlers.onFail(event, context);\n    }\n    if (\n      event.oldState === EVENT_TYPE.ACTIVE &&\n      event.state === EVENT_TYPE.CANCELLED &&\n      handlers.onCancel\n    ) {\n      handlers.onCancel(event, context);\n    }\n    if (\n      (event.oldState === EVENT_TYPE.BEGAN ||\n        event.oldState === EVENT_TYPE.ACTIVE) &&\n      event.state !== EVENT_TYPE.BEGAN &&\n      event.state !== EVENT_TYPE.ACTIVE &&\n      handlers.onFinish\n    ) {\n      handlers.onFinish(\n        event,\n        context,\n        event.state === EVENT_TYPE.CANCELLED ||\n          event.state === EVENT_TYPE.FAILED\n      );\n    }\n  };\n\n  if (useWeb) {\n    return handler;\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useEvent<Event>(\n    handler,\n    ['onGestureHandlerStateChange', 'onGestureHandlerEvent'],\n    doDependenciesDiffer\n    // This is not correct but we want to make GH think it receives a function.\n  ) as unknown as (e: Event) => void;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}