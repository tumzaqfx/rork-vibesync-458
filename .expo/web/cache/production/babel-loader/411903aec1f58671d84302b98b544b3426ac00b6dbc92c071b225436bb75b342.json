{"ast":null,"code":"import AsyncStorage from'@react-native-async-storage/async-storage';import NetInfo from'@react-native-community/netinfo';const DEFAULT_TTL=1000*60*60;const CACHE_VERSION='1.0.0';const CACHE_PREFIX='@vibesync_cache_';export class AdvancedCache{static memoryCache=new Map();static isOnline=true;static async initialize(){const state=await NetInfo.fetch();this.isOnline=state.isConnected??true;NetInfo.addEventListener(state=>{this.isOnline=state.isConnected??true;console.log('[Cache] Network status:',this.isOnline?'online':'offline');});console.log('[Cache] Initialized');}static async set(key,data,options={}){const ttl=options.ttl||DEFAULT_TTL;const version=options.version||CACHE_VERSION;const now=Date.now();const entry={data,timestamp:now,expiresAt:now+ttl,version};this.memoryCache.set(key,entry);try{await AsyncStorage.setItem(`${CACHE_PREFIX}${key}`,JSON.stringify(entry));console.log('[Cache] Set:',key);}catch(error){console.error('[Cache] Error setting cache:',error);}}static async get(key,options={}){if(options.forceRefresh){await this.remove(key);return null;}let entry=this.memoryCache.get(key);if(!entry){try{const stored=await AsyncStorage.getItem(`${CACHE_PREFIX}${key}`);if(stored){entry=JSON.parse(stored);this.memoryCache.set(key,entry);}}catch(error){console.error('[Cache] Error getting cache:',error);return null;}}if(!entry){return null;}const now=Date.now();const version=options.version||CACHE_VERSION;if(entry.expiresAt<now||entry.version!==version){await this.remove(key);return null;}console.log('[Cache] Hit:',key);return entry.data;}static async remove(key){this.memoryCache.delete(key);try{await AsyncStorage.removeItem(`${CACHE_PREFIX}${key}`);console.log('[Cache] Removed:',key);}catch(error){console.error('[Cache] Error removing cache:',error);}}static async clear(){this.memoryCache.clear();try{const keys=await AsyncStorage.getAllKeys();const cacheKeys=keys.filter(key=>key.startsWith(CACHE_PREFIX));await AsyncStorage.multiRemove(cacheKeys);console.log('[Cache] Cleared all cache');}catch(error){console.error('[Cache] Error clearing cache:',error);}}static async has(key){const data=await this.get(key);return data!==null;}static async getOrFetch(key,fetchFn,options={}){const cached=await this.get(key,options);if(cached!==null){return cached;}if(!this.isOnline){throw new Error('No cached data available and device is offline');}const data=await fetchFn();await this.set(key,data,options);return data;}static isOnlineMode(){return this.isOnline;}static async getCacheSize(){try{const keys=await AsyncStorage.getAllKeys();const cacheKeys=keys.filter(key=>key.startsWith(CACHE_PREFIX));let totalSize=0;for(const key of cacheKeys){const value=await AsyncStorage.getItem(key);if(value){totalSize+=value.length;}}return totalSize;}catch(error){console.error('[Cache] Error calculating cache size:',error);return 0;}}static async getCacheStats(){try{const keys=await AsyncStorage.getAllKeys();const cacheKeys=keys.filter(key=>key.startsWith(CACHE_PREFIX));const size=await this.getCacheSize();return{entries:cacheKeys.length,size,memoryEntries:this.memoryCache.size};}catch(error){console.error('[Cache] Error getting cache stats:',error);return{entries:0,size:0,memoryEntries:0};}}static async cleanExpired(){try{const keys=await AsyncStorage.getAllKeys();const cacheKeys=keys.filter(key=>key.startsWith(CACHE_PREFIX));const now=Date.now();let cleaned=0;for(const key of cacheKeys){const value=await AsyncStorage.getItem(key);if(value){const entry=JSON.parse(value);if(entry.expiresAt<now){await AsyncStorage.removeItem(key);this.memoryCache.delete(key.replace(CACHE_PREFIX,''));cleaned++;}}}console.log('[Cache] Cleaned',cleaned,'expired entries');return cleaned;}catch(error){console.error('[Cache] Error cleaning expired cache:',error);return 0;}}}","map":{"version":3,"names":["AsyncStorage","NetInfo","DEFAULT_TTL","CACHE_VERSION","CACHE_PREFIX","AdvancedCache","memoryCache","Map","isOnline","initialize","state","fetch","isConnected","addEventListener","console","log","set","key","data","options","ttl","version","now","Date","entry","timestamp","expiresAt","setItem","JSON","stringify","error","get","forceRefresh","remove","stored","getItem","parse","delete","removeItem","clear","keys","getAllKeys","cacheKeys","filter","startsWith","multiRemove","has","getOrFetch","fetchFn","cached","Error","isOnlineMode","getCacheSize","totalSize","value","length","getCacheStats","size","entries","memoryEntries","cleanExpired","cleaned","replace"],"sources":["/home/user/rork-vibesync-458/utils/advanced-cache.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport NetInfo from '@react-native-community/netinfo';\n\nexport interface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n  expiresAt: number;\n  version: string;\n}\n\nexport interface CacheOptions {\n  ttl?: number;\n  version?: string;\n  forceRefresh?: boolean;\n}\n\nconst DEFAULT_TTL = 1000 * 60 * 60;\nconst CACHE_VERSION = '1.0.0';\nconst CACHE_PREFIX = '@vibesync_cache_';\n\nexport class AdvancedCache {\n  private static memoryCache: Map<string, CacheEntry<any>> = new Map();\n  private static isOnline: boolean = true;\n\n  static async initialize(): Promise<void> {\n    const state = await NetInfo.fetch();\n    this.isOnline = state.isConnected ?? true;\n\n    NetInfo.addEventListener(state => {\n      this.isOnline = state.isConnected ?? true;\n      console.log('[Cache] Network status:', this.isOnline ? 'online' : 'offline');\n    });\n\n    console.log('[Cache] Initialized');\n  }\n\n  static async set<T>(key: string, data: T, options: CacheOptions = {}): Promise<void> {\n    const ttl = options.ttl || DEFAULT_TTL;\n    const version = options.version || CACHE_VERSION;\n    const now = Date.now();\n\n    const entry: CacheEntry<T> = {\n      data,\n      timestamp: now,\n      expiresAt: now + ttl,\n      version,\n    };\n\n    this.memoryCache.set(key, entry);\n\n    try {\n      await AsyncStorage.setItem(\n        `${CACHE_PREFIX}${key}`,\n        JSON.stringify(entry)\n      );\n      console.log('[Cache] Set:', key);\n    } catch (error) {\n      console.error('[Cache] Error setting cache:', error);\n    }\n  }\n\n  static async get<T>(key: string, options: CacheOptions = {}): Promise<T | null> {\n    if (options.forceRefresh) {\n      await this.remove(key);\n      return null;\n    }\n\n    let entry = this.memoryCache.get(key) as CacheEntry<T> | undefined;\n\n    if (!entry) {\n      try {\n        const stored = await AsyncStorage.getItem(`${CACHE_PREFIX}${key}`);\n        if (stored) {\n          entry = JSON.parse(stored) as CacheEntry<T>;\n          this.memoryCache.set(key, entry);\n        }\n      } catch (error) {\n        console.error('[Cache] Error getting cache:', error);\n        return null;\n      }\n    }\n\n    if (!entry) {\n      return null;\n    }\n\n    const now = Date.now();\n    const version = options.version || CACHE_VERSION;\n\n    if (entry.expiresAt < now || entry.version !== version) {\n      await this.remove(key);\n      return null;\n    }\n\n    console.log('[Cache] Hit:', key);\n    return entry.data;\n  }\n\n  static async remove(key: string): Promise<void> {\n    this.memoryCache.delete(key);\n    \n    try {\n      await AsyncStorage.removeItem(`${CACHE_PREFIX}${key}`);\n      console.log('[Cache] Removed:', key);\n    } catch (error) {\n      console.error('[Cache] Error removing cache:', error);\n    }\n  }\n\n  static async clear(): Promise<void> {\n    this.memoryCache.clear();\n\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      const cacheKeys = keys.filter(key => key.startsWith(CACHE_PREFIX));\n      await AsyncStorage.multiRemove(cacheKeys);\n      console.log('[Cache] Cleared all cache');\n    } catch (error) {\n      console.error('[Cache] Error clearing cache:', error);\n    }\n  }\n\n  static async has(key: string): Promise<boolean> {\n    const data = await this.get(key);\n    return data !== null;\n  }\n\n  static async getOrFetch<T>(\n    key: string,\n    fetchFn: () => Promise<T>,\n    options: CacheOptions = {}\n  ): Promise<T> {\n    const cached = await this.get<T>(key, options);\n    \n    if (cached !== null) {\n      return cached;\n    }\n\n    if (!this.isOnline) {\n      throw new Error('No cached data available and device is offline');\n    }\n\n    const data = await fetchFn();\n    await this.set(key, data, options);\n    \n    return data;\n  }\n\n  static isOnlineMode(): boolean {\n    return this.isOnline;\n  }\n\n  static async getCacheSize(): Promise<number> {\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      const cacheKeys = keys.filter(key => key.startsWith(CACHE_PREFIX));\n      \n      let totalSize = 0;\n      for (const key of cacheKeys) {\n        const value = await AsyncStorage.getItem(key);\n        if (value) {\n          totalSize += value.length;\n        }\n      }\n\n      return totalSize;\n    } catch (error) {\n      console.error('[Cache] Error calculating cache size:', error);\n      return 0;\n    }\n  }\n\n  static async getCacheStats(): Promise<{\n    entries: number;\n    size: number;\n    memoryEntries: number;\n  }> {\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      const cacheKeys = keys.filter(key => key.startsWith(CACHE_PREFIX));\n      const size = await this.getCacheSize();\n\n      return {\n        entries: cacheKeys.length,\n        size,\n        memoryEntries: this.memoryCache.size,\n      };\n    } catch (error) {\n      console.error('[Cache] Error getting cache stats:', error);\n      return { entries: 0, size: 0, memoryEntries: 0 };\n    }\n  }\n\n  static async cleanExpired(): Promise<number> {\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      const cacheKeys = keys.filter(key => key.startsWith(CACHE_PREFIX));\n      const now = Date.now();\n      let cleaned = 0;\n\n      for (const key of cacheKeys) {\n        const value = await AsyncStorage.getItem(key);\n        if (value) {\n          const entry = JSON.parse(value) as CacheEntry<any>;\n          if (entry.expiresAt < now) {\n            await AsyncStorage.removeItem(key);\n            this.memoryCache.delete(key.replace(CACHE_PREFIX, ''));\n            cleaned++;\n          }\n        }\n      }\n\n      console.log('[Cache] Cleaned', cleaned, 'expired entries');\n      return cleaned;\n    } catch (error) {\n      console.error('[Cache] Error cleaning expired cache:', error);\n      return 0;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}