{"ast":null,"code":"\"use strict\";'use client';var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.useRouteInfo=void 0;exports.useRootNavigationState=useRootNavigationState;exports.useRootNavigation=useRootNavigation;exports.useNavigationContainerRef=useNavigationContainerRef;exports.useRouter=useRouter;exports.useUnstableGlobalHref=useUnstableGlobalHref;exports.useSegments=useSegments;exports.usePathname=usePathname;exports.useGlobalSearchParams=useGlobalSearchParams;exports.useLocalSearchParams=useLocalSearchParams;exports.useSearchParams=useSearchParams;const native_1=require(\"@react-navigation/native\");const react_1=__importDefault(require(\"react\"));const Route_1=require(\"./Route\");const constants_1=require(\"./constants\");const router_store_1=require(\"./global-state/router-store\");Object.defineProperty(exports,\"useRouteInfo\",{enumerable:true,get:function(){return router_store_1.useRouteInfo;}});const imperative_api_1=require(\"./imperative-api\");function useRootNavigationState(){return(0,native_1.useNavigation)().getParent(constants_1.INTERNAL_SLOT_NAME).getState();}function useRootNavigation(){return router_store_1.store.navigationRef.current;}function useNavigationContainerRef(){return router_store_1.store.navigationRef;}function useRouter(){return imperative_api_1.router;}function useUnstableGlobalHref(){return(0,router_store_1.useRouteInfo)().unstable_globalHref;}function useSegments(){return(0,router_store_1.useRouteInfo)().segments;}function usePathname(){return(0,router_store_1.useRouteInfo)().pathname;}function useGlobalSearchParams(){return(0,router_store_1.useRouteInfo)().params;}function useLocalSearchParams(){const params=react_1.default.useContext(Route_1.LocalRouteParamsContext)??{};return Object.fromEntries(Object.entries(params).map(([key,value])=>{if(Array.isArray(value)){return[key,value.map(v=>{try{return decodeURIComponent(v);}catch{return v;}})];}else{try{return[key,decodeURIComponent(value)];}catch{return[key,value];}}}));}function useSearchParams({global=false}={}){const globalRef=react_1.default.useRef(global);if(false){if(global!==globalRef.current){console.warn(`Detected change in 'global' option of useSearchParams. This value cannot change between renders`);}}const params=global?useGlobalSearchParams():useLocalSearchParams();const entries=Object.entries(params).flatMap(([key,value])=>{if(global){if(key==='params')return[];if(key==='screen')return[];}return Array.isArray(value)?value.map(v=>[key,v]):[[key,value]];});return new ReadOnlyURLSearchParams(entries);}class ReadOnlyURLSearchParams extends URLSearchParams{set(){throw new Error('The URLSearchParams object return from useSearchParams is read-only');}append(){throw new Error('The URLSearchParams object return from useSearchParams is read-only');}delete(){throw new Error('The URLSearchParams object return from useSearchParams is read-only');}}","map":{"version":3,"names":["exports","useRootNavigationState","useRootNavigation","useNavigationContainerRef","useRouter","useUnstableGlobalHref","useSegments","usePathname","useGlobalSearchParams","useLocalSearchParams","useSearchParams","native_1","require","react_1","__importDefault","Route_1","constants_1","router_store_1","Object","defineProperty","enumerable","get","useRouteInfo","imperative_api_1","useNavigation","getParent","INTERNAL_SLOT_NAME","getState","store","navigationRef","current","router","unstable_globalHref","segments","pathname","params","default","useContext","LocalRouteParamsContext","fromEntries","entries","map","key","value","Array","isArray","v","decodeURIComponent","global","globalRef","useRef","console","warn","flatMap","ReadOnlyURLSearchParams","URLSearchParams","set","Error","append","delete"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-router/src/hooks.ts"],"sourcesContent":["'use client';\n\nimport { NavigationProp, useNavigation } from '@react-navigation/native';\nimport React from 'react';\n\nimport { LocalRouteParamsContext } from './Route';\nimport { INTERNAL_SLOT_NAME } from './constants';\nimport { store, useRouteInfo } from './global-state/router-store';\nimport { router, Router } from './imperative-api';\nimport { RouteParams, RouteSegments, UnknownOutputParams, Route } from './types';\n\nexport { useRouteInfo };\n\n/**\n * Returns the [navigation state](https://reactnavigation.org/docs/navigation-state/)\n * of the navigator which contains the current screen.\n *\n * @example\n * ```tsx\n * import { useRootNavigationState } from 'expo-router';\n *\n * export default function Route() {\n *  const { routes } = useRootNavigationState();\n *\n *  return <Text>{routes[0].name}</Text>;\n * }\n * ```\n */\nexport function useRootNavigationState() {\n  return useNavigation<NavigationProp<object, never, string>>()\n    .getParent(INTERNAL_SLOT_NAME)!\n    .getState();\n}\n\n/**\n * @deprecated Use [`useNavigationContainerRef`](#usenavigationcontainerref) instead,\n * which returns a React `ref`.\n */\nexport function useRootNavigation() {\n  return store.navigationRef.current;\n}\n\n/**\n * @return The root `<NavigationContainer />` ref for the app. The `ref.current` may be `null`\n * if the `<NavigationContainer />` hasn't mounted yet.\n */\nexport function useNavigationContainerRef() {\n  return store.navigationRef;\n}\n\n/**\n *\n * Returns the [Router](#router) object for imperative navigation.\n *\n * @example\n *```tsx\n * import { useRouter } from 'expo-router';\n * import { Text } from 'react-native';\n *\n * export default function Route() {\n *  const router = useRouter();\n *\n *  return (\n *   <Text onPress={() => router.push('/home')}>Go Home</Text>\n *  );\n *}\n * ```\n */\nexport function useRouter(): Router {\n  return router;\n}\n\n/**\n * @private\n * @returns The current global pathname with query params attached. This may change in the future to include the hostname\n * from a predefined universal link. For example, `/foobar?hey=world` becomes `https://acme.dev/foobar?hey=world`.\n */\nexport function useUnstableGlobalHref(): string {\n  return useRouteInfo().unstable_globalHref;\n}\n\n/**\n * Returns a list of selected file segments for the currently selected route. Segments are not normalized,\n * so they will be the same as the file path. For example, `/[id]?id=normal` becomes `[\"[id]\"]`.\n *\n * @example\n * ```tsx app/profile/[user].tsx\n * import { Text } from 'react-native';\n * import { useSegments } from 'expo-router';\n *\n * export default function Route() {\n *   // segments = [\"profile\", \"[user]\"]\n *   const segments = useSegments();\n *\n *   return <Text>Hello</Text>;\n * }\n * ```\n *\n *\n * `useSegments` can be typed using an abstract. Consider the following file structure:\n *\n * ```md\n * - app\n *   - [user]\n *     - index.tsx\n *     - followers.tsx\n *   - settings.tsx\n * ```\n *\n *\n * This can be strictly typed using the following abstract with `useSegments` hook:\n *\n * ```tsx\n * const [first, second] = useSegments<['settings'] | ['[user]'] | ['[user]', 'followers']>()\n * ```\n */\nexport function useSegments<TSegments extends Route = Route>(): RouteSegments<TSegments>;\n\n/**\n *  @hidden\n */\nexport function useSegments<TSegments extends RouteSegments<Route>>(): TSegments;\nexport function useSegments() {\n  return useRouteInfo().segments;\n}\n\n/**\n * Returns the currently selected route location without search parameters. For example, `/acme?foo=bar` returns `/acme`.\n * Segments will be normalized. For example, `/[id]?id=normal` becomes `/normal`.\n *\n * @example\n * ```tsx app/profile/[user].tsx\n * import { Text } from 'react-native';\n * import { usePathname } from 'expo-router';\n *\n * export default function Route() {\n *   // pathname = \"/profile/baconbrix\"\n *   const pathname = usePathname();\n *\n *   return <Text>User: {user}</Text>;\n * }\n * ```\n */\nexport function usePathname(): string {\n  return useRouteInfo().pathname;\n}\n\n/**\n * @hidden\n */\nexport function useGlobalSearchParams<\n  TParams extends UnknownOutputParams = UnknownOutputParams,\n>(): TParams;\n\n/**\n * @hidden\n */\nexport function useGlobalSearchParams<TRoute extends Route>(): RouteParams<TRoute>;\n\n/**\n * Returns URL parameters for globally selected route, including dynamic path segments.\n * This function updates even when the route is not focused. Useful for analytics or\n * other background operations that don't draw to the screen.\n *\n * Route URL example: `acme://profile/baconbrix?extra=info`.\n *\n * When querying search params in a stack, opt-towards using\n * [`useLocalSearchParams`](#uselocalsearchparams) because it will only update when the route is focused.\n *\n * > **Note:** For usage information, see\n * [Local versus global search parameters](/router/reference/url-parameters/#local-versus-global-url-parameters).\n *\n * @example\n * ```tsx app/profile/[user].tsx\n * import { Text } from 'react-native';\n * import { useGlobalSearchParams } from 'expo-router';\n *\n * export default function Route() {\n *   // user=baconbrix & extra=info\n *   const { user, extra } = useGlobalSearchParams();\n *\n *   return <Text>User: {user}</Text>;\n * }\n * ```\n */\nexport function useGlobalSearchParams<\n  TRoute extends Route,\n  TParams extends UnknownOutputParams = UnknownOutputParams,\n>(): RouteParams<TRoute> & TParams;\nexport function useGlobalSearchParams() {\n  return useRouteInfo().params;\n}\n\n/**\n * @hidden\n */\nexport function useLocalSearchParams<\n  TParams extends UnknownOutputParams = UnknownOutputParams,\n>(): TParams;\n\n/**\n * @hidden\n */\nexport function useLocalSearchParams<TRoute extends Route>(): RouteParams<TRoute>;\n\n/**\n * Returns the URL parameters for the contextually focused route. Useful for stacks where you may push a new screen\n * that changes the query parameters.  For dynamic routes, both the route parameters and the search parameters are returned.\n *\n * Route URL example: `acme://profile/baconbrix?extra=info`.\n *\n * To observe updates even when the invoking route is not focused, use [`useGlobalSearchParams`](#useglobalsearchparams).\n *\n * > **Note:** For usage information, see\n * [Local versus global search parameters](/router/reference/url-parameters/#local-versus-global-url-parameters).\n *\n * @example\n * ```tsx app/profile/[user].tsx\n * import { Text } from 'react-native';\n * import { useLocalSearchParams } from 'expo-router';\n *\n * export default function Route() {\n *  // user=baconbrix & extra=info\n *  const { user, extra } = useLocalSearchParams();\n *\n *  return <Text>User: {user}</Text>;\n * }\n */\nexport function useLocalSearchParams<\n  TRoute extends Route,\n  TParams extends UnknownOutputParams = UnknownOutputParams,\n>(): RouteParams<TRoute> & TParams;\nexport function useLocalSearchParams() {\n  const params = React.useContext(LocalRouteParamsContext) ?? {};\n  return Object.fromEntries(\n    Object.entries(params).map(([key, value]) => {\n      if (Array.isArray(value)) {\n        return [\n          key,\n          value.map((v) => {\n            try {\n              return decodeURIComponent(v);\n            } catch {\n              return v;\n            }\n          }),\n        ];\n      } else {\n        try {\n          return [key, decodeURIComponent(value as string)];\n        } catch {\n          return [key, value];\n        }\n      }\n    })\n  ) as any;\n}\n\nexport function useSearchParams({ global = false } = {}): URLSearchParams {\n  const globalRef = React.useRef(global);\n  if (process.env.NODE_ENV !== 'production') {\n    if (global !== globalRef.current) {\n      console.warn(\n        `Detected change in 'global' option of useSearchParams. This value cannot change between renders`\n      );\n    }\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const params = global ? useGlobalSearchParams() : useLocalSearchParams();\n  const entries = Object.entries(params).flatMap(([key, value]) => {\n    if (global) {\n      if (key === 'params') return [];\n      if (key === 'screen') return [];\n    }\n\n    return Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]];\n  });\n\n  return new ReadOnlyURLSearchParams(entries);\n}\n\nclass ReadOnlyURLSearchParams extends URLSearchParams {\n  set() {\n    throw new Error('The URLSearchParams object return from useSearchParams is read-only');\n  }\n  append() {\n    throw new Error('The URLSearchParams object return from useSearchParams is read-only');\n  }\n  delete() {\n    throw new Error('The URLSearchParams object return from useSearchParams is read-only');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}