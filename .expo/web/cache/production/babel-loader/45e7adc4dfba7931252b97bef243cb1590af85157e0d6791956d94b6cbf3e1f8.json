{"ast":null,"code":"import{ClipboardUnavailableException,CopyFailureException,NoPermissionException,PasteFailureException}from'./Exceptions';import{base64toBlob,blobToBase64Async,findHtmlInClipboardAsync,findImageInClipboardAsync,getImageSizeFromBlobAsync,htmlToPlainText,isClipboardPermissionDeniedAsync}from'./Utils';import{StringFormat}from'../Clipboard.types';export default{async getStringAsync(options){if(!navigator.clipboard){throw new ClipboardUnavailableException();}try{switch(options.preferredFormat){case StringFormat.HTML:{const clipboardItems=await navigator.clipboard.read();const blob=await findHtmlInClipboardAsync(clipboardItems);if(!blob){return await navigator.clipboard.readText();}return await new Response(blob).text();}default:{let text=await navigator.clipboard.readText();if(!text||text===''){const clipboardItems=await navigator.clipboard.read();const blob=await findHtmlInClipboardAsync(clipboardItems);const blobText=await blob?.text();text=htmlToPlainText(blobText??'');}return text;}}}catch(error){if(typeof error==='object'&&error?.name==='NotAllowedError'||(await isClipboardPermissionDeniedAsync())){throw new NoPermissionException();}try{return window.clipboardData.getData('Text');}catch{return Promise.reject(new Error('Unable to retrieve item from clipboard'));}}},setString(text){const textField=document.createElement('textarea');textField.textContent=text;document.body.appendChild(textField);textField.select();try{document.execCommand('copy');return true;}catch{return false;}finally{document.body.removeChild(textField);}},async setStringAsync(text,options){switch(options.inputFormat){case StringFormat.HTML:{if(!navigator.clipboard){throw new ClipboardUnavailableException();}try{const clipboardItemInput=createHtmlClipboardItem(text);await navigator.clipboard.write([clipboardItemInput]);return true;}catch(error){if(typeof error==='object'&&error?.name==='NotAllowedError'||(await isClipboardPermissionDeniedAsync())){throw new NoPermissionException();}throw new CopyFailureException(error.message);}}default:{try{if(!navigator.clipboard){throw new Error();}await navigator.clipboard.writeText(text);return true;}catch{return this.setString(text);}}}},async hasStringAsync(){return await clipboardHasTypesAsync(['text/plain','text/html']);},async getImageAsync(_options){if(!navigator.clipboard){throw new ClipboardUnavailableException();}try{const clipboardItems=await navigator.clipboard.read();const blob=await findImageInClipboardAsync(clipboardItems);if(!blob){return null;}const[data,size]=await Promise.all([blobToBase64Async(blob),getImageSizeFromBlobAsync(blob)]);return{data,size};}catch(error){if(typeof error==='object'&&error?.name==='NotAllowedError'||(await isClipboardPermissionDeniedAsync())){throw new NoPermissionException();}throw new PasteFailureException(error.message);}},async setImageAsync(base64image){if(!navigator.clipboard){throw new ClipboardUnavailableException();}try{const blob=base64toBlob(base64image,'image/png');await navigator.clipboard.write([new ClipboardItem({[blob.type]:blob})]);}catch(err){throw new CopyFailureException(err.message);}},async hasImageAsync(){return await clipboardHasTypesAsync(['image/png','image/jpeg']);},addClipboardListener(){},removeClipboardListener(){}};async function clipboardHasTypesAsync(types){if(!navigator.clipboard){throw new ClipboardUnavailableException();}try{const clipboardItems=await navigator.clipboard.read();return clipboardItems.flatMap(item=>item.types).some(type=>types.includes(type));}catch(error){if(typeof error==='object'&&error?.name==='NotAllowedError'||(await isClipboardPermissionDeniedAsync())){throw new NoPermissionException();}throw error;}}function createHtmlClipboardItem(htmlString){return new ClipboardItem({'text/html':new Blob([htmlString],{type:'text/html'}),'text/plain':new Blob([htmlToPlainText(htmlString)],{type:'text/plain'})});}","map":{"version":3,"names":["ClipboardUnavailableException","CopyFailureException","NoPermissionException","PasteFailureException","base64toBlob","blobToBase64Async","findHtmlInClipboardAsync","findImageInClipboardAsync","getImageSizeFromBlobAsync","htmlToPlainText","isClipboardPermissionDeniedAsync","StringFormat","getStringAsync","options","navigator","clipboard","preferredFormat","HTML","clipboardItems","read","blob","readText","Response","text","blobText","error","name","window","clipboardData","getData","Promise","reject","Error","setString","textField","document","createElement","textContent","body","appendChild","select","execCommand","removeChild","setStringAsync","inputFormat","clipboardItemInput","createHtmlClipboardItem","write","message","writeText","hasStringAsync","clipboardHasTypesAsync","getImageAsync","_options","data","size","all","setImageAsync","base64image","ClipboardItem","type","err","hasImageAsync","addClipboardListener","removeClipboardListener","types","flatMap","item","some","includes","htmlString","Blob"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-clipboard/src/web/ClipboardModule.ts"],"sourcesContent":["import {\n  ClipboardUnavailableException,\n  CopyFailureException,\n  NoPermissionException,\n  PasteFailureException,\n} from './Exceptions';\nimport {\n  base64toBlob,\n  blobToBase64Async,\n  findHtmlInClipboardAsync,\n  findImageInClipboardAsync,\n  getImageSizeFromBlobAsync,\n  htmlToPlainText,\n  isClipboardPermissionDeniedAsync,\n} from './Utils';\nimport {\n  ClipboardImage,\n  GetImageOptions,\n  GetStringOptions,\n  SetStringOptions,\n  StringFormat,\n} from '../Clipboard.types';\n\nexport default {\n  async getStringAsync(options: GetStringOptions): Promise<string> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      switch (options.preferredFormat) {\n        case StringFormat.HTML: {\n          // Try reading HTML first\n          const clipboardItems = await navigator.clipboard.read();\n          const blob = await findHtmlInClipboardAsync(clipboardItems);\n          if (!blob) {\n            // Fall back to plain text\n            return await navigator.clipboard.readText();\n          }\n          return await new Response(blob).text();\n        }\n        default: {\n          let text = await navigator.clipboard.readText();\n          if (!text || text === '') {\n            // If there's no direct plain text, try reading HTML\n            const clipboardItems = await navigator.clipboard.read();\n            const blob = await findHtmlInClipboardAsync(clipboardItems);\n            const blobText = await blob?.text();\n            text = htmlToPlainText(blobText ?? '');\n          }\n          return text;\n        }\n      }\n    } catch (error: any) {\n      // it might fail, because user denied permission\n      if (\n        (typeof error === 'object' && error?.name === 'NotAllowedError') ||\n        (await isClipboardPermissionDeniedAsync())\n      ) {\n        throw new NoPermissionException();\n      }\n\n      try {\n        // Internet Explorer\n        // @ts-ignore\n        return window.clipboardData.getData('Text');\n      } catch {\n        return Promise.reject(new Error('Unable to retrieve item from clipboard'));\n      }\n    }\n  },\n  // TODO: (barthap) The `setString` was deprecated in SDK 45. Remove this function in a few SDK cycles.\n  setString(text: string): boolean {\n    const textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      return true;\n    } catch {\n      return false;\n    } finally {\n      document.body.removeChild(textField);\n    }\n  },\n  async setStringAsync(text: string, options: SetStringOptions): Promise<boolean> {\n    switch (options.inputFormat) {\n      case StringFormat.HTML: {\n        if (!navigator.clipboard) {\n          throw new ClipboardUnavailableException();\n        }\n\n        try {\n          const clipboardItemInput = createHtmlClipboardItem(text);\n          await navigator.clipboard.write([clipboardItemInput]);\n          return true;\n        } catch (error: any) {\n          // it might fail, because user denied permission\n          if (\n            (typeof error === 'object' && error?.name === 'NotAllowedError') ||\n            (await isClipboardPermissionDeniedAsync())\n          ) {\n            throw new NoPermissionException();\n          }\n          throw new CopyFailureException(error.message);\n        }\n      }\n      default: {\n        try {\n          if (!navigator.clipboard) {\n            throw new Error();\n          }\n          await navigator.clipboard.writeText(text);\n          return true;\n        } catch {\n          // we can fall back to legacy behavior in any kind of failure\n          // including navigator.clipboard unavailability\n          return this.setString(text);\n        }\n      }\n    }\n  },\n  async hasStringAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['text/plain', 'text/html']);\n  },\n  async getImageAsync(_options: GetImageOptions): Promise<ClipboardImage | null> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      const clipboardItems = await navigator.clipboard.read();\n      const blob = await findImageInClipboardAsync(clipboardItems);\n      if (!blob) {\n        return null;\n      }\n\n      const [data, size] = await Promise.all([\n        blobToBase64Async(blob),\n        getImageSizeFromBlobAsync(blob),\n      ]);\n\n      return { data, size };\n    } catch (error: any) {\n      // it might fail, because user denied permission\n      if (\n        (typeof error === 'object' && error?.name === 'NotAllowedError') ||\n        (await isClipboardPermissionDeniedAsync())\n      ) {\n        throw new NoPermissionException();\n      }\n      throw new PasteFailureException(error.message);\n    }\n  },\n  async setImageAsync(base64image: string): Promise<void> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      // we set it always to `image/png` because it's the only format supported by the clipboard\n      // but it seems to work even when provided jpeg data\n      const blob = base64toBlob(base64image, 'image/png');\n      await navigator.clipboard.write([\n        new ClipboardItem({\n          [blob.type]: blob,\n        }),\n      ]);\n    } catch (err: any) {\n      throw new CopyFailureException(err.message);\n    }\n  },\n  async hasImageAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['image/png', 'image/jpeg']);\n  },\n  addClipboardListener(): void {},\n  removeClipboardListener(): void {},\n};\n\n/**\n * Resolves to true if clipboard has one of provided {@link types}.\n * @throws `ClipboardUnavailableException` if AsyncClipboard API is not available\n * @throws `NoPermissionException` if user denied permission\n */\nasync function clipboardHasTypesAsync(types: string[]): Promise<boolean> {\n  if (!navigator.clipboard) {\n    throw new ClipboardUnavailableException();\n  }\n\n  try {\n    const clipboardItems = await navigator.clipboard.read();\n    return clipboardItems.flatMap((item) => item.types).some((type) => types.includes(type));\n  } catch (error: any) {\n    // it might fail, because user denied permission\n    if (\n      (typeof error === 'object' && error?.name === 'NotAllowedError') ||\n      (await isClipboardPermissionDeniedAsync())\n    ) {\n      throw new NoPermissionException();\n    }\n    throw error;\n  }\n}\n\nfunction createHtmlClipboardItem(htmlString: string): ClipboardItem {\n  return new ClipboardItem({\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/html': new Blob([htmlString], { type: 'text/html' }),\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/plain': new Blob([htmlToPlainText(htmlString)], { type: 'text/plain' }),\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}