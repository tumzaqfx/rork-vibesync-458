{"ast":null,"code":"import{useState,useEffect,useCallback,useMemo}from'react';import AsyncStorage from'@react-native-async-storage/async-storage';import createContextHook from'@nkzw/create-context-hook';const PINNED_POSTS_KEY='pinned_posts';const MAX_PINNED_POSTS=3;export const[PinnedPostsProvider,usePinnedPosts]=createContextHook(()=>{const[pinnedPosts,setPinnedPosts]=useState([]);const[isLoading,setIsLoading]=useState(true);useEffect(()=>{loadPinnedPosts();},[]);const loadPinnedPosts=async()=>{try{const stored=await AsyncStorage.getItem(PINNED_POSTS_KEY);if(stored){setPinnedPosts(JSON.parse(stored));}}catch(error){console.error('Error loading pinned posts:',error);}finally{setIsLoading(false);}};const savePinnedPosts=useCallback(async posts=>{try{await AsyncStorage.setItem(PINNED_POSTS_KEY,JSON.stringify(posts));setPinnedPosts(posts);}catch(error){console.error('Error saving pinned posts:',error);}},[]);const pinPost=useCallback(async postId=>{if(pinnedPosts.includes(postId)){console.log('Post already pinned');return false;}if(pinnedPosts.length>=MAX_PINNED_POSTS){console.log(`Maximum ${MAX_PINNED_POSTS} posts can be pinned`);return false;}const updated=[postId,...pinnedPosts];await savePinnedPosts(updated);return true;},[pinnedPosts,savePinnedPosts]);const unpinPost=useCallback(async postId=>{if(!pinnedPosts.includes(postId)){console.log('Post is not pinned');return false;}const updated=pinnedPosts.filter(id=>id!==postId);await savePinnedPosts(updated);return true;},[pinnedPosts,savePinnedPosts]);const togglePinPost=useCallback(async postId=>{if(pinnedPosts.includes(postId)){return await unpinPost(postId);}else{return await pinPost(postId);}},[pinnedPosts,pinPost,unpinPost]);const isPostPinned=useCallback(postId=>{return pinnedPosts.includes(postId);},[pinnedPosts]);const canPinMore=useCallback(()=>{return pinnedPosts.length<MAX_PINNED_POSTS;},[pinnedPosts]);return useMemo(()=>({pinnedPosts,isLoading,pinPost,unpinPost,togglePinPost,isPostPinned,canPinMore,maxPinnedPosts:MAX_PINNED_POSTS}),[pinnedPosts,isLoading,pinPost,unpinPost,togglePinPost,isPostPinned,canPinMore]);});","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","AsyncStorage","createContextHook","PINNED_POSTS_KEY","MAX_PINNED_POSTS","PinnedPostsProvider","usePinnedPosts","pinnedPosts","setPinnedPosts","isLoading","setIsLoading","loadPinnedPosts","stored","getItem","JSON","parse","error","console","savePinnedPosts","posts","setItem","stringify","pinPost","postId","includes","log","length","updated","unpinPost","filter","id","togglePinPost","isPostPinned","canPinMore","maxPinnedPosts"],"sources":["/home/user/rork-vibesync-458/hooks/pinned-posts-store.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport createContextHook from '@nkzw/create-context-hook';\n\nconst PINNED_POSTS_KEY = 'pinned_posts';\nconst MAX_PINNED_POSTS = 3;\n\nexport const [PinnedPostsProvider, usePinnedPosts] = createContextHook(() => {\n  const [pinnedPosts, setPinnedPosts] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    loadPinnedPosts();\n  }, []);\n\n  const loadPinnedPosts = async () => {\n    try {\n      const stored = await AsyncStorage.getItem(PINNED_POSTS_KEY);\n      if (stored) {\n        setPinnedPosts(JSON.parse(stored));\n      }\n    } catch (error) {\n      console.error('Error loading pinned posts:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const savePinnedPosts = useCallback(async (posts: string[]) => {\n    try {\n      await AsyncStorage.setItem(PINNED_POSTS_KEY, JSON.stringify(posts));\n      setPinnedPosts(posts);\n    } catch (error) {\n      console.error('Error saving pinned posts:', error);\n    }\n  }, []);\n\n  const pinPost = useCallback(async (postId: string): Promise<boolean> => {\n    if (pinnedPosts.includes(postId)) {\n      console.log('Post already pinned');\n      return false;\n    }\n\n    if (pinnedPosts.length >= MAX_PINNED_POSTS) {\n      console.log(`Maximum ${MAX_PINNED_POSTS} posts can be pinned`);\n      return false;\n    }\n\n    const updated = [postId, ...pinnedPosts];\n    await savePinnedPosts(updated);\n    return true;\n  }, [pinnedPosts, savePinnedPosts]);\n\n  const unpinPost = useCallback(async (postId: string): Promise<boolean> => {\n    if (!pinnedPosts.includes(postId)) {\n      console.log('Post is not pinned');\n      return false;\n    }\n\n    const updated = pinnedPosts.filter(id => id !== postId);\n    await savePinnedPosts(updated);\n    return true;\n  }, [pinnedPosts, savePinnedPosts]);\n\n  const togglePinPost = useCallback(async (postId: string): Promise<boolean> => {\n    if (pinnedPosts.includes(postId)) {\n      return await unpinPost(postId);\n    } else {\n      return await pinPost(postId);\n    }\n  }, [pinnedPosts, pinPost, unpinPost]);\n\n  const isPostPinned = useCallback((postId: string): boolean => {\n    return pinnedPosts.includes(postId);\n  }, [pinnedPosts]);\n\n  const canPinMore = useCallback((): boolean => {\n    return pinnedPosts.length < MAX_PINNED_POSTS;\n  }, [pinnedPosts]);\n\n  return useMemo(() => ({\n    pinnedPosts,\n    isLoading,\n    pinPost,\n    unpinPost,\n    togglePinPost,\n    isPostPinned,\n    canPinMore,\n    maxPinnedPosts: MAX_PINNED_POSTS,\n  }), [pinnedPosts, isLoading, pinPost, unpinPost, togglePinPost, isPostPinned, canPinMore]);\n});\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,CAAEC,WAAW,CAAEC,OAAO,KAAQ,OAAO,CACjE,MAAO,CAAAC,YAAY,KAAM,2CAA2C,CACpE,MAAO,CAAAC,iBAAiB,KAAM,2BAA2B,CAEzD,KAAM,CAAAC,gBAAgB,CAAG,cAAc,CACvC,KAAM,CAAAC,gBAAgB,CAAG,CAAC,CAE1B,MAAO,MAAM,CAACC,mBAAmB,CAAEC,cAAc,CAAC,CAAGJ,iBAAiB,CAAC,IAAM,CAC3E,KAAM,CAACK,WAAW,CAAEC,cAAc,CAAC,CAAGX,QAAQ,CAAW,EAAE,CAAC,CAC5D,KAAM,CAACY,SAAS,CAAEC,YAAY,CAAC,CAAGb,QAAQ,CAAU,IAAI,CAAC,CAEzDC,SAAS,CAAC,IAAM,CACda,eAAe,CAAC,CAAC,CACnB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAA,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,CACF,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAX,YAAY,CAACY,OAAO,CAACV,gBAAgB,CAAC,CAC3D,GAAIS,MAAM,CAAE,CACVJ,cAAc,CAACM,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,CAAC,CACpC,CACF,CAAE,MAAOI,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACrD,CAAC,OAAS,CACRN,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,KAAM,CAAAQ,eAAe,CAAGnB,WAAW,CAAC,KAAO,CAAAoB,KAAe,EAAK,CAC7D,GAAI,CACF,KAAM,CAAAlB,YAAY,CAACmB,OAAO,CAACjB,gBAAgB,CAAEW,IAAI,CAACO,SAAS,CAACF,KAAK,CAAC,CAAC,CACnEX,cAAc,CAACW,KAAK,CAAC,CACvB,CAAE,MAAOH,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CACpD,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAM,OAAO,CAAGvB,WAAW,CAAC,KAAO,CAAAwB,MAAc,EAAuB,CACtE,GAAIhB,WAAW,CAACiB,QAAQ,CAACD,MAAM,CAAC,CAAE,CAChCN,OAAO,CAACQ,GAAG,CAAC,qBAAqB,CAAC,CAClC,MAAO,MAAK,CACd,CAEA,GAAIlB,WAAW,CAACmB,MAAM,EAAItB,gBAAgB,CAAE,CAC1Ca,OAAO,CAACQ,GAAG,CAAC,WAAWrB,gBAAgB,sBAAsB,CAAC,CAC9D,MAAO,MAAK,CACd,CAEA,KAAM,CAAAuB,OAAO,CAAG,CAACJ,MAAM,CAAE,GAAGhB,WAAW,CAAC,CACxC,KAAM,CAAAW,eAAe,CAACS,OAAO,CAAC,CAC9B,MAAO,KAAI,CACb,CAAC,CAAE,CAACpB,WAAW,CAAEW,eAAe,CAAC,CAAC,CAElC,KAAM,CAAAU,SAAS,CAAG7B,WAAW,CAAC,KAAO,CAAAwB,MAAc,EAAuB,CACxE,GAAI,CAAChB,WAAW,CAACiB,QAAQ,CAACD,MAAM,CAAC,CAAE,CACjCN,OAAO,CAACQ,GAAG,CAAC,oBAAoB,CAAC,CACjC,MAAO,MAAK,CACd,CAEA,KAAM,CAAAE,OAAO,CAAGpB,WAAW,CAACsB,MAAM,CAACC,EAAE,EAAIA,EAAE,GAAKP,MAAM,CAAC,CACvD,KAAM,CAAAL,eAAe,CAACS,OAAO,CAAC,CAC9B,MAAO,KAAI,CACb,CAAC,CAAE,CAACpB,WAAW,CAAEW,eAAe,CAAC,CAAC,CAElC,KAAM,CAAAa,aAAa,CAAGhC,WAAW,CAAC,KAAO,CAAAwB,MAAc,EAAuB,CAC5E,GAAIhB,WAAW,CAACiB,QAAQ,CAACD,MAAM,CAAC,CAAE,CAChC,MAAO,MAAM,CAAAK,SAAS,CAACL,MAAM,CAAC,CAChC,CAAC,IAAM,CACL,MAAO,MAAM,CAAAD,OAAO,CAACC,MAAM,CAAC,CAC9B,CACF,CAAC,CAAE,CAAChB,WAAW,CAAEe,OAAO,CAAEM,SAAS,CAAC,CAAC,CAErC,KAAM,CAAAI,YAAY,CAAGjC,WAAW,CAAEwB,MAAc,EAAc,CAC5D,MAAO,CAAAhB,WAAW,CAACiB,QAAQ,CAACD,MAAM,CAAC,CACrC,CAAC,CAAE,CAAChB,WAAW,CAAC,CAAC,CAEjB,KAAM,CAAA0B,UAAU,CAAGlC,WAAW,CAAC,IAAe,CAC5C,MAAO,CAAAQ,WAAW,CAACmB,MAAM,CAAGtB,gBAAgB,CAC9C,CAAC,CAAE,CAACG,WAAW,CAAC,CAAC,CAEjB,MAAO,CAAAP,OAAO,CAAC,KAAO,CACpBO,WAAW,CACXE,SAAS,CACTa,OAAO,CACPM,SAAS,CACTG,aAAa,CACbC,YAAY,CACZC,UAAU,CACVC,cAAc,CAAE9B,gBAClB,CAAC,CAAC,CAAE,CAACG,WAAW,CAAEE,SAAS,CAAEa,OAAO,CAAEM,SAAS,CAAEG,aAAa,CAAEC,YAAY,CAAEC,UAAU,CAAC,CAAC,CAC5F,CAAC,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}