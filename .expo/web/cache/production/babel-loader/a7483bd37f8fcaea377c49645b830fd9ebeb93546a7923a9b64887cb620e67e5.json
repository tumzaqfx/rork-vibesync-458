{"ast":null,"code":"import{getAssetByID}from'@react-native/assets-registry/registry';import AssetSourceResolver from'./AssetSourceResolver.web';let _customSourceTransformer;export function setCustomSourceTransformer(transformer){_customSourceTransformer=transformer;}export default function resolveAssetSource(source){if(typeof source==='object'){return source;}const asset=getAssetByID(source);if(!asset){return undefined;}const resolver=new AssetSourceResolver('https://expo.dev',null,asset);if(_customSourceTransformer){return _customSourceTransformer(resolver);}return resolver.defaultAsset();}Object.defineProperty(resolveAssetSource,'setCustomSourceTransformer',{get(){return setCustomSourceTransformer;}});export const{pickScale}=AssetSourceResolver;","map":{"version":3,"names":["getAssetByID","AssetSourceResolver","_customSourceTransformer","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","undefined","resolver","defaultAsset","Object","defineProperty","get","pickScale"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-image/src/utils/resolveAssetSource.web.ts"],"sourcesContent":["import { getAssetByID } from '@react-native/assets-registry/registry';\n\nimport AssetSourceResolver, { ResolvedAssetSource } from './AssetSourceResolver.web';\n\nlet _customSourceTransformer: undefined | ((resolver: AssetSourceResolver) => ResolvedAssetSource);\n\nexport function setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nexport default function resolveAssetSource(source: any): ResolvedAssetSource | undefined {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return undefined;\n  }\n\n  const resolver = new AssetSourceResolver('https://expo.dev', null, asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  },\n});\n\nexport const { pickScale } = AssetSourceResolver;\n"],"mappings":"AAAA,OAASA,YAAY,KAAQ,wCAAwC,CAErE,MAAO,CAAAC,mBAAmB,KAA+B,2BAA2B,CAEpF,GAAI,CAAAC,wBAA8F,CAElG,MAAO,SAAS,CAAAC,0BAA0BA,CACxCC,WAAmE,CAC7D,CACNF,wBAAwB,CAAGE,WAAW,CACxC,CAMA,cAAe,SAAS,CAAAC,kBAAkBA,CAACC,MAAW,CAAmC,CACvF,GAAI,MAAO,CAAAA,MAAM,GAAK,QAAQ,CAAE,CAC9B,MAAO,CAAAA,MAAM,CACf,CAEA,KAAM,CAAAC,KAAK,CAAGP,YAAY,CAACM,MAAM,CAAC,CAClC,GAAI,CAACC,KAAK,CAAE,CACV,MAAO,CAAAC,SAAS,CAClB,CAEA,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAR,mBAAmB,CAAC,kBAAkB,CAAE,IAAI,CAAEM,KAAK,CAAC,CACzE,GAAIL,wBAAwB,CAAE,CAC5B,MAAO,CAAAA,wBAAwB,CAACO,QAAQ,CAAC,CAC3C,CACA,MAAO,CAAAA,QAAQ,CAACC,YAAY,CAAC,CAAC,CAChC,CAEAC,MAAM,CAACC,cAAc,CAACP,kBAAkB,CAAE,4BAA4B,CAAE,CACtEQ,GAAGA,CAAA,CAAG,CACJ,MAAO,CAAAV,0BAA0B,CACnC,CACF,CAAC,CAAC,CAEF,MAAO,MAAM,CAAEW,SAAU,CAAC,CAAGb,mBAAmB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}