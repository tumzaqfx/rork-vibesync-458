{"ast":null,"code":"function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import{BaseGesture,Gesture}from'./gesture';function extendRelation(currentRelation,extendWith){if(currentRelation===undefined){return[...extendWith];}else{return[...currentRelation,...extendWith];}}export class ComposedGesture extends Gesture{constructor(...gestures){super();_defineProperty(this,\"gestures\",[]);_defineProperty(this,\"simultaneousGestures\",[]);_defineProperty(this,\"requireGesturesToFail\",[]);this.gestures=gestures;}prepareSingleGesture(gesture,simultaneousGestures,requireGesturesToFail){if(gesture instanceof BaseGesture){const newConfig=Object.assign({},gesture.config);newConfig.simultaneousWith=extendRelation(newConfig.simultaneousWith,simultaneousGestures);newConfig.requireToFail=extendRelation(newConfig.requireToFail,requireGesturesToFail);gesture.config=newConfig;}else if(gesture instanceof ComposedGesture){gesture.simultaneousGestures=simultaneousGestures;gesture.requireGesturesToFail=requireGesturesToFail;gesture.prepare();}}prepare(){for(const gesture of this.gestures){this.prepareSingleGesture(gesture,this.simultaneousGestures,this.requireGesturesToFail);}}initialize(){for(const gesture of this.gestures){gesture.initialize();}}toGestureArray(){return this.gestures.flatMap(gesture=>gesture.toGestureArray());}}export class SimultaneousGesture extends ComposedGesture{prepare(){const simultaneousArrays=this.gestures.map(gesture=>this.gestures.filter(x=>x!==gesture).flatMap(x=>x.toGestureArray()));for(let i=0;i<this.gestures.length;i++){this.prepareSingleGesture(this.gestures[i],simultaneousArrays[i],this.requireGesturesToFail);}}}export class ExclusiveGesture extends ComposedGesture{prepare(){const gestureArrays=this.gestures.map(gesture=>gesture.toGestureArray());let requireToFail=[];for(let i=0;i<this.gestures.length;i++){this.prepareSingleGesture(this.gestures[i],this.simultaneousGestures,this.requireGesturesToFail.concat(requireToFail));requireToFail=requireToFail.concat(gestureArrays[i]);}}}","map":{"version":3,"names":["BaseGesture","Gesture","extendRelation","currentRelation","extendWith","undefined","ComposedGesture","constructor","gestures","_defineProperty","prepareSingleGesture","gesture","simultaneousGestures","requireGesturesToFail","newConfig","Object","assign","config","simultaneousWith","requireToFail","prepare","initialize","toGestureArray","flatMap","SimultaneousGesture","simultaneousArrays","map","filter","x","i","length","ExclusiveGesture","gestureArrays","concat"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureComposition.ts"],"sourcesContent":["import { BaseGesture, Gesture, GestureRef, GestureType } from './gesture';\n\nfunction extendRelation(\n  currentRelation: GestureRef[] | undefined,\n  extendWith: GestureType[]\n) {\n  if (currentRelation === undefined) {\n    return [...extendWith];\n  } else {\n    return [...currentRelation, ...extendWith];\n  }\n}\n\nexport class ComposedGesture extends Gesture {\n  protected gestures: Gesture[] = [];\n  protected simultaneousGestures: GestureType[] = [];\n  protected requireGesturesToFail: GestureType[] = [];\n\n  constructor(...gestures: Gesture[]) {\n    super();\n    this.gestures = gestures;\n  }\n\n  protected prepareSingleGesture(\n    gesture: Gesture,\n    simultaneousGestures: GestureType[],\n    requireGesturesToFail: GestureType[]\n  ) {\n    if (gesture instanceof BaseGesture) {\n      const newConfig = { ...gesture.config };\n\n      // No need to extend `blocksHandlers` here, because it's not changed in composition.\n      // The same effect is achieved by reversing the order of 2 gestures in `Exclusive`\n      newConfig.simultaneousWith = extendRelation(\n        newConfig.simultaneousWith,\n        simultaneousGestures\n      );\n      newConfig.requireToFail = extendRelation(\n        newConfig.requireToFail,\n        requireGesturesToFail\n      );\n\n      gesture.config = newConfig;\n    } else if (gesture instanceof ComposedGesture) {\n      gesture.simultaneousGestures = simultaneousGestures;\n      gesture.requireGesturesToFail = requireGesturesToFail;\n      gesture.prepare();\n    }\n  }\n\n  prepare() {\n    for (const gesture of this.gestures) {\n      this.prepareSingleGesture(\n        gesture,\n        this.simultaneousGestures,\n        this.requireGesturesToFail\n      );\n    }\n  }\n\n  initialize() {\n    for (const gesture of this.gestures) {\n      gesture.initialize();\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return this.gestures.flatMap((gesture) => gesture.toGestureArray());\n  }\n}\n\nexport class SimultaneousGesture extends ComposedGesture {\n  prepare() {\n    // This piece of magic works something like this:\n    // for every gesture in the array\n    const simultaneousArrays = this.gestures.map((gesture) =>\n      // we take the array it's in\n      this.gestures\n        // and make a copy without it\n        .filter((x) => x !== gesture)\n        // then we flatmap the result to get list of raw (not composed) gestures\n        // this way we don't make the gestures simultaneous with themselves, which is\n        // important when the gesture is `ExclusiveGesture` - we don't want to make\n        // exclusive gestures simultaneous\n        .flatMap((x) => x.toGestureArray())\n    );\n\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(\n        this.gestures[i],\n        simultaneousArrays[i],\n        this.requireGesturesToFail\n      );\n    }\n  }\n}\n\nexport class ExclusiveGesture extends ComposedGesture {\n  prepare() {\n    // Transforms the array of gestures into array of grouped raw (not composed) gestures\n    // i.e. [gesture1, gesture2, ComposedGesture(gesture3, gesture4)] -> [[gesture1], [gesture2], [gesture3, gesture4]]\n    const gestureArrays = this.gestures.map((gesture) =>\n      gesture.toGestureArray()\n    );\n\n    let requireToFail: GestureType[] = [];\n\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(\n        this.gestures[i],\n        this.simultaneousGestures,\n        this.requireGesturesToFail.concat(requireToFail)\n      );\n\n      // Every group gets to wait for all groups before it\n      requireToFail = requireToFail.concat(gestureArrays[i]);\n    }\n  }\n}\n\nexport type ComposedGestureType = InstanceType<typeof ComposedGesture>;\nexport type RaceGestureType = ComposedGestureType;\nexport type SimultaneousGestureType = InstanceType<typeof SimultaneousGesture>;\nexport type ExclusiveGestureType = InstanceType<typeof ExclusiveGesture>;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}