{"ast":null,"code":"\"use strict\";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||(\"get\"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function(){return m[k];}};}Object.defineProperty(o,k2,desc);}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(){var ownKeys=function(o){ownKeys=Object.getOwnPropertyNames||function(o){var ar=[];for(var k in o)if(Object.prototype.hasOwnProperty.call(o,k))ar[ar.length]=k;return ar;};return ownKeys(o);};return function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k=ownKeys(mod),i=0;i<k.length;i++)if(k[i]!==\"default\")__createBinding(result,mod,k[i]);__setModuleDefault(result,mod);return result;};}();Object.defineProperty(exports,\"__esModule\",{value:true});exports.getPathFromState=getPathFromState;exports.getPathDataFromState=getPathDataFromState;exports.appendBaseUrl=appendBaseUrl;const queryString=__importStar(require(\"query-string\"));const expo=__importStar(require(\"./getPathFromState-forks\"));const getActiveRoute=state=>{const route=typeof state.index==='number'?state.routes[state.index]:state.routes[state.routes.length-1];if(route.state){return getActiveRoute(route.state);}return route;};let cachedNormalizedConfigs=[undefined,{}];function getPathFromState(state,options){return getPathDataFromState(state,options).path;}function getPathDataFromState(state,options){if(state==null){throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");}if(options){expo.validatePathConfig(options);}if(cachedNormalizedConfigs[0]!==options?.screens){cachedNormalizedConfigs=[options?.screens,options?.screens?createNormalizedConfigs(options.screens):{}];}const configs=cachedNormalizedConfigs[1];let path='/';let current=state;const allParams={};while(current){let index=typeof current.index==='number'?current.index:0;let route=current.routes[index];let pattern;let focusedParams;const focusedRoute=getActiveRoute(state);let currentOptions=configs;const nestedRouteNames=[];let hasNext=true;while(route.name in currentOptions&&hasNext){pattern=currentOptions[route.name].pattern;nestedRouteNames.push(route.name);if(route.params){const stringify=currentOptions[route.name]?.stringify;const currentParams=expo.fixCurrentParams(allParams,route,stringify);if(focusedRoute===route){focusedParams=Object.assign({},currentParams);pattern?.split('/').filter(p=>expo.isDynamicPart(p)).forEach(p=>{const name=expo.getParamName(p);if(focusedParams){delete focusedParams[name];}});}}if(!currentOptions[route.name].screens||route.state===undefined){const screens=currentOptions[route.name].screens;const targetScreen=route.params&&'screen'in route.params&&typeof route.params.screen==='string'?route.params.screen:'index';const screen=screens?screens[targetScreen]?targetScreen:Object.keys(screens)[0]:undefined;if(screen&&screens&&currentOptions[route.name].screens?.[screen]){route=Object.assign({},screens[screen],{name:screen,key:screen});currentOptions=screens;}else{hasNext=false;}}else{index=typeof route.state.index==='number'?route.state.index:route.state.routes.length-1;const nextRoute=route.state.routes[index];const nestedConfig=currentOptions[route.name].screens;if(nestedConfig&&nextRoute.name in nestedConfig){route=nextRoute;currentOptions=nestedConfig;}else{hasNext=false;}}}if(pattern===undefined){pattern=nestedRouteNames.join('/');}if(currentOptions[route.name]!==undefined){path+=expo.getPathWithConventionsCollapsed(Object.assign({},options,{pattern,route,params:allParams,initialRouteName:configs[route.name]?.initialRouteName}));}else if(!route.name.startsWith('+')){path+=encodeURIComponent(route.name);}if(!focusedParams){focusedParams=focusedRoute.params;}if(route.state){path+='/';}else if(focusedParams){for(const param in focusedParams){if(focusedParams[param]==='undefined'){delete focusedParams[param];}}delete focusedParams['#'];const query=queryString.stringify(focusedParams,{sort:false});if(query){path+=`?${query}`;}}current=route.state;}path=path.replace(/\\/+/g,'/');path=path.length>1?path.replace(/\\/$/,''):path;if(options?.path){path=joinPaths(options.path,path);}path=expo.appendBaseUrl(path);if(allParams['#']){path+=`#${allParams['#']}`;}return{path,params:allParams};}const joinPaths=(...paths)=>[].concat(...paths.map(p=>p.split('/'))).filter(Boolean).join('/');const createConfigItem=(config,parentPattern)=>{if(typeof config==='string'){const pattern=parentPattern?joinPaths(parentPattern,config):config;return{pattern};}if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}const pattern=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';const screens=config.screens?createNormalizedConfigs(config.screens,pattern):undefined;return{pattern:pattern?.split('/').filter(Boolean).join('/'),stringify:config.stringify,screens};};const createNormalizedConfigs=(options,pattern)=>Object.fromEntries(Object.entries(options).map(([name,c])=>{const result=createConfigItem(c,pattern);return[name,result];}));function appendBaseUrl(path,baseUrl=\"\"){if(true){if(baseUrl){return`/${baseUrl.replace(/^\\/+/,'').replace(/\\/$/,'')}${path}`;}}return path;}","map":{"version":3,"names":["exports","getPathFromState","getPathDataFromState","appendBaseUrl","queryString","__importStar","require","expo","getActiveRoute","state","route","index","routes","length","cachedNormalizedConfigs","undefined","options","path","Error","validatePathConfig","screens","createNormalizedConfigs","configs","current","allParams","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","name","push","params","stringify","currentParams","fixCurrentParams","Object","assign","split","filter","p","isDynamicPart","forEach","getParamName","targetScreen","screen","keys","key","nextRoute","nestedConfig","join","getPathWithConventionsCollapsed","initialRouteName","startsWith","encodeURIComponent","param","query","sort","replace","joinPaths","paths","concat","map","Boolean","createConfigItem","config","parentPattern","exact","fromEntries","entries","c","result","baseUrl"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-router/src/fork/getPathFromState.ts"],"sourcesContent":["import { PathConfig, PathConfigMap } from '@react-navigation/native';\nimport type { NavigationState, PartialState, Route } from '@react-navigation/routers';\nimport * as queryString from 'query-string';\n\nimport * as expo from './getPathFromState-forks';\nimport type { ExpoConfigItem, ExpoOptions } from './getPathFromState-forks';\n\n// START FORK\nexport type Options<ParamList extends object> = ExpoOptions & {\n  path?: string;\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n// END FORK\n\nexport type State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\nexport type StringifyConfig = Record<string, (value: any) => string>;\n\n// START FORK\ntype ConfigItem = ExpoConfigItem & {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n// END FORK\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\nlet cachedNormalizedConfigs: [PathConfigMap<object> | undefined, Record<string, ConfigItem>] = [\n  undefined,\n  {},\n];\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport function getPathFromState<ParamList extends object>(\n  state: State,\n  options?: Options<ParamList>\n): string {\n  return getPathDataFromState(state, options).path;\n}\n\nexport function getPathDataFromState<ParamList extends object>(\n  state: State,\n  options?: Options<ParamList>\n) {\n  if (state == null) {\n    throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n  }\n\n  if (options) {\n    // START FORK\n    expo.validatePathConfig(options);\n    // validatePathConfig(options);\n    // END FORK\n  }\n\n  // Create a normalized configs object which will be easier to use\n  if (cachedNormalizedConfigs[0] !== options?.screens) {\n    cachedNormalizedConfigs = [\n      options?.screens,\n      options?.screens ? createNormalizedConfigs(options.screens) : {},\n    ];\n  }\n  const configs: Record<string, ConfigItem> = cachedNormalizedConfigs[1];\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    const focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    const nestedRouteNames: string[] = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        // START FORK\n        // This mutates allParams\n        const currentParams = expo.fixCurrentParams(allParams, route, stringify);\n\n        // const currentParams = Object.fromEntries(\n        //   Object.entries(route.params).map(([key, value]) => [\n        //     key,\n        //     stringify?.[key] ? stringify[key](value) : String(value),\n        //   ])\n        // );\n\n        // if (pattern) {\n        //   Object.assign(allParams, currentParams);\n        // }\n        // END FORK\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => expo.isDynamicPart(p))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = expo.getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        // START FORK\n        // Expo Router allows you to navigate to a (group) and not specify a target screen\n        // This is different from React Navigation, which requires a target screen\n        // We need to handle this case here, by selecting either the index screen or the first screen of the group\n\n        // IMPORTANT: This does not affect groups that use _layout files with initialRouteNames\n        // Layout files create a new route config. This only affects groups without layouts that have their screens\n        // hoisted.\n\n        // Example:\n        // - /home/_layout\n        // - /home/(a|b|c)/index          --> Hoisted to /home/_layout navigator\n        // - /home/(a|b|c)/other          --> Hoisted to /home/_layout navigator\n        // - /home/(profile)/me           --> Hoisted to /home/_layout navigator\n        //\n        // route.push('/home/(a)')        --> This should navigate to /home/(a)/index\n        // route.push('/home/(profile)')  --> This should navigate to /home/(profile)/me\n        const screens = currentOptions[route.name].screens;\n\n        // Determine what screen the user wants to navigate to. If no screen is specified, assume there is an index screen\n        // In the examples above, this ensures that /home/(a) navigates to /home/(a)/index\n        const targetScreen =\n          // This is typed as unknown, so we need to add these extra assertions\n          route.params && 'screen' in route.params && typeof route.params.screen === 'string'\n            ? route.params.screen\n            : 'index';\n\n        // If the target screen is not in the screens object, default to the first screen\n        // In the examples above, this ensures that /home/(profile) navigates to /home/(profile)/me\n        // As there is no index screen in the group\n        const screen = screens\n          ? screens[targetScreen]\n            ? targetScreen\n            : Object.keys(screens)[0]\n          : undefined;\n\n        if (screen && screens && currentOptions[route.name].screens?.[screen]) {\n          route = { ...screens[screen], name: screen, key: screen };\n          currentOptions = screens;\n        } else {\n          hasNext = false;\n        }\n        // hasNext = false;\n        // END FORK\n      } else {\n        index =\n          typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      // START FORK\n      path += expo.getPathWithConventionsCollapsed({\n        ...options,\n        pattern,\n        route,\n        params: allParams,\n        initialRouteName: configs[route.name]?.initialRouteName,\n      });\n      // path += pattern\n      //   .split('/')\n      //   .map((p) => {\n      //     const name = getParamName(p);\n\n      //     // We don't know what to show for wildcard patterns\n      //     // Showing the route name seems ok, though whatever we show here will be incorrect\n      //     // Since the page doesn't actually exist\n      //     if (p === '*') {\n      //       return route.name;\n      //     }\n\n      //     // If the path has a pattern for a param, put the param in the path\n      //     if (p.startsWith(':')) {\n      //       const value = allParams[name];\n\n      //       if (value === undefined && p.endsWith('?')) {\n      //         // Optional params without value assigned in route.params should be ignored\n      //         return '';\n      //       }\n\n      //       // Valid characters according to\n      //       // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3 (see pchar definition)\n      //       return String(value).replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g, (char) =>\n      //         encodeURIComponent(char)\n      //       );\n      //     }\n\n      //     return encodeURIComponent(p);\n      //   })\n      //   .join('/');\n      // } else {\n    } else if (!route.name.startsWith('+')) {\n      path += encodeURIComponent(route.name);\n    }\n    // END FORK\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (const param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      // START FORK\n      delete focusedParams['#'];\n      // END FORK\n\n      const query = queryString.stringify(focusedParams, { sort: false });\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  // Include the root path if specified\n  if (options?.path) {\n    path = joinPaths(options.path, path);\n  }\n\n  // START FORK\n  path = expo.appendBaseUrl(path);\n  if (allParams['#']) {\n    path += `#${allParams['#']}`;\n  }\n  // END FORK\n\n  // START FORK\n  return { path, params: allParams };\n  // END FORK\n}\n\n// const getParamName = (pattern: string) => pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  config: PathConfig<object> | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\n      \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n    );\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  const pattern =\n    config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n\n  const screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  options: PathConfigMap<object>,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  Object.fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(c, pattern);\n\n      return [name, result];\n    })\n  );\n\nexport function appendBaseUrl(\n  path: string,\n  baseUrl: string | undefined = process.env.EXPO_BASE_URL\n) {\n  if (process.env.NODE_ENV !== 'development') {\n    if (baseUrl) {\n      return `/${baseUrl.replace(/^\\/+/, '').replace(/\\/$/, '')}${path}`;\n    }\n  }\n  return path;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}