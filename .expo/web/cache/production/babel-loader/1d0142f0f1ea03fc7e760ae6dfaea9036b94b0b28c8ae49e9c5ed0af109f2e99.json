{"ast":null,"code":"'use strict';import{defineAnimation}from\"./util.js\";import{withTiming}from\"./timing.js\";import{ColorProperties,processColor}from\"../Colors.js\";import{logger}from\"../logger/index.js\";const _worklet_11004623829338_init_data={code:\"function resolvePath_reactNativeReanimated_styleAnimationJs1(obj,path){const keys=Array.isArray(path)?path:[path];return keys.reduce(function(acc,current){if(Array.isArray(acc)&&typeof current==='number'){return acc[current];}else if(acc!==null&&typeof acc==='object'&&current in acc){return acc[current];}return undefined;},obj);}\"};const resolvePath=function(){const resolvePath=function(obj,path){const keys=Array.isArray(path)?path:[path];return keys.reduce((acc,current)=>{if(Array.isArray(acc)&&typeof current==='number'){return acc[current];}else if(acc!==null&&typeof acc==='object'&&current in acc){return acc[current];}return undefined;},obj);};resolvePath.__closure={};resolvePath.__workletHash=11004623829338;resolvePath.__initData=_worklet_11004623829338_init_data;return resolvePath;}();const _worklet_15386539109961_init_data={code:\"function setPath_reactNativeReanimated_styleAnimationJs2(obj,path,value){const keys=Array.isArray(path)?path:[path];let currObj=obj;for(let i=0;i<keys.length-1;i++){currObj=currObj;if(!(keys[i]in currObj)){if(typeof keys[i+1]==='number'){currObj[keys[i]]=[];}else{currObj[keys[i]]={};}}currObj=currObj[keys[i]];}currObj[keys[keys.length-1]]=value;}\"};const setPath=function(){const setPath=function(obj,path,value){const keys=Array.isArray(path)?path:[path];let currObj=obj;for(let i=0;i<keys.length-1;i++){currObj=currObj;if(!(keys[i]in currObj)){if(typeof keys[i+1]==='number'){currObj[keys[i]]=[];}else{currObj[keys[i]]={};}}currObj=currObj[keys[i]];}currObj[keys[keys.length-1]]=value;};setPath.__closure={};setPath.__workletHash=15386539109961;setPath.__initData=_worklet_15386539109961_init_data;return setPath;}();const _worklet_9095483716553_init_data={code:\"function withStyleAnimation_reactNativeReanimated_styleAnimationJs3(styleAnimations){const{defineAnimation,ColorProperties,setPath,processColor,resolvePath,logger,withTiming}=this.__closure;return defineAnimation({},function(){'worklet';const onFrame=function(animation,now){let stillGoing=false;const entriesToCheck=[{value:animation.styleAnimations,path:[]}];while(entriesToCheck.length>0){const currentEntry=entriesToCheck.pop();if(Array.isArray(currentEntry.value)){for(let index=0;index<currentEntry.value.length;index++){entriesToCheck.push({value:currentEntry.value[index],path:currentEntry.path.concat(index)});}}else if(typeof currentEntry.value==='object'&&currentEntry.value.onFrame===undefined){for(const key of Object.keys(currentEntry.value)){entriesToCheck.push({value:currentEntry.value[key],path:currentEntry.path.concat(key)});}}else{const currentStyleAnimation=currentEntry.value;if(currentStyleAnimation.finished){continue;}const finished=currentStyleAnimation.onFrame(currentStyleAnimation,now);if(finished){currentStyleAnimation.finished=true;if(currentStyleAnimation.callback){currentStyleAnimation.callback(true);}}else{stillGoing=true;}const isAnimatingColorProp=ColorProperties.includes(currentEntry.path[0]);setPath(animation.current,currentEntry.path,isAnimatingColorProp?processColor(currentStyleAnimation.current):currentStyleAnimation.current);}}return!stillGoing;};const onStart=function(animation,value,now,previousAnimation){const entriesToCheck=[{value:styleAnimations,path:[]}];while(entriesToCheck.length>0){const currentEntry=entriesToCheck.pop();if(Array.isArray(currentEntry.value)){for(let index=0;index<currentEntry.value.length;index++){entriesToCheck.push({value:currentEntry.value[index],path:currentEntry.path.concat(index)});}}else if(typeof currentEntry.value==='object'&&currentEntry.value.onStart===undefined){for(const key of Object.keys(currentEntry.value)){entriesToCheck.push({value:currentEntry.value[key],path:currentEntry.path.concat(key)});}}else{const prevAnimation=resolvePath(previousAnimation===null||previousAnimation===void 0?void 0:previousAnimation.styleAnimations,currentEntry.path);let prevVal=resolvePath(value,currentEntry.path);if(prevAnimation&&!prevVal){prevVal=prevAnimation.current;}if(prevVal===undefined){logger.warn(\\\"Initial values for animation are missing for property \\\"+currentEntry.path.join('.'));}setPath(animation.current,currentEntry.path,prevVal);let currentAnimation;if(typeof currentEntry.value!=='object'||!currentEntry.value.onStart){currentAnimation=withTiming(currentEntry.value,{duration:0});setPath(animation.styleAnimations,currentEntry.path,currentAnimation);}else{currentAnimation=currentEntry.value;}currentAnimation.onStart(currentAnimation,prevVal,now,prevAnimation);}}};const callback=function(finished){if(!finished){const animationsToCheck=[styleAnimations];while(animationsToCheck.length>0){const currentAnimation=animationsToCheck.pop();if(Array.isArray(currentAnimation)){for(const element of currentAnimation){animationsToCheck.push(element);}}else if(typeof currentAnimation==='object'&&currentAnimation.onStart===undefined){for(const value of Object.values(currentAnimation)){animationsToCheck.push(value);}}else{const currentStyleAnimation=currentAnimation;if(!currentStyleAnimation.finished&&currentStyleAnimation.callback){currentStyleAnimation.callback(false);}}}}};return{isHigherOrder:true,onFrame:onFrame,onStart:onStart,current:{},styleAnimations:styleAnimations,callback:callback};});}\"};const _worklet_15317269201642_init_data={code:\"function reactNativeReanimated_styleAnimationJs4(){const{ColorProperties,setPath,processColor,styleAnimations,resolvePath,logger,withTiming}=this.__closure;const onFrame=function(animation,now){let stillGoing=false;const entriesToCheck=[{value:animation.styleAnimations,path:[]}];while(entriesToCheck.length>0){const currentEntry=entriesToCheck.pop();if(Array.isArray(currentEntry.value)){for(let index=0;index<currentEntry.value.length;index++){entriesToCheck.push({value:currentEntry.value[index],path:currentEntry.path.concat(index)});}}else if(typeof currentEntry.value==='object'&&currentEntry.value.onFrame===undefined){for(const key of Object.keys(currentEntry.value)){entriesToCheck.push({value:currentEntry.value[key],path:currentEntry.path.concat(key)});}}else{const currentStyleAnimation=currentEntry.value;if(currentStyleAnimation.finished){continue;}const finished=currentStyleAnimation.onFrame(currentStyleAnimation,now);if(finished){currentStyleAnimation.finished=true;if(currentStyleAnimation.callback){currentStyleAnimation.callback(true);}}else{stillGoing=true;}const isAnimatingColorProp=ColorProperties.includes(currentEntry.path[0]);setPath(animation.current,currentEntry.path,isAnimatingColorProp?processColor(currentStyleAnimation.current):currentStyleAnimation.current);}}return!stillGoing;};const onStart=function(animation,value,now,previousAnimation){const entriesToCheck=[{value:styleAnimations,path:[]}];while(entriesToCheck.length>0){const currentEntry=entriesToCheck.pop();if(Array.isArray(currentEntry.value)){for(let index=0;index<currentEntry.value.length;index++){entriesToCheck.push({value:currentEntry.value[index],path:currentEntry.path.concat(index)});}}else if(typeof currentEntry.value==='object'&&currentEntry.value.onStart===undefined){for(const key of Object.keys(currentEntry.value)){entriesToCheck.push({value:currentEntry.value[key],path:currentEntry.path.concat(key)});}}else{const prevAnimation=resolvePath(previousAnimation===null||previousAnimation===void 0?void 0:previousAnimation.styleAnimations,currentEntry.path);let prevVal=resolvePath(value,currentEntry.path);if(prevAnimation&&!prevVal){prevVal=prevAnimation.current;}if(prevVal===undefined){logger.warn(\\\"Initial values for animation are missing for property \\\"+currentEntry.path.join('.'));}setPath(animation.current,currentEntry.path,prevVal);let currentAnimation;if(typeof currentEntry.value!=='object'||!currentEntry.value.onStart){currentAnimation=withTiming(currentEntry.value,{duration:0});setPath(animation.styleAnimations,currentEntry.path,currentAnimation);}else{currentAnimation=currentEntry.value;}currentAnimation.onStart(currentAnimation,prevVal,now,prevAnimation);}}};const callback=function(finished){if(!finished){const animationsToCheck=[styleAnimations];while(animationsToCheck.length>0){const currentAnimation=animationsToCheck.pop();if(Array.isArray(currentAnimation)){for(const element of currentAnimation){animationsToCheck.push(element);}}else if(typeof currentAnimation==='object'&&currentAnimation.onStart===undefined){for(const value of Object.values(currentAnimation)){animationsToCheck.push(value);}}else{const currentStyleAnimation=currentAnimation;if(!currentStyleAnimation.finished&&currentStyleAnimation.callback){currentStyleAnimation.callback(false);}}}}};return{isHigherOrder:true,onFrame:onFrame,onStart:onStart,current:{},styleAnimations:styleAnimations,callback:callback};}\"};export const withStyleAnimation=function(){const withStyleAnimation=function(styleAnimations){return defineAnimation({},function(){const reactNativeReanimated_styleAnimationJs4=function(){const onFrame=(animation,now)=>{let stillGoing=false;const entriesToCheck=[{value:animation.styleAnimations,path:[]}];while(entriesToCheck.length>0){const currentEntry=entriesToCheck.pop();if(Array.isArray(currentEntry.value)){for(let index=0;index<currentEntry.value.length;index++){entriesToCheck.push({value:currentEntry.value[index],path:currentEntry.path.concat(index)});}}else if(typeof currentEntry.value==='object'&&currentEntry.value.onFrame===undefined){for(const key of Object.keys(currentEntry.value)){entriesToCheck.push({value:currentEntry.value[key],path:currentEntry.path.concat(key)});}}else{const currentStyleAnimation=currentEntry.value;if(currentStyleAnimation.finished){continue;}const finished=currentStyleAnimation.onFrame(currentStyleAnimation,now);if(finished){currentStyleAnimation.finished=true;if(currentStyleAnimation.callback){currentStyleAnimation.callback(true);}}else{stillGoing=true;}const isAnimatingColorProp=ColorProperties.includes(currentEntry.path[0]);setPath(animation.current,currentEntry.path,isAnimatingColorProp?processColor(currentStyleAnimation.current):currentStyleAnimation.current);}}return!stillGoing;};const onStart=(animation,value,now,previousAnimation)=>{const entriesToCheck=[{value:styleAnimations,path:[]}];while(entriesToCheck.length>0){const currentEntry=entriesToCheck.pop();if(Array.isArray(currentEntry.value)){for(let index=0;index<currentEntry.value.length;index++){entriesToCheck.push({value:currentEntry.value[index],path:currentEntry.path.concat(index)});}}else if(typeof currentEntry.value==='object'&&currentEntry.value.onStart===undefined){for(const key of Object.keys(currentEntry.value)){entriesToCheck.push({value:currentEntry.value[key],path:currentEntry.path.concat(key)});}}else{const prevAnimation=resolvePath(previousAnimation?.styleAnimations,currentEntry.path);let prevVal=resolvePath(value,currentEntry.path);if(prevAnimation&&!prevVal){prevVal=prevAnimation.current;}if(prevVal===undefined){logger.warn(`Initial values for animation are missing for property ${currentEntry.path.join('.')}`);}setPath(animation.current,currentEntry.path,prevVal);let currentAnimation;if(typeof currentEntry.value!=='object'||!currentEntry.value.onStart){currentAnimation=withTiming(currentEntry.value,{duration:0});setPath(animation.styleAnimations,currentEntry.path,currentAnimation);}else{currentAnimation=currentEntry.value;}currentAnimation.onStart(currentAnimation,prevVal,now,prevAnimation);}}};const callback=finished=>{if(!finished){const animationsToCheck=[styleAnimations];while(animationsToCheck.length>0){const currentAnimation=animationsToCheck.pop();if(Array.isArray(currentAnimation)){for(const element of currentAnimation){animationsToCheck.push(element);}}else if(typeof currentAnimation==='object'&&currentAnimation.onStart===undefined){for(const value of Object.values(currentAnimation)){animationsToCheck.push(value);}}else{const currentStyleAnimation=currentAnimation;if(!currentStyleAnimation.finished&&currentStyleAnimation.callback){currentStyleAnimation.callback(false);}}}}};return{isHigherOrder:true,onFrame,onStart,current:{},styleAnimations,callback};};reactNativeReanimated_styleAnimationJs4.__closure={ColorProperties,setPath,processColor,styleAnimations,resolvePath,logger,withTiming};reactNativeReanimated_styleAnimationJs4.__workletHash=15317269201642;reactNativeReanimated_styleAnimationJs4.__initData=_worklet_15317269201642_init_data;return reactNativeReanimated_styleAnimationJs4;}());};withStyleAnimation.__closure={defineAnimation,ColorProperties,setPath,processColor,resolvePath,logger,withTiming};withStyleAnimation.__workletHash=9095483716553;withStyleAnimation.__initData=_worklet_9095483716553_init_data;return withStyleAnimation;}();","map":{"version":3,"names":["defineAnimation","withTiming","ColorProperties","processColor","logger","_worklet_11004623829338_init_data","code","resolvePath","obj","path","keys","Array","isArray","reduce","acc","current","undefined","__closure","__workletHash","__initData","_worklet_15386539109961_init_data","setPath","value","currObj","i","length","_worklet_9095483716553_init_data","_worklet_15317269201642_init_data","withStyleAnimation","styleAnimations","reactNativeReanimated_styleAnimationJs4","onFrame","animation","now","stillGoing","entriesToCheck","currentEntry","pop","index","push","concat","key","Object","currentStyleAnimation","finished","callback","isAnimatingColorProp","includes","onStart","previousAnimation","prevAnimation","prevVal","warn","join","currentAnimation","duration","animationsToCheck","element","values","isHigherOrder"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-reanimated/src/animation/styleAnimation.ts"],"sourcesContent":["'use strict';\nimport { defineAnimation } from './util';\nimport type {\n  Timestamp,\n  AnimatableValue,\n  AnimationObject,\n  Animation,\n  NestedObject,\n  NestedObjectValues,\n  AnimatedStyle,\n} from '../commonTypes';\nimport type { StyleLayoutAnimation } from './commonTypes';\nimport { withTiming } from './timing';\nimport { ColorProperties, processColor } from '../Colors';\nimport { logger } from '../logger';\n\n// resolves path to value for nested objects\n// if path cannot be resolved returns undefined\nfunction resolvePath<T>(\n  obj: NestedObject<T>,\n  path: AnimatableValue[] | AnimatableValue\n): NestedObjectValues<T> | undefined {\n  'worklet';\n  const keys: AnimatableValue[] = Array.isArray(path) ? path : [path];\n  return keys.reduce<NestedObjectValues<T> | undefined>((acc, current) => {\n    if (Array.isArray(acc) && typeof current === 'number') {\n      return acc[current];\n    } else if (\n      acc !== null &&\n      typeof acc === 'object' &&\n      (current as number | string) in acc\n    ) {\n      return (acc as { [key: string]: NestedObjectValues<T> })[\n        current as number | string\n      ];\n    }\n    return undefined;\n  }, obj);\n}\n\n// set value at given path\ntype Path = Array<string | number> | string | number;\nfunction setPath<T>(\n  obj: NestedObject<T>,\n  path: Path,\n  value: NestedObjectValues<T>\n): void {\n  'worklet';\n  const keys: Path = Array.isArray(path) ? path : [path];\n  let currObj: NestedObjectValues<T> = obj;\n  for (let i = 0; i < keys.length - 1; i++) {\n    // creates entry if there isn't one\n    currObj = currObj as { [key: string]: NestedObjectValues<T> };\n    if (!(keys[i] in currObj)) {\n      // if next key is a number create an array\n      if (typeof keys[i + 1] === 'number') {\n        currObj[keys[i]] = [];\n      } else {\n        currObj[keys[i]] = {};\n      }\n    }\n    currObj = currObj[keys[i]];\n  }\n\n  (currObj as { [key: string]: NestedObjectValues<T> })[keys[keys.length - 1]] =\n    value;\n}\n\ninterface NestedObjectEntry<T> {\n  value: NestedObjectValues<T>;\n  path: (string | number)[];\n}\n\nexport function withStyleAnimation(\n  styleAnimations: AnimatedStyle<any>\n): StyleLayoutAnimation {\n  'worklet';\n  return defineAnimation<StyleLayoutAnimation>({}, () => {\n    'worklet';\n\n    const onFrame = (\n      animation: StyleLayoutAnimation,\n      now: Timestamp\n    ): boolean => {\n      let stillGoing = false;\n      const entriesToCheck: NestedObjectEntry<AnimationObject>[] = [\n        { value: animation.styleAnimations, path: [] },\n      ];\n      while (entriesToCheck.length > 0) {\n        const currentEntry: NestedObjectEntry<AnimationObject> =\n          entriesToCheck.pop() as NestedObjectEntry<AnimationObject>;\n        if (Array.isArray(currentEntry.value)) {\n          for (let index = 0; index < currentEntry.value.length; index++) {\n            entriesToCheck.push({\n              value: currentEntry.value[index],\n              path: currentEntry.path.concat(index),\n            });\n          }\n        } else if (\n          typeof currentEntry.value === 'object' &&\n          currentEntry.value.onFrame === undefined\n        ) {\n          // nested object\n          for (const key of Object.keys(currentEntry.value)) {\n            entriesToCheck.push({\n              value: currentEntry.value[key],\n              path: currentEntry.path.concat(key),\n            });\n          }\n        } else {\n          const currentStyleAnimation: AnimationObject =\n            currentEntry.value as AnimationObject;\n          if (currentStyleAnimation.finished) {\n            continue;\n          }\n          const finished = currentStyleAnimation.onFrame(\n            currentStyleAnimation,\n            now\n          );\n          if (finished) {\n            currentStyleAnimation.finished = true;\n            if (currentStyleAnimation.callback) {\n              currentStyleAnimation.callback(true);\n            }\n          } else {\n            stillGoing = true;\n          }\n\n          // When working with animations changing colors, we need to make sure that each one of them begins with a rgba, not a processed number.\n          // Thus, we only set the path to a processed color, but currentStyleAnimation.current stays as rgba.\n          const isAnimatingColorProp = ColorProperties.includes(\n            currentEntry.path[0] as string\n          );\n\n          setPath(\n            animation.current,\n            currentEntry.path,\n            isAnimatingColorProp\n              ? processColor(currentStyleAnimation.current)\n              : currentStyleAnimation.current\n          );\n        }\n      }\n      return !stillGoing;\n    };\n\n    const onStart = (\n      animation: StyleLayoutAnimation,\n      value: AnimatedStyle<any>,\n      now: Timestamp,\n      previousAnimation: StyleLayoutAnimation\n    ): void => {\n      const entriesToCheck: NestedObjectEntry<\n        AnimationObject | AnimatableValue\n      >[] = [{ value: styleAnimations, path: [] }];\n      while (entriesToCheck.length > 0) {\n        const currentEntry: NestedObjectEntry<\n          AnimationObject | AnimatableValue\n        > = entriesToCheck.pop() as NestedObjectEntry<\n          AnimationObject | AnimatableValue\n        >;\n        if (Array.isArray(currentEntry.value)) {\n          for (let index = 0; index < currentEntry.value.length; index++) {\n            entriesToCheck.push({\n              value: currentEntry.value[index],\n              path: currentEntry.path.concat(index),\n            });\n          }\n        } else if (\n          typeof currentEntry.value === 'object' &&\n          currentEntry.value.onStart === undefined\n        ) {\n          for (const key of Object.keys(currentEntry.value)) {\n            entriesToCheck.push({\n              value: currentEntry.value[key],\n              path: currentEntry.path.concat(key),\n            });\n          }\n        } else {\n          const prevAnimation = resolvePath(\n            previousAnimation?.styleAnimations,\n            currentEntry.path\n          );\n          let prevVal = resolvePath(value, currentEntry.path);\n          if (prevAnimation && !prevVal) {\n            prevVal = (prevAnimation as any).current;\n          }\n          if (prevVal === undefined) {\n            logger.warn(\n              `Initial values for animation are missing for property ${currentEntry.path.join(\n                '.'\n              )}`\n            );\n          }\n          setPath(animation.current, currentEntry.path, prevVal);\n          let currentAnimation: AnimationObject;\n          if (\n            typeof currentEntry.value !== 'object' ||\n            !currentEntry.value.onStart\n          ) {\n            currentAnimation = withTiming(\n              currentEntry.value as AnimatableValue,\n              { duration: 0 }\n            ) as AnimationObject; // TODO TYPESCRIPT this temporary cast is to get rid of .d.ts file.\n            setPath(\n              animation.styleAnimations,\n              currentEntry.path,\n              currentAnimation\n            );\n          } else {\n            currentAnimation = currentEntry.value as Animation<AnimationObject>;\n          }\n          currentAnimation.onStart(\n            currentAnimation,\n            prevVal,\n            now,\n            prevAnimation\n          );\n        }\n      }\n    };\n\n    const callback = (finished: boolean): void => {\n      if (!finished) {\n        const animationsToCheck: NestedObjectValues<AnimationObject>[] = [\n          styleAnimations,\n        ];\n        while (animationsToCheck.length > 0) {\n          const currentAnimation: NestedObjectValues<AnimationObject> =\n            animationsToCheck.pop() as NestedObjectValues<AnimationObject>;\n          if (Array.isArray(currentAnimation)) {\n            for (const element of currentAnimation) {\n              animationsToCheck.push(element);\n            }\n          } else if (\n            typeof currentAnimation === 'object' &&\n            currentAnimation.onStart === undefined\n          ) {\n            for (const value of Object.values(currentAnimation)) {\n              animationsToCheck.push(value);\n            }\n          } else {\n            const currentStyleAnimation: AnimationObject =\n              currentAnimation as AnimationObject;\n            if (\n              !currentStyleAnimation.finished &&\n              currentStyleAnimation.callback\n            ) {\n              currentStyleAnimation.callback(false);\n            }\n          }\n        }\n      }\n    };\n\n    return {\n      isHigherOrder: true,\n      onFrame,\n      onStart,\n      current: {},\n      styleAnimations,\n      callback,\n    } as StyleLayoutAnimation;\n  });\n}\n"],"mappings":"AAAA,YAAY,CACZ,OAASA,eAAe,KAAQ,WAAQ,CAWxC,OAASC,UAAU,KAAQ,aAAU,CACrC,OAASC,eAAe,CAAEC,YAAY,KAAQ,cAAW,CACzD,OAASC,MAAM,KAAQ,oBAAW,OAAAC,iCAAA,EAAAC,IAAA,sVAAAC,WAAA,CAIlC,iBAAAA,WAAA,SAAAA,CACEC,GAAoB,CACpBC,IAAyC,CACN,CAEnC,KAAM,CAAAC,IAAuB,CAAGC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,CAAGA,IAAI,CAAG,CAACA,IAAI,CAAC,CACnE,MAAO,CAAAC,IAAI,CAACG,MAAM,CAAoC,CAACC,GAAG,CAAEC,OAAO,GAAK,CACtE,GAAIJ,KAAK,CAACC,OAAO,CAACE,GAAG,CAAC,EAAI,MAAO,CAAAC,OAAO,GAAK,QAAQ,CAAE,CACrD,MAAO,CAAAD,GAAG,CAACC,OAAO,CAAC,CACrB,CAAC,IAAM,IACLD,GAAG,GAAK,IAAI,EACZ,MAAO,CAAAA,GAAG,GAAK,QAAQ,EACtBC,OAAO,GAAwB,CAAAD,GAAG,CACnC,CACA,MAAQ,CAAAA,GAAG,CACTC,OAAO,CACR,CACH,CACA,MAAO,CAAAC,SAAS,CAClB,CAAC,CAAER,GAAG,CAAC,CACT,EAAAD,WAAA,CAAAU,SAAA,IAAAV,WAAA,CAAAW,aAAA,gBAAAX,WAAA,CAAAY,UAAA,CAAAd,iCAAA,QAAAE,WAAA,EApBA,SAAAa,iCAAA,EAAAd,IAAA,uWAAAe,OAAA,CAwBA,iBAAAA,OAAA,SAAAA,CACEb,GAAoB,CACpBC,IAAU,CACVa,KAA4B,CACtB,CAEN,KAAM,CAAAZ,IAAU,CAAGC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,CAAGA,IAAI,CAAG,CAACA,IAAI,CAAC,CACtD,GAAI,CAAAc,OAA8B,CAAGf,GAAG,CACxC,IAAK,GAAI,CAAAgB,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGd,IAAI,CAACe,MAAM,CAAG,CAAC,CAAED,CAAC,EAAE,CAAE,CAExCD,OAAO,CAAGA,OAAmD,CAC7D,GAAI,EAAEb,IAAI,CAACc,CAAC,CAAC,EAAI,CAAAD,OAAO,CAAC,CAAE,CAEzB,GAAI,MAAO,CAAAb,IAAI,CAACc,CAAC,CAAG,CAAC,CAAC,GAAK,QAAQ,CAAE,CACnCD,OAAO,CAACb,IAAI,CAACc,CAAC,CAAC,CAAC,CAAG,EAAE,CACvB,CAAC,IAAM,CACLD,OAAO,CAACb,IAAI,CAACc,CAAC,CAAC,CAAC,CAAG,CAAC,CAAC,CACvB,CACF,CACAD,OAAO,CAAGA,OAAO,CAACb,IAAI,CAACc,CAAC,CAAC,CAAC,CAC5B,CAECD,OAAO,CAA8Cb,IAAI,CAACA,IAAI,CAACe,MAAM,CAAG,CAAC,CAAC,CAAC,CAC1EH,KAAK,CACT,EAAAD,OAAA,CAAAJ,SAAA,IAAAI,OAAA,CAAAH,aAAA,gBAAAG,OAAA,CAAAF,UAAA,CAAAC,iCAAA,QAAAC,OAAA,EAxBA,SAAAK,gCAAA,EAAApB,IAAA,67GAAAqB,iCAAA,EAAArB,IAAA,m2GA+BA,aAAAsB,kBAAA,CAAO,iBAAAA,kBAAA,SAAAA,CACLC,eAAmC,CACb,CAEtB,MAAO,CAAA7B,eAAe,CAAuB,CAAC,CAAC,CAAE,iBAAA8B,uCAAA,SAAAA,CAAA,CAAM,CAGrD,KAAM,CAAAC,OAAO,CAAGA,CACdC,SAA+B,CAC/BC,GAAc,GACF,CACZ,GAAI,CAAAC,UAAU,CAAG,KAAK,CACtB,KAAM,CAAAC,cAAoD,CAAG,CAC3D,CAAEb,KAAK,CAAEU,SAAS,CAACH,eAAe,CAAEpB,IAAI,CAAE,EAAG,CAAC,CAC/C,CACD,MAAO0B,cAAc,CAACV,MAAM,CAAG,CAAC,CAAE,CAChC,KAAM,CAAAW,YAAgD,CACpDD,cAAc,CAACE,GAAG,CAAC,CAAuC,CAC5D,GAAI1B,KAAK,CAACC,OAAO,CAACwB,YAAY,CAACd,KAAK,CAAC,CAAE,CACrC,IAAK,GAAI,CAAAgB,KAAK,CAAG,CAAC,CAAEA,KAAK,CAAGF,YAAY,CAACd,KAAK,CAACG,MAAM,CAAEa,KAAK,EAAE,CAAE,CAC9DH,cAAc,CAACI,IAAI,CAAC,CAClBjB,KAAK,CAAEc,YAAY,CAACd,KAAK,CAACgB,KAAK,CAAC,CAChC7B,IAAI,CAAE2B,YAAY,CAAC3B,IAAI,CAAC+B,MAAM,CAACF,KAAK,CACtC,CAAC,CAAC,CACJ,CACF,CAAC,IAAM,IACL,MAAO,CAAAF,YAAY,CAACd,KAAK,GAAK,QAAQ,EACtCc,YAAY,CAACd,KAAK,CAACS,OAAO,GAAKf,SAAS,CACxC,CAEA,IAAK,KAAM,CAAAyB,GAAG,GAAI,CAAAC,MAAM,CAAChC,IAAI,CAAC0B,YAAY,CAACd,KAAK,CAAC,CAAE,CACjDa,cAAc,CAACI,IAAI,CAAC,CAClBjB,KAAK,CAAEc,YAAY,CAACd,KAAK,CAACmB,GAAG,CAAC,CAC9BhC,IAAI,CAAE2B,YAAY,CAAC3B,IAAI,CAAC+B,MAAM,CAACC,GAAG,CACpC,CAAC,CAAC,CACJ,CACF,CAAC,IAAM,CACL,KAAM,CAAAE,qBAAsC,CAC1CP,YAAY,CAACd,KAAwB,CACvC,GAAIqB,qBAAqB,CAACC,QAAQ,CAAE,CAClC,SACF,CACA,KAAM,CAAAA,QAAQ,CAAGD,qBAAqB,CAACZ,OAAO,CAC5CY,qBAAqB,CACrBV,GACF,CAAC,CACD,GAAIW,QAAQ,CAAE,CACZD,qBAAqB,CAACC,QAAQ,CAAG,IAAI,CACrC,GAAID,qBAAqB,CAACE,QAAQ,CAAE,CAClCF,qBAAqB,CAACE,QAAQ,CAAC,IAAI,CAAC,CACtC,CACF,CAAC,IAAM,CACLX,UAAU,CAAG,IAAI,CACnB,CAIA,KAAM,CAAAY,oBAAoB,CAAG5C,eAAe,CAAC6C,QAAQ,CACnDX,YAAY,CAAC3B,IAAI,CAAC,CAAC,CACrB,CAAC,CAEDY,OAAO,CACLW,SAAS,CAACjB,OAAO,CACjBqB,YAAY,CAAC3B,IAAI,CACjBqC,oBAAoB,CAChB3C,YAAY,CAACwC,qBAAqB,CAAC5B,OAAO,CAAC,CAC3C4B,qBAAqB,CAAC5B,OAC5B,CAAC,CACH,CACF,CACA,MAAO,CAACmB,UAAU,CACpB,CAAC,CAED,KAAM,CAAAc,OAAO,CAAGA,CACdhB,SAA+B,CAC/BV,KAAyB,CACzBW,GAAc,CACdgB,iBAAuC,GAC9B,CACT,KAAM,CAAAd,cAEH,CAAG,CAAC,CAAEb,KAAK,CAAEO,eAAe,CAAEpB,IAAI,CAAE,EAAG,CAAC,CAAC,CAC5C,MAAO0B,cAAc,CAACV,MAAM,CAAG,CAAC,CAAE,CAChC,KAAM,CAAAW,YAEL,CAAGD,cAAc,CAACE,GAAG,CAAC,CAEtB,CACD,GAAI1B,KAAK,CAACC,OAAO,CAACwB,YAAY,CAACd,KAAK,CAAC,CAAE,CACrC,IAAK,GAAI,CAAAgB,KAAK,CAAG,CAAC,CAAEA,KAAK,CAAGF,YAAY,CAACd,KAAK,CAACG,MAAM,CAAEa,KAAK,EAAE,CAAE,CAC9DH,cAAc,CAACI,IAAI,CAAC,CAClBjB,KAAK,CAAEc,YAAY,CAACd,KAAK,CAACgB,KAAK,CAAC,CAChC7B,IAAI,CAAE2B,YAAY,CAAC3B,IAAI,CAAC+B,MAAM,CAACF,KAAK,CACtC,CAAC,CAAC,CACJ,CACF,CAAC,IAAM,IACL,MAAO,CAAAF,YAAY,CAACd,KAAK,GAAK,QAAQ,EACtCc,YAAY,CAACd,KAAK,CAAC0B,OAAO,GAAKhC,SAAS,CACxC,CACA,IAAK,KAAM,CAAAyB,GAAG,GAAI,CAAAC,MAAM,CAAChC,IAAI,CAAC0B,YAAY,CAACd,KAAK,CAAC,CAAE,CACjDa,cAAc,CAACI,IAAI,CAAC,CAClBjB,KAAK,CAAEc,YAAY,CAACd,KAAK,CAACmB,GAAG,CAAC,CAC9BhC,IAAI,CAAE2B,YAAY,CAAC3B,IAAI,CAAC+B,MAAM,CAACC,GAAG,CACpC,CAAC,CAAC,CACJ,CACF,CAAC,IAAM,CACL,KAAM,CAAAS,aAAa,CAAG3C,WAAW,CAC/B0C,iBAAiB,EAAEpB,eAAe,CAClCO,YAAY,CAAC3B,IACf,CAAC,CACD,GAAI,CAAA0C,OAAO,CAAG5C,WAAW,CAACe,KAAK,CAAEc,YAAY,CAAC3B,IAAI,CAAC,CACnD,GAAIyC,aAAa,EAAI,CAACC,OAAO,CAAE,CAC7BA,OAAO,CAAID,aAAa,CAASnC,OAAO,CAC1C,CACA,GAAIoC,OAAO,GAAKnC,SAAS,CAAE,CACzBZ,MAAM,CAACgD,IAAI,CACT,yDAAyDhB,YAAY,CAAC3B,IAAI,CAAC4C,IAAI,CAC7E,GACF,CAAC,EACH,CAAC,CACH,CACAhC,OAAO,CAACW,SAAS,CAACjB,OAAO,CAAEqB,YAAY,CAAC3B,IAAI,CAAE0C,OAAO,CAAC,CACtD,GAAI,CAAAG,gBAAiC,CACrC,GACE,MAAO,CAAAlB,YAAY,CAACd,KAAK,GAAK,QAAQ,EACtC,CAACc,YAAY,CAACd,KAAK,CAAC0B,OAAO,CAC3B,CACAM,gBAAgB,CAAGrD,UAAU,CAC3BmC,YAAY,CAACd,KAAK,CAClB,CAAEiC,QAAQ,CAAE,CAAE,CAChB,CAAoB,CACpBlC,OAAO,CACLW,SAAS,CAACH,eAAe,CACzBO,YAAY,CAAC3B,IAAI,CACjB6C,gBACF,CAAC,CACH,CAAC,IAAM,CACLA,gBAAgB,CAAGlB,YAAY,CAACd,KAAmC,CACrE,CACAgC,gBAAgB,CAACN,OAAO,CACtBM,gBAAgB,CAChBH,OAAO,CACPlB,GAAG,CACHiB,aACF,CAAC,CACH,CACF,CACF,CAAC,CAED,KAAM,CAAAL,QAAQ,CAAID,QAAiB,EAAW,CAC5C,GAAI,CAACA,QAAQ,CAAE,CACb,KAAM,CAAAY,iBAAwD,CAAG,CAC/D3B,eAAe,CAChB,CACD,MAAO2B,iBAAiB,CAAC/B,MAAM,CAAG,CAAC,CAAE,CACnC,KAAM,CAAA6B,gBAAqD,CACzDE,iBAAiB,CAACnB,GAAG,CAAC,CAAwC,CAChE,GAAI1B,KAAK,CAACC,OAAO,CAAC0C,gBAAgB,CAAC,CAAE,CACnC,IAAK,KAAM,CAAAG,OAAO,GAAI,CAAAH,gBAAgB,CAAE,CACtCE,iBAAiB,CAACjB,IAAI,CAACkB,OAAO,CAAC,CACjC,CACF,CAAC,IAAM,IACL,MAAO,CAAAH,gBAAgB,GAAK,QAAQ,EACpCA,gBAAgB,CAACN,OAAO,GAAKhC,SAAS,CACtC,CACA,IAAK,KAAM,CAAAM,KAAK,GAAI,CAAAoB,MAAM,CAACgB,MAAM,CAACJ,gBAAgB,CAAC,CAAE,CACnDE,iBAAiB,CAACjB,IAAI,CAACjB,KAAK,CAAC,CAC/B,CACF,CAAC,IAAM,CACL,KAAM,CAAAqB,qBAAsC,CAC1CW,gBAAmC,CACrC,GACE,CAACX,qBAAqB,CAACC,QAAQ,EAC/BD,qBAAqB,CAACE,QAAQ,CAC9B,CACAF,qBAAqB,CAACE,QAAQ,CAAC,KAAK,CAAC,CACvC,CACF,CACF,CACF,CACF,CAAC,CAED,MAAO,CACLc,aAAa,CAAE,IAAI,CACnB5B,OAAO,CACPiB,OAAO,CACPjC,OAAO,CAAE,CAAC,CAAC,CACXc,eAAe,CACfgB,QACF,CAAC,CACH,CAAC,CAAAf,uCAAA,CAAAb,SAAA,EAAAf,eAAA,CAAAmB,OAAA,CAAAlB,YAAA,CAAA0B,eAAA,CAAAtB,WAAA,CAAAH,MAAA,CAAAH,UAAA,EAAA6B,uCAAA,CAAAZ,aAAA,gBAAAY,uCAAA,CAAAX,UAAA,CAAAQ,iCAAA,QAAAG,uCAAA,EA1LgD,EA0LhD,CAAC,CACJ,EAAAF,kBAAA,CAAAX,SAAA,EAAAjB,eAAA,CAAAE,eAAA,CAAAmB,OAAA,CAAAlB,YAAA,CAAAI,WAAA,CAAAH,MAAA,CAAAH,UAAA,EAAA2B,kBAAA,CAAAV,aAAA,eAAAU,kBAAA,CAAAT,UAAA,CAAAO,gCAAA,QAAAE,kBAAA,EA/LO","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}