{"ast":null,"code":"import Platform from\"react-native-web/dist/exports/Platform\";import AsyncStorage from'@react-native-async-storage/async-storage';import Constants from'expo-constants';const PUSH_TOKEN_KEY='@vibesync_push_token';let isNotificationsSupported=true;let isExpoGo=false;let Notifications=null;let Device=null;try{const appOwnership=Constants.appOwnership;isExpoGo=appOwnership==='expo';if(isExpoGo&&false){isNotificationsSupported=false;}else if(false){Notifications=require('expo-notifications');Device=require('expo-device');if(Notifications){Notifications.setNotificationHandler({handleNotification:async()=>({shouldShowAlert:true,shouldPlaySound:true,shouldSetBadge:true,shouldShowBanner:true,shouldShowList:true})});}}else{isNotificationsSupported=false;}}catch(error){isNotificationsSupported=false;}export class PushNotificationManager{static pushToken=null;static notificationListener=null;static responseListener=null;static async initialize(){try{if(!isNotificationsSupported){console.log('[PushNotifications] Notifications not supported in this environment');return null;}if(!Device.isDevice){console.log('[PushNotifications] Not running on a physical device');return null;}const projectId=Constants.expoConfig?.extra?.eas?.projectId;if(!projectId){console.log('[PushNotifications] No EAS project ID found');return null;}const{status:existingStatus}=await Notifications.getPermissionsAsync();let finalStatus=existingStatus;if(existingStatus!=='granted'){const{status}=await Notifications.requestPermissionsAsync();finalStatus=status;}if(finalStatus!=='granted'){console.log('[PushNotifications] Permission not granted');return null;}const tokenData=await Notifications.getExpoPushTokenAsync({projectId});const token=tokenData.data;if(false){await Notifications.setNotificationChannelAsync('default',{name:'default',importance:Notifications.AndroidImportance.MAX,vibrationPattern:[0,250,250,250],lightColor:'#8B5CF6'});}await AsyncStorage.setItem(PUSH_TOKEN_KEY,token);this.pushToken=token;this.setupListeners();console.log('[PushNotifications] Initialized successfully');return token;}catch(error){console.warn('[PushNotifications] Initialization failed:',error);return null;}}static setupListeners(){this.notificationListener=Notifications.addNotificationReceivedListener(notification=>{});this.responseListener=Notifications.addNotificationResponseReceivedListener(response=>{const data=response.notification.request.content.data;this.handleNotificationTap(data);});}static handleNotificationTap(data){}static async scheduleLocalNotification(title,body,data,trigger){try{if(!isNotificationsSupported){return'';}const id=await Notifications.scheduleNotificationAsync({content:{title,body,data:data||{},sound:true,priority:Notifications.AndroidNotificationPriority.HIGH},trigger:trigger||null});return id;}catch{return'';}}static async sendImmediateNotification(title,body,data){return this.scheduleLocalNotification(title,body,data,null);}static async cancelNotification(notificationId){try{if(!isNotificationsSupported)return;await Notifications.cancelScheduledNotificationAsync(notificationId);}catch{}}static async cancelAllNotifications(){try{if(!isNotificationsSupported)return;await Notifications.cancelAllScheduledNotificationsAsync();}catch{}}static async getBadgeCount(){try{if(!isNotificationsSupported)return 0;return await Notifications.getBadgeCountAsync();}catch{return 0;}}static async setBadgeCount(count){try{if(!isNotificationsSupported)return;await Notifications.setBadgeCountAsync(count);}catch{}}static async clearBadge(){await this.setBadgeCount(0);}static getPushToken(){return this.pushToken;}static cleanup(){if(this.notificationListener){this.notificationListener.remove();}if(this.responseListener){this.responseListener.remove();}}}","map":{"version":3,"names":["AsyncStorage","Constants","PUSH_TOKEN_KEY","isNotificationsSupported","isExpoGo","Notifications","Device","appOwnership","require","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","shouldShowBanner","shouldShowList","error","PushNotificationManager","pushToken","notificationListener","responseListener","initialize","console","log","isDevice","projectId","expoConfig","extra","eas","status","existingStatus","getPermissionsAsync","finalStatus","requestPermissionsAsync","tokenData","getExpoPushTokenAsync","token","data","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","setItem","setupListeners","warn","addNotificationReceivedListener","notification","addNotificationResponseReceivedListener","response","request","content","handleNotificationTap","scheduleLocalNotification","title","body","trigger","id","scheduleNotificationAsync","sound","priority","AndroidNotificationPriority","HIGH","sendImmediateNotification","cancelNotification","notificationId","cancelScheduledNotificationAsync","cancelAllNotifications","cancelAllScheduledNotificationsAsync","getBadgeCount","getBadgeCountAsync","setBadgeCount","count","setBadgeCountAsync","clearBadge","getPushToken","cleanup","remove"],"sources":["/home/user/rork-vibesync-458/utils/push-notifications.ts"],"sourcesContent":["import { Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Constants from 'expo-constants';\n\nconst PUSH_TOKEN_KEY = '@vibesync_push_token';\n\nlet isNotificationsSupported = true;\nlet isExpoGo = false;\nlet Notifications: any = null;\nlet Device: any = null;\n\ntry {\n  const appOwnership = Constants.appOwnership;\n  isExpoGo = appOwnership === 'expo';\n  \n  if (isExpoGo && Platform.OS === 'android') {\n    isNotificationsSupported = false;\n  } else if (Platform.OS !== 'web') {\n    Notifications = require('expo-notifications');\n    Device = require('expo-device');\n    \n    if (Notifications) {\n      Notifications.setNotificationHandler({\n        handleNotification: async () => ({\n          shouldShowAlert: true,\n          shouldPlaySound: true,\n          shouldSetBadge: true,\n          shouldShowBanner: true,\n          shouldShowList: true,\n        }),\n      });\n    }\n  } else {\n    isNotificationsSupported = false;\n  }\n} catch (error) {\n  isNotificationsSupported = false;\n}\n\nexport interface PushNotificationData {\n  type: 'like' | 'comment' | 'follow' | 'message' | 'live' | 'general';\n  userId?: string;\n  postId?: string;\n  messageId?: string;\n  streamId?: string;\n  title: string;\n  body: string;\n}\n\nexport class PushNotificationManager {\n  private static pushToken: string | null = null;\n  private static notificationListener: Notifications.Subscription | null = null;\n  private static responseListener: Notifications.Subscription | null = null;\n\n  static async initialize(): Promise<string | null> {\n    try {\n      if (!isNotificationsSupported) {\n        console.log('[PushNotifications] Notifications not supported in this environment');\n        return null;\n      }\n\n      if (!Device.isDevice) {\n        console.log('[PushNotifications] Not running on a physical device');\n        return null;\n      }\n\n      const projectId = Constants.expoConfig?.extra?.eas?.projectId;\n      if (!projectId) {\n        console.log('[PushNotifications] No EAS project ID found');\n        return null;\n      }\n\n      const { status: existingStatus } = await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n\n      if (existingStatus !== 'granted') {\n        const { status } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n\n      if (finalStatus !== 'granted') {\n        console.log('[PushNotifications] Permission not granted');\n        return null;\n      }\n\n      const tokenData = await Notifications.getExpoPushTokenAsync({ projectId });\n      const token = tokenData.data;\n\n      if (Platform.OS === 'android') {\n        await Notifications.setNotificationChannelAsync('default', {\n          name: 'default',\n          importance: Notifications.AndroidImportance.MAX,\n          vibrationPattern: [0, 250, 250, 250],\n          lightColor: '#8B5CF6',\n        });\n      }\n\n      await AsyncStorage.setItem(PUSH_TOKEN_KEY, token);\n      this.pushToken = token;\n\n      this.setupListeners();\n\n      console.log('[PushNotifications] Initialized successfully');\n      return token;\n    } catch (error) {\n      console.warn('[PushNotifications] Initialization failed:', error);\n      return null;\n    }\n  }\n\n  private static setupListeners() {\n    this.notificationListener = Notifications.addNotificationReceivedListener(notification => {\n    });\n\n    this.responseListener = Notifications.addNotificationResponseReceivedListener(response => {\n      const data = response.notification.request.content.data as unknown as PushNotificationData;\n      this.handleNotificationTap(data);\n    });\n  }\n\n  private static handleNotificationTap(data: PushNotificationData) {\n  }\n\n  static async scheduleLocalNotification(\n    title: string,\n    body: string,\n    data?: PushNotificationData,\n    trigger?: Notifications.NotificationTriggerInput\n  ): Promise<string> {\n    try {\n      if (!isNotificationsSupported) {\n        return '';\n      }\n\n      const id = await Notifications.scheduleNotificationAsync({\n        content: {\n          title,\n          body,\n          data: (data || {}) as Record<string, unknown>,\n          sound: true,\n          priority: Notifications.AndroidNotificationPriority.HIGH,\n        },\n        trigger: trigger || null,\n      });\n\n      return id;\n    } catch {\n      return '';\n    }\n  }\n\n  static async sendImmediateNotification(\n    title: string,\n    body: string,\n    data?: PushNotificationData\n  ): Promise<string> {\n    return this.scheduleLocalNotification(title, body, data, null);\n  }\n\n  static async cancelNotification(notificationId: string): Promise<void> {\n    try {\n      if (!isNotificationsSupported) return;\n      await Notifications.cancelScheduledNotificationAsync(notificationId);\n    } catch {\n    }\n  }\n\n  static async cancelAllNotifications(): Promise<void> {\n    try {\n      if (!isNotificationsSupported) return;\n      await Notifications.cancelAllScheduledNotificationsAsync();\n    } catch {\n    }\n  }\n\n  static async getBadgeCount(): Promise<number> {\n    try {\n      if (!isNotificationsSupported) return 0;\n      return await Notifications.getBadgeCountAsync();\n    } catch {\n      return 0;\n    }\n  }\n\n  static async setBadgeCount(count: number): Promise<void> {\n    try {\n      if (!isNotificationsSupported) return;\n      await Notifications.setBadgeCountAsync(count);\n    } catch {\n    }\n  }\n\n  static async clearBadge(): Promise<void> {\n    await this.setBadgeCount(0);\n  }\n\n  static getPushToken(): string | null {\n    return this.pushToken;\n  }\n\n  static cleanup() {\n    if (this.notificationListener) {\n      this.notificationListener.remove();\n    }\n    if (this.responseListener) {\n      this.responseListener.remove();\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}