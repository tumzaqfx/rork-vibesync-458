{"ast":null,"code":"function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import NativeInterface from'./nativeInterface';import InternetReachability from'./internetReachability';import*as PrivateTypes from'./privateTypes';export default class State{constructor(configuration){_defineProperty(this,\"_nativeEventSubscription\",null);_defineProperty(this,\"_subscriptions\",new Set());_defineProperty(this,\"_latestState\",null);_defineProperty(this,\"_internetReachability\",void 0);_defineProperty(this,\"_handleNativeStateUpdate\",state=>{this._internetReachability.update(state);const convertedState=this._convertState(state);this._latestState=convertedState;this._subscriptions.forEach(handler=>handler(convertedState));});_defineProperty(this,\"_handleInternetReachabilityUpdate\",isInternetReachable=>{if(!this._latestState){return;}const nextState=Object.assign({},this._latestState,{isInternetReachable});this._latestState=nextState;this._subscriptions.forEach(handler=>handler(nextState));});_defineProperty(this,\"_fetchCurrentState\",async requestedInterface=>{const state=await NativeInterface.getCurrentState(requestedInterface);this._internetReachability.update(state);const convertedState=this._convertState(state);if(!requestedInterface){this._latestState=convertedState;this._subscriptions.forEach(handler=>handler(convertedState));}return convertedState;});_defineProperty(this,\"_convertState\",input=>{if(typeof input.isInternetReachable==='boolean'){return input;}else{return Object.assign({},input,{isInternetReachable:this._internetReachability.currentState()});}});_defineProperty(this,\"latest\",requestedInterface=>{if(requestedInterface){return this._fetchCurrentState(requestedInterface);}else if(this._latestState){return Promise.resolve(this._latestState);}else{return this._fetchCurrentState();}});_defineProperty(this,\"add\",handler=>{this._subscriptions.add(handler);if(this._latestState){handler(this._latestState);}else{this.latest().then(handler);}});_defineProperty(this,\"remove\",handler=>{this._subscriptions.delete(handler);});_defineProperty(this,\"tearDown\",()=>{if(this._internetReachability){this._internetReachability.tearDown();}if(this._nativeEventSubscription){this._nativeEventSubscription.remove();}this._subscriptions.clear();});this._internetReachability=new InternetReachability(configuration,this._handleInternetReachabilityUpdate);this._nativeEventSubscription=NativeInterface.eventEmitter.addListener(PrivateTypes.DEVICE_CONNECTIVITY_EVENT,this._handleNativeStateUpdate);this._fetchCurrentState();}}","map":{"version":3,"names":["NativeInterface","InternetReachability","PrivateTypes","State","constructor","configuration","_defineProperty","Set","state","_internetReachability","update","convertedState","_convertState","_latestState","_subscriptions","forEach","handler","isInternetReachable","nextState","Object","assign","requestedInterface","getCurrentState","input","currentState","_fetchCurrentState","Promise","resolve","add","latest","then","delete","tearDown","_nativeEventSubscription","remove","clear","_handleInternetReachabilityUpdate","eventEmitter","addListener","DEVICE_CONNECTIVITY_EVENT","_handleNativeStateUpdate"],"sources":["/home/user/rork-vibesync-458/node_modules/@react-native-community/netinfo/lib/module/internal/state.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventSubscription} from 'react-native';\nimport NativeInterface from './nativeInterface';\nimport InternetReachability from './internetReachability';\nimport * as Types from './types';\nimport * as PrivateTypes from './privateTypes';\n\nexport default class State {\n  private _nativeEventSubscription: NativeEventSubscription | null = null;\n  private _subscriptions = new Set<Types.NetInfoChangeHandler>();\n  private _latestState: Types.NetInfoState | null = null;\n  private _internetReachability: InternetReachability;\n\n  constructor(configuration: Types.NetInfoConfiguration) {\n    // Add the listener to the internet connectivity events\n    this._internetReachability = new InternetReachability(\n      configuration,\n      this._handleInternetReachabilityUpdate,\n    );\n\n    // Add the subscription to the native events\n    this._nativeEventSubscription = NativeInterface.eventEmitter.addListener(\n      PrivateTypes.DEVICE_CONNECTIVITY_EVENT,\n      this._handleNativeStateUpdate,\n    );\n\n    // Fetch the current state from the native module\n    this._fetchCurrentState();\n  }\n\n  private _handleNativeStateUpdate = (\n    state: PrivateTypes.NetInfoNativeModuleState,\n  ): void => {\n    // Update the internet reachability module\n    this._internetReachability.update(state);\n\n    // Convert the state from native to JS shape\n    const convertedState = this._convertState(state);\n\n    // Update the listeners\n    this._latestState = convertedState;\n    this._subscriptions.forEach((handler): void => handler(convertedState));\n  };\n\n  private _handleInternetReachabilityUpdate = (\n    isInternetReachable: boolean | null | undefined,\n  ): void => {\n    if (!this._latestState) {\n      return;\n    }\n\n    const nextState = {\n      ...this._latestState,\n      isInternetReachable,\n    } as Types.NetInfoState;\n    this._latestState = nextState;\n    this._subscriptions.forEach((handler): void => handler(nextState));\n  };\n\n  public _fetchCurrentState = async (\n    requestedInterface?: string,\n  ): Promise<Types.NetInfoState> => {\n    const state = await NativeInterface.getCurrentState(requestedInterface);\n\n    // Update the internet reachability module\n    this._internetReachability.update(state);\n    // Convert and store the new state\n    const convertedState = this._convertState(state);\n    if (!requestedInterface) {\n      this._latestState = convertedState;\n      this._subscriptions.forEach((handler): void => handler(convertedState));\n    }\n\n    return convertedState;\n  };\n\n  private _convertState = (\n    input: PrivateTypes.NetInfoNativeModuleState,\n  ): Types.NetInfoState => {\n    if (typeof input.isInternetReachable === 'boolean') {\n      return input as Types.NetInfoState;\n    } else {\n      return {\n        ...input,\n        isInternetReachable: this._internetReachability.currentState(),\n      } as Types.NetInfoState;\n    }\n  };\n\n  public latest = (\n    requestedInterface?: string,\n  ): Promise<Types.NetInfoState> => {\n    if (requestedInterface) {\n      return this._fetchCurrentState(requestedInterface);\n    } else if (this._latestState) {\n      return Promise.resolve(this._latestState);\n    } else {\n      return this._fetchCurrentState();\n    }\n  };\n\n  public add = (handler: Types.NetInfoChangeHandler): void => {\n    // Add the subscription handler to our set\n    this._subscriptions.add(handler);\n\n    // Send it the latest data we have\n    if (this._latestState) {\n      handler(this._latestState);\n    } else {\n      this.latest().then(handler);\n    }\n  };\n\n  public remove = (handler: Types.NetInfoChangeHandler): void => {\n    this._subscriptions.delete(handler);\n  };\n\n  public tearDown = (): void => {\n    if (this._internetReachability) {\n      this._internetReachability.tearDown();\n    }\n\n    if (this._nativeEventSubscription) {\n      this._nativeEventSubscription.remove();\n    }\n\n    this._subscriptions.clear();\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}