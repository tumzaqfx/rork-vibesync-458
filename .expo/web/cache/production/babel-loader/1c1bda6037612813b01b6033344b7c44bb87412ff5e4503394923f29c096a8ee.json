{"ast":null,"code":"'use strict';import{ReanimatedError}from\"./errors.js\";const NEWTON_ITERATIONS=4;const NEWTON_MIN_SLOPE=0.001;const SUBDIVISION_PRECISION=0.0000001;const SUBDIVISION_MAX_ITERATIONS=10;const kSplineTableSize=11;const kSampleStepSize=1.0/(kSplineTableSize-1.0);const _worklet_8828646082676_init_data={code:\"function A_reactNativeReanimated_BezierJs1(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}\"};const A=function(){const A=function(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;};A.__closure={};A.__workletHash=8828646082676;A.__initData=_worklet_8828646082676_init_data;return A;}();const _worklet_4203953384949_init_data={code:\"function B_reactNativeReanimated_BezierJs2(aA1,aA2){return 3.0*aA2-6.0*aA1;}\"};const B=function(){const B=function(aA1,aA2){return 3.0*aA2-6.0*aA1;};B.__closure={};B.__workletHash=4203953384949;B.__initData=_worklet_4203953384949_init_data;return B;}();const _worklet_8388140024310_init_data={code:\"function C_reactNativeReanimated_BezierJs3(aA1){return 3.0*aA1;}\"};const C=function(){const C=function(aA1){return 3.0*aA1;};C.__closure={};C.__workletHash=8388140024310;C.__initData=_worklet_8388140024310_init_data;return C;}();const _worklet_15740570894910_init_data={code:\"function calcBezier_reactNativeReanimated_BezierJs4(aT,aA1,aA2){const{A,B,C}=this.__closure;return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}\"};const calcBezier=function(){const calcBezier=function(aT,aA1,aA2){return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;};calcBezier.__closure={A,B,C};calcBezier.__workletHash=15740570894910;calcBezier.__initData=_worklet_15740570894910_init_data;return calcBezier;}();const _worklet_4162364291299_init_data={code:\"function getSlope_reactNativeReanimated_BezierJs5(aT,aA1,aA2){const{A,B,C}=this.__closure;return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}\"};const getSlope=function(){const getSlope=function(aT,aA1,aA2){return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);};getSlope.__closure={A,B,C};getSlope.__workletHash=4162364291299;getSlope.__initData=_worklet_4162364291299_init_data;return getSlope;}();const _worklet_9166841024279_init_data={code:\"function binarySubdivide_reactNativeReanimated_BezierJs6(aX,aA,aB,mX1,mX2){const{calcBezier,SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS}=this.__closure;let currentX;let currentT;let i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}\"};const binarySubdivide=function(){const binarySubdivide=function(aX,aA,aB,mX1,mX2){let currentX;let currentT;let i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;};binarySubdivide.__closure={calcBezier,SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS};binarySubdivide.__workletHash=9166841024279;binarySubdivide.__initData=_worklet_9166841024279_init_data;return binarySubdivide;}();const _worklet_13606782449305_init_data={code:\"function newtonRaphsonIterate_reactNativeReanimated_BezierJs7(aX,aGuessT,mX1,mX2){const{NEWTON_ITERATIONS,getSlope,calcBezier}=this.__closure;for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}const currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}\"};const newtonRaphsonIterate=function(){const newtonRaphsonIterate=function(aX,aGuessT,mX1,mX2){for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}const currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;};newtonRaphsonIterate.__closure={NEWTON_ITERATIONS,getSlope,calcBezier};newtonRaphsonIterate.__workletHash=13606782449305;newtonRaphsonIterate.__initData=_worklet_13606782449305_init_data;return newtonRaphsonIterate;}();const _worklet_6918608934740_init_data={code:\"function Bezier_reactNativeReanimated_BezierJs8(mX1,mY1,mX2,mY2){const{kSplineTableSize,calcBezier,kSampleStepSize,getSlope,NEWTON_MIN_SLOPE,newtonRaphsonIterate,binarySubdivide}=this.__closure;function LinearEasing(x){'worklet';return x;}if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new ReanimatedError('Bezier x values must be in [0, 1] range.');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}const sampleValues=new Array(kSplineTableSize);for(let i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}function getTForX(aX){'worklet';let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}return function Bezier_reactNativeReanimated_BezierJs8(x){'worklet';if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};}\"};const _worklet_17244837042130_init_data={code:\"function LinearEasing_reactNativeReanimated_BezierJs9(x){return x;}\"};const _worklet_15383647275891_init_data={code:\"function getTForX_reactNativeReanimated_BezierJs10(aX){const{kSplineTableSize,sampleValues,kSampleStepSize,getSlope,mX1,mX2,NEWTON_MIN_SLOPE,newtonRaphsonIterate,binarySubdivide}=this.__closure;let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}\"};const _worklet_7919274967463_init_data={code:\"function BezierEasing_reactNativeReanimated_BezierJs11(x){const{mX1,mY1,mX2,mY2,calcBezier,getTForX}=this.__closure;if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);}\"};export const Bezier=function(){const Bezier=function(mX1,mY1,mX2,mY2){const LinearEasing=function(){const LinearEasing=function(x){return x;};LinearEasing.__closure={};LinearEasing.__workletHash=17244837042130;LinearEasing.__initData=_worklet_17244837042130_init_data;return LinearEasing;}();if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new ReanimatedError('Bezier x values must be in [0, 1] range.');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}const sampleValues=new Array(kSplineTableSize);for(let i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}const getTForX=function(){const getTForX=function(aX){let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}};getTForX.__closure={kSplineTableSize,sampleValues,kSampleStepSize,getSlope,mX1,mX2,NEWTON_MIN_SLOPE,newtonRaphsonIterate,binarySubdivide};getTForX.__workletHash=15383647275891;getTForX.__initData=_worklet_15383647275891_init_data;return getTForX;}();return function(){const BezierEasing=function(x){if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};BezierEasing.__closure={mX1,mY1,mX2,mY2,calcBezier,getTForX};BezierEasing.__workletHash=7919274967463;BezierEasing.__initData=_worklet_7919274967463_init_data;return BezierEasing;}();};Bezier.__closure={kSplineTableSize,calcBezier,kSampleStepSize,getSlope,NEWTON_MIN_SLOPE,newtonRaphsonIterate,binarySubdivide};Bezier.__workletHash=6918608934740;Bezier.__initData=_worklet_6918608934740_init_data;return Bezier;}();","map":{"version":3,"names":["ReanimatedError","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","_worklet_8828646082676_init_data","code","A","aA1","aA2","__closure","__workletHash","__initData","_worklet_4203953384949_init_data","B","_worklet_8388140024310_init_data","C","_worklet_15740570894910_init_data","calcBezier","aT","_worklet_4162364291299_init_data","getSlope","_worklet_9166841024279_init_data","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","_worklet_13606782449305_init_data","newtonRaphsonIterate","aGuessT","currentSlope","_worklet_6918608934740_init_data","_worklet_17244837042130_init_data","_worklet_15383647275891_init_data","_worklet_7919274967463_init_data","Bezier","mY1","mY2","LinearEasing","x","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-reanimated/src/Bezier.ts"],"sourcesContent":["'use strict';\n\nimport { ReanimatedError } from './errors';\n\n/**\n * https://github.com/gre/bezier-easing BezierEasing - use bezier curve for\n * transition easing function by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\n\nconst NEWTON_ITERATIONS = 4;\nconst NEWTON_MIN_SLOPE = 0.001;\nconst SUBDIVISION_PRECISION = 0.0000001;\nconst SUBDIVISION_MAX_ITERATIONS = 10;\n\nconst kSplineTableSize = 11;\nconst kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nfunction A(aA1: number, aA2: number): number {\n  'worklet';\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\nfunction B(aA1: number, aA2: number): number {\n  'worklet';\n  return 3.0 * aA2 - 6.0 * aA1;\n}\nfunction C(aA1: number) {\n  'worklet';\n  return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT: number, aA1: number, aA2: number): number {\n  'worklet';\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT: number, aA1: number, aA2: number): number {\n  'worklet';\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(\n  aX: number,\n  aA: number,\n  aB: number,\n  mX1: number,\n  mX2: number\n): number {\n  'worklet';\n  let currentX;\n  let currentT;\n  let i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (\n    Math.abs(currentX) > SUBDIVISION_PRECISION &&\n    ++i < SUBDIVISION_MAX_ITERATIONS\n  );\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(\n  aX: number,\n  aGuessT: number,\n  mX1: number,\n  mX2: number\n): number {\n  'worklet';\n  for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n    const currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\n\nexport function Bezier(\n  mX1: number,\n  mY1: number,\n  mX2: number,\n  mY2: number\n): (x: number) => number {\n  'worklet';\n\n  function LinearEasing(x: number): number {\n    'worklet';\n    return x;\n  }\n\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n    throw new ReanimatedError('Bezier x values must be in [0, 1] range.');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  const sampleValues = new Array(kSplineTableSize);\n\n  // Precompute samples table\n  for (let i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX(aX: number): number {\n    'worklet';\n    let intervalStart = 0.0;\n    let currentSample = 1;\n    const lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    const dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    const guessForT = intervalStart + dist * kSampleStepSize;\n\n    const initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(\n        aX,\n        intervalStart,\n        intervalStart + kSampleStepSize,\n        mX1,\n        mX2\n      );\n    }\n  }\n\n  return function BezierEasing(x) {\n    'worklet';\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}