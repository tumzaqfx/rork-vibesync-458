{"ast":null,"code":"import{Asset,ANDROID_EMBEDDED_URL_BASE_RESOURCE}from'./Asset';import{IS_ENV_WITH_LOCAL_ASSETS}from'./PlatformUtils';import resolveAssetSource,{setCustomSourceTransformer}from'./resolveAssetSource';if(IS_ENV_WITH_LOCAL_ASSETS){const setTransformer=resolveAssetSource.setCustomSourceTransformer||setCustomSourceTransformer;setTransformer(resolver=>{try{if('fileHashes'in resolver.asset&&resolver.asset.fileHashes){const asset=Asset.fromMetadata(resolver.asset);if(asset.uri.startsWith(ANDROID_EMBEDDED_URL_BASE_RESOURCE)){return resolver.resourceIdentifierWithoutScale();}return resolver.fromSource(asset.downloaded?asset.localUri:asset.uri);}else{return resolver.defaultAsset();}}catch{return resolver.defaultAsset();}});}","map":{"version":3,"names":["Asset","ANDROID_EMBEDDED_URL_BASE_RESOURCE","IS_ENV_WITH_LOCAL_ASSETS","resolveAssetSource","setCustomSourceTransformer","setTransformer","resolver","asset","fileHashes","fromMetadata","uri","startsWith","resourceIdentifierWithoutScale","fromSource","downloaded","localUri","defaultAsset"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-asset/src/Asset.fx.ts"],"sourcesContent":["import type { default as AssetSourceResolver } from 'react-native/Libraries/Image/AssetSourceResolver';\n\nimport { Asset, ANDROID_EMBEDDED_URL_BASE_RESOURCE } from './Asset';\nimport { IS_ENV_WITH_LOCAL_ASSETS } from './PlatformUtils';\nimport resolveAssetSource, { setCustomSourceTransformer } from './resolveAssetSource';\n\n// Override React Native's asset resolution for `Image` components in contexts where it matters\nif (IS_ENV_WITH_LOCAL_ASSETS) {\n  const setTransformer =\n    resolveAssetSource.setCustomSourceTransformer || setCustomSourceTransformer;\n  setTransformer((resolver) => {\n    try {\n      // Bundler is using the hashAssetFiles plugin if and only if the fileHashes property exists\n      if ('fileHashes' in resolver.asset && resolver.asset.fileHashes) {\n        const asset = Asset.fromMetadata(resolver.asset);\n        if (asset.uri.startsWith(ANDROID_EMBEDDED_URL_BASE_RESOURCE)) {\n          // TODO(@kitten): See https://github.com/expo/expo/commit/ec940b57a87d99ab4f1d06d87126e662c3f04f04#r155340943\n          // It's unclear whether this is sound since this may be our own AssetSourceResolver, which doesn't have this method\n          // Please compare `AssetSourceResolver` type from `react-native/Libraries/Image/AssetSourceResolver` against `./AssetSourceResolver`\n          return (\n            resolver as unknown as AssetSourceResolver\n          ).resourceIdentifierWithoutScale() as any;\n        }\n        return resolver.fromSource(asset.downloaded ? asset.localUri! : asset.uri);\n      } else {\n        return resolver.defaultAsset();\n      }\n    } catch {\n      return resolver.defaultAsset();\n    }\n  });\n}\n"],"mappings":"AAEA,OAASA,KAAK,CAAEC,kCAAkC,KAAQ,SAAS,CACnE,OAASC,wBAAwB,KAAQ,iBAAiB,CAC1D,MAAO,CAAAC,kBAAkB,EAAIC,0BAA0B,KAAQ,sBAAsB,CAGrF,GAAIF,wBAAwB,CAAE,CAC5B,KAAM,CAAAG,cAAc,CAClBF,kBAAkB,CAACC,0BAA0B,EAAIA,0BAA0B,CAC7EC,cAAc,CAAEC,QAAQ,EAAI,CAC1B,GAAI,CAEF,GAAI,YAAY,EAAI,CAAAA,QAAQ,CAACC,KAAK,EAAID,QAAQ,CAACC,KAAK,CAACC,UAAU,CAAE,CAC/D,KAAM,CAAAD,KAAK,CAAGP,KAAK,CAACS,YAAY,CAACH,QAAQ,CAACC,KAAK,CAAC,CAChD,GAAIA,KAAK,CAACG,GAAG,CAACC,UAAU,CAACV,kCAAkC,CAAC,CAAE,CAI5D,MACE,CAAAK,QACD,CAACM,8BAA8B,EAAS,CAC3C,CACA,MAAO,CAAAN,QAAQ,CAACO,UAAU,CAACN,KAAK,CAACO,UAAU,CAAGP,KAAK,CAACQ,QAAS,CAAGR,KAAK,CAACG,GAAG,CAAC,CAC5E,CAAC,IAAM,CACL,MAAO,CAAAJ,QAAQ,CAACU,YAAY,EAAE,CAChC,CACF,CAAE,KAAM,CACN,MAAO,CAAAV,QAAQ,CAACU,YAAY,EAAE,CAChC,CACF,CAAC,CAAC,CACJ","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}