{"ast":null,"code":"'use strict';import{flattenArray}from\"./utils.js\";import{makeViewDescriptorsSet}from\"../ViewDescriptorsSet.js\";import{adaptViewConfig}from\"../ConfigHelper.js\";import updateProps from\"../UpdateProps.js\";import{stopMapper,startMapper}from\"../mappers.js\";import{isSharedValue}from\"../isSharedValue.js\";function isInlineStyleTransform(transform){if(!Array.isArray(transform)){return false;}return transform.some(t=>hasInlineStyles(t));}function inlinePropsHasChanged(styles1,styles2){if(Object.keys(styles1).length!==Object.keys(styles2).length){return true;}for(const key of Object.keys(styles1)){if(styles1[key]!==styles2[key]){return true;}}return false;}const _worklet_11915436251318_init_data={code:\"function getInlinePropsUpdate_reactNativeReanimated_InlinePropManagerJs1(inlineProps){const getInlinePropsUpdate_reactNativeReanimated_InlinePropManagerJs1=this._recur;const{isSharedValue}=this.__closure;const update={};for(const[key,styleValue]of Object.entries(inlineProps)){if(isSharedValue(styleValue)){update[key]=styleValue.value;}else if(Array.isArray(styleValue)){update[key]=styleValue.map(function(item){return getInlinePropsUpdate_reactNativeReanimated_InlinePropManagerJs1(item);});}else if(typeof styleValue==='object'){update[key]=getInlinePropsUpdate_reactNativeReanimated_InlinePropManagerJs1(styleValue);}else{update[key]=styleValue;}}return update;}\"};const getInlinePropsUpdate=function(){const getInlinePropsUpdate=function(inlineProps){const update={};for(const[key,styleValue]of Object.entries(inlineProps)){if(isSharedValue(styleValue)){update[key]=styleValue.value;}else if(Array.isArray(styleValue)){update[key]=styleValue.map(item=>{return getInlinePropsUpdate(item);});}else if(typeof styleValue==='object'){update[key]=getInlinePropsUpdate(styleValue);}else{update[key]=styleValue;}}return update;};getInlinePropsUpdate.__closure={isSharedValue};getInlinePropsUpdate.__workletHash=11915436251318;getInlinePropsUpdate.__initData=_worklet_11915436251318_init_data;return getInlinePropsUpdate;}();function extractSharedValuesMapFromProps(props){const inlineProps={};for(const key in props){const value=props[key];if(key==='style'){const styles=flattenArray(props.style??[]);styles.forEach(style=>{if(!style){return;}for(const[styleKey,styleValue]of Object.entries(style)){if(isSharedValue(styleValue)){inlineProps[styleKey]=styleValue;}else if(styleKey==='transform'&&isInlineStyleTransform(styleValue)){inlineProps[styleKey]=styleValue;}}});}else if(isSharedValue(value)){inlineProps[key]=value;}}return inlineProps;}export function hasInlineStyles(style){if(!style){return false;}return Object.keys(style).some(key=>{const styleValue=style[key];return isSharedValue(styleValue)||key==='transform'&&isInlineStyleTransform(styleValue);});}export function getInlineStyle(style,isFirstRender){if(isFirstRender){return getInlinePropsUpdate(style);}const newStyle={};for(const[key,styleValue]of Object.entries(style)){if(!isSharedValue(styleValue)&&!(key==='transform'&&isInlineStyleTransform(styleValue))){newStyle[key]=styleValue;}}return newStyle;}const _worklet_5061273221373_init_data={code:\"function reactNativeReanimated_InlinePropManagerJs2(){const{getInlinePropsUpdate,newInlineProps,updateProps,shareableViewDescriptors}=this.__closure;const update=getInlinePropsUpdate(newInlineProps);updateProps(shareableViewDescriptors,update);}\"};export class InlinePropManager{_inlinePropsViewDescriptors=null;_inlinePropsMapperId=null;_inlineProps={};attachInlineProps(animatedComponent,viewInfo){const newInlineProps=extractSharedValuesMapFromProps(animatedComponent.props);const hasChanged=inlinePropsHasChanged(newInlineProps,this._inlineProps);if(hasChanged){if(!this._inlinePropsViewDescriptors){this._inlinePropsViewDescriptors=makeViewDescriptorsSet();const{viewTag,viewName,shadowNodeWrapper,viewConfig}=viewInfo;if(Object.keys(newInlineProps).length&&viewConfig){adaptViewConfig(viewConfig);}this._inlinePropsViewDescriptors.add({tag:viewTag,name:viewName,shadowNodeWrapper:shadowNodeWrapper});}const shareableViewDescriptors=this._inlinePropsViewDescriptors.shareableViewDescriptors;const updaterFunction=function(){const reactNativeReanimated_InlinePropManagerJs2=function(){const update=getInlinePropsUpdate(newInlineProps);updateProps(shareableViewDescriptors,update);};reactNativeReanimated_InlinePropManagerJs2.__closure={getInlinePropsUpdate,newInlineProps,updateProps,shareableViewDescriptors};reactNativeReanimated_InlinePropManagerJs2.__workletHash=5061273221373;reactNativeReanimated_InlinePropManagerJs2.__initData=_worklet_5061273221373_init_data;return reactNativeReanimated_InlinePropManagerJs2;}();this._inlineProps=newInlineProps;if(this._inlinePropsMapperId){stopMapper(this._inlinePropsMapperId);}this._inlinePropsMapperId=null;if(Object.keys(newInlineProps).length){this._inlinePropsMapperId=startMapper(updaterFunction,Object.values(newInlineProps));}}}detachInlineProps(){if(this._inlinePropsMapperId){stopMapper(this._inlinePropsMapperId);}}}","map":{"version":3,"names":["flattenArray","makeViewDescriptorsSet","adaptViewConfig","updateProps","stopMapper","startMapper","isSharedValue","isInlineStyleTransform","transform","Array","isArray","some","t","hasInlineStyles","inlinePropsHasChanged","styles1","styles2","Object","keys","length","key","_worklet_11915436251318_init_data","code","getInlinePropsUpdate","inlineProps","update","styleValue","entries","value","map","item","__closure","__workletHash","__initData","extractSharedValuesMapFromProps","props","styles","style","forEach","styleKey","getInlineStyle","isFirstRender","newStyle","_worklet_5061273221373_init_data","InlinePropManager","_inlinePropsViewDescriptors","_inlinePropsMapperId","_inlineProps","attachInlineProps","animatedComponent","viewInfo","newInlineProps","hasChanged","viewTag","viewName","shadowNodeWrapper","viewConfig","add","tag","name","shareableViewDescriptors","updaterFunction","reactNativeReanimated_InlinePropManagerJs2","values","detachInlineProps"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-reanimated/src/createAnimatedComponent/InlinePropManager.ts"],"sourcesContent":["'use strict';\nimport type { StyleProps } from '../commonTypes';\nimport type {\n  IAnimatedComponentInternal,\n  AnimatedComponentProps,\n  IInlinePropManager,\n  ViewInfo,\n} from './commonTypes';\nimport { flattenArray } from './utils';\nimport { makeViewDescriptorsSet } from '../ViewDescriptorsSet';\nimport type { ViewDescriptorsSet } from '../ViewDescriptorsSet';\nimport { adaptViewConfig } from '../ConfigHelper';\nimport updateProps from '../UpdateProps';\nimport { stopMapper, startMapper } from '../mappers';\nimport { isSharedValue } from '../isSharedValue';\n\nfunction isInlineStyleTransform(transform: unknown): boolean {\n  if (!Array.isArray(transform)) {\n    return false;\n  }\n\n  return transform.some((t: Record<string, unknown>) => hasInlineStyles(t));\n}\n\nfunction inlinePropsHasChanged(\n  styles1: StyleProps,\n  styles2: StyleProps\n): boolean {\n  if (Object.keys(styles1).length !== Object.keys(styles2).length) {\n    return true;\n  }\n\n  for (const key of Object.keys(styles1)) {\n    if (styles1[key] !== styles2[key]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getInlinePropsUpdate(inlineProps: Record<string, unknown>) {\n  'worklet';\n  const update: Record<string, unknown> = {};\n  for (const [key, styleValue] of Object.entries(inlineProps)) {\n    if (isSharedValue(styleValue)) {\n      update[key] = styleValue.value;\n    } else if (Array.isArray(styleValue)) {\n      update[key] = styleValue.map((item) => {\n        return getInlinePropsUpdate(item);\n      });\n    } else if (typeof styleValue === 'object') {\n      update[key] = getInlinePropsUpdate(styleValue as Record<string, unknown>);\n    } else {\n      update[key] = styleValue;\n    }\n  }\n  return update;\n}\n\nfunction extractSharedValuesMapFromProps(\n  props: AnimatedComponentProps<\n    Record<string, unknown> /* Initial component props */\n  >\n): Record<string, unknown> {\n  const inlineProps: Record<string, unknown> = {};\n\n  for (const key in props) {\n    const value = props[key];\n    if (key === 'style') {\n      const styles = flattenArray<StyleProps>(props.style ?? []);\n      styles.forEach((style) => {\n        if (!style) {\n          return;\n        }\n        for (const [styleKey, styleValue] of Object.entries(style)) {\n          if (isSharedValue(styleValue)) {\n            inlineProps[styleKey] = styleValue;\n          } else if (\n            styleKey === 'transform' &&\n            isInlineStyleTransform(styleValue)\n          ) {\n            inlineProps[styleKey] = styleValue;\n          }\n        }\n      });\n    } else if (isSharedValue(value)) {\n      inlineProps[key] = value;\n    }\n  }\n\n  return inlineProps;\n}\n\nexport function hasInlineStyles(style: StyleProps): boolean {\n  if (!style) {\n    return false;\n  }\n  return Object.keys(style).some((key) => {\n    const styleValue = style[key];\n    return (\n      isSharedValue(styleValue) ||\n      (key === 'transform' && isInlineStyleTransform(styleValue))\n    );\n  });\n}\n\nexport function getInlineStyle(\n  style: Record<string, unknown>,\n  isFirstRender: boolean\n) {\n  if (isFirstRender) {\n    return getInlinePropsUpdate(style);\n  }\n  const newStyle: StyleProps = {};\n  for (const [key, styleValue] of Object.entries(style)) {\n    if (\n      !isSharedValue(styleValue) &&\n      !(key === 'transform' && isInlineStyleTransform(styleValue))\n    ) {\n      newStyle[key] = styleValue;\n    }\n  }\n  return newStyle;\n}\n\nexport class InlinePropManager implements IInlinePropManager {\n  _inlinePropsViewDescriptors: ViewDescriptorsSet | null = null;\n  _inlinePropsMapperId: number | null = null;\n  _inlineProps: StyleProps = {};\n\n  public attachInlineProps(\n    animatedComponent: React.Component<unknown, unknown> &\n      IAnimatedComponentInternal,\n    viewInfo: ViewInfo\n  ) {\n    const newInlineProps: Record<string, unknown> =\n      extractSharedValuesMapFromProps(animatedComponent.props);\n    const hasChanged = inlinePropsHasChanged(newInlineProps, this._inlineProps);\n\n    if (hasChanged) {\n      if (!this._inlinePropsViewDescriptors) {\n        this._inlinePropsViewDescriptors = makeViewDescriptorsSet();\n\n        const { viewTag, viewName, shadowNodeWrapper, viewConfig } = viewInfo;\n\n        if (Object.keys(newInlineProps).length && viewConfig) {\n          adaptViewConfig(viewConfig);\n        }\n\n        this._inlinePropsViewDescriptors.add({\n          tag: viewTag as number,\n          name: viewName!,\n          shadowNodeWrapper: shadowNodeWrapper!,\n        });\n      }\n      const shareableViewDescriptors =\n        this._inlinePropsViewDescriptors.shareableViewDescriptors;\n\n      const updaterFunction = () => {\n        'worklet';\n        const update = getInlinePropsUpdate(newInlineProps);\n        updateProps(shareableViewDescriptors, update);\n      };\n      this._inlineProps = newInlineProps;\n      if (this._inlinePropsMapperId) {\n        stopMapper(this._inlinePropsMapperId);\n      }\n      this._inlinePropsMapperId = null;\n      if (Object.keys(newInlineProps).length) {\n        this._inlinePropsMapperId = startMapper(\n          updaterFunction,\n          Object.values(newInlineProps)\n        );\n      }\n    }\n  }\n\n  public detachInlineProps() {\n    if (this._inlinePropsMapperId) {\n      stopMapper(this._inlinePropsMapperId);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}