{"ast":null,"code":"'use strict';import{useEffect,useRef}from'react';import{isWeb,isJest}from\"../PlatformChecker.js\";import{areDependenciesEqual,buildDependencies}from\"./utils.js\";import{makeShareable}from\"../shareables.js\";export function useHandler(handlers,dependencies){const initRef=useRef(null);if(initRef.current===null){const context=makeShareable({});initRef.current={context,savedDependencies:[]};}useEffect(()=>{return()=>{initRef.current=null;};},[]);const{context,savedDependencies}=initRef.current;dependencies=buildDependencies(dependencies,handlers);const doDependenciesDiffer=!areDependenciesEqual(dependencies,savedDependencies);initRef.current.savedDependencies=dependencies;const useWeb=isWeb()||isJest();return{context,doDependenciesDiffer,useWeb};}","map":{"version":3,"names":["useEffect","useRef","isWeb","isJest","areDependenciesEqual","buildDependencies","makeShareable","useHandler","handlers","dependencies","initRef","current","context","savedDependencies","doDependenciesDiffer","useWeb"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-reanimated/src/hook/useHandler.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport type { WorkletFunction } from '../commonTypes';\nimport { isWeb, isJest } from '../PlatformChecker';\nimport type { DependencyList, ReanimatedEvent } from './commonTypes';\nimport { areDependenciesEqual, buildDependencies } from './utils';\nimport { makeShareable } from '../shareables';\n\ninterface GeneralHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n> {\n  (event: ReanimatedEvent<Event>, context: Context): void;\n}\n\ntype GeneralWorkletHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n> = WorkletFunction<[event: ReanimatedEvent<Event>, context: Context]>;\n\ntype GeneralHandlers<\n  Event extends object,\n  Context extends Record<string, unknown>,\n> = Record<string, GeneralHandler<Event, Context> | undefined>;\n\ntype GeneralWorkletHandlers<\n  Event extends object,\n  Context extends Record<string, unknown>,\n> = Record<string, GeneralWorkletHandler<Event, Context> | undefined>;\n\ninterface ContextWithDependencies<Context extends Record<string, unknown>> {\n  context: Context;\n  savedDependencies: DependencyList;\n}\n\nexport interface UseHandlerContext<Context extends Record<string, unknown>> {\n  context: Context;\n  doDependenciesDiffer: boolean;\n  useWeb: boolean;\n}\n\n/**\n * Lets you find out whether the event handler dependencies have changed.\n *\n * @param handlers - An object of event handlers.\n * @param dependencies - An optional array of dependencies.\n * @returns An object containing a boolean indicating whether the dependencies\n *   have changed, and a boolean indicating whether the code is running on the\n *   web.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useHandler\n */\n// @ts-expect-error This overload is required by our API.\nexport function useHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n>(\n  handlers: GeneralHandlers<Event, Context>,\n  dependencies?: DependencyList\n): UseHandlerContext<Context>;\n\nexport function useHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n>(\n  handlers: GeneralWorkletHandlers<Event, Context>,\n  dependencies?: DependencyList\n): UseHandlerContext<Context> {\n  const initRef = useRef<ContextWithDependencies<Context> | null>(null);\n  if (initRef.current === null) {\n    const context = makeShareable({} as Context);\n    initRef.current = {\n      context,\n      savedDependencies: [],\n    };\n  }\n\n  useEffect(() => {\n    return () => {\n      initRef.current = null;\n    };\n  }, []);\n\n  const { context, savedDependencies } = initRef.current;\n\n  dependencies = buildDependencies(\n    dependencies,\n    handlers as Record<string, WorkletFunction | undefined>\n  );\n\n  const doDependenciesDiffer = !areDependenciesEqual(\n    dependencies,\n    savedDependencies\n  );\n  initRef.current.savedDependencies = dependencies;\n  const useWeb = isWeb() || isJest();\n\n  return { context, doDependenciesDiffer, useWeb };\n}\n"],"mappings":"AAAA,YAAY,CACZ,OAASA,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAEzC,OAASC,KAAK,CAAEC,MAAM,KAAQ,uBAAoB,CAElD,OAASC,oBAAoB,CAAEC,iBAAiB,KAAQ,YAAS,CACjE,OAASC,aAAa,KAAQ,kBAAe,CAsD7C,MAAO,SAAS,CAAAC,UAAUA,CAIxBC,QAAgD,CAChDC,YAA6B,CACD,CAC5B,KAAM,CAAAC,OAAO,CAAGT,MAAM,CAA0C,IAAI,CAAC,CACrE,GAAIS,OAAO,CAACC,OAAO,GAAK,IAAI,CAAE,CAC5B,KAAM,CAAAC,OAAO,CAAGN,aAAa,CAAC,CAAC,CAAY,CAAC,CAC5CI,OAAO,CAACC,OAAO,CAAG,CAChBC,OAAO,CACPC,iBAAiB,CAAE,EACrB,CAAC,CACH,CAEAb,SAAS,CAAC,IAAM,CACd,MAAO,IAAM,CACXU,OAAO,CAACC,OAAO,CAAG,IAAI,CACxB,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAEC,OAAO,CAAEC,iBAAkB,CAAC,CAAGH,OAAO,CAACC,OAAO,CAEtDF,YAAY,CAAGJ,iBAAiB,CAC9BI,YAAY,CACZD,QACF,CAAC,CAED,KAAM,CAAAM,oBAAoB,CAAG,CAACV,oBAAoB,CAChDK,YAAY,CACZI,iBACF,CAAC,CACDH,OAAO,CAACC,OAAO,CAACE,iBAAiB,CAAGJ,YAAY,CAChD,KAAM,CAAAM,MAAM,CAAGb,KAAK,CAAC,CAAC,EAAIC,MAAM,CAAC,CAAC,CAElC,MAAO,CAAES,OAAO,CAAEE,oBAAoB,CAAEC,MAAO,CAAC,CAClD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}