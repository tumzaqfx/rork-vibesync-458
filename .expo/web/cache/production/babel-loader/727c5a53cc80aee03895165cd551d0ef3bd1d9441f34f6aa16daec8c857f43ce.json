{"ast":null,"code":"import{UnavailabilityError}from'expo-modules-core';import{useEffect,useState}from'react';import Platform from\"react-native-web/dist/exports/Platform\";import ExpoLinking from'./ExpoLinking';import RNLinking from'./RNLinking';import{parse}from'./createURL';import{validateURL}from'./validateURL';export function addEventListener(type,handler){return RNLinking.addEventListener(type,handler);}export async function parseInitialURLAsync(){const initialUrl=await RNLinking.getInitialURL();if(!initialUrl){return{scheme:null,hostname:null,path:null,queryParams:null};}return parse(initialUrl);}export async function sendIntent(action,extras){if(false){return await RNLinking.sendIntent(action,extras);}throw new UnavailabilityError('Linking','sendIntent');}export async function openSettings(){if(true){throw new UnavailabilityError('Linking','openSettings');}if(RNLinking.openSettings){return await RNLinking.openSettings();}await openURL('app-settings:');}export async function getInitialURL(){return(await RNLinking.getInitialURL())??null;}export function getLinkingURL(){return ExpoLinking.getLinkingURL();}export async function openURL(url){validateURL(url);return await RNLinking.openURL(url);}export async function canOpenURL(url){validateURL(url);return await RNLinking.canOpenURL(url);}export function useURL(){const[url,setLink]=useState(null);function onChange(event){setLink(event.url);}useEffect(()=>{getInitialURL().then(url=>setLink(url));const subscription=addEventListener('url',onChange);return()=>subscription.remove();},[]);return url;}export function useLinkingURL(){const[url,setLink]=useState(ExpoLinking.getLinkingURL);function onChange(event){setLink(event.url);}useEffect(()=>{const subscription=ExpoLinking.addListener('onURLReceived',onChange);return()=>subscription.remove();},[]);return url??null;}export*from'./Linking.types';export*from'./Schemes';export{parse,createURL}from'./createURL';","map":{"version":3,"names":["UnavailabilityError","useEffect","useState","Platform","ExpoLinking","RNLinking","parse","validateURL","addEventListener","type","handler","parseInitialURLAsync","initialUrl","getInitialURL","scheme","hostname","path","queryParams","sendIntent","action","extras","openSettings","openURL","getLinkingURL","url","canOpenURL","useURL","setLink","onChange","event","then","subscription","remove","useLinkingURL","addListener","createURL"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-linking/src/Linking.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\nimport { EmitterSubscription, Platform } from 'react-native';\n\nimport ExpoLinking from './ExpoLinking';\nimport { ParsedURL, SendIntentExtras, URLListener } from './Linking.types';\nimport RNLinking from './RNLinking';\nimport { parse } from './createURL';\nimport { validateURL } from './validateURL';\n\n// @needsAudit\n/**\n * Add a handler to `Linking` changes by listening to the `url` event type and providing the handler.\n * It is recommended to use the [`useURL()`](#useurl) hook instead.\n * @param type The only valid type is `'url'`.\n * @param handler An [`URLListener`](#urllistener) function that takes an `event` object of the type\n * [`EventType`](#eventtype).\n * @return An EmitterSubscription that has the remove method from EventSubscription\n * @see [React Native documentation on Linking](https://reactnative.dev/docs/linking#addeventlistener).\n */\nexport function addEventListener(type: 'url', handler: URLListener): EmitterSubscription {\n  return RNLinking.addEventListener(type, handler);\n}\n\n// @needsAudit\n/**\n * Helper method which wraps React Native's `Linking.getInitialURL()` in `Linking.parse()`.\n * Parses the deep link information out of the URL used to open the experience initially.\n * If no link opened the app, all the fields will be `null`.\n * > On the web it parses the current window URL.\n * @return A promise that resolves with `ParsedURL` object.\n */\nexport async function parseInitialURLAsync(): Promise<ParsedURL> {\n  const initialUrl = await RNLinking.getInitialURL();\n  if (!initialUrl) {\n    return {\n      scheme: null,\n      hostname: null,\n      path: null,\n      queryParams: null,\n    };\n  }\n\n  return parse(initialUrl);\n}\n\n// @needsAudit\n/**\n * Launch an Android intent with extras.\n * > Use [`expo-intent-launcher`](./intent-launcher) instead. `sendIntent` is only included in\n * > `Linking` for API compatibility with React Native's Linking API.\n * @platform android\n */\nexport async function sendIntent(action: string, extras?: SendIntentExtras[]): Promise<void> {\n  if (Platform.OS === 'android') {\n    return await RNLinking.sendIntent(action, extras);\n  }\n  throw new UnavailabilityError('Linking', 'sendIntent');\n}\n\n// @needsAudit\n/**\n * Open the operating system settings app and displays the appâ€™s custom settings, if it has any.\n */\nexport async function openSettings(): Promise<void> {\n  if (Platform.OS === 'web') {\n    throw new UnavailabilityError('Linking', 'openSettings');\n  }\n  if (RNLinking.openSettings) {\n    return await RNLinking.openSettings();\n  }\n  await openURL('app-settings:');\n}\n\n// @needsAudit\n/**\n * Get the URL that was used to launch the app if it was launched by a link.\n * @return The URL string that launched your app, or `null`.\n */\nexport async function getInitialURL(): Promise<string | null> {\n  return (await RNLinking.getInitialURL()) ?? null;\n}\n\n/**\n * Get the URL that was used to launch the app if it was launched by a link.\n * @return The URL string that launched your app, or `null`.\n */\nexport function getLinkingURL(): string | null {\n  return ExpoLinking.getLinkingURL();\n}\n\n// @needsAudit\n/**\n * Attempt to open the given URL with an installed app. See the [Linking guide](/guides/linking)\n * for more information.\n * @param url A URL for the operating system to open. For example: `tel:5555555`, `exp://`.\n * @return A `Promise` that is fulfilled with `true` if the link is opened operating system\n * automatically or the user confirms the prompt to open the link. The `Promise` rejects if there\n * are no applications registered for the URL or the user cancels the dialog.\n */\nexport async function openURL(url: string): Promise<true> {\n  validateURL(url);\n  return await RNLinking.openURL(url);\n}\n\n// @needsAudit\n/**\n * Determine whether or not an installed app can handle a given URL.\n * On web this always returns `true` because there is no API for detecting what URLs can be opened.\n * @param url The URL that you want to test can be opened.\n * @return A `Promise` object that is fulfilled with `true` if the URL can be handled, otherwise it\n * `false` if not.\n * The `Promise` will reject on Android if it was impossible to check if the URL can be opened, and\n * on iOS if you didn't [add the specific scheme in the `LSApplicationQueriesSchemes` key inside **Info.plist**](/guides/linking#linking-from-your-app).\n */\nexport async function canOpenURL(url: string): Promise<boolean> {\n  validateURL(url);\n  return await RNLinking.canOpenURL(url);\n}\n\n// @needsAudit\n/**\n * Returns the initial URL followed by any subsequent changes to the URL.\n * @return Returns the initial URL or `null`.\n */\nexport function useURL(): string | null {\n  const [url, setLink] = useState<string | null>(null);\n\n  function onChange(event: { url: string }) {\n    setLink(event.url);\n  }\n\n  useEffect(() => {\n    getInitialURL().then((url) => setLink(url));\n    const subscription = addEventListener('url', onChange);\n    return () => subscription.remove();\n  }, []);\n\n  return url;\n}\n\n/**\n * Returns the linking URL followed by any subsequent changes to the URL.\n * Always returns the initial URL immediately on reload.\n * @return Returns the initial URL or `null`.\n */\nexport function useLinkingURL(): string | null {\n  const [url, setLink] = useState<string | null>(ExpoLinking.getLinkingURL);\n\n  function onChange(event: { url: string }) {\n    setLink(event.url);\n  }\n\n  useEffect(() => {\n    const subscription = ExpoLinking.addListener('onURLReceived', onChange as any);\n    return () => subscription.remove();\n  }, []);\n\n  return url ?? null;\n}\n\nexport * from './Linking.types';\nexport * from './Schemes';\nexport { parse, createURL } from './createURL';\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}