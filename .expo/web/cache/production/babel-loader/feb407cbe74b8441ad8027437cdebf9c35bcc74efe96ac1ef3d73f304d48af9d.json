{"ast":null,"code":"import FlatList from\"react-native-web/dist/exports/FlatList\";import{isRNSVGElement}from'./web/utils';export default function findNodeHandle(viewRef){if(viewRef instanceof FlatList){return viewRef._listRef._scrollRef.firstChild;}if((viewRef===null||viewRef===void 0?void 0:viewRef.viewTag)!==undefined){return findNodeHandle(viewRef.viewTag);}if(viewRef instanceof Element){if(viewRef.style.display==='contents'){return findNodeHandle(viewRef.firstChild);}return viewRef;}if(isRNSVGElement(viewRef)){return viewRef.elementRef.current;}let element=viewRef===null||viewRef===void 0?void 0:viewRef.current;while(element&&element.style.display==='contents'){element=element.firstChild;}return element;}","map":{"version":3,"names":["isRNSVGElement","findNodeHandle","viewRef","FlatList","_listRef","_scrollRef","firstChild","viewTag","undefined","Element","style","display","elementRef","current","element"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-gesture-handler/lib/module/findNodeHandle.web.ts"],"sourcesContent":["import { FlatList } from 'react-native';\nimport type { GestureHandlerRef, SVGRef } from './web/interfaces';\nimport { isRNSVGElement } from './web/utils';\n\nexport default function findNodeHandle(\n  viewRef: GestureHandlerRef | SVGRef | HTMLElement | SVGElement\n): HTMLElement | SVGElement | number {\n  // TODO: Remove this once we remove old API.\n  if (viewRef instanceof FlatList) {\n    // @ts-ignore This is the only way to get the scroll ref from FlatList.\n    return viewRef._listRef._scrollRef.firstChild;\n  }\n  // Old API assumes that child handler is HTMLElement.\n  // However, if we nest handlers, we will get ref to another handler.\n  // In that case, we want to recursively call findNodeHandle with new handler viewTag (which can also be ref to another handler).\n  if ((viewRef as GestureHandlerRef)?.viewTag !== undefined) {\n    return findNodeHandle((viewRef as GestureHandlerRef).viewTag);\n  }\n\n  if (viewRef instanceof Element) {\n    if (viewRef.style.display === 'contents') {\n      return findNodeHandle(viewRef.firstChild as HTMLElement);\n    }\n\n    return viewRef;\n  }\n\n  if (isRNSVGElement(viewRef)) {\n    return (viewRef as SVGRef).elementRef.current;\n  }\n\n  // In new API, we receive ref object which `current` field points to  wrapper `div` with `display: contents;`.\n  // We want to return the first descendant (in DFS order) that doesn't have this property.\n  let element = (viewRef as GestureHandlerRef)?.current;\n\n  while (element && element.style.display === 'contents') {\n    element = element.firstChild as HTMLElement;\n  }\n\n  return element;\n}\n"],"mappings":"6DAEA,OAASA,cAAT,KAA+B,aAA/B,CAEA,cAAe,SAAS,CAAAC,cAATA,CACbC,OADa,CAEsB,CAEnC,GAAIA,OAAO,WAAY,CAAAC,QAAvB,CAAiC,CAE/B,MAAO,CAAAD,OAAO,CAACE,QAAR,CAAiBC,UAAjB,CAA4BC,UAAnC,CACD,CAID,GAAI,CAACJ,OAAD,SAACA,OAAD,iBAACA,OAAD,CAAgCK,OAAhC,IAA4CC,SAAhD,CAA2D,CACzD,MAAO,CAAAP,cAAc,CAAEC,OAAD,CAA+BK,OAAhC,CAArB,CACD,CAED,GAAIL,OAAO,WAAY,CAAAO,OAAvB,CAAgC,CAC9B,GAAIP,OAAO,CAACQ,KAAR,CAAcC,OAAd,GAA0B,UAA9B,CAA0C,CACxC,MAAO,CAAAV,cAAc,CAACC,OAAO,CAACI,UAAT,CAArB,CACD,CAED,MAAO,CAAAJ,OAAP,CACD,CAED,GAAIF,cAAc,CAACE,OAAD,CAAlB,CAA6B,CAC3B,MAAQ,CAAAA,OAAD,CAAoBU,UAApB,CAA+BC,OAAtC,CACD,CAID,GAAI,CAAAC,OAAO,CAAIZ,OAAJ,SAAIA,OAAJ,iBAAIA,OAAD,CAAgCW,OAA9C,CAEA,MAAOC,OAAO,EAAIA,OAAO,CAACJ,KAAR,CAAcC,OAAd,GAA0B,UAA5C,CAAwD,CACtDG,OAAO,CAAGA,OAAO,CAACR,UAAlB,CACD,CAED,MAAO,CAAAQ,OAAP,CACD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}