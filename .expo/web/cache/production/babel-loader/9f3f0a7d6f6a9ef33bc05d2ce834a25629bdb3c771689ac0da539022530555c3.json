{"ast":null,"code":"import{LegacyEventEmitter,Platform,UnavailabilityError}from'expo-modules-core';import{throwIfAudioIsDisabled}from'./AudioAvailability';import{PlaybackMixin,assertStatusValuesInBounds,getNativeSourceAndFullInitialStatusForLoadAsync,getUnloadedStatus}from'../AV';import ExponentAV from'../ExponentAV';export class Sound{_loaded=false;_loading=false;_key=null;_lastStatusUpdate=null;_lastStatusUpdateTime=null;_subscriptions=[];_eventEmitter=new LegacyEventEmitter(ExponentAV);_coalesceStatusUpdatesInMillis=100;_onPlaybackStatusUpdate=null;_onMetadataUpdate=null;_onAudioSampleReceived=null;static create=async(source,initialStatus={},onPlaybackStatusUpdate=null,downloadFirst=true)=>{console.warn(`Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`);return Sound.createAsync(source,initialStatus,onPlaybackStatusUpdate,downloadFirst);};static createAsync=async(source,initialStatus={},onPlaybackStatusUpdate=null,downloadFirst=true)=>{const sound=new Sound();sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);const status=await sound.loadAsync(source,initialStatus,downloadFirst);return{sound,status};};_callOnPlaybackStatusUpdateForNewStatus(status){const shouldDismissBasedOnCoalescing=this._lastStatusUpdateTime&&JSON.stringify(status)===this._lastStatusUpdate&&Date.now()-this._lastStatusUpdateTime.getTime()<this._coalesceStatusUpdatesInMillis;if(this._onPlaybackStatusUpdate!=null&&!shouldDismissBasedOnCoalescing){this._onPlaybackStatusUpdate(status);this._lastStatusUpdateTime=new Date();this._lastStatusUpdate=JSON.stringify(status);}}async _performOperationAndHandleStatusAsync(operation){throwIfAudioIsDisabled();if(this._loaded){const status=await operation();this._callOnPlaybackStatusUpdateForNewStatus(status);return status;}else{throw new Error('Cannot complete operation because sound is not loaded.');}}_updateAudioSampleReceivedCallback(){if(globalThis.__EXAV_setOnAudioSampleReceivedCallback==null){if(false||false){console.warn('expo-av: Failed to set up Audio Sample Buffer callback. '+\"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \"+'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.');return;}else{throw new UnavailabilityError('expo-av','setOnAudioSampleReceived');}}if(this._key==null){throw new Error('Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!');}if(typeof this._key!=='number'){throw new Error(`Cannot set Audio Sample Buffer callback when Sound instance key is of type ${typeof this._key}! (expected: number)`);}globalThis.__EXAV_setOnAudioSampleReceivedCallback(this._key,this._onAudioSampleReceived);}_internalStatusUpdateCallback=({key,status})=>{if(this._key===key){this._callOnPlaybackStatusUpdateForNewStatus(status);}};_internalMetadataUpdateCallback=({key,metadata})=>{if(this._key===key){this._onMetadataUpdate?.(metadata);}};_internalErrorCallback=({key,error})=>{if(this._key===key){this._errorCallback(error);}};_subscribeToNativeEvents(){if(this._loaded){this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus',this._internalStatusUpdateCallback),this._eventEmitter.addListener('didUpdateMetadata',this._internalMetadataUpdateCallback));this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError',this._internalErrorCallback));}}_clearSubscriptions(){this._subscriptions.forEach(e=>e.remove());this._subscriptions=[];}_errorCallback=error=>{this._clearSubscriptions();this._loaded=false;this._key=null;this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));};getStatusAsync=async()=>{if(this._loaded){return this._performOperationAndHandleStatusAsync(()=>ExponentAV.getStatusForSound(this._key));}const status=getUnloadedStatus();this._callOnPlaybackStatusUpdateForNewStatus(status);return status;};setOnPlaybackStatusUpdate(onPlaybackStatusUpdate){this._onPlaybackStatusUpdate=onPlaybackStatusUpdate;this.getStatusAsync();}setOnMetadataUpdate(onMetadataUpdate){this._onMetadataUpdate=onMetadataUpdate;}setOnAudioSampleReceived(callback){this._onAudioSampleReceived=callback;if(this._key!=null){this._updateAudioSampleReceivedCallback();}}async loadAsync(source,initialStatus={},downloadFirst=true){throwIfAudioIsDisabled();if(this._loading){throw new Error('The Sound is already loading.');}if(!this._loaded){this._loading=true;const{nativeSource,fullInitialStatus}=await getNativeSourceAndFullInitialStatusForLoadAsync(source,initialStatus,downloadFirst);return new Promise((resolve,reject)=>{const loadSuccess=result=>{const[key,status]=result;this._key=key;this._loaded=true;this._loading=false;this._subscribeToNativeEvents();this._callOnPlaybackStatusUpdateForNewStatus(status);resolve(status);};const loadError=error=>{this._loading=false;reject(error);};ExponentAV.loadForSound(nativeSource,fullInitialStatus).then(loadSuccess).catch(loadError);});}else{throw new Error('The Sound is already loaded.');}}async unloadAsync(){if(this._loaded){this._loaded=false;const key=this._key;this._key=null;const status=await ExponentAV.unloadForSound(key);this._callOnPlaybackStatusUpdateForNewStatus(status);this._clearSubscriptions();return status;}else{return this.getStatusAsync();}}async setStatusAsync(status){assertStatusValuesInBounds(status);return this._performOperationAndHandleStatusAsync(()=>ExponentAV.setStatusForSound(this._key,status));}async replayAsync(status={}){if(status.positionMillis&&status.positionMillis!==0){throw new Error('Requested position after replay has to be 0.');}return this._performOperationAndHandleStatusAsync(()=>ExponentAV.replaySound(this._key,Object.assign({},status,{positionMillis:0,shouldPlay:true})));}}Object.assign(Sound.prototype,PlaybackMixin);","map":{"version":3,"names":["LegacyEventEmitter","Platform","UnavailabilityError","throwIfAudioIsDisabled","PlaybackMixin","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getUnloadedStatus","ExponentAV","Sound","_loaded","_loading","_key","_lastStatusUpdate","_lastStatusUpdateTime","_subscriptions","_eventEmitter","_coalesceStatusUpdatesInMillis","_onPlaybackStatusUpdate","_onMetadataUpdate","_onAudioSampleReceived","create","source","initialStatus","onPlaybackStatusUpdate","downloadFirst","console","warn","createAsync","sound","setOnPlaybackStatusUpdate","status","loadAsync","_callOnPlaybackStatusUpdateForNewStatus","shouldDismissBasedOnCoalescing","JSON","stringify","Date","now","getTime","_performOperationAndHandleStatusAsync","operation","Error","_updateAudioSampleReceivedCallback","globalThis","__EXAV_setOnAudioSampleReceivedCallback","_internalStatusUpdateCallback","key","_internalMetadataUpdateCallback","metadata","_internalErrorCallback","error","_errorCallback","_subscribeToNativeEvents","push","addListener","_clearSubscriptions","forEach","e","remove","getStatusAsync","getStatusForSound","setOnMetadataUpdate","onMetadataUpdate","setOnAudioSampleReceived","callback","nativeSource","fullInitialStatus","Promise","resolve","reject","loadSuccess","result","loadError","loadForSound","then","catch","unloadAsync","unloadForSound","setStatusAsync","setStatusForSound","replayAsync","positionMillis","replaySound","Object","assign","shouldPlay","prototype"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-av/src/Audio/Sound.ts"],"sourcesContent":["import { LegacyEventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\nimport {\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVMetadata,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getUnloadedStatus,\n  AVPlaybackTolerance,\n} from '../AV';\nimport { PitchCorrectionQuality } from '../Audio';\nimport ExponentAV from '../ExponentAV';\n\n// @needsAudit\nexport type AudioChannel = {\n  /**\n   * All samples for this specific Audio Channel in PCM Buffer format (-1 to 1).\n   */\n  frames: number[];\n};\n\n// @needsAudit\n/**\n * Object passed to the `onAudioSampleReceived` function. Represents a single sample from an audio source.\n * The sample contains all frames (PCM Buffer values) for each channel of the audio, so if the audio is _stereo_ (interleaved),\n * there will be two channels, one for left and one for right audio.\n */\nexport type AudioSample = {\n  /**\n   * An array representing the data from each channel in PCM Buffer format. Array elements are objects in the following format: `{ frames: number[] }`,\n   * where each frame is a number in PCM Buffer format (`-1` to `1` range).\n   */\n  channels: AudioChannel[];\n  /**\n   * A number representing the timestamp of the current sample in seconds, relative to the audio track's timeline.\n   * > **Known issue:** When using the `ExoPlayer` Android implementation, the timestamp is always `-1`.\n   */\n  timestamp: number;\n};\n\n// @needsAudit\nexport type SoundObject = {\n  /**\n   * The newly created and loaded `Sound` object.\n   */\n  sound: Sound;\n  /**\n   * The `PlaybackStatus` of the `Sound` object. See the [AV documentation](/versions/latest/sdk/av) for further information.\n   */\n  status: AVPlaybackStatus;\n};\n\ntype AudioInstance = number | HTMLMediaElement | null;\n\n// @docsMissing\nexport type AudioSampleCallback = ((sample: AudioSample) => void) | null;\n\ndeclare namespace globalThis {\n  let __EXAV_setOnAudioSampleReceivedCallback:\n    | ((key: number, callback: AudioSampleCallback) => void)\n    | undefined;\n}\n\n// @needsAudit\n/**\n * This class represents a sound corresponding to an Asset or URL.\n * @return A newly constructed instance of `Audio.Sound`.\n *\n * @example\n * ```ts\n * const sound = new Audio.Sound();\n * try {\n *   await sound.loadAsync(require('./assets/sounds/hello.mp3'));\n *   await sound.playAsync();\n *   // Your sound is playing!\n *\n *   // Don't forget to unload the sound from memory\n *   // when you are done using the Sound object\n *   await sound.unloadAsync();\n * } catch (error) {\n *   // An error occurred!\n * }\n * ```\n *\n * > Method not described below and the rest of the API for `Audio.Sound` is the same as the imperative playback API for `Video`.\n * > See the [AV documentation](/versions/latest/sdk/av) for further information.\n */\nexport class Sound implements Playback {\n  _loaded: boolean = false;\n  _loading: boolean = false;\n  _key: AudioInstance = null;\n  _lastStatusUpdate: string | null = null;\n  _lastStatusUpdateTime: Date | null = null;\n  _subscriptions: { remove: () => void }[] = [];\n  _eventEmitter = new LegacyEventEmitter(ExponentAV);\n  _coalesceStatusUpdatesInMillis: number = 100;\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n  _onMetadataUpdate: ((metadata: AVMetadata) => void) | null = null;\n  _onAudioSampleReceived: AudioSampleCallback = null;\n\n  /** @deprecated Use `Sound.createAsync()` instead */\n  static create = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<SoundObject> => {\n    console.warn(\n      `Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`\n    );\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  };\n\n  /**\n   * Creates and loads a sound from source.\n   *\n   * ```ts\n   * const { sound } = await Audio.Sound.createAsync(\n   *   source,\n   *   initialStatus,\n   *   onPlaybackStatusUpdate,\n   *   downloadFirst\n   * );\n   *\n   * // Which is equivalent to the following:\n   * const sound = new Audio.Sound();\n   * sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n   * await sound.loadAsync(source, initialStatus, downloadFirst);\n   * ```\n   *\n   * @param source The source of the sound. See the [AV documentation](/versions/latest/sdk/av/#playback-api) for details on the possible `source` values.\n   *\n   * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n   * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet` and the default\n   * initial playback status.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n   * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n   *\n   * @param downloadFirst If set to true, the system will attempt to download the resource to the device before loading. This value defaults to `true`.\n   * Note that at the moment, this will only work for `source`s of the form `require('path/to/file')` or `Asset` objects.\n   *\n   * @example\n   * ```ts\n   * try {\n   *   const { sound: soundObject, status } = await Audio.Sound.createAsync(\n   *     require('./assets/sounds/hello.mp3'),\n   *     { shouldPlay: true }\n   *   );\n   *   // Your sound is playing!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject` if creation succeeded.\n   */\n  static createAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<SoundObject> => {\n    const sound: Sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    const status: AVPlaybackStatus = await sound.loadAsync(source, initialStatus, downloadFirst);\n    return { sound, status };\n  };\n\n  // Internal methods\n\n  _callOnPlaybackStatusUpdateForNewStatus(status: AVPlaybackStatus) {\n    const shouldDismissBasedOnCoalescing =\n      this._lastStatusUpdateTime &&\n      JSON.stringify(status) === this._lastStatusUpdate &&\n      Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loaded) {\n      const status = await operation();\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because sound is not loaded.');\n    }\n  }\n\n  private _updateAudioSampleReceivedCallback() {\n    if (globalThis.__EXAV_setOnAudioSampleReceivedCallback == null) {\n      if (Platform.OS === 'ios' || Platform.OS === 'android') {\n        console.warn(\n          'expo-av: Failed to set up Audio Sample Buffer callback. ' +\n            \"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \" +\n            'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.'\n        );\n        return;\n      } else {\n        throw new UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n      }\n    }\n    if (this._key == null) {\n      throw new Error(\n        'Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!'\n      );\n    }\n    if (typeof this._key !== 'number') {\n      throw new Error(\n        `Cannot set Audio Sample Buffer callback when Sound instance key is of type ${typeof this\n          ._key}! (expected: number)`\n      );\n    }\n\n    globalThis.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n  }\n\n  _internalStatusUpdateCallback = ({\n    key,\n    status,\n  }: {\n    key: AudioInstance;\n    status: AVPlaybackStatus;\n  }) => {\n    if (this._key === key) {\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n    }\n  };\n\n  _internalMetadataUpdateCallback = ({\n    key,\n    metadata,\n  }: {\n    key: AudioInstance;\n    metadata: AVMetadata;\n  }) => {\n    if (this._key === key) {\n      this._onMetadataUpdate?.(metadata);\n    }\n  };\n\n  _internalErrorCallback = ({ key, error }: { key: AudioInstance; error: string }) => {\n    if (this._key === key) {\n      this._errorCallback(error);\n    }\n  };\n\n  // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(\n        this._eventEmitter.addListener(\n          'didUpdatePlaybackStatus',\n          this._internalStatusUpdateCallback\n        ),\n        this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback)\n      );\n\n      this._subscriptions.push(\n        this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback)\n      );\n    }\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach((e) => e.remove());\n    this._subscriptions = [];\n  }\n\n  _errorCallback = (error: string) => {\n    this._clearSubscriptions();\n    this._loaded = false;\n    this._key = null;\n    this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n  };\n\n  // ### Unified playback API ### (consistent with Video.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    if (this._loaded) {\n      return this._performOperationAndHandleStatusAsync(() =>\n        ExponentAV.getStatusForSound(this._key)\n      );\n    }\n    const status: AVPlaybackStatus = getUnloadedStatus();\n    this._callOnPlaybackStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  /**\n   * Sets a function to be called whenever the metadata of the sound object changes, if one is set.\n   * @param onMetadataUpdate A function taking a single object of type `AVMetadata` as a parameter.\n   * @platform ios\n   */\n  setOnMetadataUpdate(onMetadataUpdate: (metadata: AVMetadata) => void) {\n    this._onMetadataUpdate = onMetadataUpdate;\n  }\n\n  /**\n   * Sets a function to be called during playback, receiving the audio sample as parameter.\n   * @param callback A function taking the `AudioSampleCallback` as parameter.\n   */\n  setOnAudioSampleReceived(callback: AudioSampleCallback) {\n    this._onAudioSampleReceived = callback;\n    if (this._key != null) {\n      this._updateAudioSampleReceivedCallback();\n    }\n  }\n\n  // Loading / unloading API\n\n  async loadAsync(\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loading) {\n      throw new Error('The Sound is already loading.');\n    }\n    if (!this._loaded) {\n      this._loading = true;\n\n      const { nativeSource, fullInitialStatus } =\n        await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n\n      // This is a workaround, since using load with resolve / reject seems to not work.\n      return new Promise<AVPlaybackStatus>((resolve, reject) => {\n        const loadSuccess = (result: [AudioInstance, AVPlaybackStatus]) => {\n          const [key, status] = result;\n          this._key = key;\n          this._loaded = true;\n          this._loading = false;\n          this._subscribeToNativeEvents();\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n          resolve(status);\n        };\n\n        const loadError = (error: Error) => {\n          this._loading = false;\n          reject(error);\n        };\n\n        ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n      });\n    } else {\n      throw new Error('The Sound is already loaded.');\n    }\n  }\n\n  async unloadAsync(): Promise<AVPlaybackStatus> {\n    if (this._loaded) {\n      this._loaded = false;\n      const key = this._key;\n      this._key = null;\n      const status = await ExponentAV.unloadForSound(key);\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      this._clearSubscriptions();\n      return status;\n    } else {\n      return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n    }\n  }\n\n  // Set status API (only available while isLoaded = true)\n\n  async setStatusAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.setStatusForSound(this._key, status)\n    );\n  }\n\n  async replayAsync(status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.replaySound(this._key, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number, audioPan?: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n}\n\nObject.assign(Sound.prototype, PlaybackMixin);\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}