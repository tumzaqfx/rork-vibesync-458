{"ast":null,"code":"'use strict';import{runOnUIImmediately}from\"../../threads.js\";import{registerEventHandler,unregisterEventHandler}from\"../../core.js\";import Platform from\"react-native-web/dist/exports/Platform\";import{isJest,shouldBeUseWeb}from\"../../PlatformChecker.js\";import{ReanimatedError}from\"../../errors.js\";const IS_ANDROID=false;const _worklet_8193719887552_init_data={code:\"function reactNativeReanimated_ProgressTransitionManagerJs1(){const{viewTag,progressAnimation}=this.__closure;global.ProgressTransitionRegister.addProgressAnimation(viewTag,progressAnimation);}\"};const _worklet_358282488548_init_data={code:\"function reactNativeReanimated_ProgressTransitionManagerJs2(){const{viewTag,isUnmounting}=this.__closure;global.ProgressTransitionRegister.removeProgressAnimation(viewTag,isUnmounting);}\"};const _worklet_1443442633147_init_data={code:\"function reactNativeReanimated_ProgressTransitionManagerJs3(event){const{lastProgressValue}=this.__closure;const progress=event.progress;if(progress===lastProgressValue){return;}lastProgressValue=progress;global.ProgressTransitionRegister.frame(progress);}\"};const _worklet_12937400495570_init_data={code:\"function reactNativeReanimated_ProgressTransitionManagerJs4(){global.ProgressTransitionRegister.onTransitionEnd();}\"};const _worklet_2253017632180_init_data={code:\"function reactNativeReanimated_ProgressTransitionManagerJs5(){global.ProgressTransitionRegister.onAndroidFinishTransitioning();}\"};const _worklet_17066273721446_init_data={code:\"function reactNativeReanimated_ProgressTransitionManagerJs6(){global.ProgressTransitionRegister.onTransitionEnd(true);}\"};const _worklet_3680855814993_init_data={code:\"function reactNativeReanimated_ProgressTransitionManagerJs7(){global.ProgressTransitionRegister.onTransitionEnd();}\"};export class ProgressTransitionManager{_sharedElementCount=0;_eventHandler={isRegistered:false,onTransitionProgress:-1,onAppear:-1,onDisappear:-1,onSwipeDismiss:-1};addProgressAnimation(viewTag,progressAnimation){runOnUIImmediately(function(){const reactNativeReanimated_ProgressTransitionManagerJs1=function(){global.ProgressTransitionRegister.addProgressAnimation(viewTag,progressAnimation);};reactNativeReanimated_ProgressTransitionManagerJs1.__closure={viewTag,progressAnimation};reactNativeReanimated_ProgressTransitionManagerJs1.__workletHash=8193719887552;reactNativeReanimated_ProgressTransitionManagerJs1.__initData=_worklet_8193719887552_init_data;return reactNativeReanimated_ProgressTransitionManagerJs1;}())();this.registerEventHandlers();}removeProgressAnimation(viewTag,isUnmounting=true){this.unregisterEventHandlers();runOnUIImmediately(function(){const reactNativeReanimated_ProgressTransitionManagerJs2=function(){global.ProgressTransitionRegister.removeProgressAnimation(viewTag,isUnmounting);};reactNativeReanimated_ProgressTransitionManagerJs2.__closure={viewTag,isUnmounting};reactNativeReanimated_ProgressTransitionManagerJs2.__workletHash=358282488548;reactNativeReanimated_ProgressTransitionManagerJs2.__initData=_worklet_358282488548_init_data;return reactNativeReanimated_ProgressTransitionManagerJs2;}())();}registerEventHandlers(){this._sharedElementCount++;const eventHandler=this._eventHandler;if(!eventHandler.isRegistered){eventHandler.isRegistered=true;const eventPrefix=IS_ANDROID?'on':'top';let lastProgressValue=-1;eventHandler.onTransitionProgress=registerEventHandler(function(){const reactNativeReanimated_ProgressTransitionManagerJs3=function(event){const progress=event.progress;if(progress===lastProgressValue){return;}lastProgressValue=progress;global.ProgressTransitionRegister.frame(progress);};reactNativeReanimated_ProgressTransitionManagerJs3.__closure={lastProgressValue};reactNativeReanimated_ProgressTransitionManagerJs3.__workletHash=1443442633147;reactNativeReanimated_ProgressTransitionManagerJs3.__initData=_worklet_1443442633147_init_data;return reactNativeReanimated_ProgressTransitionManagerJs3;}(),eventPrefix+'TransitionProgress');eventHandler.onAppear=registerEventHandler(function(){const reactNativeReanimated_ProgressTransitionManagerJs4=function(){global.ProgressTransitionRegister.onTransitionEnd();};reactNativeReanimated_ProgressTransitionManagerJs4.__closure={};reactNativeReanimated_ProgressTransitionManagerJs4.__workletHash=12937400495570;reactNativeReanimated_ProgressTransitionManagerJs4.__initData=_worklet_12937400495570_init_data;return reactNativeReanimated_ProgressTransitionManagerJs4;}(),eventPrefix+'Appear');if(IS_ANDROID){eventHandler.onDisappear=registerEventHandler(function(){const reactNativeReanimated_ProgressTransitionManagerJs5=function(){global.ProgressTransitionRegister.onAndroidFinishTransitioning();};reactNativeReanimated_ProgressTransitionManagerJs5.__closure={};reactNativeReanimated_ProgressTransitionManagerJs5.__workletHash=2253017632180;reactNativeReanimated_ProgressTransitionManagerJs5.__initData=_worklet_2253017632180_init_data;return reactNativeReanimated_ProgressTransitionManagerJs5;}(),'onFinishTransitioning');}else if(false){eventHandler.onDisappear=registerEventHandler(function(){const reactNativeReanimated_ProgressTransitionManagerJs6=function(){global.ProgressTransitionRegister.onTransitionEnd(true);};reactNativeReanimated_ProgressTransitionManagerJs6.__closure={};reactNativeReanimated_ProgressTransitionManagerJs6.__workletHash=17066273721446;reactNativeReanimated_ProgressTransitionManagerJs6.__initData=_worklet_17066273721446_init_data;return reactNativeReanimated_ProgressTransitionManagerJs6;}(),'topDisappear');eventHandler.onSwipeDismiss=registerEventHandler(function(){const reactNativeReanimated_ProgressTransitionManagerJs7=function(){global.ProgressTransitionRegister.onTransitionEnd();};reactNativeReanimated_ProgressTransitionManagerJs7.__closure={};reactNativeReanimated_ProgressTransitionManagerJs7.__workletHash=3680855814993;reactNativeReanimated_ProgressTransitionManagerJs7.__initData=_worklet_3680855814993_init_data;return reactNativeReanimated_ProgressTransitionManagerJs7;}(),'topGestureCancel');}}}unregisterEventHandlers(){this._sharedElementCount--;if(this._sharedElementCount===0){const eventHandler=this._eventHandler;eventHandler.isRegistered=false;if(eventHandler.onTransitionProgress!==-1){unregisterEventHandler(eventHandler.onTransitionProgress);eventHandler.onTransitionProgress=-1;}if(eventHandler.onAppear!==-1){unregisterEventHandler(eventHandler.onAppear);eventHandler.onAppear=-1;}if(eventHandler.onDisappear!==-1){unregisterEventHandler(eventHandler.onDisappear);eventHandler.onDisappear=-1;}if(eventHandler.onSwipeDismiss!==-1){unregisterEventHandler(eventHandler.onSwipeDismiss);eventHandler.onSwipeDismiss=-1;}}}}const _worklet_4312515321175_init_data={code:\"function createProgressTransitionRegister_reactNativeReanimated_ProgressTransitionManagerJs8(){const{IS_ANDROID}=this.__closure;const progressAnimations=new Map();const snapshots=new Map();const currentTransitions=new Set();const toRemove=new Set();let skipCleaning=false;let isTransitionRestart=false;const progressTransitionManager={addProgressAnimation:function(viewTag,progressAnimation){if(currentTransitions.size>0&&!progressAnimations.has(viewTag)){isTransitionRestart=!IS_ANDROID;}progressAnimations.set(viewTag,progressAnimation);},removeProgressAnimation:function(viewTag,isUnmounting){if(currentTransitions.size>0){isTransitionRestart=!IS_ANDROID;}if(isUnmounting){toRemove.add(viewTag);}else{progressAnimations.delete(viewTag);}},onTransitionStart:function(viewTag,snapshot){skipCleaning=isTransitionRestart;snapshots.set(viewTag,snapshot);currentTransitions.add(viewTag);progressTransitionManager.frame(0);},frame:function(progress){for(const viewTag of currentTransitions){const progressAnimation=progressAnimations.get(viewTag);if(!progressAnimation){continue;}const snapshot=snapshots.get(viewTag);progressAnimation(viewTag,snapshot,progress);}},onAndroidFinishTransitioning:function(){if(toRemove.size>0){progressTransitionManager.onTransitionEnd();}},onTransitionEnd:function(removeViews=false){if(currentTransitions.size===0){toRemove.clear();return;}if(skipCleaning){skipCleaning=false;isTransitionRestart=false;return;}for(const viewTag of currentTransitions){global._notifyAboutEnd(viewTag,removeViews);}currentTransitions.clear();if(isTransitionRestart){return;}snapshots.clear();if(toRemove.size>0){for(const viewTag of toRemove){progressAnimations.delete(viewTag);global._notifyAboutEnd(viewTag,removeViews);}toRemove.clear();}}};return progressTransitionManager;}\"};const createProgressTransitionRegister=function(){const createProgressTransitionRegister=function(){const progressAnimations=new Map();const snapshots=new Map();const currentTransitions=new Set();const toRemove=new Set();let skipCleaning=false;let isTransitionRestart=false;const progressTransitionManager={addProgressAnimation:(viewTag,progressAnimation)=>{if(currentTransitions.size>0&&!progressAnimations.has(viewTag)){isTransitionRestart=!IS_ANDROID;}progressAnimations.set(viewTag,progressAnimation);},removeProgressAnimation:(viewTag,isUnmounting)=>{if(currentTransitions.size>0){isTransitionRestart=!IS_ANDROID;}if(isUnmounting){toRemove.add(viewTag);}else{progressAnimations.delete(viewTag);}},onTransitionStart:(viewTag,snapshot)=>{skipCleaning=isTransitionRestart;snapshots.set(viewTag,snapshot);currentTransitions.add(viewTag);progressTransitionManager.frame(0);},frame:progress=>{for(const viewTag of currentTransitions){const progressAnimation=progressAnimations.get(viewTag);if(!progressAnimation){continue;}const snapshot=snapshots.get(viewTag);progressAnimation(viewTag,snapshot,progress);}},onAndroidFinishTransitioning:()=>{if(toRemove.size>0){progressTransitionManager.onTransitionEnd();}},onTransitionEnd:(removeViews=false)=>{if(currentTransitions.size===0){toRemove.clear();return;}if(skipCleaning){skipCleaning=false;isTransitionRestart=false;return;}for(const viewTag of currentTransitions){global._notifyAboutEnd(viewTag,removeViews);}currentTransitions.clear();if(isTransitionRestart){return;}snapshots.clear();if(toRemove.size>0){for(const viewTag of toRemove){progressAnimations.delete(viewTag);global._notifyAboutEnd(viewTag,removeViews);}toRemove.clear();}}};return progressTransitionManager;};createProgressTransitionRegister.__closure={IS_ANDROID};createProgressTransitionRegister.__workletHash=4312515321175;createProgressTransitionRegister.__initData=_worklet_4312515321175_init_data;return createProgressTransitionRegister;}();const _worklet_10991674430257_init_data={code:\"function reactNativeReanimated_ProgressTransitionManagerJs9(){const{createProgressTransitionRegister}=this.__closure;global.ProgressTransitionRegister=createProgressTransitionRegister();}\"};if(shouldBeUseWeb()){const maybeThrowError=()=>{if(!isJest()){throw new ReanimatedError('`ProgressTransitionRegister` is not available on non-native platform.');}};global.ProgressTransitionRegister=new Proxy({},{get:maybeThrowError,set:()=>{maybeThrowError();return false;}});}else{runOnUIImmediately(function(){const reactNativeReanimated_ProgressTransitionManagerJs9=function(){global.ProgressTransitionRegister=createProgressTransitionRegister();};reactNativeReanimated_ProgressTransitionManagerJs9.__closure={createProgressTransitionRegister};reactNativeReanimated_ProgressTransitionManagerJs9.__workletHash=10991674430257;reactNativeReanimated_ProgressTransitionManagerJs9.__initData=_worklet_10991674430257_init_data;return reactNativeReanimated_ProgressTransitionManagerJs9;}())();}","map":{"version":3,"names":["runOnUIImmediately","registerEventHandler","unregisterEventHandler","Platform","isJest","shouldBeUseWeb","ReanimatedError","IS_ANDROID","_worklet_8193719887552_init_data","code","_worklet_358282488548_init_data","_worklet_1443442633147_init_data","_worklet_12937400495570_init_data","_worklet_2253017632180_init_data","_worklet_17066273721446_init_data","_worklet_3680855814993_init_data","ProgressTransitionManager","_sharedElementCount","_eventHandler","isRegistered","onTransitionProgress","onAppear","onDisappear","onSwipeDismiss","addProgressAnimation","viewTag","progressAnimation","reactNativeReanimated_ProgressTransitionManagerJs1","global","ProgressTransitionRegister","__closure","__workletHash","__initData","registerEventHandlers","removeProgressAnimation","isUnmounting","unregisterEventHandlers","reactNativeReanimated_ProgressTransitionManagerJs2","eventHandler","eventPrefix","lastProgressValue","reactNativeReanimated_ProgressTransitionManagerJs3","event","progress","frame","reactNativeReanimated_ProgressTransitionManagerJs4","onTransitionEnd","reactNativeReanimated_ProgressTransitionManagerJs5","onAndroidFinishTransitioning","reactNativeReanimated_ProgressTransitionManagerJs6","reactNativeReanimated_ProgressTransitionManagerJs7","_worklet_4312515321175_init_data","createProgressTransitionRegister","progressAnimations","Map","snapshots","currentTransitions","Set","toRemove","skipCleaning","isTransitionRestart","progressTransitionManager","size","has","set","add","delete","onTransitionStart","snapshot","get","removeViews","clear","_notifyAboutEnd","_worklet_10991674430257_init_data","maybeThrowError","Proxy","reactNativeReanimated_ProgressTransitionManagerJs9"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-reanimated/src/layoutReanimation/sharedTransitions/ProgressTransitionManager.ts"],"sourcesContent":["'use strict';\nimport { runOnUIImmediately } from '../../threads';\nimport type {\n  ProgressAnimation,\n  SharedTransitionAnimationsValues,\n} from '../animationBuilder/commonTypes';\nimport { registerEventHandler, unregisterEventHandler } from '../../core';\nimport { Platform } from 'react-native';\nimport { isJest, shouldBeUseWeb } from '../../PlatformChecker';\nimport { ReanimatedError } from '../../errors';\n\ntype TransitionProgressEvent = {\n  closing: number;\n  goingForward: number;\n  eventName: string;\n  progress: number;\n  target: number;\n};\n\nconst IS_ANDROID = Platform.OS === 'android';\n\nexport class ProgressTransitionManager {\n  private _sharedElementCount = 0;\n  private _eventHandler = {\n    isRegistered: false,\n    onTransitionProgress: -1,\n    onAppear: -1,\n    onDisappear: -1,\n    onSwipeDismiss: -1,\n  };\n\n  public addProgressAnimation(\n    viewTag: number,\n    progressAnimation: ProgressAnimation\n  ) {\n    runOnUIImmediately(() => {\n      'worklet';\n      global.ProgressTransitionRegister.addProgressAnimation(\n        viewTag,\n        progressAnimation\n      );\n    })();\n\n    this.registerEventHandlers();\n  }\n\n  public removeProgressAnimation(viewTag: number, isUnmounting = true) {\n    this.unregisterEventHandlers();\n    runOnUIImmediately(() => {\n      'worklet';\n      global.ProgressTransitionRegister.removeProgressAnimation(\n        viewTag,\n        isUnmounting\n      );\n    })();\n  }\n\n  private registerEventHandlers() {\n    this._sharedElementCount++;\n    const eventHandler = this._eventHandler;\n    if (!eventHandler.isRegistered) {\n      eventHandler.isRegistered = true;\n      const eventPrefix = IS_ANDROID ? 'on' : 'top';\n      let lastProgressValue = -1;\n      eventHandler.onTransitionProgress = registerEventHandler(\n        (event: TransitionProgressEvent) => {\n          'worklet';\n          const progress = event.progress;\n          if (progress === lastProgressValue) {\n            // During screen transition, handler receives two events with the same progress\n            // value for both screens, but for modals, there is only one event. To optimize\n            // performance and avoid unnecessary worklet calls, let's skip the second event.\n            return;\n          }\n          lastProgressValue = progress;\n          global.ProgressTransitionRegister.frame(progress);\n        },\n        eventPrefix + 'TransitionProgress'\n      );\n      eventHandler.onAppear = registerEventHandler(() => {\n        'worklet';\n        global.ProgressTransitionRegister.onTransitionEnd();\n      }, eventPrefix + 'Appear');\n\n      if (IS_ANDROID) {\n        // onFinishTransitioning event is available only on Android and\n        // is used to handle closing modals\n        eventHandler.onDisappear = registerEventHandler(() => {\n          'worklet';\n          global.ProgressTransitionRegister.onAndroidFinishTransitioning();\n        }, 'onFinishTransitioning');\n      } else if (Platform.OS === 'ios') {\n        // topDisappear event is required to handle closing modals on iOS\n        eventHandler.onDisappear = registerEventHandler(() => {\n          'worklet';\n          global.ProgressTransitionRegister.onTransitionEnd(true);\n        }, 'topDisappear');\n        eventHandler.onSwipeDismiss = registerEventHandler(() => {\n          'worklet';\n          global.ProgressTransitionRegister.onTransitionEnd();\n        }, 'topGestureCancel');\n      }\n    }\n  }\n\n  private unregisterEventHandlers(): void {\n    this._sharedElementCount--;\n    if (this._sharedElementCount === 0) {\n      const eventHandler = this._eventHandler;\n      eventHandler.isRegistered = false;\n      if (eventHandler.onTransitionProgress !== -1) {\n        unregisterEventHandler(eventHandler.onTransitionProgress);\n        eventHandler.onTransitionProgress = -1;\n      }\n      if (eventHandler.onAppear !== -1) {\n        unregisterEventHandler(eventHandler.onAppear);\n        eventHandler.onAppear = -1;\n      }\n      if (eventHandler.onDisappear !== -1) {\n        unregisterEventHandler(eventHandler.onDisappear);\n        eventHandler.onDisappear = -1;\n      }\n      if (eventHandler.onSwipeDismiss !== -1) {\n        unregisterEventHandler(eventHandler.onSwipeDismiss);\n        eventHandler.onSwipeDismiss = -1;\n      }\n    }\n  }\n}\n\nfunction createProgressTransitionRegister() {\n  'worklet';\n  const progressAnimations = new Map<number, ProgressAnimation>();\n  const snapshots = new Map<\n    number,\n    Partial<SharedTransitionAnimationsValues>\n  >();\n  const currentTransitions = new Set<number>();\n  const toRemove = new Set<number>();\n\n  let skipCleaning = false;\n  let isTransitionRestart = false;\n\n  const progressTransitionManager = {\n    addProgressAnimation: (\n      viewTag: number,\n      progressAnimation: ProgressAnimation\n    ) => {\n      if (currentTransitions.size > 0 && !progressAnimations.has(viewTag)) {\n        // there is no need to prevent cleaning on android\n        isTransitionRestart = !IS_ANDROID;\n      }\n      progressAnimations.set(viewTag, progressAnimation);\n    },\n    removeProgressAnimation: (viewTag: number, isUnmounting: boolean) => {\n      if (currentTransitions.size > 0) {\n        // there is no need to prevent cleaning on android\n        isTransitionRestart = !IS_ANDROID;\n      }\n      if (isUnmounting) {\n        // Remove the animation config after the transition is finished\n        toRemove.add(viewTag);\n      } else {\n        // if the animation is removed, without ever being started, it can be removed immediately\n        progressAnimations.delete(viewTag);\n      }\n    },\n    onTransitionStart: (\n      viewTag: number,\n      snapshot: Partial<SharedTransitionAnimationsValues>\n    ) => {\n      skipCleaning = isTransitionRestart;\n      snapshots.set(viewTag, snapshot);\n      currentTransitions.add(viewTag);\n      // set initial style for re-parented components\n      progressTransitionManager.frame(0);\n    },\n    frame: (progress: number) => {\n      for (const viewTag of currentTransitions) {\n        const progressAnimation = progressAnimations.get(viewTag);\n        if (!progressAnimation) {\n          continue;\n        }\n        const snapshot = snapshots.get(\n          viewTag\n        )! as SharedTransitionAnimationsValues;\n        progressAnimation(viewTag, snapshot, progress);\n      }\n    },\n    onAndroidFinishTransitioning: () => {\n      if (toRemove.size > 0) {\n        // it should be ran only on modal closing\n        progressTransitionManager.onTransitionEnd();\n      }\n    },\n    onTransitionEnd: (removeViews = false) => {\n      if (currentTransitions.size === 0) {\n        toRemove.clear();\n        return;\n      }\n      if (skipCleaning) {\n        skipCleaning = false;\n        isTransitionRestart = false;\n        return;\n      }\n      for (const viewTag of currentTransitions) {\n        global._notifyAboutEnd(viewTag, removeViews);\n      }\n      currentTransitions.clear();\n      if (isTransitionRestart) {\n        // on transition restart, progressAnimations should be saved\n        // because they potentially can be used in the next transition\n        return;\n      }\n      snapshots.clear();\n      if (toRemove.size > 0) {\n        for (const viewTag of toRemove) {\n          progressAnimations.delete(viewTag);\n          global._notifyAboutEnd(viewTag, removeViews);\n        }\n        toRemove.clear();\n      }\n    },\n  };\n  return progressTransitionManager;\n}\n\nif (shouldBeUseWeb()) {\n  const maybeThrowError = () => {\n    // Jest attempts to access a property of this object to check if it is a Jest mock\n    // so we can't throw an error in the getter.\n    if (!isJest()) {\n      throw new ReanimatedError(\n        '`ProgressTransitionRegister` is not available on non-native platform.'\n      );\n    }\n  };\n  global.ProgressTransitionRegister = new Proxy(\n    {} as ProgressTransitionRegister,\n    {\n      get: maybeThrowError,\n      set: () => {\n        maybeThrowError();\n        return false;\n      },\n    }\n  );\n} else {\n  runOnUIImmediately(() => {\n    'worklet';\n    global.ProgressTransitionRegister = createProgressTransitionRegister();\n  })();\n}\n\nexport type ProgressTransitionRegister = ReturnType<\n  typeof createProgressTransitionRegister\n>;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}