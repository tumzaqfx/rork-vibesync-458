{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"pageSize\"];import{PermissionResponse,PermissionStatus,PermissionExpiration,UnavailabilityError,uuid}from'expo-modules-core';import Platform from\"react-native-web/dist/exports/Platform\";import Share from\"react-native-web/dist/exports/Share\";import ExpoContacts from'./ExpoContacts';export{PermissionStatus,PermissionResponse,PermissionExpiration};export async function isAvailableAsync(){return!!ExpoContacts.getContactsAsync;}export async function shareContactAsync(contactId,message,shareOptions={}){if(false){const url=await writeContactToFileAsync({id:contactId});return await Share.share({url,message},shareOptions);}else if(!ExpoContacts.shareContactAsync){throw new UnavailabilityError('Contacts','shareContactAsync');}return await ExpoContacts.shareContactAsync(contactId,message);}export async function getContactsAsync(contactQuery={}){if(!ExpoContacts.getContactsAsync){throw new UnavailabilityError('Contacts','getContactsAsync');}return await ExpoContacts.getContactsAsync(contactQuery);}export async function getPagedContactsAsync(contactQuery={}){const{pageSize}=contactQuery,nOptions=_objectWithoutPropertiesLoose(contactQuery,_excluded);if(pageSize&&pageSize<=0){throw new Error('Error: Contacts.getPagedContactsAsync: `pageSize` must be greater than 0');}return await getContactsAsync(Object.assign({},nOptions,{pageSize}));}export async function getContactByIdAsync(id,fields){if(!ExpoContacts.getContactsAsync){throw new UnavailabilityError('Contacts','getContactsAsync');}if(id==null){throw new Error('Error: Contacts.getContactByIdAsync: id is required');}else{const results=await ExpoContacts.getContactsAsync({pageSize:1,pageOffset:0,fields,id});if(results&&results.data&&results.data.length>0){return results.data[0];}}return undefined;}export async function addContactAsync(contact,containerId){if(!ExpoContacts.addContactAsync){throw new UnavailabilityError('Contacts','addContactAsync');}const noIdContact=removeIds(contact);return await ExpoContacts.addContactAsync(noIdContact,containerId);}export async function updateContactAsync(contact){if(!ExpoContacts.updateContactAsync){throw new UnavailabilityError('Contacts','updateContactAsync');}return await ExpoContacts.updateContactAsync(contact);}export async function removeContactAsync(contactId){if(!ExpoContacts.removeContactAsync){throw new UnavailabilityError('Contacts','removeContactAsync');}return await ExpoContacts.removeContactAsync(contactId);}export async function writeContactToFileAsync(contactQuery={}){if(!ExpoContacts.writeContactToFileAsync){throw new UnavailabilityError('Contacts','writeContactToFileAsync');}return await ExpoContacts.writeContactToFileAsync(contactQuery);}export async function presentFormAsync(contactId,contact,formOptions={}){if(!ExpoContacts.presentFormAsync){throw new UnavailabilityError('Contacts','presentFormAsync');}if(false){const adjustedOptions=formOptions;if(contactId){if(contact){contact=undefined;console.log('Expo.Contacts.presentFormAsync: You should define either a `contact` or a `contactId` but not both.');}if(adjustedOptions.isNew!==undefined){console.log('Expo.Contacts.presentFormAsync: `formOptions.isNew` is not supported with `contactId`');}}return await ExpoContacts.presentFormAsync(contactId,contact,adjustedOptions);}else{return await ExpoContacts.presentFormAsync(contactId,contact,formOptions);}}export async function addExistingGroupToContainerAsync(groupId,containerId){if(!ExpoContacts.addExistingGroupToContainerAsync){throw new UnavailabilityError('Contacts','addExistingGroupToContainerAsync');}return await ExpoContacts.addExistingGroupToContainerAsync(groupId,containerId);}export async function createGroupAsync(name,containerId){if(!ExpoContacts.createGroupAsync){throw new UnavailabilityError('Contacts','createGroupAsync');}name=name||uuid.v4();if(!containerId){containerId=await getDefaultContainerIdAsync();}return await ExpoContacts.createGroupAsync(name,containerId);}export async function updateGroupNameAsync(groupName,groupId){if(!ExpoContacts.updateGroupNameAsync){throw new UnavailabilityError('Contacts','updateGroupNameAsync');}return await ExpoContacts.updateGroupNameAsync(groupName,groupId);}export async function removeGroupAsync(groupId){if(!ExpoContacts.removeGroupAsync){throw new UnavailabilityError('Contacts','removeGroupAsync');}return await ExpoContacts.removeGroupAsync(groupId);}export async function addExistingContactToGroupAsync(contactId,groupId){if(!ExpoContacts.addExistingContactToGroupAsync){throw new UnavailabilityError('Contacts','addExistingContactToGroupAsync');}return await ExpoContacts.addExistingContactToGroupAsync(contactId,groupId);}export async function removeContactFromGroupAsync(contactId,groupId){if(!ExpoContacts.removeContactFromGroupAsync){throw new UnavailabilityError('Contacts','removeContactFromGroupAsync');}return await ExpoContacts.removeContactFromGroupAsync(contactId,groupId);}export async function getGroupsAsync(groupQuery){if(!ExpoContacts.getGroupsAsync){throw new UnavailabilityError('Contacts','getGroupsAsync');}return await ExpoContacts.getGroupsAsync(groupQuery);}export async function presentContactPickerAsync(){if(!ExpoContacts.presentContactPickerAsync){throw new UnavailabilityError('Contacts','presentContactPickerAsync');}return await ExpoContacts.presentContactPickerAsync();}export async function getDefaultContainerIdAsync(){if(!ExpoContacts.getDefaultContainerIdentifierAsync){throw new UnavailabilityError('Contacts','getDefaultContainerIdentifierAsync');}return await ExpoContacts.getDefaultContainerIdentifierAsync();}export async function getContainersAsync(containerQuery){if(!ExpoContacts.getContainersAsync){throw new UnavailabilityError('Contacts','getContainersAsync');}return await ExpoContacts.getContainersAsync(containerQuery);}export async function getPermissionsAsync(){if(!ExpoContacts.getPermissionsAsync){throw new UnavailabilityError('Contacts','getPermissionsAsync');}return await ExpoContacts.getPermissionsAsync();}export async function requestPermissionsAsync(){if(!ExpoContacts.requestPermissionsAsync){throw new UnavailabilityError('Contacts','requestPermissionsAsync');}return await ExpoContacts.requestPermissionsAsync();}export async function presentAccessPickerAsync(){return await ExpoContacts.presentAccessPickerAsync();}function removeIds(contact){const updatedContact=Object.assign({},contact);if(contact.id&&false){console.warn(`You have set an id = ${contact.id} for the contact. This value will be ignored, because the id will be generated by the OS`);delete updatedContact.id;}for(const key of Object.keys(contact)){const prop=key;const value=contact[prop];if(Array.isArray(value)){updatedContact[prop]=value.map((item,index)=>{if(typeof item==='object'&&item!=null&&'id'in item){false&&console.warn(`You have set an id \"${item.id}\" at index \"${index}\" for the key \"${key}\" of the contact. This value will be ignored, because the id will be generated by the OS`);return Object.assign({},item,{id:null});}return item;});}}return updatedContact;}export let Fields=function(Fields){Fields[\"ID\"]=\"id\";Fields[\"ContactType\"]=\"contactType\";Fields[\"Name\"]=\"name\";Fields[\"FirstName\"]=\"firstName\";Fields[\"MiddleName\"]=\"middleName\";Fields[\"LastName\"]=\"lastName\";Fields[\"MaidenName\"]=\"maidenName\";Fields[\"NamePrefix\"]=\"namePrefix\";Fields[\"NameSuffix\"]=\"nameSuffix\";Fields[\"Nickname\"]=\"nickname\";Fields[\"PhoneticFirstName\"]=\"phoneticFirstName\";Fields[\"PhoneticMiddleName\"]=\"phoneticMiddleName\";Fields[\"PhoneticLastName\"]=\"phoneticLastName\";Fields[\"Birthday\"]=\"birthday\";Fields[\"NonGregorianBirthday\"]=\"nonGregorianBirthday\";Fields[\"Emails\"]=\"emails\";Fields[\"PhoneNumbers\"]=\"phoneNumbers\";Fields[\"Addresses\"]=\"addresses\";Fields[\"SocialProfiles\"]=\"socialProfiles\";Fields[\"InstantMessageAddresses\"]=\"instantMessageAddresses\";Fields[\"UrlAddresses\"]=\"urlAddresses\";Fields[\"Company\"]=\"company\";Fields[\"JobTitle\"]=\"jobTitle\";Fields[\"Department\"]=\"department\";Fields[\"ImageAvailable\"]=\"imageAvailable\";Fields[\"Image\"]=\"image\";Fields[\"RawImage\"]=\"rawImage\";Fields[\"ExtraNames\"]=\"extraNames\";Fields[\"Note\"]=\"note\";Fields[\"Dates\"]=\"dates\";Fields[\"Relationships\"]=\"relationships\";Fields[\"IsFavorite\"]=\"isFavorite\";return Fields;}({});export let CalendarFormats=function(CalendarFormats){CalendarFormats[\"Gregorian\"]=\"gregorian\";CalendarFormats[\"Buddhist\"]=\"buddhist\";CalendarFormats[\"Chinese\"]=\"chinese\";CalendarFormats[\"Coptic\"]=\"coptic\";CalendarFormats[\"EthiopicAmeteMihret\"]=\"ethiopicAmeteMihret\";CalendarFormats[\"EthiopicAmeteAlem\"]=\"ethiopicAmeteAlem\";CalendarFormats[\"Hebrew\"]=\"hebrew\";CalendarFormats[\"ISO8601\"]=\"iso8601\";CalendarFormats[\"Indian\"]=\"indian\";CalendarFormats[\"Islamic\"]=\"islamic\";CalendarFormats[\"IslamicCivil\"]=\"islamicCivil\";CalendarFormats[\"Japanese\"]=\"japanese\";CalendarFormats[\"Persian\"]=\"persian\";CalendarFormats[\"RepublicOfChina\"]=\"republicOfChina\";CalendarFormats[\"IslamicTabular\"]=\"islamicTabular\";CalendarFormats[\"IslamicUmmAlQura\"]=\"islamicUmmAlQura\";return CalendarFormats;}({});export let ContainerTypes=function(ContainerTypes){ContainerTypes[\"Local\"]=\"local\";ContainerTypes[\"Exchange\"]=\"exchange\";ContainerTypes[\"CardDAV\"]=\"cardDAV\";ContainerTypes[\"Unassigned\"]=\"unassigned\";return ContainerTypes;}({});export let SortTypes=function(SortTypes){SortTypes[\"UserDefault\"]=\"userDefault\";SortTypes[\"FirstName\"]=\"firstName\";SortTypes[\"LastName\"]=\"lastName\";SortTypes[\"None\"]=\"none\";return SortTypes;}({});export let ContactTypes=function(ContactTypes){ContactTypes[\"Person\"]=\"person\";ContactTypes[\"Company\"]=\"company\";return ContactTypes;}({});","map":{"version":3,"names":["PermissionResponse","PermissionStatus","PermissionExpiration","UnavailabilityError","uuid","Platform","Share","ExpoContacts","isAvailableAsync","getContactsAsync","shareContactAsync","contactId","message","shareOptions","url","writeContactToFileAsync","id","share","contactQuery","getPagedContactsAsync","pageSize","nOptions","_objectWithoutPropertiesLoose","_excluded","Error","Object","assign","getContactByIdAsync","fields","results","pageOffset","data","length","undefined","addContactAsync","contact","containerId","noIdContact","removeIds","updateContactAsync","removeContactAsync","presentFormAsync","formOptions","adjustedOptions","console","log","isNew","addExistingGroupToContainerAsync","groupId","createGroupAsync","name","v4","getDefaultContainerIdAsync","updateGroupNameAsync","groupName","removeGroupAsync","addExistingContactToGroupAsync","removeContactFromGroupAsync","getGroupsAsync","groupQuery","presentContactPickerAsync","getDefaultContainerIdentifierAsync","getContainersAsync","containerQuery","getPermissionsAsync","requestPermissionsAsync","presentAccessPickerAsync","updatedContact","warn","key","keys","prop","value","Array","isArray","map","item","index","Fields","CalendarFormats","ContainerTypes","SortTypes","ContactTypes"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-contacts/src/Contacts.ts"],"sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n  UnavailabilityError,\n  uuid,\n} from 'expo-modules-core';\nimport { Platform, Share, type ShareOptions } from 'react-native';\n\nimport ExpoContacts from './ExpoContacts';\n\nexport type ContactsPermissionResponse = PermissionResponse & {\n  /**\n   * Indicates if your app has access to the whole or only part of the contact library. Possible values are:\n   * - `'all'` if the user granted your app access to the whole contact library\n   * - `'limited'` if the user granted your app access only to selected contacts (only available on iOS 18+)\n   * - `'none'`\n   */\n  accessPrivileges?: 'all' | 'limited' | 'none';\n};\n\nexport type CalendarFormatType = CalendarFormats | `${CalendarFormats}`;\n\nexport type ContainerType = ContainerTypes | `${ContainerTypes}`;\n\nexport type ContactType = ContactTypes | `${ContactTypes}`;\n\nexport type FieldType = Fields | `${Fields}`;\n\nexport type Date = {\n  /**\n   * Day.\n   */\n  day: number;\n  /**\n   * Month - adjusted for JavaScript `Date` which starts at `0`.\n   */\n  month: number;\n  /**\n   * Year.\n   */\n  year?: number;\n  /**\n   * Unique ID. This value will be generated by the OS.\n   */\n  id?: string;\n  /**\n   * Localized display name.\n   */\n  label?: string;\n  /**\n   * Format for the date. This is provided by the OS, do not set this manually.\n   */\n  format?: CalendarFormatType;\n};\n\nexport type Relationship = {\n  /**\n   * Localized display name.\n   */\n  label: string;\n  /**\n   * Name of related contact.\n   */\n  name?: string;\n  /**\n   * Unique ID. This value will be generated by the OS.\n   */\n  id?: string;\n};\n\nexport type Email = {\n  /**\n   * Email address.\n   */\n  email?: string;\n  /**\n   * Flag signifying if it is a primary email address.\n   */\n  isPrimary?: boolean;\n  /**\n   * Localized display name.\n   */\n  label: string;\n  /**\n   * Unique ID. This value will be generated by the OS.\n   */\n  id?: string;\n};\n\nexport type PhoneNumber = {\n  /**\n   * Phone number.\n   */\n  number?: string;\n  /**\n   * Flag signifying if it is a primary phone number.\n   */\n  isPrimary?: boolean;\n  /**\n   * Phone number without format.\n   * @example\n   * `8674305`\n   */\n  digits?: string;\n  /**\n   * Country code.\n   * @example\n   * `us`\n   */\n  countryCode?: string;\n  /**\n   * Localized display name.\n   */\n  label: string;\n  /**\n   * Unique ID. This value will be generated by the OS.\n   */\n  id?: string;\n};\n\nexport type Address = {\n  /**\n   * Street name.\n   */\n  street?: string;\n  /**\n   * City name.\n   */\n  city?: string;\n  /**\n   * Country name\n   */\n  country?: string;\n  /**\n   * Region or state name.\n   */\n  region?: string;\n  /**\n   * Neighborhood name.\n   */\n  neighborhood?: string;\n  /**\n   * Local post code.\n   */\n  postalCode?: string;\n  /**\n   * P.O. Box.\n   */\n  poBox?: string;\n  /**\n   * [Standard country code](https://www.iso.org/iso-3166-country-codes.html).\n   */\n  isoCountryCode?: string;\n  /**\n   * Localized display name.\n   */\n  label: string;\n  /**\n   * Unique ID. This value will be generated by the OS.\n   */\n  id?: string;\n};\n\n/**\n * @platform ios\n */\nexport type SocialProfile = {\n  /**\n   * Name of social app.\n   */\n  service?: string;\n  /**\n   * Localized profile name.\n   */\n  localizedProfile?: string;\n  /**\n   * Web URL.\n   */\n  url?: string;\n  /**\n   * Username in social app.\n   */\n  username?: string;\n  /**\n   * Username ID in social app.\n   */\n  userId?: string;\n  /**\n   * Localized display name.\n   */\n  label: string;\n  /**\n   * Unique ID. This value will be generated by the OS.\n   */\n  id?: string;\n};\n\nexport type InstantMessageAddress = {\n  /**\n   * Name of instant messaging app.\n   */\n  service?: string;\n  /**\n   * Username in IM app.\n   */\n  username?: string;\n  /**\n   * Localized name of app.\n   */\n  localizedService?: string;\n  /**\n   * Localized display name.\n   */\n  label: string;\n  /**\n   * Unique ID. This value will be generated by the OS.\n   */\n  id?: string;\n};\n\nexport type UrlAddress = {\n  /**\n   * Localized display name.\n   */\n  label: string;\n  /**\n   * Web URL.\n   */\n  url?: string;\n  /**\n   * Unique ID. This value will be generated by the OS.\n   */\n  id?: string;\n};\n\n// @needs-audit\n/**\n * Information regarding thumbnail images.\n * > On Android you can get dimensions using [`Image.getSize`](https://reactnative.dev/docs/image#getsize) method.\n */\nexport type Image = {\n  /**\n   * A local image URI.\n   * > **Note**: If you have a remote URI, download it first using  [`FileSystem.downloadAsync`](/versions/latest/sdk/filesystem/#filesystemdownloadasyncuri-fileuri-options).\n   */\n  uri?: string;\n  /**\n   * Image width.\n   * @platform ios\n   */\n  width?: number;\n  /**\n   * Image height\n   * @platform ios\n   */\n  height?: number;\n  /**\n   * Image as Base64 string.\n   */\n  base64?: string;\n};\n\n/**\n * A set of fields that define information about a single contact entity.\n */\nexport type Contact = {\n  /**\n   * Immutable identifier used for querying and indexing. This value will be generated by the OS when the contact is created.\n   */\n  id?: string;\n  /**\n   * Denoting a person or company.\n   */\n  contactType: ContactType;\n  /**\n   * Full name with proper format.\n   */\n  name: string;\n  /**\n   * Given name.\n   */\n  firstName?: string;\n  /**\n   * Middle name\n   */\n  middleName?: string;\n  /**\n   * Last name.\n   */\n  lastName?: string;\n  /**\n   * Maiden name.\n   */\n  maidenName?: string;\n  /**\n   * Dr., Mr., Mrs., and so on.\n   */\n  namePrefix?: string;\n  /**\n   * Jr., Sr., and so on.\n   */\n  nameSuffix?: string;\n  /**\n   * An alias to the proper name.\n   */\n  nickname?: string;\n  /**\n   * Pronunciation of the first name.\n   */\n  phoneticFirstName?: string;\n  /**\n   * Pronunciation of the middle name.\n   */\n  phoneticMiddleName?: string;\n  /**\n   * Pronunciation of the last name.\n   */\n  phoneticLastName?: string;\n  /**\n   * Organization the entity belongs to.\n   */\n  company?: string;\n  /**\n   * Job description.\n   */\n  jobTitle?: string;\n  /**\n   * Job department.\n   */\n  department?: string;\n  /**\n   * Additional information.\n   * > The `note` field [requires your app to request additional entitlements](https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_contacts_notes).\n   * > The Expo Go app does not contain those entitlements, so in order to test this feature you will need to [request the entitlement from Apple](https://developer.apple.com/contact/request/contact-note-field),\n   * > set the [`ios.accessesContactNotes`](./../config/app/#accessescontactnotes) field in **app config** to `true`, and [create your development build](/develop/development-builds/create-a-build/).\n   */\n  note?: string;\n  /**\n   * Used for efficient retrieval of images.\n   */\n  imageAvailable?: boolean;\n  /**\n   * Thumbnail image. On iOS it size is set to 320×320px, on Android it may vary.\n   */\n  image?: Image;\n  /**\n   * Raw image without cropping, usually large.\n   */\n  rawImage?: Image;\n  /**\n   * Birthday information in Gregorian format.\n   */\n  birthday?: Date;\n  /**\n   * A labeled list of other relevant user dates in Gregorian format.\n   */\n  dates?: Date[];\n  /**\n   * Names of other relevant user connections.\n   */\n  relationships?: Relationship[];\n  /**\n   * Email addresses.\n   */\n  emails?: Email[];\n  /**\n   * Phone numbers.\n   */\n  phoneNumbers?: PhoneNumber[];\n  /**\n   * Locations.\n   */\n  addresses?: Address[];\n  /**\n   * Instant messaging connections.\n   */\n  instantMessageAddresses?: InstantMessageAddress[];\n  /**\n   * Associated web URLs.\n   */\n  urlAddresses?: UrlAddress[];\n  /**\n   * Birthday that doesn't conform to the Gregorian calendar format, interpreted based on the [calendar `format`](#date) setting.\n   * @platform ios\n   */\n  nonGregorianBirthday?: Date;\n  /**\n   * Social networks.\n   * @platform ios\n   */\n  socialProfiles?: SocialProfile[];\n  /**\n   * Whether the contact is starred.\n   * @platform android\n   */\n  isFavorite?: boolean;\n};\n\n/**\n * The return value for queried contact operations like `getContactsAsync`.\n */\nexport type ContactResponse = {\n  /**\n   * An array of contacts that match a particular query.\n   */\n  data: Contact[];\n  /**\n   * This will be `true` if there are more contacts to retrieve beyond what is returned.\n   */\n  hasNextPage: boolean;\n  /**\n   * This will be `true` if there are previous contacts that weren't retrieved due to `pageOffset` limit.\n   */\n  hasPreviousPage: boolean;\n};\n\nexport type ContactSort = `${SortTypes}`;\n\n/**\n * Used to query contacts from the user's device.\n */\nexport type ContactQuery = {\n  /**\n   * The max number of contacts to return. If skipped or set to `0` all contacts will be returned.\n   */\n  pageSize?: number;\n  /**\n   * The number of contacts to skip before gathering contacts.\n   */\n  pageOffset?: number;\n  /**\n   * If specified, the defined fields will be returned. If skipped, all fields will be returned.\n   */\n  fields?: FieldType[];\n  /**\n   * Sort method used when gathering contacts.\n   */\n  sort?: ContactSort;\n  /**\n   * Get all contacts whose name contains the provided string (not case-sensitive).\n   */\n  name?: string;\n  /**\n   * Get contacts with a matching ID or array of IDs.\n   */\n  id?: string | string[];\n  /**\n   * Get all contacts that belong to the group matching this ID.\n   * @platform ios\n   */\n  groupId?: string;\n  /**\n   * Get all contacts that belong to the container matching this ID.\n   * @platform ios\n   */\n  containerId?: string;\n  /**\n   * Prevent unification of contacts when gathering.\n   * @default false\n   * @platform ios\n   */\n  rawContacts?: boolean;\n};\n\n/**\n * Denotes the functionality of a native contact form.\n */\nexport type FormOptions = {\n  /**\n   * The properties that will be displayed. On iOS those properties does nothing while in editing mode.\n   */\n  displayedPropertyKeys?: FieldType[];\n  /**\n   * Controller title.\n   */\n  message?: string;\n  /**\n   * Used if contact doesn't have a name defined.\n   */\n  alternateName?: string;\n  /**\n   * Allows for contact mutation.\n   */\n  allowsEditing?: boolean;\n  /**\n   * Actions like share, add, create.\n   */\n  allowsActions?: boolean;\n  /**\n   * Show or hide the similar contacts.\n   */\n  shouldShowLinkedContacts?: boolean;\n  /**\n   * Present the new contact controller. If set to `false` the unknown controller will be shown.\n   */\n  isNew?: boolean;\n  /**\n   * The name of the left bar button.\n   */\n  cancelButtonTitle?: string;\n  /**\n   * Prevents the controller from animating in.\n   */\n  preventAnimation?: boolean;\n  /**\n   * The parent group for a new contact.\n   */\n  groupId?: string;\n};\n\n/**\n * Used to query native contact groups.\n * @platform ios\n */\nexport type GroupQuery = {\n  /**\n   * Query the group with a matching ID.\n   */\n  groupId?: string;\n  /**\n   * Query all groups matching a name.\n   */\n  groupName?: string;\n  /**\n   * Query all groups that belong to a certain container.\n   */\n  containerId?: string;\n};\n\n/**\n * A parent to contacts. A contact can belong to multiple groups. Here are some query operations you can perform:\n * - Child Contacts: `getContactsAsync({ groupId })`\n * - Groups From Container: `getGroupsAsync({ containerId })`\n * - Groups Named: `getContainersAsync({ groupName })`\n * @platform ios\n */\nexport type Group = {\n  /**\n   * Immutable id representing the group.\n   */\n  name?: string;\n  /**\n   * The editable name of a group.\n   */\n  id?: string;\n};\n\n/**\n * Used to query native contact containers.\n * @platform ios\n */\nexport type ContainerQuery = {\n  /**\n   * Query all the containers that parent a contact.\n   */\n  contactId?: string;\n  /**\n   * Query all the containers that parent a group.\n   */\n  groupId?: string;\n  /**\n   * Query all the containers that matches ID or an array od IDs.\n   */\n  containerId?: string | string[];\n};\n\nexport type Container = {\n  name: string;\n  id: string;\n  type: ContainerType;\n};\n\nexport { PermissionStatus, PermissionResponse, PermissionExpiration };\n\n/**\n * Returns whether the Contacts API is enabled on the current device. This method does not check the app permissions.\n * @returns A promise that fulfills with a `boolean`, indicating whether the Contacts API is available on the current device. It always resolves to `false` on web.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoContacts.getContactsAsync;\n}\n\n// @docsMissing\nexport async function shareContactAsync(\n  contactId: string,\n  message: string,\n  shareOptions: ShareOptions = {}\n): Promise<any> {\n  if (Platform.OS === 'ios') {\n    const url = await writeContactToFileAsync({\n      id: contactId,\n    });\n    return await Share.share(\n      {\n        url,\n        message,\n      },\n      shareOptions\n    );\n  } else if (!ExpoContacts.shareContactAsync) {\n    throw new UnavailabilityError('Contacts', 'shareContactAsync');\n  }\n  return await ExpoContacts.shareContactAsync(contactId, message);\n}\n\n/**\n * Return a list of contacts that fit a given criteria. You can get all of the contacts by passing no criteria.\n * @param contactQuery Object used to query contacts.\n * @return A promise that fulfills with `ContactResponse` object returned from the query.\n * @example\n * ```js\n * const { data } = await Contacts.getContactsAsync({\n *   fields: [Contacts.Fields.Emails],\n * });\n *\n * if (data.length > 0) {\n *   const contact = data[0];\n *   console.log(contact);\n * }\n * ```\n */\nexport async function getContactsAsync(contactQuery: ContactQuery = {}): Promise<ContactResponse> {\n  if (!ExpoContacts.getContactsAsync) {\n    throw new UnavailabilityError('Contacts', 'getContactsAsync');\n  }\n  return await ExpoContacts.getContactsAsync(contactQuery);\n}\n\nexport async function getPagedContactsAsync(\n  contactQuery: ContactQuery = {}\n): Promise<ContactResponse> {\n  const { pageSize, ...nOptions } = contactQuery;\n\n  if (pageSize && pageSize <= 0) {\n    throw new Error('Error: Contacts.getPagedContactsAsync: `pageSize` must be greater than 0');\n  }\n\n  return await getContactsAsync({\n    ...nOptions,\n    pageSize,\n  });\n}\n\n/**\n * Used for gathering precise data about a contact. Returns a contact matching the given `id`.\n * @param id The ID of a system contact.\n * @param fields If specified, the fields defined will be returned. When skipped, all fields will be returned.\n * @return A promise that fulfills with `Contact` object with ID matching the input ID, or `undefined` if there is no match.\n * @example\n * ```js\n * const contact = await Contacts.getContactByIdAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');\n * if (contact) {\n *   console.log(contact);\n * }\n * ```\n */\nexport async function getContactByIdAsync(\n  id: string,\n  fields?: FieldType[]\n): Promise<Contact | undefined> {\n  if (!ExpoContacts.getContactsAsync) {\n    throw new UnavailabilityError('Contacts', 'getContactsAsync');\n  }\n\n  if (id == null) {\n    throw new Error('Error: Contacts.getContactByIdAsync: id is required');\n  } else {\n    const results = await ExpoContacts.getContactsAsync({\n      pageSize: 1,\n      pageOffset: 0,\n      fields,\n      id,\n    });\n    if (results && results.data && results.data.length > 0) {\n      return results.data[0];\n    }\n  }\n  return undefined;\n}\n\n/**\n * Creates a new contact and adds it to the system.\n * > **Note**: For Android users, the Expo Go app does not have the required `WRITE_CONTACTS` permission to write to Contacts.\n * > You will need to create a [development build](/develop/development-builds/create-a-build/) and add permission in there manually to use this method.\n * @param contact A contact with the changes you wish to persist. The `id` parameter will not be used.\n * @param containerId @tag-ios The container that will parent the contact.\n * @return A promise that fulfills with ID of the new system contact.\n * @example\n * ```js\n * const contact = {\n *   [Contacts.Fields.FirstName]: 'Bird',\n *   [Contacts.Fields.LastName]: 'Man',\n *   [Contacts.Fields.Company]: 'Young Money',\n * };\n * const contactId = await Contacts.addContactAsync(contact);\n * ```\n */\nexport async function addContactAsync(contact: Contact, containerId?: string): Promise<string> {\n  if (!ExpoContacts.addContactAsync) {\n    throw new UnavailabilityError('Contacts', 'addContactAsync');\n  }\n\n  const noIdContact = removeIds(contact);\n  return await ExpoContacts.addContactAsync(noIdContact, containerId);\n}\n\n/**\n * Mutate the information of an existing contact. Due to an iOS bug, `nonGregorianBirthday` field cannot be modified.\n * @param contact A contact object including the wanted changes. Contact `id` is required.\n * @return A promise that fulfills with ID of the updated system contact if mutation was successful.\n * @example\n * ```js\n * const contact = {\n *   id: '161A368D-D614-4A15-8DC6-665FDBCFAE55',\n *   [Contacts.Fields.FirstName]: 'Drake',\n *   [Contacts.Fields.Company]: 'Young Money',\n * };\n * await Contacts.updateContactAsync(contact);\n * ```\n */\nexport async function updateContactAsync(\n  contact: { id: string } & Partial<Omit<Contact, 'id'>>\n): Promise<string> {\n  if (!ExpoContacts.updateContactAsync) {\n    throw new UnavailabilityError('Contacts', 'updateContactAsync');\n  }\n  return await ExpoContacts.updateContactAsync(contact);\n}\n\n// @needs-audit\n/**\n * Delete a contact from the system.\n * @param contactId ID of the contact you want to delete.\n * @example\n * ```js\n * await Contacts.removeContactAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');\n * ```\n * @platform ios\n */\nexport async function removeContactAsync(contactId: string): Promise<any> {\n  if (!ExpoContacts.removeContactAsync) {\n    throw new UnavailabilityError('Contacts', 'removeContactAsync');\n  }\n  return await ExpoContacts.removeContactAsync(contactId);\n}\n\n/**\n * Query a set of contacts and write them to a local URI that can be used for sharing.\n * @param contactQuery Used to query contact you want to write.\n * @return A promise that fulfills with shareable local URI, or `undefined` if there was no match.\n * @example\n * ```js\n * const localUri = await Contacts.writeContactToFileAsync({\n *   id: '161A368D-D614-4A15-8DC6-665FDBCFAE55',\n * });\n * Share.share({ url: localUri, message: 'Call me!' });\n * ```\n */\nexport async function writeContactToFileAsync(\n  contactQuery: ContactQuery = {}\n): Promise<string | undefined> {\n  if (!ExpoContacts.writeContactToFileAsync) {\n    throw new UnavailabilityError('Contacts', 'writeContactToFileAsync');\n  }\n  return await ExpoContacts.writeContactToFileAsync(contactQuery);\n}\n\n// @needs-audit\n/**\n * Present a native form for manipulating contacts.\n * @param contactId The ID of a system contact.\n * @param contact A contact with the changes you want to persist.\n * @param formOptions Options for the native editor.\n * @example\n * ```js\n * await Contacts.presentFormAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');\n * ```\n */\nexport async function presentFormAsync(\n  contactId?: string | null,\n  contact?: Contact | null,\n  formOptions: FormOptions = {}\n): Promise<any> {\n  if (!ExpoContacts.presentFormAsync) {\n    throw new UnavailabilityError('Contacts', 'presentFormAsync');\n  }\n  if (Platform.OS === 'ios') {\n    const adjustedOptions = formOptions;\n\n    if (contactId) {\n      if (contact) {\n        contact = undefined;\n        console.log(\n          'Expo.Contacts.presentFormAsync: You should define either a `contact` or a `contactId` but not both.'\n        );\n      }\n      if (adjustedOptions.isNew !== undefined) {\n        console.log(\n          'Expo.Contacts.presentFormAsync: `formOptions.isNew` is not supported with `contactId`'\n        );\n      }\n    }\n    return await ExpoContacts.presentFormAsync(contactId, contact, adjustedOptions);\n  } else {\n    return await ExpoContacts.presentFormAsync(contactId, contact, formOptions);\n  }\n}\n\n// iOS Only\n\n/**\n * Add a group to a container.\n * @param groupId The group you want to target.\n * @param containerId The container you want to add membership to.\n * @example\n * ```js\n * await Contacts.addExistingGroupToContainerAsync(\n *   '161A368D-D614-4A15-8DC6-665FDBCFAE55',\n *   '665FDBCFAE55-D614-4A15-8DC6-161A368D'\n * );\n * ```\n * @platform ios\n */\nexport async function addExistingGroupToContainerAsync(\n  groupId: string,\n  containerId: string\n): Promise<any> {\n  if (!ExpoContacts.addExistingGroupToContainerAsync) {\n    throw new UnavailabilityError('Contacts', 'addExistingGroupToContainerAsync');\n  }\n\n  return await ExpoContacts.addExistingGroupToContainerAsync(groupId, containerId);\n}\n\n/**\n * Create a group with a name, and add it to a container. If the container is `undefined`, the default container will be targeted.\n * @param name Name of the new group.\n * @param containerId The container you to add membership to.\n * @return A promise that fulfills with ID of the new group.\n * @example\n * ```js\n * const groupId = await Contacts.createGroupAsync('Sailor Moon');\n * ```\n * @platform ios\n */\nexport async function createGroupAsync(name?: string, containerId?: string): Promise<string> {\n  if (!ExpoContacts.createGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'createGroupAsync');\n  }\n\n  name = name || uuid.v4();\n  if (!containerId) {\n    containerId = await getDefaultContainerIdAsync();\n  }\n\n  return await ExpoContacts.createGroupAsync(name, containerId);\n}\n\n/**\n * Change the name of an existing group.\n * @param groupName New name for an existing group.\n * @param groupId ID of the group you want to edit.\n * @example\n * ```js\n * await Contacts.updateGroupName('Expo Friends', '161A368D-D614-4A15-8DC6-665FDBCFAE55');\n * ```\n * @platform ios\n */\nexport async function updateGroupNameAsync(groupName: string, groupId: string): Promise<any> {\n  if (!ExpoContacts.updateGroupNameAsync) {\n    throw new UnavailabilityError('Contacts', 'updateGroupNameAsync');\n  }\n\n  return await ExpoContacts.updateGroupNameAsync(groupName, groupId);\n}\n\n// @needs-audit\n/**\n * Delete a group from the device.\n * @param groupId ID of the group you want to remove.\n * @example\n * ```js\n * await Contacts.removeGroupAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');\n * ```\n * @platform ios\n */\nexport async function removeGroupAsync(groupId: string): Promise<any> {\n  if (!ExpoContacts.removeGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'removeGroupAsync');\n  }\n\n  return await ExpoContacts.removeGroupAsync(groupId);\n}\n\n// @needs-audit\n/**\n * Add a contact as a member to a group. A contact can be a member of multiple groups.\n * @param contactId ID of the contact you want to edit.\n * @param groupId ID for the group you want to add membership to.\n * @example\n * ```js\n * await Contacts.addExistingContactToGroupAsync(\n *   '665FDBCFAE55-D614-4A15-8DC6-161A368D',\n *   '161A368D-D614-4A15-8DC6-665FDBCFAE55'\n * );\n * ```\n * @platform ios\n */\nexport async function addExistingContactToGroupAsync(\n  contactId: string,\n  groupId: string\n): Promise<any> {\n  if (!ExpoContacts.addExistingContactToGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'addExistingContactToGroupAsync');\n  }\n\n  return await ExpoContacts.addExistingContactToGroupAsync(contactId, groupId);\n}\n\n// @needs-audit\n/**\n * Remove a contact's membership from a given group. This will not delete the contact.\n * @param contactId ID of the contact you want to remove.\n * @param groupId ID for the group you want to remove membership of.\n * @example\n * ```js\n * await Contacts.removeContactFromGroupAsync(\n *   '665FDBCFAE55-D614-4A15-8DC6-161A368D',\n *   '161A368D-D614-4A15-8DC6-665FDBCFAE55'\n * );\n * ```\n * @platform ios\n */\nexport async function removeContactFromGroupAsync(\n  contactId: string,\n  groupId: string\n): Promise<any> {\n  if (!ExpoContacts.removeContactFromGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'removeContactFromGroupAsync');\n  }\n\n  return await ExpoContacts.removeContactFromGroupAsync(contactId, groupId);\n}\n\n// @needs-audit\n/**\n * Query and return a list of system groups.\n * @param groupQuery Information regarding which groups you want to get.\n * @example\n * ```js\n * const groups = await Contacts.getGroupsAsync({ groupName: 'sailor moon' });\n * const allGroups = await Contacts.getGroupsAsync({});\n * ```\n * @return A promise that fulfills with array of groups that fit the query.\n * @platform ios\n */\nexport async function getGroupsAsync(groupQuery: GroupQuery): Promise<Group[]> {\n  if (!ExpoContacts.getGroupsAsync) {\n    throw new UnavailabilityError('Contacts', 'getGroupsAsync');\n  }\n\n  return await ExpoContacts.getGroupsAsync(groupQuery);\n}\n\n/**\n * Presents a native contact picker to select a single contact from the system. On Android, the `READ_CONTACTS` permission is required. You can\n * obtain this permission by calling the [`Contacts.requestPermissionsAsync()`](#contactsrequestpermissionsasync) method. On iOS, no permissions are\n * required to use this method.\n * @return A promise that fulfills with a single `Contact` object if a contact is selected or `null` if no contact is selected (when selection is canceled).\n */\nexport async function presentContactPickerAsync(): Promise<Contact | null> {\n  if (!ExpoContacts.presentContactPickerAsync) {\n    throw new UnavailabilityError('Contacts', 'presentContactPickerAsync');\n  }\n  return await ExpoContacts.presentContactPickerAsync();\n}\n\n/**\n * Get the default container's ID.\n * @return A promise that fulfills with default container ID.\n * @example\n * ```js\n * const containerId = await Contacts.getDefaultContainerIdAsync();\n * ```\n * @platform ios\n */\nexport async function getDefaultContainerIdAsync(): Promise<string> {\n  if (!ExpoContacts.getDefaultContainerIdentifierAsync) {\n    throw new UnavailabilityError('Contacts', 'getDefaultContainerIdentifierAsync');\n  }\n\n  return await ExpoContacts.getDefaultContainerIdentifierAsync();\n}\n\n/**\n * Query a list of system containers.\n * @param containerQuery Information used to gather containers.\n * @return A promise that fulfills with array of containers that fit the query.\n * @example\n * ```js\n * const allContainers = await Contacts.getContainersAsync({\n *   contactId: '665FDBCFAE55-D614-4A15-8DC6-161A368D',\n * });\n * ```\n * @platform ios\n */\nexport async function getContainersAsync(containerQuery: ContainerQuery): Promise<Container[]> {\n  if (!ExpoContacts.getContainersAsync) {\n    throw new UnavailabilityError('Contacts', 'getContainersAsync');\n  }\n\n  return await ExpoContacts.getContainersAsync(containerQuery);\n}\n\n/**\n * Checks user's permissions for accessing contacts data.\n * @return A promise that resolves to a [ContactsPermissionResponse](#contactspermissionresponse) object.\n */\nexport async function getPermissionsAsync(): Promise<ContactsPermissionResponse> {\n  if (!ExpoContacts.getPermissionsAsync) {\n    throw new UnavailabilityError('Contacts', 'getPermissionsAsync');\n  }\n\n  return await ExpoContacts.getPermissionsAsync();\n}\n\n/**\n * Asks the user to grant permissions for accessing contacts data.\n * @return A promise that resolves to a [ContactsPermissionResponse](#contactspermissionresponse) object.\n */\nexport async function requestPermissionsAsync(): Promise<ContactsPermissionResponse> {\n  if (!ExpoContacts.requestPermissionsAsync) {\n    throw new UnavailabilityError('Contacts', 'requestPermissionsAsync');\n  }\n\n  return await ExpoContacts.requestPermissionsAsync();\n}\n\n/**\n * Presents a modal which allows the user to select which contacts the app has access to.\n * Using this function is reasonable only when the app has \"limited\" permissions.\n * @return A promise that resolves with an array of contact identifiers that were newly granted to the app.\n * Contacts which the app lost access to are not listed. On platforms other than iOS and below 18.0, the promise rejects immediately.\n * @platform ios 18.0+\n */\nexport async function presentAccessPickerAsync(): Promise<string[]> {\n  return await ExpoContacts.presentAccessPickerAsync();\n}\n\n/** @private */\nfunction removeIds(contact: Contact): Contact {\n  const updatedContact = { ...contact };\n  if (contact.id && __DEV__) {\n    console.warn(\n      `You have set an id = ${contact.id} for the contact. This value will be ignored, because the id will be generated by the OS`\n    );\n    delete updatedContact.id;\n  }\n\n  for (const key of Object.keys(contact)) {\n    const prop = key as keyof Contact;\n    const value = contact[prop];\n    if (Array.isArray(value)) {\n      (updatedContact as any)[prop] = value.map((item, index) => {\n        if (typeof item === 'object' && item != null && 'id' in item) {\n          __DEV__ &&\n            console.warn(\n              `You have set an id \"${item.id}\" at index \"${index}\" for the key \"${key}\" of the contact. This value will be ignored, because the id will be generated by the OS`\n            );\n          return { ...item, id: null };\n        }\n        return item;\n      });\n    }\n  }\n  return updatedContact;\n}\n\n/**\n * Possible fields to retrieve for a contact.\n */\nexport enum Fields {\n  ID = 'id',\n  ContactType = 'contactType',\n  Name = 'name',\n  FirstName = 'firstName',\n  MiddleName = 'middleName',\n  LastName = 'lastName',\n  MaidenName = 'maidenName',\n  NamePrefix = 'namePrefix',\n  NameSuffix = 'nameSuffix',\n  Nickname = 'nickname',\n  PhoneticFirstName = 'phoneticFirstName',\n  PhoneticMiddleName = 'phoneticMiddleName',\n  PhoneticLastName = 'phoneticLastName',\n  Birthday = 'birthday',\n  /**\n   * @platform ios\n   */\n  NonGregorianBirthday = 'nonGregorianBirthday',\n  Emails = 'emails',\n  PhoneNumbers = 'phoneNumbers',\n  Addresses = 'addresses',\n  /**\n   * @platform ios\n   */\n  SocialProfiles = 'socialProfiles',\n  InstantMessageAddresses = 'instantMessageAddresses',\n  UrlAddresses = 'urlAddresses',\n  Company = 'company',\n  JobTitle = 'jobTitle',\n  Department = 'department',\n  ImageAvailable = 'imageAvailable',\n  Image = 'image',\n  RawImage = 'rawImage',\n  ExtraNames = 'extraNames',\n  Note = 'note',\n  Dates = 'dates',\n  Relationships = 'relationships',\n  /**\n   * @platform android\n   */\n  IsFavorite = 'isFavorite',\n}\n\n/**\n * This format denotes the common calendar format used to specify how a date is calculated in `nonGregorianBirthday` fields.\n */\nexport enum CalendarFormats {\n  Gregorian = 'gregorian',\n  /**\n   * @platform ios\n   */\n  Buddhist = 'buddhist',\n  /**\n   * @platform ios\n   */\n  Chinese = 'chinese',\n  /**\n   * @platform ios\n   */\n  Coptic = 'coptic',\n  /**\n   * @platform ios\n   */\n  EthiopicAmeteMihret = 'ethiopicAmeteMihret',\n  /**\n   * @platform ios\n   */\n  EthiopicAmeteAlem = 'ethiopicAmeteAlem',\n  /**\n   * @platform ios\n   */\n  Hebrew = 'hebrew',\n  /**\n   * @platform ios\n   */\n  ISO8601 = 'iso8601',\n  /**\n   * @platform ios\n   */\n  Indian = 'indian',\n  /**\n   * @platform ios\n   */\n  Islamic = 'islamic',\n  /**\n   * @platform ios\n   */\n  IslamicCivil = 'islamicCivil',\n  /**\n   * @platform ios\n   */\n  Japanese = 'japanese',\n  /**\n   * @platform ios\n   */\n  Persian = 'persian',\n  /**\n   * @platform ios\n   */\n  RepublicOfChina = 'republicOfChina',\n  /**\n   * @platform ios\n   */\n  IslamicTabular = 'islamicTabular',\n  /**\n   * @platform ios\n   */\n  IslamicUmmAlQura = 'islamicUmmAlQura',\n}\n\n/**\n * @platform ios\n */\nexport enum ContainerTypes {\n  /**\n   * A local non-iCloud container.\n   */\n  Local = 'local',\n  /**\n   * In association with email server.\n   */\n  Exchange = 'exchange',\n  /**\n   * With cardDAV protocol used for sharing.\n   */\n  CardDAV = 'cardDAV',\n  /**\n   * Unknown container.\n   */\n  Unassigned = 'unassigned',\n}\n\nexport enum SortTypes {\n  /**\n   * The user default method of sorting.\n   * @platform android\n   */\n  UserDefault = 'userDefault',\n  /**\n   * Sort by first name in ascending order.\n   */\n  FirstName = 'firstName',\n  /**\n   * Sort by last name in ascending order.\n   */\n  LastName = 'lastName',\n  /**\n   * No sorting should be applied.\n   */\n  None = 'none',\n}\n\nexport enum ContactTypes {\n  /**\n   * Contact is a human.\n   */\n  Person = 'person',\n  /**\n   * Contact is group or company.\n   */\n  Company = 'company',\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}