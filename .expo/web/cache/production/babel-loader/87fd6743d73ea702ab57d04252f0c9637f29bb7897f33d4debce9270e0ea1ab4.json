{"ast":null,"code":"import{NativeModule,registerWebModule}from'expo-modules-core';import ImageRefWeb from'./web/ImageRef';class ImageModule extends NativeModule{Image=ImageRefWeb;async prefetch(urls,_,__){const urlsArray=Array.isArray(urls)?urls:[urls];return new Promise(resolve=>{let imagesLoaded=0;urlsArray.forEach(url=>{const img=new Image();img.src=url;img.onload=()=>{imagesLoaded++;if(imagesLoaded===urlsArray.length){resolve(true);}};img.onerror=()=>resolve(false);});});}async clearMemoryCache(){return false;}async clearDiskCache(){return false;}async loadAsync(source){if(!source.uri){throw new Error('The image source must have the \"uri\" property defined');}const response=await fetch(source.uri,{headers:source.headers});if(!response.ok){throw new Error(`Image request failed with the status code: ${response.status}`);}const blob=await response.blob();const imageObjectUrl=URL.createObjectURL(blob);const image=await loadImageElementAsync(imageObjectUrl);return ImageRefWeb.init(imageObjectUrl,image.width,image.height,response.headers.get('Content-Type'));}}async function loadImageElementAsync(src){return new Promise((resolve,reject)=>{const image=document.createElement('img');image.onload=()=>resolve(image);image.onerror=()=>reject(new Error(`Unable to load the image from '${src}'`));image.src=src;});}export default registerWebModule(ImageModule,'ExpoImage');","map":{"version":3,"names":["NativeModule","registerWebModule","ImageRefWeb","ImageModule","Image","prefetch","urls","_","__","urlsArray","Array","isArray","Promise","resolve","imagesLoaded","forEach","url","img","src","onload","length","onerror","clearMemoryCache","clearDiskCache","loadAsync","source","uri","Error","response","fetch","headers","ok","status","blob","imageObjectUrl","URL","createObjectURL","image","loadImageElementAsync","init","width","height","get","reject","document","createElement"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-image/src/ImageModule.web.ts"],"sourcesContent":["import { NativeModule, registerWebModule } from 'expo-modules-core';\n\nimport type { ImageNativeModule, ImageRef, ImageSource } from './Image.types';\nimport ImageRefWeb from './web/ImageRef';\n\nclass ImageModule extends NativeModule implements ImageNativeModule {\n  Image: typeof ImageRef = ImageRefWeb;\n\n  async prefetch(urls: string | string[], _: unknown, __: unknown): Promise<boolean> {\n    const urlsArray = Array.isArray(urls) ? urls : [urls];\n\n    return new Promise<boolean>((resolve) => {\n      let imagesLoaded = 0;\n\n      urlsArray.forEach((url) => {\n        const img = new Image();\n        img.src = url;\n        img.onload = () => {\n          imagesLoaded++;\n\n          if (imagesLoaded === urlsArray.length) {\n            resolve(true);\n          }\n        };\n        img.onerror = () => resolve(false);\n      });\n    });\n  }\n\n  async clearMemoryCache(): Promise<boolean> {\n    return false;\n  }\n\n  async clearDiskCache(): Promise<boolean> {\n    return false;\n  }\n\n  async loadAsync(source: ImageSource): Promise<ImageRef> {\n    if (!source.uri) {\n      // TODO: Add support for sources without the uri, e.g. blurhash and thumbhash.\n      throw new Error('The image source must have the \"uri\" property defined');\n    }\n    const response = await fetch(source.uri, {\n      headers: source.headers,\n    });\n\n    if (!response.ok) {\n      throw new Error(`Image request failed with the status code: ${response.status}`);\n    }\n    const blob = await response.blob();\n    const imageObjectUrl = URL.createObjectURL(blob);\n    const image = await loadImageElementAsync(imageObjectUrl);\n\n    return ImageRefWeb.init(\n      imageObjectUrl,\n      image.width,\n      image.height,\n      response.headers.get('Content-Type')\n    );\n  }\n}\n\n/**\n * Helper that resolves to an `<img />` element once it finishes loading the given source.\n */\nasync function loadImageElementAsync(src: string): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const image = document.createElement('img');\n\n    image.onload = () => resolve(image);\n    image.onerror = () => reject(new Error(`Unable to load the image from '${src}'`));\n    image.src = src;\n  });\n}\n\nexport default registerWebModule(ImageModule, 'ExpoImage');\n"],"mappings":"AAAA,OAASA,YAAY,CAAEC,iBAAiB,KAAQ,mBAAmB,CAGnE,MAAO,CAAAC,WAAW,KAAM,gBAAgB,CAExC,KAAM,CAAAC,WAAW,QAAS,CAAAH,YAA0C,CAClEI,KAAK,CAAoBF,WAAW,CAEpC,KAAM,CAAAG,QAAQA,CAACC,IAAuB,CAAEC,CAAU,CAAEC,EAAW,CAAoB,CACjF,KAAM,CAAAC,SAAS,CAAGC,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,CAAGA,IAAI,CAAG,CAACA,IAAI,CAAC,CAErD,MAAO,IAAI,CAAAM,OAAO,CAAWC,OAAO,EAAK,CACvC,GAAI,CAAAC,YAAY,CAAG,CAAC,CAEpBL,SAAS,CAACM,OAAO,CAAEC,GAAG,EAAK,CACzB,KAAM,CAAAC,GAAG,CAAG,GAAI,CAAAb,KAAK,CAAC,CAAC,CACvBa,GAAG,CAACC,GAAG,CAAGF,GAAG,CACbC,GAAG,CAACE,MAAM,CAAG,IAAM,CACjBL,YAAY,EAAE,CAEd,GAAIA,YAAY,GAAKL,SAAS,CAACW,MAAM,CAAE,CACrCP,OAAO,CAAC,IAAI,CAAC,CACf,CACF,CAAC,CACDI,GAAG,CAACI,OAAO,CAAG,IAAMR,OAAO,CAAC,KAAK,CAAC,CACpC,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CAEA,KAAM,CAAAS,gBAAgBA,CAAA,CAAqB,CACzC,MAAO,MAAK,CACd,CAEA,KAAM,CAAAC,cAAcA,CAAA,CAAqB,CACvC,MAAO,MAAK,CACd,CAEA,KAAM,CAAAC,SAASA,CAACC,MAAmB,CAAqB,CACtD,GAAI,CAACA,MAAM,CAACC,GAAG,CAAE,CAEf,KAAM,IAAI,CAAAC,KAAK,CAAC,uDAAuD,CAAC,CAC1E,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACJ,MAAM,CAACC,GAAG,CAAE,CACvCI,OAAO,CAAEL,MAAM,CAACK,OAClB,CAAC,CAAC,CAEF,GAAI,CAACF,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAJ,KAAK,CAAC,8CAA8CC,QAAQ,CAACI,MAAM,EAAE,CAAC,CAClF,CACA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAL,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClC,KAAM,CAAAC,cAAc,CAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC,CAChD,KAAM,CAAAI,KAAK,CAAG,KAAM,CAAAC,qBAAqB,CAACJ,cAAc,CAAC,CAEzD,MAAO,CAAAhC,WAAW,CAACqC,IAAI,CACrBL,cAAc,CACdG,KAAK,CAACG,KAAK,CACXH,KAAK,CAACI,MAAM,CACZb,QAAQ,CAACE,OAAO,CAACY,GAAG,CAAC,cAAc,CACrC,CAAC,CACH,CACF,CAKA,cAAe,CAAAJ,qBAAqBA,CAACpB,GAAW,CAA6B,CAC3E,MAAO,IAAI,CAAAN,OAAO,CAAC,CAACC,OAAO,CAAE8B,MAAM,GAAK,CACtC,KAAM,CAAAN,KAAK,CAAGO,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,CAE3CR,KAAK,CAAClB,MAAM,CAAG,IAAMN,OAAO,CAACwB,KAAK,CAAC,CACnCA,KAAK,CAAChB,OAAO,CAAG,IAAMsB,MAAM,CAAC,GAAI,CAAAhB,KAAK,CAAC,kCAAkCT,GAAG,GAAG,CAAC,CAAC,CACjFmB,KAAK,CAACnB,GAAG,CAAGA,GAAG,CACjB,CAAC,CAAC,CACJ,CAEA,cAAe,CAAAjB,iBAAiB,CAACE,WAAW,CAAE,WAAW,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}