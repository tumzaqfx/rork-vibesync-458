{"ast":null,"code":"import{useState,useEffect,useCallback,useMemo,useRef}from'react';import AsyncStorage from'@react-native-async-storage/async-storage';import createContextHook from'@nkzw/create-context-hook';import{useAuth}from'./auth-store';import{mockPosts}from'@/mocks/posts';import{mockUsers}from'@/mocks/users';const STORAGE_KEY='feed_data';const AUTO_REFRESH_INTERVAL=150000;const DAILY_RESET_INTERVAL=86400000;export const[FeedProvider,useFeed]=createContextHook(()=>{const{user}=useAuth();const[state,setState]=useState({posts:mockPosts,lastRefresh:new Date().toISOString(),newPostsCount:0,hasNewPosts:false});const[isRefreshing,setIsRefreshing]=useState(false);const[pendingPosts,setPendingPosts]=useState([]);const autoRefreshTimerRef=useRef(null);const dailyResetTimerRef=useRef(null);useEffect(()=>{const loadFeedData=async()=>{try{const data=await AsyncStorage.getItem(STORAGE_KEY);if(data){const parsed=JSON.parse(data);setState(parsed);}}catch(error){console.error('Error loading feed data:',error);}};loadFeedData();},[]);const saveFeedData=useCallback(async newState=>{try{await AsyncStorage.setItem(STORAGE_KEY,JSON.stringify(newState));setState(newState);}catch(error){console.error('Error saving feed data:',error);}},[]);const generateNewPosts=useCallback(()=>{const newPosts=[];const numNewPosts=Math.floor(Math.random()*5)+1;for(let i=0;i<numNewPosts;i++){const randomUser=mockUsers[Math.floor(Math.random()*mockUsers.length)];const isHighEngagement=Math.random()>0.7;const newPost={id:`post_${Date.now()}_${i}`,userId:randomUser.id,username:randomUser.username,userDisplayName:randomUser.displayName,profileImage:randomUser.profileImage,isVerified:randomUser.isVerified,content:`New vibe from ${randomUser.displayName}! ðŸŽµâœ¨ #vibesync #music`,likes:isHighEngagement?Math.floor(Math.random()*500)+100:Math.floor(Math.random()*50),comments:isHighEngagement?Math.floor(Math.random()*50)+10:Math.floor(Math.random()*10),shares:isHighEngagement?Math.floor(Math.random()*30)+5:Math.floor(Math.random()*5),views:isHighEngagement?Math.floor(Math.random()*5000)+1000:Math.floor(Math.random()*500),timestamp:'Just now',engagement:0,author:{id:randomUser.id,username:randomUser.username,displayName:randomUser.displayName,profileImage:randomUser.profileImage,isVerified:randomUser.isVerified}};newPost.engagement=newPost.likes+newPost.comments+newPost.shares;newPosts.push(newPost);}return newPosts;},[]);const checkForNewPosts=useCallback(async()=>{console.log('ðŸ”„ Auto-checking for new posts...');const newPosts=generateNewPosts();const priorityPosts=newPosts.filter(post=>{const postUser=mockUsers.find(u=>u.id===post.userId);return postUser?.isVerified||post.engagement>100;});if(priorityPosts.length>0){console.log(`âœ¨ Found ${priorityPosts.length} priority posts`);setPendingPosts(prev=>[...priorityPosts,...prev]);setState(prev=>Object.assign({},prev,{newPostsCount:prev.newPostsCount+priorityPosts.length,hasNewPosts:true}));}else if(newPosts.length>0){console.log(`ðŸ“¬ Found ${newPosts.length} new posts`);setPendingPosts(prev=>[...newPosts,...prev]);setState(prev=>Object.assign({},prev,{newPostsCount:prev.newPostsCount+newPosts.length,hasNewPosts:true}));}},[generateNewPosts]);const applyHybridSorting=useCallback(posts=>{const userPostCounts=new Map();const scoredPosts=posts.map(post=>{const timeScore=post.timestamp==='Just now'?1000:post.timestamp.includes('m')?500:post.timestamp.includes('h')?200:post.timestamp.includes('d')?50:10;const engagementScore=post.engagement||0;const verifiedBoost=post.isVerified?100:0;const vibeBoost=post.timestamp==='Just now'&&engagementScore>50?200:0;const totalScore=timeScore+engagementScore*0.5+verifiedBoost+vibeBoost;return{post,score:totalScore};});scoredPosts.sort((a,b)=>b.score-a.score);const diversifiedPosts=[];for(const{post}of scoredPosts){const userCount=userPostCounts.get(post.userId)||0;if(userCount<2){diversifiedPosts.push(post);userPostCounts.set(post.userId,userCount+1);}else{diversifiedPosts.push(post);}}return diversifiedPosts;},[]);const refreshFeed=useCallback(async(showLoading=true)=>{if(showLoading){setIsRefreshing(true);}console.log('ðŸ”„ Refreshing feed...');await new Promise(resolve=>setTimeout(resolve,800));const newPosts=generateNewPosts();const allPosts=[...newPosts,...pendingPosts,...state.posts];const sortedPosts=applyHybridSorting(allPosts);const newState={posts:sortedPosts,lastRefresh:new Date().toISOString(),newPostsCount:0,hasNewPosts:false};await saveFeedData(newState);setPendingPosts([]);if(showLoading){setIsRefreshing(false);}console.log('âœ… Feed refreshed successfully');},[state.posts,pendingPosts,generateNewPosts,applyHybridSorting,saveFeedData]);const loadNewPosts=useCallback(async()=>{console.log(`ðŸ“¥ Loading ${pendingPosts.length} new posts...`);const allPosts=[...pendingPosts,...state.posts];const sortedPosts=applyHybridSorting(allPosts);const newState={posts:sortedPosts,lastRefresh:new Date().toISOString(),newPostsCount:0,hasNewPosts:false};await saveFeedData(newState);setPendingPosts([]);},[pendingPosts,state.posts,applyHybridSorting,saveFeedData]);const performDailyReset=useCallback(async()=>{console.log('ðŸŒ… Performing daily feed reset...');const freshPosts=generateNewPosts();const sortedPosts=applyHybridSorting([...freshPosts,...mockPosts]);const newState={posts:sortedPosts,lastRefresh:new Date().toISOString(),newPostsCount:0,hasNewPosts:false};await saveFeedData(newState);setPendingPosts([]);},[generateNewPosts,applyHybridSorting,saveFeedData]);useEffect(()=>{autoRefreshTimerRef.current=setInterval(()=>{checkForNewPosts();},AUTO_REFRESH_INTERVAL);dailyResetTimerRef.current=setInterval(()=>{performDailyReset();},DAILY_RESET_INTERVAL);return()=>{if(autoRefreshTimerRef.current){clearInterval(autoRefreshTimerRef.current);}if(dailyResetTimerRef.current){clearInterval(dailyResetTimerRef.current);}};},[checkForNewPosts,performDailyReset]);const addPost=useCallback(async(content,attachments)=>{if(!user)return;const newPost={id:`post_${Date.now()}`,userId:user.id,username:user.username,userDisplayName:user.displayName,profileImage:user.profileImage,isVerified:user.isVerified||false,content,likes:0,comments:0,shares:0,views:0,timestamp:'Just now',engagement:0,author:{id:user.id,username:user.username,displayName:user.displayName,profileImage:user.profileImage,isVerified:user.isVerified||false}};const updatedPosts=[newPost,...state.posts];const sortedPosts=applyHybridSorting(updatedPosts);await saveFeedData(Object.assign({},state,{posts:sortedPosts,lastRefresh:new Date().toISOString()}));},[user,state,applyHybridSorting,saveFeedData]);return useMemo(()=>({posts:state.posts,lastRefresh:state.lastRefresh,newPostsCount:state.newPostsCount,hasNewPosts:state.hasNewPosts,isRefreshing,refreshFeed,loadNewPosts,addPost}),[state.posts,state.lastRefresh,state.newPostsCount,state.hasNewPosts,isRefreshing,refreshFeed,loadNewPosts,addPost]);});","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","useRef","AsyncStorage","createContextHook","useAuth","mockPosts","mockUsers","STORAGE_KEY","AUTO_REFRESH_INTERVAL","DAILY_RESET_INTERVAL","FeedProvider","useFeed","user","state","setState","posts","lastRefresh","Date","toISOString","newPostsCount","hasNewPosts","isRefreshing","setIsRefreshing","pendingPosts","setPendingPosts","autoRefreshTimerRef","dailyResetTimerRef","loadFeedData","data","getItem","parsed","JSON","parse","error","console","saveFeedData","newState","setItem","stringify","generateNewPosts","newPosts","numNewPosts","Math","floor","random","i","randomUser","length","isHighEngagement","newPost","id","now","userId","username","userDisplayName","displayName","profileImage","isVerified","content","likes","comments","shares","views","timestamp","engagement","author","push","checkForNewPosts","log","priorityPosts","filter","post","postUser","find","u","prev","Object","assign","applyHybridSorting","userPostCounts","Map","scoredPosts","map","timeScore","includes","engagementScore","verifiedBoost","vibeBoost","totalScore","score","sort","a","b","diversifiedPosts","userCount","get","set","refreshFeed","showLoading","Promise","resolve","setTimeout","allPosts","sortedPosts","loadNewPosts","performDailyReset","freshPosts","current","setInterval","clearInterval","addPost","attachments","updatedPosts"],"sources":["/home/user/rork-vibesync-458/hooks/feed-store.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport createContextHook from '@nkzw/create-context-hook';\nimport { useAuth } from './auth-store';\nimport { Post } from '@/types';\nimport { mockPosts } from '@/mocks/posts';\nimport { mockUsers } from '@/mocks/users';\n\ninterface FeedState {\n  posts: Post[];\n  lastRefresh: string;\n  newPostsCount: number;\n  hasNewPosts: boolean;\n}\n\nconst STORAGE_KEY = 'feed_data';\nconst AUTO_REFRESH_INTERVAL = 150000;\nconst DAILY_RESET_INTERVAL = 86400000;\n\nexport const [FeedProvider, useFeed] = createContextHook(() => {\n  const { user } = useAuth();\n  const [state, setState] = useState<FeedState>({\n    posts: mockPosts,\n    lastRefresh: new Date().toISOString(),\n    newPostsCount: 0,\n    hasNewPosts: false,\n  });\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [pendingPosts, setPendingPosts] = useState<Post[]>([]);\n  const autoRefreshTimerRef = useRef<ReturnType<typeof setInterval> | null>(null);\n  const dailyResetTimerRef = useRef<ReturnType<typeof setInterval> | null>(null);\n\n  useEffect(() => {\n    const loadFeedData = async () => {\n      try {\n        const data = await AsyncStorage.getItem(STORAGE_KEY);\n        if (data) {\n          const parsed = JSON.parse(data);\n          setState(parsed);\n        }\n      } catch (error) {\n        console.error('Error loading feed data:', error);\n      }\n    };\n    \n    loadFeedData();\n  }, []);\n\n  const saveFeedData = useCallback(async (newState: FeedState) => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(newState));\n      setState(newState);\n    } catch (error) {\n      console.error('Error saving feed data:', error);\n    }\n  }, []);\n\n  const generateNewPosts = useCallback((): Post[] => {\n    const newPosts: Post[] = [];\n    const numNewPosts = Math.floor(Math.random() * 5) + 1;\n\n    for (let i = 0; i < numNewPosts; i++) {\n      const randomUser = mockUsers[Math.floor(Math.random() * mockUsers.length)];\n      const isHighEngagement = Math.random() > 0.7;\n      \n      const newPost: Post = {\n        id: `post_${Date.now()}_${i}`,\n        userId: randomUser.id,\n        username: randomUser.username,\n        userDisplayName: randomUser.displayName,\n        profileImage: randomUser.profileImage,\n        isVerified: randomUser.isVerified,\n        content: `New vibe from ${randomUser.displayName}! ðŸŽµâœ¨ #vibesync #music`,\n        likes: isHighEngagement ? Math.floor(Math.random() * 500) + 100 : Math.floor(Math.random() * 50),\n        comments: isHighEngagement ? Math.floor(Math.random() * 50) + 10 : Math.floor(Math.random() * 10),\n        shares: isHighEngagement ? Math.floor(Math.random() * 30) + 5 : Math.floor(Math.random() * 5),\n        views: isHighEngagement ? Math.floor(Math.random() * 5000) + 1000 : Math.floor(Math.random() * 500),\n        timestamp: 'Just now',\n        engagement: 0,\n        author: {\n          id: randomUser.id,\n          username: randomUser.username,\n          displayName: randomUser.displayName,\n          profileImage: randomUser.profileImage,\n          isVerified: randomUser.isVerified,\n        },\n      };\n\n      newPost.engagement = newPost.likes + newPost.comments + newPost.shares;\n      newPosts.push(newPost);\n    }\n\n    return newPosts;\n  }, []);\n\n  const checkForNewPosts = useCallback(async () => {\n    console.log('ðŸ”„ Auto-checking for new posts...');\n    const newPosts = generateNewPosts();\n    \n    const priorityPosts = newPosts.filter(post => {\n      const postUser = mockUsers.find(u => u.id === post.userId);\n      return postUser?.isVerified || post.engagement > 100;\n    });\n\n    if (priorityPosts.length > 0) {\n      console.log(`âœ¨ Found ${priorityPosts.length} priority posts`);\n      setPendingPosts(prev => [...priorityPosts, ...prev]);\n      setState(prev => ({\n        ...prev,\n        newPostsCount: prev.newPostsCount + priorityPosts.length,\n        hasNewPosts: true,\n      }));\n    } else if (newPosts.length > 0) {\n      console.log(`ðŸ“¬ Found ${newPosts.length} new posts`);\n      setPendingPosts(prev => [...newPosts, ...prev]);\n      setState(prev => ({\n        ...prev,\n        newPostsCount: prev.newPostsCount + newPosts.length,\n        hasNewPosts: true,\n      }));\n    }\n  }, [generateNewPosts]);\n\n  const applyHybridSorting = useCallback((posts: Post[]): Post[] => {\n    const userPostCounts = new Map<string, number>();\n\n    const scoredPosts = posts.map(post => {\n      const timeScore = post.timestamp === 'Just now' ? 1000 : \n                       post.timestamp.includes('m') ? 500 :\n                       post.timestamp.includes('h') ? 200 :\n                       post.timestamp.includes('d') ? 50 : 10;\n      \n      const engagementScore = post.engagement || 0;\n      const verifiedBoost = post.isVerified ? 100 : 0;\n      const vibeBoost = post.timestamp === 'Just now' && engagementScore > 50 ? 200 : 0;\n\n      const totalScore = timeScore + engagementScore * 0.5 + verifiedBoost + vibeBoost;\n\n      return { post, score: totalScore };\n    });\n\n    scoredPosts.sort((a, b) => b.score - a.score);\n\n    const diversifiedPosts: Post[] = [];\n    for (const { post } of scoredPosts) {\n      const userCount = userPostCounts.get(post.userId) || 0;\n      \n      if (userCount < 2) {\n        diversifiedPosts.push(post);\n        userPostCounts.set(post.userId, userCount + 1);\n      } else {\n        diversifiedPosts.push(post);\n      }\n    }\n\n    return diversifiedPosts;\n  }, []);\n\n  const refreshFeed = useCallback(async (showLoading: boolean = true) => {\n    if (showLoading) {\n      setIsRefreshing(true);\n    }\n\n    console.log('ðŸ”„ Refreshing feed...');\n\n    await new Promise(resolve => setTimeout(resolve, 800));\n\n    const newPosts = generateNewPosts();\n    const allPosts = [...newPosts, ...pendingPosts, ...state.posts];\n    const sortedPosts = applyHybridSorting(allPosts);\n\n    const newState: FeedState = {\n      posts: sortedPosts,\n      lastRefresh: new Date().toISOString(),\n      newPostsCount: 0,\n      hasNewPosts: false,\n    };\n\n    await saveFeedData(newState);\n    setPendingPosts([]);\n\n    if (showLoading) {\n      setIsRefreshing(false);\n    }\n\n    console.log('âœ… Feed refreshed successfully');\n  }, [state.posts, pendingPosts, generateNewPosts, applyHybridSorting, saveFeedData]);\n\n  const loadNewPosts = useCallback(async () => {\n    console.log(`ðŸ“¥ Loading ${pendingPosts.length} new posts...`);\n    \n    const allPosts = [...pendingPosts, ...state.posts];\n    const sortedPosts = applyHybridSorting(allPosts);\n\n    const newState: FeedState = {\n      posts: sortedPosts,\n      lastRefresh: new Date().toISOString(),\n      newPostsCount: 0,\n      hasNewPosts: false,\n    };\n\n    await saveFeedData(newState);\n    setPendingPosts([]);\n  }, [pendingPosts, state.posts, applyHybridSorting, saveFeedData]);\n\n  const performDailyReset = useCallback(async () => {\n    console.log('ðŸŒ… Performing daily feed reset...');\n    \n    const freshPosts = generateNewPosts();\n    const sortedPosts = applyHybridSorting([...freshPosts, ...mockPosts]);\n\n    const newState: FeedState = {\n      posts: sortedPosts,\n      lastRefresh: new Date().toISOString(),\n      newPostsCount: 0,\n      hasNewPosts: false,\n    };\n\n    await saveFeedData(newState);\n    setPendingPosts([]);\n  }, [generateNewPosts, applyHybridSorting, saveFeedData]);\n\n  useEffect(() => {\n    autoRefreshTimerRef.current = setInterval(() => {\n      checkForNewPosts();\n    }, AUTO_REFRESH_INTERVAL);\n\n    dailyResetTimerRef.current = setInterval(() => {\n      performDailyReset();\n    }, DAILY_RESET_INTERVAL);\n\n    return () => {\n      if (autoRefreshTimerRef.current) {\n        clearInterval(autoRefreshTimerRef.current);\n      }\n      if (dailyResetTimerRef.current) {\n        clearInterval(dailyResetTimerRef.current);\n      }\n    };\n  }, [checkForNewPosts, performDailyReset]);\n\n  const addPost = useCallback(async (content: string, attachments?: any[]) => {\n    if (!user) return;\n\n    const newPost: Post = {\n      id: `post_${Date.now()}`,\n      userId: user.id,\n      username: user.username,\n      userDisplayName: user.displayName,\n      profileImage: user.profileImage,\n      isVerified: user.isVerified || false,\n      content,\n      likes: 0,\n      comments: 0,\n      shares: 0,\n      views: 0,\n      timestamp: 'Just now',\n      engagement: 0,\n      author: {\n        id: user.id,\n        username: user.username,\n        displayName: user.displayName,\n        profileImage: user.profileImage,\n        isVerified: user.isVerified || false,\n      },\n    };\n\n    const updatedPosts = [newPost, ...state.posts];\n    const sortedPosts = applyHybridSorting(updatedPosts);\n\n    await saveFeedData({\n      ...state,\n      posts: sortedPosts,\n      lastRefresh: new Date().toISOString(),\n    });\n  }, [user, state, applyHybridSorting, saveFeedData]);\n\n  return useMemo(() => ({\n    posts: state.posts,\n    lastRefresh: state.lastRefresh,\n    newPostsCount: state.newPostsCount,\n    hasNewPosts: state.hasNewPosts,\n    isRefreshing,\n    refreshFeed,\n    loadNewPosts,\n    addPost,\n  }), [\n    state.posts,\n    state.lastRefresh,\n    state.newPostsCount,\n    state.hasNewPosts,\n    isRefreshing,\n    refreshFeed,\n    loadNewPosts,\n    addPost,\n  ]);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}