{"ast":null,"code":"\"use strict\";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.populateParams=populateParams;exports.safelyDecodeURIComponent=safelyDecodeURIComponent;exports.getUrlWithReactNavigationConcessions=getUrlWithReactNavigationConcessions;exports.createConfig=createConfig;exports.assertScreens=assertScreens;exports.configRegExp=configRegExp;exports.isDynamicPart=isDynamicPart;exports.replacePart=replacePart;exports.getParamValue=getParamValue;exports.handleUrlParams=handleUrlParams;exports.spreadParamsAcrossAllStates=spreadParamsAcrossAllStates;exports.stripBaseUrl=stripBaseUrl;exports.matchForEmptyPath=matchForEmptyPath;exports.appendIsInitial=appendIsInitial;exports.getRouteConfigSorter=getRouteConfigSorter;exports.parseQueryParams=parseQueryParams;exports.cleanPath=cleanPath;exports.routePatternToRegex=routePatternToRegex;const escape_string_regexp_1=__importDefault(require(\"escape-string-regexp\"));const matchers_1=require(\"../matchers\");function populateParams(routes,params){if(!routes||!params||Object.keys(params).length===0)return;for(const route of routes){Object.assign(route,{params});}return routes;}function safelyDecodeURIComponent(str){try{return decodeURIComponent(str);}catch{return str;}}function getUrlWithReactNavigationConcessions(path,baseUrl=\"\"){let parsed;try{parsed=new URL(path,'https://phony.example');}catch{return{path,cleanUrl:'',nonstandardPathname:'',url:new URL('https://phony.example')};}const pathname=parsed.pathname;const withoutBaseUrl=stripBaseUrl(pathname,baseUrl);const pathWithoutGroups=(0,matchers_1.stripGroupSegmentsFromPath)(stripBaseUrl(path,baseUrl));return{path,nonstandardPathname:withoutBaseUrl.replace(/^\\/+/g,'').replace(/\\/+$/g,'')+'/',url:parsed,pathWithoutGroups};}function createConfig(screen,pattern,routeNames,config={}){const parts=[];let isDynamic=false;const isIndex=screen==='index'||screen.endsWith('/index');for(const part of pattern.split('/')){if(part){isDynamic||=part.startsWith(':')||part.startsWith('*')||part.includes('*not-found');if(!(0,matchers_1.matchGroupName)(part)){parts.push(part);}}}const hasChildren=config.screens?!!Object.keys(config.screens)?.length:false;const type=hasChildren?'layout':isDynamic?'dynamic':'static';if(isIndex){parts.push('index');}return{type,isIndex,hasChildren,parts,userReadableName:[...routeNames.slice(0,-1),config.path||screen].join('/'),expandedRouteNames:routeNames.slice(1).flatMap(name=>{return name.split('/');})};}function assertScreens(options){if(!options?.screens){throw Error(\"You must pass a 'screens' object to 'getStateFromPath' to generate a path.\");}}function configRegExp(config){return config.pattern?new RegExp(`^(${config.pattern.split('/').map(formatRegexPattern).join('')})$`):undefined;}function isDynamicPart(p){return p.length>1&&(p.startsWith(':')||p.startsWith('*'));}function replacePart(p){return p.replace(/^[:*]/,'').replace(/\\?$/,'');}function getParamValue(p,value){if(p.startsWith('*')){const values=value.split('/').filter(v=>v!=='');return values.length===0&&p.endsWith('?')?undefined:values;}else{return value;}}function formatRegexPattern(it){it=it.replace(' ','%20');if(it.startsWith(':')){return`(([^/]+\\\\/)${it.endsWith('?')?'?':''})`;}else if(it.startsWith('*')){return`((.*\\\\/)${it.endsWith('?')?'?':''})`;}if((0,matchers_1.matchGroupName)(it)!=null){return`(?:${(0,escape_string_regexp_1.default)(it)}\\\\/)?`;}return(0,escape_string_regexp_1.default)(it)+`\\\\/`;}function handleUrlParams(route,params){if(params){route.params=Object.assign(Object.create(null),route.params);for(const[name,value]of Object.entries(params)){if(route.params?.[name]){if(false){console.warn(`Route '/${route.name}' with param '${name}' was specified both in the path and as a param, removing from path`);}}if(!route.params?.[name]){route.params[name]=value;continue;}}if(Object.keys(route.params).length===0){delete route.params;}}}function spreadParamsAcrossAllStates(state,params){while(state){const route=state.routes[0];route.params=Object.assign({},route.params,params);}}function stripBaseUrl(path,baseUrl=\"\"){if(true){if(baseUrl){return path.replace(/^\\/+/g,'/').replace(new RegExp(`^\\\\/?${(0,escape_string_regexp_1.default)(baseUrl)}`,'g'),'');}}return path;}function matchForEmptyPath(configs){const leafNodes=configs.filter(config=>!config.hasChildren).map(value=>{return Object.assign({},value,{path:(0,matchers_1.stripGroupSegmentsFromPath)(value.path)});});const match=leafNodes.find(config=>config.path===''&&(!config.regex||config.regex.test('')))??leafNodes.find(config=>config.path.startsWith(':')&&config.regex.test(''))??leafNodes.find(config=>config.path.startsWith('*')&&config.regex.test('/'));return match;}function appendIsInitial(initialRoutes){const resolvedInitialPatterns=initialRoutes.map(route=>joinPaths(...route.parentScreens,route.initialRouteName));return function(config){config.isInitial=resolvedInitialPatterns.includes(config.routeNames.join('/'));return config;};}const joinPaths=(...paths)=>[].concat(...paths.map(p=>p.split('/'))).filter(Boolean).join('/');function getRouteConfigSorter(previousSegments=[]){return function sortConfigs(a,b){if(a.pattern===b.pattern){return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));}if(a.pattern.startsWith(b.pattern)&&!b.isIndex){return-1;}if(b.pattern.startsWith(a.pattern)&&!a.isIndex){return 1;}if(a.type==='static'&&b.type!=='static'){return-1;}else if(a.type!=='static'&&b.type==='static'){return 1;}const similarToPreviousA=previousSegments.filter((value,index)=>{return value===a.expandedRouteNames[index]&&value.startsWith('(')&&value.endsWith(')');});const similarToPreviousB=previousSegments.filter((value,index)=>{return value===b.expandedRouteNames[index]&&value.startsWith('(')&&value.endsWith(')');});if((similarToPreviousA.length>0||similarToPreviousB.length>0)&&similarToPreviousA.length!==similarToPreviousB.length){return similarToPreviousB.length-similarToPreviousA.length;}for(let i=0;i<Math.max(a.parts.length,b.parts.length);i++){if(a.parts[i]==null){return 1;}if(b.parts[i]==null){return-1;}const aWildCard=a.parts[i].startsWith('*');const bWildCard=b.parts[i].startsWith('*');if(aWildCard&&bWildCard){const aNotFound=a.parts[i].match(/^[*]not-found$/);const bNotFound=b.parts[i].match(/^[*]not-found$/);if(aNotFound&&bNotFound){continue;}else if(aNotFound){return 1;}else if(bNotFound){return-1;}continue;}if(aWildCard){return 1;}if(bWildCard){return-1;}const aSlug=a.parts[i].startsWith(':');const bSlug=b.parts[i].startsWith(':');if(aSlug&&bSlug){const aNotFound=a.parts[i].match(/^[*]not-found$/);const bNotFound=b.parts[i].match(/^[*]not-found$/);if(aNotFound&&bNotFound){continue;}else if(aNotFound){return 1;}else if(bNotFound){return-1;}continue;}if(aSlug){return 1;}if(bSlug){return-1;}}if(a.isInitial&&!b.isInitial){return-1;}else if(!a.isInitial&&b.isInitial){return 1;}return b.parts.length-a.parts.length;};}function parseQueryParams(path,route,parseConfig,hash){const searchParams=new URL(path,'https://phony.example').searchParams;const params=Object.create(null);if(hash){params['#']=hash.slice(1);}for(const name of searchParams.keys()){if(route.params?.[name]){if(false){console.warn(`Route '/${route.name}' with param '${name}' was specified both in the path and as a param, removing from path`);}}else{const values=parseConfig?.hasOwnProperty(name)?searchParams.getAll(name).map(value=>parseConfig[name](value)):searchParams.getAll(name);params[name]=values.length===1?values[0]:values;}}return Object.keys(params).length?params:undefined;}function cleanPath(path){path=path.replace(/\\/+/g,'/').replace(/^\\//,'').replace(/\\?.*$/,'');return path.endsWith('/')?path:`${path}/`;}function routePatternToRegex(pattern){return new RegExp(`^(${pattern.split('/').map(it=>{if(it.startsWith(':')){return`(([^/]+\\\\/)${it.endsWith('?')?'?':''})`;}return`${it==='*'?'.*':(0,escape_string_regexp_1.default)(it)}\\\\/`;}).join('')})`);}","map":{"version":3,"names":["exports","populateParams","safelyDecodeURIComponent","getUrlWithReactNavigationConcessions","createConfig","assertScreens","configRegExp","isDynamicPart","replacePart","getParamValue","handleUrlParams","spreadParamsAcrossAllStates","stripBaseUrl","matchForEmptyPath","appendIsInitial","getRouteConfigSorter","parseQueryParams","cleanPath","routePatternToRegex","escape_string_regexp_1","__importDefault","require","matchers_1","routes","params","Object","keys","length","route","assign","str","decodeURIComponent","path","baseUrl","parsed","URL","cleanUrl","nonstandardPathname","url","pathname","withoutBaseUrl","pathWithoutGroups","stripGroupSegmentsFromPath","replace","screen","pattern","routeNames","config","parts","isDynamic","isIndex","endsWith","part","split","startsWith","includes","matchGroupName","push","hasChildren","screens","type","userReadableName","slice","join","expandedRouteNames","flatMap","name","options","Error","RegExp","map","formatRegexPattern","undefined","p","value","values","filter","v","it","default","create","entries","console","warn","state","configs","leafNodes","match","find","regex","test","initialRoutes","resolvedInitialPatterns","joinPaths","parentScreens","initialRouteName","isInitial","paths","concat","Boolean","previousSegments","sortConfigs","a","b","localeCompare","similarToPreviousA","index","similarToPreviousB","i","Math","max","aWildCard","bWildCard","aNotFound","bNotFound","aSlug","bSlug","parseConfig","hash","searchParams","hasOwnProperty","getAll"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-router/src/fork/getStateFromPath-forks.ts"],"sourcesContent":["import { InitialState } from '@react-navigation/native';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport type { InitialRouteConfig, Options, ParsedRoute, RouteConfig } from './getStateFromPath';\nimport { matchGroupName, stripGroupSegmentsFromPath } from '../matchers';\n\nexport type ExpoOptions = {\n  previousSegments?: string[];\n};\n\nexport type ExpoRouteConfig = {\n  type: 'static' | 'dynamic' | 'layout';\n  userReadableName: string;\n  isIndex: boolean;\n  isInitial?: boolean;\n  hasChildren: boolean;\n  expandedRouteNames: string[];\n  parts: string[];\n};\n\n/**\n * In Expo Router, the params are available at all levels of the routing config\n * @param routes\n * @returns\n */\nexport function populateParams(routes?: ParsedRoute[], params?: Record<string, any>) {\n  if (!routes || !params || Object.keys(params).length === 0) return;\n\n  for (const route of routes) {\n    Object.assign(route, { params });\n  }\n\n  return routes;\n}\n\nexport function safelyDecodeURIComponent(str: string) {\n  try {\n    return decodeURIComponent(str);\n  } catch {\n    return str;\n  }\n}\n\nexport function getUrlWithReactNavigationConcessions(\n  path: string,\n  baseUrl: string | undefined = process.env.EXPO_BASE_URL\n) {\n  let parsed: URL;\n  try {\n    parsed = new URL(path, 'https://phony.example');\n  } catch {\n    // Do nothing with invalid URLs.\n    return {\n      path,\n      cleanUrl: '',\n      nonstandardPathname: '',\n      url: new URL('https://phony.example'),\n    };\n  }\n\n  const pathname = parsed.pathname;\n  const withoutBaseUrl = stripBaseUrl(pathname, baseUrl);\n  const pathWithoutGroups = stripGroupSegmentsFromPath(stripBaseUrl(path, baseUrl));\n\n  // Make sure there is a trailing slash\n  return {\n    // The slashes are at the end, not the beginning\n    path,\n    nonstandardPathname: withoutBaseUrl.replace(/^\\/+/g, '').replace(/\\/+$/g, '') + '/',\n    url: parsed,\n    pathWithoutGroups,\n  };\n}\n\nexport function createConfig(\n  screen: string,\n  pattern: string,\n  routeNames: string[],\n  config: Record<string, any> = {}\n): Omit<ExpoRouteConfig, 'isInitial'> {\n  const parts: string[] = [];\n  let isDynamic = false;\n  const isIndex = screen === 'index' || screen.endsWith('/index');\n\n  for (const part of pattern.split('/')) {\n    if (part) {\n      // If any part is dynamic, then the route is dynamic\n      isDynamic ||= part.startsWith(':') || part.startsWith('*') || part.includes('*not-found');\n\n      if (!matchGroupName(part)) {\n        parts.push(part);\n      }\n    }\n  }\n\n  const hasChildren = config.screens ? !!Object.keys(config.screens)?.length : false;\n  const type = hasChildren ? 'layout' : isDynamic ? 'dynamic' : 'static';\n\n  if (isIndex) {\n    parts.push('index');\n  }\n\n  return {\n    type,\n    isIndex,\n    hasChildren,\n    parts,\n    userReadableName: [...routeNames.slice(0, -1), config.path || screen].join('/'),\n    // Don't include the __root route name\n    expandedRouteNames: routeNames.slice(1).flatMap((name) => {\n      return name.split('/');\n    }),\n  };\n}\n\nexport function assertScreens(options?: Options<object>): asserts options is Options<object> {\n  if (!options?.screens) {\n    throw Error(\"You must pass a 'screens' object to 'getStateFromPath' to generate a path.\");\n  }\n}\n\nexport function configRegExp(config: RouteConfig) {\n  return config.pattern\n    ? new RegExp(`^(${config.pattern.split('/').map(formatRegexPattern).join('')})$`)\n    : undefined;\n}\n\nexport function isDynamicPart(p: string) {\n  return p.length > 1 && (p.startsWith(':') || p.startsWith('*'));\n}\n\nexport function replacePart(p: string) {\n  return p.replace(/^[:*]/, '').replace(/\\?$/, '');\n}\n\nexport function getParamValue(p: string, value: string) {\n  if (p.startsWith('*')) {\n    const values = value.split('/').filter((v) => v !== '');\n    return values.length === 0 && p.endsWith('?') ? undefined : values;\n  } else {\n    return value;\n  }\n}\n\nfunction formatRegexPattern(it: string): string {\n  // Allow spaces in file path names.\n  it = it.replace(' ', '%20');\n\n  if (it.startsWith(':')) {\n    // TODO: Remove unused match group\n    return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n  } else if (it.startsWith('*')) {\n    return `((.*\\\\/)${it.endsWith('?') ? '?' : ''})`;\n  }\n\n  // Strip groups from the matcher\n  if (matchGroupName(it) != null) {\n    // Groups are optional segments\n    // this enables us to match `/bar` and `/(foo)/bar` for the same route\n    // NOTE(EvanBacon): Ignore this match in the regex to avoid capturing the group\n    return `(?:${escape(it)}\\\\/)?`;\n  }\n\n  return escape(it) + `\\\\/`;\n}\n\nexport function handleUrlParams(route: ParsedRoute, params?: queryString.ParsedQuery) {\n  if (params) {\n    route.params = Object.assign(Object.create(null), route.params) as Record<string, any>;\n    for (const [name, value] of Object.entries(params)) {\n      if (route.params?.[name]) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `Route '/${route.name}' with param '${name}' was specified both in the path and as a param, removing from path`\n          );\n        }\n      }\n\n      if (!route.params?.[name]) {\n        route.params[name] = value;\n        continue;\n      }\n    }\n\n    if (Object.keys(route.params).length === 0) {\n      delete route.params;\n    }\n  }\n}\n\nexport function spreadParamsAcrossAllStates(state: InitialState, params?: Record<string, any>) {\n  while (state) {\n    const route = state.routes[0];\n    (route as any).params = Object.assign({}, route.params, params);\n  }\n}\n\nexport function stripBaseUrl(\n  path: string,\n  baseUrl: string | undefined = process.env.EXPO_BASE_URL\n) {\n  if (process.env.NODE_ENV !== 'development') {\n    if (baseUrl) {\n      return path.replace(/^\\/+/g, '/').replace(new RegExp(`^\\\\/?${escape(baseUrl)}`, 'g'), '');\n    }\n  }\n  return path;\n}\n\nexport function matchForEmptyPath(configs: RouteConfig[]) {\n  // We need to add special handling of empty path so navigation to empty path also works\n  // When handling empty path, we should only look at the root level config\n\n  // NOTE(EvanBacon): We only care about matching leaf nodes.\n  const leafNodes = configs\n    .filter((config) => !config.hasChildren)\n    .map((value) => {\n      return {\n        ...value,\n        // Collapse all levels of group segments before testing.\n        // This enables `app/(one)/(two)/index.js` to be matched.\n        path: stripGroupSegmentsFromPath(value.path),\n      };\n    });\n\n  const match =\n    leafNodes.find(\n      (config) =>\n        // NOTE(EvanBacon): Test leaf node index routes that either don't have a regex or match an empty string.\n        config.path === '' && (!config.regex || config.regex.test(''))\n    ) ??\n    leafNodes.find(\n      (config) =>\n        // NOTE(EvanBacon): Test leaf node dynamic routes that match an empty string.\n        config.path.startsWith(':') && config.regex!.test('')\n    ) ??\n    // NOTE(EvanBacon): Test leaf node deep dynamic routes that match a slash.\n    // This should be done last to enable dynamic routes having a higher priority.\n    leafNodes.find((config) => config.path.startsWith('*') && config.regex!.test('/'));\n\n  return match;\n}\n\nexport function appendIsInitial(initialRoutes: InitialRouteConfig[]) {\n  const resolvedInitialPatterns = initialRoutes.map((route) =>\n    joinPaths(...route.parentScreens, route.initialRouteName)\n  );\n\n  return function (config: RouteConfig) {\n    // TODO(EvanBacon): Probably a safer way to do this\n    // Mark initial routes to give them potential priority over other routes that match.\n    config.isInitial = resolvedInitialPatterns.includes(config.routeNames.join('/'));\n    return config;\n  };\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nexport function getRouteConfigSorter(previousSegments: string[] = []) {\n  return function sortConfigs(a: RouteConfig, b: RouteConfig) {\n    // Sort config so that:\n    // - the most exhaustive ones are always at the beginning\n    // - patterns with wildcard are always at the end\n\n    // If 2 patterns are same, move the one with less route names up\n    // This is an error state, so it's only useful for consistent error messages\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n\n    /*\n     * If one of the patterns starts with the other, it is earlier in the config sorting.\n     * However, configs are a mix of route configs and layout configs\n     * e.g There will be a config for `/(group)`, but maybe there isn't a `/(group)/index.tsx`\n     *\n     * This is because you can navigate to a directory and its navigator will determine the route\n     * These routes should be later in the config sorting, as their patterns are very open\n     * and will prevent routes from being matched\n     *\n     * Therefore before we compare segment parts, we force these layout configs later in the sorting\n     *\n     * NOTE(marklawlor): Is this a feature we want? I'm unsure if this is a gimmick or a feature.\n     */\n    if (a.pattern.startsWith(b.pattern) && !b.isIndex) {\n      return -1;\n    }\n\n    if (b.pattern.startsWith(a.pattern) && !a.isIndex) {\n      return 1;\n    }\n\n    /*\n     * Static routes should always be higher than dynamic and layout routes.\n     */\n    if (a.type === 'static' && b.type !== 'static') {\n      return -1;\n    } else if (a.type !== 'static' && b.type === 'static') {\n      return 1;\n    }\n\n    /*\n     * If both are static/dynamic or a layout file, then we check group similarity\n     */\n    const similarToPreviousA = previousSegments.filter((value, index) => {\n      return value === a.expandedRouteNames[index] && value.startsWith('(') && value.endsWith(')');\n    });\n\n    const similarToPreviousB = previousSegments.filter((value, index) => {\n      return value === b.expandedRouteNames[index] && value.startsWith('(') && value.endsWith(')');\n    });\n\n    if (\n      (similarToPreviousA.length > 0 || similarToPreviousB.length > 0) &&\n      similarToPreviousA.length !== similarToPreviousB.length\n    ) {\n      // One matches more than the other, so pick the one that matches more\n      return similarToPreviousB.length - similarToPreviousA.length;\n    }\n\n    /*\n     * If there is not difference in similarity, then each non-group segment is compared against each other\n     */\n    for (let i = 0; i < Math.max(a.parts.length, b.parts.length); i++) {\n      // if b is longer, b get higher priority\n      if (a.parts[i] == null) {\n        return 1;\n      }\n      // if a is longer, a get higher priority\n      if (b.parts[i] == null) {\n        return -1;\n      }\n\n      const aWildCard = a.parts[i].startsWith('*');\n      const bWildCard = b.parts[i].startsWith('*');\n      // if both are wildcard we compare next component\n      if (aWildCard && bWildCard) {\n        const aNotFound = a.parts[i].match(/^[*]not-found$/);\n        const bNotFound = b.parts[i].match(/^[*]not-found$/);\n\n        if (aNotFound && bNotFound) {\n          continue;\n        } else if (aNotFound) {\n          return 1;\n        } else if (bNotFound) {\n          return -1;\n        }\n        continue;\n      }\n      // if only a is wild card, b get higher priority\n      if (aWildCard) {\n        return 1;\n      }\n      // if only b is wild card, a get higher priority\n      if (bWildCard) {\n        return -1;\n      }\n\n      const aSlug = a.parts[i].startsWith(':');\n      const bSlug = b.parts[i].startsWith(':');\n      // if both are wildcard we compare next component\n      if (aSlug && bSlug) {\n        const aNotFound = a.parts[i].match(/^[*]not-found$/);\n        const bNotFound = b.parts[i].match(/^[*]not-found$/);\n\n        if (aNotFound && bNotFound) {\n          continue;\n        } else if (aNotFound) {\n          return 1;\n        } else if (bNotFound) {\n          return -1;\n        }\n\n        continue;\n      }\n      // if only a is wild card, b get higher priority\n      if (aSlug) {\n        return 1;\n      }\n      // if only b is wild card, a get higher priority\n      if (bSlug) {\n        return -1;\n      }\n    }\n\n    /*\n     * Both configs are identical in specificity and segments count/type\n     * Try and sort by initial instead.\n     *\n     * TODO: We don't differentiate between the default initialRoute and group specific default routes\n     *\n     * const unstable_settings = {\n     *   \"group\": {\n     *     initialRouteName: \"article\"\n     *  }\n     * }\n     *\n     * \"article\" will be ranked higher because its an initialRoute for a group - even if not your not currently in\n     * that group. The current work around is to ways provide initialRouteName for all groups\n     */\n    if (a.isInitial && !b.isInitial) {\n      return -1;\n    } else if (!a.isInitial && b.isInitial) {\n      return 1;\n    }\n\n    return b.parts.length - a.parts.length;\n  };\n}\n\nexport function parseQueryParams(\n  path: string,\n  route: ParsedRoute,\n  parseConfig?: Record<string, (value: string) => any>,\n  hash?: string\n) {\n  const searchParams = new URL(path, 'https://phony.example').searchParams;\n  const params: Record<string, string | string[]> = Object.create(null);\n\n  if (hash) {\n    params['#'] = hash.slice(1);\n  }\n\n  for (const name of searchParams.keys()) {\n    if (route.params?.[name]) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          `Route '/${route.name}' with param '${name}' was specified both in the path and as a param, removing from path`\n        );\n      }\n    } else {\n      const values = parseConfig?.hasOwnProperty(name)\n        ? searchParams.getAll(name).map((value) => parseConfig[name](value))\n        : searchParams.getAll(name);\n\n      // searchParams.getAll returns an array.\n      // if we only have a single value, and its not an array param, we need to extract the value\n      params[name] = values.length === 1 ? values[0] : values;\n    }\n  }\n\n  return Object.keys(params).length ? params : undefined;\n}\n\nexport function cleanPath(path: string) {\n  path = path\n    // let remaining = path\n    // END FORK\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  return path.endsWith('/') ? path : `${path}/`;\n}\n\nexport function routePatternToRegex(pattern: string) {\n  return new RegExp(\n    `^(${pattern\n      .split('/')\n      .map((it) => {\n        if (it.startsWith(':')) {\n          return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n        }\n\n        return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n      })\n      .join('')})`\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}