{"ast":null,"code":"import{useEffect,useReducer,useMemo}from'react';import ExpoLocalization,{addCalendarListener,addLocaleListener,removeSubscription}from'./ExpoLocalization';export*from'./Localization.types';export const getLocales=ExpoLocalization.getLocales;export const getCalendars=ExpoLocalization.getCalendars;export function useLocales(){const[key,invalidate]=useReducer(k=>k+1,0);const locales=useMemo(()=>getLocales(),[key]);useEffect(()=>{const subscription=addLocaleListener(invalidate);return()=>{removeSubscription(subscription);};},[]);return locales;}export function useCalendars(){const[key,invalidate]=useReducer(k=>k+1,0);const calendars=useMemo(()=>getCalendars(),[key]);useEffect(()=>{const subscription=addCalendarListener(invalidate);return()=>{removeSubscription(subscription);};},[]);return calendars;}","map":{"version":3,"names":["useEffect","useReducer","useMemo","ExpoLocalization","addCalendarListener","addLocaleListener","removeSubscription","getLocales","getCalendars","useLocales","key","invalidate","k","locales","subscription","useCalendars","calendars"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-localization/src/Localization.ts"],"sourcesContent":["import { useEffect, useReducer, useMemo } from 'react';\n\nimport ExpoLocalization, {\n  addCalendarListener,\n  addLocaleListener,\n  removeSubscription,\n} from './ExpoLocalization';\n\nexport * from './Localization.types';\n\n/**\n * List of user's locales, returned as an array of objects of type `Locale`.\n * Guaranteed to contain at least 1 element.\n * These are returned in the order the user defines in their device settings.\n * On the web currency and measurements systems are not provided, instead returned as null.\n * If needed, you can infer them from the current region using a lookup table.\n * @example\n * ```js\n * [{\n *   \"languageTag\": \"pl-PL\",\n *   \"languageCode\": \"pl\",\n *   \"textDirection\": \"ltr\",\n *   \"digitGroupingSeparator\": \" \",\n *   \"decimalSeparator\": \",\",\n *   \"measurementSystem\": \"metric\",\n *   \"currencyCode\": \"PLN\",\n *   \"currencySymbol\": \"zł\",\n *   \"regionCode\": \"PL\",\n *   \"temperatureUnit\": \"celsius\"\n * }]\n * ```\n */\nexport const getLocales = ExpoLocalization.getLocales;\n\n/**\n * List of user's preferred calendars, returned as an array of objects of type `Calendar`.\n * Guaranteed to contain at least 1 element.\n * For now always returns a single element, but it's likely to return a user preference list on some platforms in the future.\n * @example\n * ```js\n * [{\n *   \"calendar\": \"gregory\",\n *   \"timeZone\": \"Europe/Warsaw\",\n *   \"uses24hourClock\": true,\n *   \"firstWeekday\": 1\n * }]\n * ```\n */\nexport const getCalendars = ExpoLocalization.getCalendars;\n\n/**\n * A hook providing a list of user's locales, returned as an array of objects of type `Locale`.\n * Guaranteed to contain at least 1 element.\n * These are returned in the order the user defines in their device settings.\n * On the web currency and measurements systems are not provided, instead returned as null.\n * If needed, you can infer them from the current region using a lookup table.\n * If the OS settings change, the hook will rerender with a new list of locales.\n * @example\n * ```js\n * [{\n *   \"languageTag\": \"pl-PL\",\n *   \"languageCode\": \"pl\",\n *   \"textDirection\": \"ltr\",\n *   \"digitGroupingSeparator\": \" \",\n *   \"decimalSeparator\": \",\",\n *   \"measurementSystem\": \"metric\",\n *   \"currencyCode\": \"PLN\",\n *   \"currencySymbol\": \"zł\",\n *   \"regionCode\": \"PL\",\n *   \"temperatureUnit\": \"celsius\"\n * }]\n * ```\n */\nexport function useLocales() {\n  const [key, invalidate] = useReducer((k) => k + 1, 0);\n  const locales = useMemo(() => getLocales(), [key]);\n  useEffect(() => {\n    const subscription = addLocaleListener(invalidate);\n    return () => {\n      removeSubscription(subscription);\n    };\n  }, []);\n  return locales;\n}\n\n/**\n * A hook providing a list of user's preferred calendars, returned as an array of objects of type `Calendar`.\n * Guaranteed to contain at least 1 element.\n * For now always returns a single element, but it's likely to return a user preference list on some platforms in the future.\n * If the OS settings change, the hook will rerender with a new list of calendars.\n * @example\n * ```js\n * [{\n *   \"calendar\": \"gregory\",\n *   \"timeZone\": \"Europe/Warsaw\",\n *   \"uses24hourClock\": true,\n *   \"firstWeekday\": 1\n * }]\n * ```\n */\nexport function useCalendars() {\n  const [key, invalidate] = useReducer((k) => k + 1, 0);\n  const calendars = useMemo(() => getCalendars(), [key]);\n  useEffect(() => {\n    const subscription = addCalendarListener(invalidate);\n    return () => {\n      removeSubscription(subscription);\n    };\n  }, []);\n  return calendars;\n}\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,UAAU,CAAEC,OAAO,KAAQ,OAAO,CAEtD,MAAO,CAAAC,gBAAgB,EACrBC,mBAAmB,CACnBC,iBAAiB,CACjBC,kBAAkB,KACb,oBAAoB,CAE3B,WAAc,sBAAsB,CAwBpC,MAAO,MAAM,CAAAC,UAAU,CAAGJ,gBAAgB,CAACI,UAAU,CAgBrD,MAAO,MAAM,CAAAC,YAAY,CAAGL,gBAAgB,CAACK,YAAY,CAyBzD,MAAM,SAAU,CAAAC,UAAUA,CAAA,EACxB,KAAM,CAACC,GAAG,CAAEC,UAAU,CAAC,CAAGV,UAAU,CAAEW,CAAC,EAAKA,CAAC,CAAG,CAAC,CAAE,CAAC,CAAC,CACrD,KAAM,CAAAC,OAAO,CAAGX,OAAO,CAAC,IAAMK,UAAU,EAAE,CAAE,CAACG,GAAG,CAAC,CAAC,CAClDV,SAAS,CAAC,IAAK,CACb,KAAM,CAAAc,YAAY,CAAGT,iBAAiB,CAACM,UAAU,CAAC,CAClD,MAAO,IAAK,CACVL,kBAAkB,CAACQ,YAAY,CAAC,CAClC,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CACN,MAAO,CAAAD,OAAO,CAChB,CAiBA,MAAM,SAAU,CAAAE,YAAYA,CAAA,EAC1B,KAAM,CAACL,GAAG,CAAEC,UAAU,CAAC,CAAGV,UAAU,CAAEW,CAAC,EAAKA,CAAC,CAAG,CAAC,CAAE,CAAC,CAAC,CACrD,KAAM,CAAAI,SAAS,CAAGd,OAAO,CAAC,IAAMM,YAAY,EAAE,CAAE,CAACE,GAAG,CAAC,CAAC,CACtDV,SAAS,CAAC,IAAK,CACb,KAAM,CAAAc,YAAY,CAAGV,mBAAmB,CAACO,UAAU,CAAC,CACpD,MAAO,IAAK,CACVL,kBAAkB,CAACQ,YAAY,CAAC,CAClC,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CACN,MAAO,CAAAE,SAAS,CAClB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}