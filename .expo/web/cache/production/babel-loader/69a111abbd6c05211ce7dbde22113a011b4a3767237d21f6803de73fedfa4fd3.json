{"ast":null,"code":"function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import{getNextHandlerTag}from'../getNextHandlerTag';import{isRemoteDebuggingEnabled}from'../../utils';export const CALLBACK_TYPE={UNDEFINED:0,BEGAN:1,START:2,UPDATE:3,CHANGE:4,END:5,FINALIZE:6,TOUCHES_DOWN:7,TOUCHES_MOVE:8,TOUCHES_UP:9,TOUCHES_CANCELLED:10};export class Gesture{}let nextGestureId=0;export class BaseGesture extends Gesture{constructor(){super();_defineProperty(this,\"gestureId\",-1);_defineProperty(this,\"handlerTag\",-1);_defineProperty(this,\"handlerName\",'');_defineProperty(this,\"config\",{});_defineProperty(this,\"handlers\",{gestureId:-1,handlerTag:-1,isWorklet:[]});this.gestureId=nextGestureId++;this.handlers.gestureId=this.gestureId;}addDependency(key,gesture){const value=this.config[key];this.config[key]=value?Array().concat(value,gesture):[gesture];}withRef(ref){this.config.ref=ref;return this;}isWorklet(callback){return callback.__workletHash!==undefined;}onBegin(callback){this.handlers.onBegin=callback;this.handlers.isWorklet[CALLBACK_TYPE.BEGAN]=this.isWorklet(callback);return this;}onStart(callback){this.handlers.onStart=callback;this.handlers.isWorklet[CALLBACK_TYPE.START]=this.isWorklet(callback);return this;}onEnd(callback){this.handlers.onEnd=callback;this.handlers.isWorklet[CALLBACK_TYPE.END]=this.isWorklet(callback);return this;}onFinalize(callback){this.handlers.onFinalize=callback;this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE]=this.isWorklet(callback);return this;}onTouchesDown(callback){this.config.needsPointerData=true;this.handlers.onTouchesDown=callback;this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN]=this.isWorklet(callback);return this;}onTouchesMove(callback){this.config.needsPointerData=true;this.handlers.onTouchesMove=callback;this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE]=this.isWorklet(callback);return this;}onTouchesUp(callback){this.config.needsPointerData=true;this.handlers.onTouchesUp=callback;this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP]=this.isWorklet(callback);return this;}onTouchesCancelled(callback){this.config.needsPointerData=true;this.handlers.onTouchesCancelled=callback;this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED]=this.isWorklet(callback);return this;}enabled(enabled){this.config.enabled=enabled;return this;}shouldCancelWhenOutside(value){this.config.shouldCancelWhenOutside=value;return this;}hitSlop(hitSlop){this.config.hitSlop=hitSlop;return this;}activeCursor(activeCursor){this.config.activeCursor=activeCursor;return this;}mouseButton(mouseButton){this.config.mouseButton=mouseButton;return this;}runOnJS(runOnJS){this.config.runOnJS=runOnJS;return this;}simultaneousWithExternalGesture(...gestures){for(const gesture of gestures){this.addDependency('simultaneousWith',gesture);}return this;}requireExternalGestureToFail(...gestures){for(const gesture of gestures){this.addDependency('requireToFail',gesture);}return this;}blocksExternalGesture(...gestures){for(const gesture of gestures){this.addDependency('blocksHandlers',gesture);}return this;}withTestId(id){this.config.testId=id;return this;}cancelsTouchesInView(value){this.config.cancelsTouchesInView=value;return this;}initialize(){this.handlerTag=getNextHandlerTag();this.handlers=Object.assign({},this.handlers,{handlerTag:this.handlerTag});if(this.config.ref){this.config.ref.current=this;}}toGestureArray(){return[this];}prepare(){}get shouldUseReanimated(){return this.config.runOnJS!==true&&!this.handlers.isWorklet.includes(false)&&!isRemoteDebuggingEnabled();}}export class ContinousBaseGesture extends BaseGesture{onUpdate(callback){this.handlers.onUpdate=callback;this.handlers.isWorklet[CALLBACK_TYPE.UPDATE]=this.isWorklet(callback);return this;}onChange(callback){this.handlers.onChange=callback;this.handlers.isWorklet[CALLBACK_TYPE.CHANGE]=this.isWorklet(callback);return this;}manualActivation(manualActivation){this.config.manualActivation=manualActivation;return this;}}","map":{"version":3,"names":["getNextHandlerTag","isRemoteDebuggingEnabled","CALLBACK_TYPE","UNDEFINED","BEGAN","START","UPDATE","CHANGE","END","FINALIZE","TOUCHES_DOWN","TOUCHES_MOVE","TOUCHES_UP","TOUCHES_CANCELLED","Gesture","nextGestureId","BaseGesture","constructor","_defineProperty","gestureId","handlerTag","isWorklet","handlers","addDependency","key","gesture","value","config","Array","concat","withRef","ref","callback","__workletHash","undefined","onBegin","onStart","onEnd","onFinalize","onTouchesDown","needsPointerData","onTouchesMove","onTouchesUp","onTouchesCancelled","enabled","shouldCancelWhenOutside","hitSlop","activeCursor","mouseButton","runOnJS","simultaneousWithExternalGesture","gestures","requireExternalGestureToFail","blocksExternalGesture","withTestId","id","testId","cancelsTouchesInView","initialize","Object","assign","current","toGestureArray","prepare","shouldUseReanimated","includes","ContinousBaseGesture","onUpdate","onChange","manualActivation"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gesture.ts"],"sourcesContent":["import {\n  HitSlop,\n  CommonGestureConfig,\n  GestureTouchEvent,\n  GestureStateChangeEvent,\n  GestureUpdateEvent,\n  ActiveCursor,\n  MouseButton,\n} from '../gestureHandlerCommon';\nimport { getNextHandlerTag } from '../getNextHandlerTag';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport type {\n  FlingGestureHandlerEventPayload,\n  ForceTouchGestureHandlerEventPayload,\n  LongPressGestureHandlerEventPayload,\n  PanGestureHandlerEventPayload,\n  PinchGestureHandlerEventPayload,\n  RotationGestureHandlerEventPayload,\n  TapGestureHandlerEventPayload,\n  NativeViewGestureHandlerPayload,\n  HoverGestureHandlerEventPayload,\n} from '../GestureHandlerEventPayload';\nimport { isRemoteDebuggingEnabled } from '../../utils';\n\nexport type GestureType =\n  | BaseGesture<Record<string, unknown>>\n  | BaseGesture<Record<string, never>>\n  | BaseGesture<TapGestureHandlerEventPayload>\n  | BaseGesture<PanGestureHandlerEventPayload>\n  | BaseGesture<LongPressGestureHandlerEventPayload>\n  | BaseGesture<RotationGestureHandlerEventPayload>\n  | BaseGesture<PinchGestureHandlerEventPayload>\n  | BaseGesture<FlingGestureHandlerEventPayload>\n  | BaseGesture<ForceTouchGestureHandlerEventPayload>\n  | BaseGesture<NativeViewGestureHandlerPayload>\n  | BaseGesture<HoverGestureHandlerEventPayload>;\n\nexport type GestureRef =\n  | number\n  | GestureType\n  | React.RefObject<GestureType | undefined>\n  | React.RefObject<React.ComponentType | undefined>; // Allow adding a ref to a gesture handler\nexport interface BaseGestureConfig\n  extends CommonGestureConfig,\n    Record<string, unknown> {\n  ref?: React.MutableRefObject<GestureType | undefined>;\n  requireToFail?: GestureRef[];\n  simultaneousWith?: GestureRef[];\n  blocksHandlers?: GestureRef[];\n  needsPointerData?: boolean;\n  manualActivation?: boolean;\n  runOnJS?: boolean;\n  testId?: string;\n  cancelsTouchesInView?: boolean;\n}\n\ntype TouchEventHandlerType = (\n  event: GestureTouchEvent,\n  stateManager: GestureStateManagerType\n) => void;\n\nexport type HandlerCallbacks<EventPayloadT extends Record<string, unknown>> = {\n  gestureId: number;\n  handlerTag: number;\n  onBegin?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onStart?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onEnd?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onFinalize?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onUpdate?: (event: GestureUpdateEvent<EventPayloadT>) => void;\n  onChange?: (event: any) => void;\n  onTouchesDown?: TouchEventHandlerType;\n  onTouchesMove?: TouchEventHandlerType;\n  onTouchesUp?: TouchEventHandlerType;\n  onTouchesCancelled?: TouchEventHandlerType;\n  changeEventCalculator?: (\n    current: GestureUpdateEvent<Record<string, unknown>>,\n    previous?: GestureUpdateEvent<Record<string, unknown>>\n  ) => GestureUpdateEvent<Record<string, unknown>>;\n  isWorklet: boolean[];\n};\n\nexport const CALLBACK_TYPE = {\n  UNDEFINED: 0,\n  BEGAN: 1,\n  START: 2,\n  UPDATE: 3,\n  CHANGE: 4,\n  END: 5,\n  FINALIZE: 6,\n  TOUCHES_DOWN: 7,\n  TOUCHES_MOVE: 8,\n  TOUCHES_UP: 9,\n  TOUCHES_CANCELLED: 10,\n} as const;\n\n// Allow using CALLBACK_TYPE as object and type\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type CALLBACK_TYPE = (typeof CALLBACK_TYPE)[keyof typeof CALLBACK_TYPE];\n\nexport abstract class Gesture {\n  /**\n   * Return array of gestures, providing the same interface for creating and updating\n   * handlers, no matter which object was used to create gesture instance.\n   */\n  abstract toGestureArray(): GestureType[];\n\n  /**\n   * Assign handlerTag to the gesture instance and set ref.current (if a ref is set)\n   */\n  abstract initialize(): void;\n\n  /**\n   * Make sure that values of properties defining relations are arrays. Do any necessary\n   * preprocessing required to configure relations between handlers. Called just before\n   * updating the handler on the native side.\n   */\n  abstract prepare(): void;\n}\n\nlet nextGestureId = 0;\nexport abstract class BaseGesture<\n  EventPayloadT extends Record<string, unknown>,\n> extends Gesture {\n  private gestureId = -1;\n  public handlerTag = -1;\n  public handlerName = '';\n  public config: BaseGestureConfig = {};\n  public handlers: HandlerCallbacks<EventPayloadT> = {\n    gestureId: -1,\n    handlerTag: -1,\n    isWorklet: [],\n  };\n\n  constructor() {\n    super();\n\n    // Used to check whether the gesture config has been updated when wrapping it\n    // with `useMemo`. Since every config will have a unique id, when the dependencies\n    // don't change, the config won't be recreated and the id will stay the same.\n    // If the id is different, it means that the config has changed and the gesture\n    // needs to be updated.\n    this.gestureId = nextGestureId++;\n    this.handlers.gestureId = this.gestureId;\n  }\n\n  private addDependency(\n    key: 'simultaneousWith' | 'requireToFail' | 'blocksHandlers',\n    gesture: Exclude<GestureRef, number>\n  ) {\n    const value = this.config[key];\n    this.config[key] = value\n      ? Array<GestureRef>().concat(value, gesture)\n      : [gesture];\n  }\n\n  /**\n   * Sets a `ref` to the gesture object, allowing for interoperability with the old API.\n   * @param ref\n   */\n  withRef(ref: React.MutableRefObject<GestureType | undefined>) {\n    this.config.ref = ref;\n    return this;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  protected isWorklet(callback: Function) {\n    // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    return callback.__workletHash !== undefined;\n  }\n\n  /**\n   * Set the callback that is being called when given gesture handler starts receiving touches.\n   * At the moment of this callback the handler is in `BEGAN` state and we don't know yet if it will recognize the gesture at all.\n   * @param callback\n   */\n  onBegin(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onBegin = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * Set the callback that is being called when the gesture is recognized by the handler and it transitions to the `ACTIVE` state.\n   * @param callback\n   */\n  onStart(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onStart = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * Set the callback that is being called when the gesture that was recognized by the handler finishes and handler reaches `END` state.\n   * It will be called only if the handler was previously in the `ACTIVE` state.\n   * @param callback\n   */\n  onEnd(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onEnd = callback;\n    // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * Set the callback that is being called when the handler finalizes handling gesture - the gesture was recognized and has finished or it failed to recognize.\n   * @param callback\n   */\n  onFinalize(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onFinalize = callback;\n    // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * Set the `onTouchesDown` callback which is called every time a pointer is placed on the screen.\n   * @param callback\n   */\n  onTouchesDown(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesDown = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  /**\n   * Set the `onTouchesMove` callback which is called every time a pointer is moved on the screen.\n   * @param callback\n   */\n  onTouchesMove(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesMove = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  /**\n   * Set the `onTouchesUp` callback which is called every time a pointer is lifted from the screen.\n   * @param callback\n   */\n  onTouchesUp(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesUp = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  /**\n   * Set the `onTouchesCancelled` callback which is called every time a pointer stops being tracked, for example when the gesture finishes.\n   * @param callback\n   */\n  onTouchesCancelled(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesCancelled = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  /**\n   * Indicates whether the given handler should be analyzing stream of touch events or not.\n   * @param enabled\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#enabledvalue-boolean\n   */\n  enabled(enabled: boolean) {\n    this.config.enabled = enabled;\n    return this;\n  }\n\n  /**\n   * When true the handler will cancel or fail recognition (depending on its current state) whenever the finger leaves the area of the connected view.\n   * @param value\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#shouldcancelwhenoutsidevalue-boolean\n   */\n  shouldCancelWhenOutside(value: boolean) {\n    this.config.shouldCancelWhenOutside = value;\n    return this;\n  }\n\n  /**\n   * This parameter enables control over what part of the connected view area can be used to begin recognizing the gesture.\n   * When a negative number is provided the bounds of the view will reduce the area by the given number of points in each of the sides evenly.\n   * @param hitSlop\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#hitslopsettings\n   */\n  hitSlop(hitSlop: HitSlop) {\n    this.config.hitSlop = hitSlop;\n    return this;\n  }\n\n  /**\n   * #### Web only\n   * This parameter allows to specify which `cursor` should be used when gesture activates.\n   * Supports all CSS cursor values (e.g. `\"grab\"`, `\"zoom-in\"`). Default value is set to `\"auto\"`.\n   * @param activeCursor\n   */\n  activeCursor(activeCursor: ActiveCursor) {\n    this.config.activeCursor = activeCursor;\n    return this;\n  }\n\n  /**\n   * #### Web & Android only\n   * Allows users to choose which mouse button should handler respond to.\n   * Arguments can be combined using `|` operator, e.g. `mouseButton(MouseButton.LEFT | MouseButton.RIGHT)`.\n   * Default value is set to `MouseButton.LEFT`.\n   * @param mouseButton\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#mousebuttonvalue-mousebutton-web--android-only\n   */\n  mouseButton(mouseButton: MouseButton) {\n    this.config.mouseButton = mouseButton;\n    return this;\n  }\n\n  /**\n   * When `react-native-reanimated` is installed, the callbacks passed to the gestures are automatically workletized and run on the UI thread when called.\n   * This option allows for changing this behavior: when `true`, all the callbacks will be run on the JS thread instead of the UI thread, regardless of whether they are worklets or not.\n   * Defaults to `false`.\n   * @param runOnJS\n   */\n  runOnJS(runOnJS: boolean) {\n    this.config.runOnJS = runOnJS;\n    return this;\n  }\n\n  /**\n   * Allows gestures across different components to be recognized simultaneously.\n   * @param gestures\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#simultaneouswithexternalgesture\n   */\n  simultaneousWithExternalGesture(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('simultaneousWith', gesture);\n    }\n    return this;\n  }\n\n  /**\n   * Allows to delay activation of the handler until all handlers passed as arguments to this method fail (or don't begin at all).\n   * @param gestures\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#requireexternalgesturetofail\n   */\n  requireExternalGestureToFail(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('requireToFail', gesture);\n    }\n    return this;\n  }\n\n  /**\n   * Works similarily to `requireExternalGestureToFail` but the direction of the relation is reversed - instead of being one-to-many relation, it's many-to-one.\n   * @param gestures\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#blocksexternalgesture\n   */\n  blocksExternalGesture(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('blocksHandlers', gesture);\n    }\n    return this;\n  }\n\n  /**\n   * Sets a `testID` property for gesture object, allowing for querying for it in tests.\n   * @param id\n   */\n  withTestId(id: string) {\n    this.config.testId = id;\n    return this;\n  }\n\n  /**\n   * #### iOS only\n   * When `true`, the handler will cancel touches for native UI components (`UIButton`, `UISwitch`, etc) it's attached to when it becomes `ACTIVE`.\n   * Default value is `true`.\n   * @param value\n   */\n  cancelsTouchesInView(value: boolean) {\n    this.config.cancelsTouchesInView = value;\n    return this;\n  }\n\n  initialize() {\n    this.handlerTag = getNextHandlerTag();\n\n    this.handlers = { ...this.handlers, handlerTag: this.handlerTag };\n\n    if (this.config.ref) {\n      this.config.ref.current = this as GestureType;\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return [this as GestureType];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  prepare() {}\n\n  get shouldUseReanimated(): boolean {\n    // Use Reanimated when runOnJS isn't set explicitly,\n    // all defined callbacks are worklets\n    // and remote debugging is disabled\n    return (\n      this.config.runOnJS !== true &&\n      !this.handlers.isWorklet.includes(false) &&\n      !isRemoteDebuggingEnabled()\n    );\n  }\n}\n\nexport abstract class ContinousBaseGesture<\n  EventPayloadT extends Record<string, unknown>,\n  EventChangePayloadT extends Record<string, unknown>,\n> extends BaseGesture<EventPayloadT> {\n  /**\n   * Set the callback that is being called every time the gesture receives an update while it's active.\n   * @param callback\n   */\n  onUpdate(callback: (event: GestureUpdateEvent<EventPayloadT>) => void) {\n    this.handlers.onUpdate = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * Set the callback that is being called every time the gesture receives an update while it's active.\n   * This callback will receive information about change in value in relation to the last received event.\n   * @param callback\n   */\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<EventPayloadT & EventChangePayloadT>\n    ) => void\n  ) {\n    this.handlers.onChange = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * When `true` the handler will not activate by itself even if its activation criteria are met.\n   * Instead you can manipulate its state using state manager.\n   * @param manualActivation\n   */\n  manualActivation(manualActivation: boolean) {\n    this.config.manualActivation = manualActivation;\n    return this;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}