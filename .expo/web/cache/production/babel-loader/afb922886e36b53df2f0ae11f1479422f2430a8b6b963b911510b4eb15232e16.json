{"ast":null,"code":"import{SharedObject}from'expo';import ImageManipulatorImageRef from'./ImageManipulatorImageRef.web';import{crop,extent,flip,resize,rotate}from'./actions/index.web';export default class ImageManipulatorContext extends SharedObject{get currentTask(){if(this._currentTask){return this._currentTask;}this._currentTask=new Promise(resolve=>resolve(this.loader()));return this._currentTask;}set currentTask(task){this._currentTask=task;}constructor(loader){super();this.loader=loader??(()=>document.createElement('canvas'));}resize(size){return this.addTask(canvas=>resize(canvas,size));}rotate(degrees){return this.addTask(canvas=>rotate(canvas,degrees));}flip(flipType){return this.addTask(canvas=>flip(canvas,flipType));}crop(rect){return this.addTask(canvas=>crop(canvas,rect));}extent(options){return this.addTask(canvas=>extent(canvas,options));}reset(){this.currentTask=new Promise(resolve=>resolve(this.loader()));return this;}async renderAsync(){const canvas=await this.currentTask;const clonedCanvas=document.createElement('canvas');const clonedCanvasCtx=clonedCanvas.getContext('2d');clonedCanvas.width=canvas.width;clonedCanvas.height=canvas.height;clonedCanvasCtx?.drawImage(canvas,0,0);return new Promise(resolve=>{canvas.toBlob(blob=>{const url=blob?URL.createObjectURL(blob):canvas.toDataURL();const image=new ImageManipulatorImageRef(url,clonedCanvas);resolve(image);},'image/png');});}addTask(task){this.currentTask=this.currentTask.then(canvas=>{return task(canvas);});return this;}}","map":{"version":3,"names":["SharedObject","ImageManipulatorImageRef","crop","extent","flip","resize","rotate","ImageManipulatorContext","currentTask","_currentTask","Promise","resolve","loader","task","constructor","document","createElement","size","addTask","canvas","degrees","flipType","rect","options","reset","renderAsync","clonedCanvas","clonedCanvasCtx","getContext","width","height","drawImage","toBlob","blob","url","URL","createObjectURL","toDataURL","image","then"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-image-manipulator/src/web/ImageManipulatorContext.web.ts"],"sourcesContent":["import { SharedObject } from 'expo';\n\nimport { ActionCrop, ActionExtent, FlipType } from '../ImageManipulator.types';\nimport ImageManipulatorImageRef from './ImageManipulatorImageRef.web';\nimport { crop, extent, flip, resize, rotate } from './actions/index.web';\n\ntype ContextLoader = () => HTMLCanvasElement | Promise<HTMLCanvasElement>;\n\nexport default class ImageManipulatorContext extends SharedObject {\n  private loader: ContextLoader;\n\n  private _currentTask: Promise<HTMLCanvasElement> | undefined;\n  get currentTask() {\n    if (this._currentTask) {\n      return this._currentTask;\n    }\n    this._currentTask = new Promise((resolve) => resolve(this.loader()));\n    return this._currentTask;\n  }\n  set currentTask(task) {\n    this._currentTask = task;\n  }\n\n  constructor(loader?: ContextLoader) {\n    super();\n    this.loader = loader ?? (() => document.createElement('canvas'));\n  }\n\n  resize(size: { width: number; height: number }): ImageManipulatorContext {\n    return this.addTask((canvas) => resize(canvas, size));\n  }\n\n  rotate(degrees: number): ImageManipulatorContext {\n    return this.addTask((canvas) => rotate(canvas, degrees));\n  }\n\n  flip(flipType: FlipType): ImageManipulatorContext {\n    return this.addTask((canvas) => flip(canvas, flipType));\n  }\n\n  crop(rect: ActionCrop['crop']): ImageManipulatorContext {\n    return this.addTask((canvas) => crop(canvas, rect));\n  }\n\n  extent(options: ActionExtent['extent']): ImageManipulatorContext {\n    return this.addTask((canvas) => extent(canvas, options));\n  }\n\n  reset(): ImageManipulatorContext {\n    this.currentTask = new Promise((resolve) => resolve(this.loader()));\n    return this;\n  }\n\n  async renderAsync(): Promise<ImageManipulatorImageRef> {\n    const canvas = await this.currentTask;\n\n    // We're copying the canvas so ref's `saveAsync` can safely use `toBlob` again with the desired format and quality.\n    // The original canvas cannot be reused as the manipulator context may still draw on it.\n    const clonedCanvas = document.createElement('canvas');\n    const clonedCanvasCtx = clonedCanvas.getContext('2d');\n\n    clonedCanvas.width = canvas.width;\n    clonedCanvas.height = canvas.height;\n    clonedCanvasCtx?.drawImage(canvas, 0, 0);\n\n    return new Promise((resolve) => {\n      // Create a full-sized, full-quality blob from the original canvas.\n      canvas.toBlob(\n        (blob) => {\n          const url = blob ? URL.createObjectURL(blob) : canvas.toDataURL();\n          const image = new ImageManipulatorImageRef(url, clonedCanvas);\n\n          resolve(image);\n        },\n        // Use PNG format so the result is of the best quality.\n        // If you need another format, see `saveAsync` function on the image ref.\n        'image/png'\n      );\n    });\n  }\n\n  private addTask(\n    task: (canvas: HTMLCanvasElement) => HTMLCanvasElement | Promise<HTMLCanvasElement>\n  ): ImageManipulatorContext {\n    this.currentTask = this.currentTask.then((canvas) => {\n      return task(canvas);\n    });\n    return this;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}