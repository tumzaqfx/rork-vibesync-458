{"ast":null,"code":"import*as FileSystem from'expo-file-system';import Platform from\"react-native-web/dist/exports/Platform\";const CACHE_DIR=`${FileSystem.cacheDirectory}images/`;const MAX_CACHE_SIZE=100*1024*1024;const CACHE_EXPIRY=7*24*60*60*1000;class ImageCache{cacheMap=new Map();initialized=false;async initialize(){if(this.initialized||true)return;try{const dirInfo=await FileSystem.getInfoAsync(CACHE_DIR);if(!dirInfo.exists){await FileSystem.makeDirectoryAsync(CACHE_DIR,{intermediates:true});}await this.loadCacheMap();this.initialized=true;}catch(error){console.warn('[ImageCache] Initialization error:',error);}}async loadCacheMap(){try{const files=await FileSystem.readDirectoryAsync(CACHE_DIR);for(const file of files){const filePath=`${CACHE_DIR}${file}`;const info=await FileSystem.getInfoAsync(filePath);if(info.exists&&!info.isDirectory){this.cacheMap.set(file,{uri:filePath,timestamp:info.modificationTime||Date.now(),size:info.size||0});}}}catch(error){console.warn('[ImageCache] Load cache map error:',error);}}getCacheKey(url){return url.replace(/[^a-z0-9]/gi,'_').toLowerCase();}async get(url){if(true)return url;if(!this.initialized)await this.initialize();const key=this.getCacheKey(url);const entry=this.cacheMap.get(key);if(entry){const age=Date.now()-entry.timestamp;if(age<CACHE_EXPIRY){const info=await FileSystem.getInfoAsync(entry.uri);if(info.exists){return entry.uri;}}this.cacheMap.delete(key);}return null;}async set(url,localUri){if(true)return;if(!this.initialized)await this.initialize();try{const key=this.getCacheKey(url);const cachedPath=`${CACHE_DIR}${key}`;await FileSystem.copyAsync({from:localUri,to:cachedPath});const info=await FileSystem.getInfoAsync(cachedPath);if(info.exists){this.cacheMap.set(key,{uri:cachedPath,timestamp:Date.now(),size:info.size||0});await this.enforceMaxSize();}}catch(error){console.warn('[ImageCache] Set error:',error);}}async download(url){if(true)return url;const cached=await this.get(url);if(cached)return cached;try{const key=this.getCacheKey(url);const cachedPath=`${CACHE_DIR}${key}`;const downloadResult=await FileSystem.downloadAsync(url,cachedPath);if(downloadResult.status===200){const info=await FileSystem.getInfoAsync(cachedPath);if(info.exists){this.cacheMap.set(key,{uri:cachedPath,timestamp:Date.now(),size:info.size||0});await this.enforceMaxSize();return cachedPath;}}}catch(error){console.warn('[ImageCache] Download error:',error);}return url;}async enforceMaxSize(){const entries=Array.from(this.cacheMap.entries());const totalSize=entries.reduce((sum,[,entry])=>sum+entry.size,0);if(totalSize>MAX_CACHE_SIZE){entries.sort((a,b)=>a[1].timestamp-b[1].timestamp);let currentSize=totalSize;for(const[key,entry]of entries){if(currentSize<=MAX_CACHE_SIZE*0.8)break;try{await FileSystem.deleteAsync(entry.uri,{idempotent:true});this.cacheMap.delete(key);currentSize-=entry.size;}catch(error){console.warn('[ImageCache] Delete error:',error);}}}}async clear(){if(true)return;try{await FileSystem.deleteAsync(CACHE_DIR,{idempotent:true});await FileSystem.makeDirectoryAsync(CACHE_DIR,{intermediates:true});this.cacheMap.clear();}catch(error){console.warn('[ImageCache] Clear error:',error);}}getCacheSize(){return Array.from(this.cacheMap.values()).reduce((sum,entry)=>sum+entry.size,0);}}export const imageCache=new ImageCache();","map":{"version":3,"names":["FileSystem","Platform","CACHE_DIR","cacheDirectory","MAX_CACHE_SIZE","CACHE_EXPIRY","ImageCache","cacheMap","Map","initialized","initialize","dirInfo","getInfoAsync","exists","makeDirectoryAsync","intermediates","loadCacheMap","error","console","warn","files","readDirectoryAsync","file","filePath","info","isDirectory","set","uri","timestamp","modificationTime","Date","now","size","getCacheKey","url","replace","toLowerCase","get","key","entry","age","delete","localUri","cachedPath","copyAsync","from","to","enforceMaxSize","download","cached","downloadResult","downloadAsync","status","entries","Array","totalSize","reduce","sum","sort","a","b","currentSize","deleteAsync","idempotent","clear","getCacheSize","values","imageCache"],"sources":["/home/user/rork-vibesync-458/utils/image-cache.ts"],"sourcesContent":["import * as FileSystem from 'expo-file-system';\nimport { Platform } from 'react-native';\n\nconst CACHE_DIR = `${FileSystem.cacheDirectory}images/`;\nconst MAX_CACHE_SIZE = 100 * 1024 * 1024;\nconst CACHE_EXPIRY = 7 * 24 * 60 * 60 * 1000;\n\ninterface CacheEntry {\n  uri: string;\n  timestamp: number;\n  size: number;\n}\n\nclass ImageCache {\n  private cacheMap: Map<string, CacheEntry> = new Map();\n  private initialized = false;\n\n  async initialize() {\n    if (this.initialized || Platform.OS === 'web') return;\n\n    try {\n      const dirInfo = await FileSystem.getInfoAsync(CACHE_DIR);\n      if (!dirInfo.exists) {\n        await FileSystem.makeDirectoryAsync(CACHE_DIR, { intermediates: true });\n      }\n      await this.loadCacheMap();\n      this.initialized = true;\n    } catch (error) {\n      console.warn('[ImageCache] Initialization error:', error);\n    }\n  }\n\n  private async loadCacheMap() {\n    try {\n      const files = await FileSystem.readDirectoryAsync(CACHE_DIR);\n      for (const file of files) {\n        const filePath = `${CACHE_DIR}${file}`;\n        const info = await FileSystem.getInfoAsync(filePath);\n        if (info.exists && !info.isDirectory) {\n          this.cacheMap.set(file, {\n            uri: filePath,\n            timestamp: info.modificationTime || Date.now(),\n            size: info.size || 0,\n          });\n        }\n      }\n    } catch (error) {\n      console.warn('[ImageCache] Load cache map error:', error);\n    }\n  }\n\n  private getCacheKey(url: string): string {\n    return url.replace(/[^a-z0-9]/gi, '_').toLowerCase();\n  }\n\n  async get(url: string): Promise<string | null> {\n    if (Platform.OS === 'web') return url;\n    if (!this.initialized) await this.initialize();\n\n    const key = this.getCacheKey(url);\n    const entry = this.cacheMap.get(key);\n\n    if (entry) {\n      const age = Date.now() - entry.timestamp;\n      if (age < CACHE_EXPIRY) {\n        const info = await FileSystem.getInfoAsync(entry.uri);\n        if (info.exists) {\n          return entry.uri;\n        }\n      }\n      this.cacheMap.delete(key);\n    }\n\n    return null;\n  }\n\n  async set(url: string, localUri: string): Promise<void> {\n    if (Platform.OS === 'web') return;\n    if (!this.initialized) await this.initialize();\n\n    try {\n      const key = this.getCacheKey(url);\n      const cachedPath = `${CACHE_DIR}${key}`;\n\n      await FileSystem.copyAsync({\n        from: localUri,\n        to: cachedPath,\n      });\n\n      const info = await FileSystem.getInfoAsync(cachedPath);\n      if (info.exists) {\n        this.cacheMap.set(key, {\n          uri: cachedPath,\n          timestamp: Date.now(),\n          size: info.size || 0,\n        });\n\n        await this.enforceMaxSize();\n      }\n    } catch (error) {\n      console.warn('[ImageCache] Set error:', error);\n    }\n  }\n\n  async download(url: string): Promise<string> {\n    if (Platform.OS === 'web') return url;\n\n    const cached = await this.get(url);\n    if (cached) return cached;\n\n    try {\n      const key = this.getCacheKey(url);\n      const cachedPath = `${CACHE_DIR}${key}`;\n\n      const downloadResult = await FileSystem.downloadAsync(url, cachedPath);\n      \n      if (downloadResult.status === 200) {\n        const info = await FileSystem.getInfoAsync(cachedPath);\n        if (info.exists) {\n          this.cacheMap.set(key, {\n            uri: cachedPath,\n            timestamp: Date.now(),\n            size: info.size || 0,\n          });\n\n          await this.enforceMaxSize();\n          return cachedPath;\n        }\n      }\n    } catch (error) {\n      console.warn('[ImageCache] Download error:', error);\n    }\n\n    return url;\n  }\n\n  private async enforceMaxSize() {\n    const entries = Array.from(this.cacheMap.entries());\n    const totalSize = entries.reduce((sum, [, entry]) => sum + entry.size, 0);\n\n    if (totalSize > MAX_CACHE_SIZE) {\n      entries.sort((a, b) => a[1].timestamp - b[1].timestamp);\n\n      let currentSize = totalSize;\n      for (const [key, entry] of entries) {\n        if (currentSize <= MAX_CACHE_SIZE * 0.8) break;\n\n        try {\n          await FileSystem.deleteAsync(entry.uri, { idempotent: true });\n          this.cacheMap.delete(key);\n          currentSize -= entry.size;\n        } catch (error) {\n          console.warn('[ImageCache] Delete error:', error);\n        }\n      }\n    }\n  }\n\n  async clear() {\n    if (Platform.OS === 'web') return;\n\n    try {\n      await FileSystem.deleteAsync(CACHE_DIR, { idempotent: true });\n      await FileSystem.makeDirectoryAsync(CACHE_DIR, { intermediates: true });\n      this.cacheMap.clear();\n    } catch (error) {\n      console.warn('[ImageCache] Clear error:', error);\n    }\n  }\n\n  getCacheSize(): number {\n    return Array.from(this.cacheMap.values()).reduce((sum, entry) => sum + entry.size, 0);\n  }\n}\n\nexport const imageCache = new ImageCache();\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}