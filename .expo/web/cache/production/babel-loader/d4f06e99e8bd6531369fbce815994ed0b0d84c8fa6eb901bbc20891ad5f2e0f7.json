{"ast":null,"code":"'use strict';import{useEffect,useState}from'react';import{cancelAnimation}from\"../animation/index.js\";import{makeMutable}from\"../core.js\";export function useSharedValue(initialValue){const[mutable]=useState(()=>makeMutable(initialValue));useEffect(()=>{return()=>{cancelAnimation(mutable);};},[mutable]);return mutable;}","map":{"version":3,"names":["useEffect","useState","cancelAnimation","makeMutable","useSharedValue","initialValue","mutable"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-reanimated/src/hook/useSharedValue.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useState } from 'react';\nimport { cancelAnimation } from '../animation';\nimport type { SharedValue } from '../commonTypes';\nimport { makeMutable } from '../core';\n\n/**\n * Lets you define [shared\n * values](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#shared-value)\n * in your components.\n *\n * @param initialValue - The value you want to be initially stored to a `.value`\n *   property.\n * @returns A shared value with a single `.value` property initially set to the\n *   `initialValue` - {@link SharedValue}.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useSharedValue\n */\nexport function useSharedValue<Value>(initialValue: Value): SharedValue<Value> {\n  const [mutable] = useState(() => makeMutable(initialValue));\n  useEffect(() => {\n    return () => {\n      cancelAnimation(mutable);\n    };\n  }, [mutable]);\n  return mutable;\n}\n"],"mappings":"AAAA,YAAY,CACZ,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,OAASC,eAAe,KAAQ,uBAAc,CAE9C,OAASC,WAAW,KAAQ,YAAS,CAarC,MAAO,SAAS,CAAAC,cAAcA,CAAQC,YAAmB,CAAsB,CAC7E,KAAM,CAACC,OAAO,CAAC,CAAGL,QAAQ,CAAC,IAAME,WAAW,CAACE,YAAY,CAAC,CAAC,CAC3DL,SAAS,CAAC,IAAM,CACd,MAAO,IAAM,CACXE,eAAe,CAACI,OAAO,CAAC,CAC1B,CAAC,CACH,CAAC,CAAE,CAACA,OAAO,CAAC,CAAC,CACb,MAAO,CAAAA,OAAO,CAChB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}