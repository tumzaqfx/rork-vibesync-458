{"ast":null,"code":"import{PermissionStatus,createPermissionHook,UnavailabilityError}from'expo-modules-core';import Platform from\"react-native-web/dist/exports/Platform\";import MediaLibrary from'./ExpoMediaLibrary';const isExpoGo=typeof expo!=='undefined'&&globalThis.expo?.modules?.ExpoGo;let loggedExpoGoWarning=false;if(isExpoGo&&!loggedExpoGoWarning){console.warn('Due to changes in Androids permission requirements, Expo Go can no longer provide full access to the media library. To test the full functionality of this module, you can create a development build. https://docs.expo.dev/develop/development-builds/create-a-build');loggedExpoGoWarning=true;}export{PermissionStatus};function arrayize(item){if(Array.isArray(item)){return item;}return item?[item]:[];}function getId(ref){if(typeof ref==='string'){return ref;}return ref?ref.id:undefined;}function checkAssetIds(assetIds){if(assetIds.some(id=>!id||typeof id!=='string')){throw new Error('Asset ID must be a string!');}}function checkAlbumIds(albumIds){if(albumIds.some(id=>!id||typeof id!=='string')){throw new Error('Album ID must be a string!');}}function checkMediaType(mediaType){if(Object.values(MediaType).indexOf(mediaType)===-1){throw new Error(`Invalid mediaType: ${mediaType}`);}}function checkSortBy(sortBy){if(Array.isArray(sortBy)){checkSortByKey(sortBy[0]);if(typeof sortBy[1]!=='boolean'){throw new Error('Invalid sortBy array argument. Second item must be a boolean!');}}else{checkSortByKey(sortBy);}}function checkSortByKey(sortBy){if(Object.values(SortBy).indexOf(sortBy)===-1){throw new Error(`Invalid sortBy key: ${sortBy}`);}}function sortByOptionToString(sortBy){checkSortBy(sortBy);if(Array.isArray(sortBy)){return`${sortBy[0]} ${sortBy[1]?'ASC':'DESC'}`;}return`${sortBy} DESC`;}function dateToNumber(value){return value instanceof Date?value.getTime():value;}export const MediaType=MediaLibrary.MediaType;export const SortBy=MediaLibrary.SortBy;export async function isAvailableAsync(){return!!MediaLibrary&&'getAssetsAsync'in MediaLibrary;}export async function requestPermissionsAsync(writeOnly=false,granularPermissions){if(!MediaLibrary.requestPermissionsAsync){throw new UnavailabilityError('MediaLibrary','requestPermissionsAsync');}if(false){return await MediaLibrary.requestPermissionsAsync(writeOnly,granularPermissions);}return await MediaLibrary.requestPermissionsAsync(writeOnly);}export async function getPermissionsAsync(writeOnly=false,granularPermissions){if(!MediaLibrary.getPermissionsAsync){throw new UnavailabilityError('MediaLibrary','getPermissionsAsync');}if(false){return await MediaLibrary.getPermissionsAsync(writeOnly,granularPermissions);}return await MediaLibrary.getPermissionsAsync(writeOnly);}export const usePermissions=createPermissionHook({getMethod:options=>getPermissionsAsync(options?.writeOnly,options?.granularPermissions),requestMethod:options=>requestPermissionsAsync(options?.writeOnly,options?.granularPermissions)});export async function presentPermissionsPickerAsync(mediaTypes=['photo','video']){if(false&&isExpoGo){throw new UnavailabilityError('MediaLibrary','presentPermissionsPickerAsync is unavailable in Expo Go');}if(false&&Platform.Version>=34){await MediaLibrary.requestPermissionsAsync(false,mediaTypes);return;}if(!MediaLibrary.presentPermissionsPickerAsync){throw new UnavailabilityError('MediaLibrary','presentPermissionsPickerAsync');}return await MediaLibrary.presentPermissionsPickerAsync();}export async function createAssetAsync(localUri,album){if(!MediaLibrary.createAssetAsync){throw new UnavailabilityError('MediaLibrary','createAssetAsync');}const albumId=getId(album);if(!localUri||typeof localUri!=='string'){throw new Error('Invalid argument \"localUri\". It must be a string!');}const asset=await MediaLibrary.createAssetAsync(localUri,albumId);if(Array.isArray(asset)){return asset[0];}return asset;}export async function saveToLibraryAsync(localUri){if(!MediaLibrary.saveToLibraryAsync){throw new UnavailabilityError('MediaLibrary','saveToLibraryAsync');}return await MediaLibrary.saveToLibraryAsync(localUri);}export async function addAssetsToAlbumAsync(assets,album,copy=true){if(!MediaLibrary.addAssetsToAlbumAsync){throw new UnavailabilityError('MediaLibrary','addAssetsToAlbumAsync');}const assetIds=arrayize(assets).map(getId);const albumId=getId(album);checkAssetIds(assetIds);if(!albumId||typeof albumId!=='string'){throw new Error('Invalid album ID. It must be a string!');}if(false){return await MediaLibrary.addAssetsToAlbumAsync(assetIds,albumId);}return await MediaLibrary.addAssetsToAlbumAsync(assetIds,albumId,!!copy);}export async function removeAssetsFromAlbumAsync(assets,album){if(!MediaLibrary.removeAssetsFromAlbumAsync){throw new UnavailabilityError('MediaLibrary','removeAssetsFromAlbumAsync');}const assetIds=arrayize(assets).map(getId);const albumId=getId(album);checkAssetIds(assetIds);return await MediaLibrary.removeAssetsFromAlbumAsync(assetIds,albumId);}export async function deleteAssetsAsync(assets){if(!MediaLibrary.deleteAssetsAsync){throw new UnavailabilityError('MediaLibrary','deleteAssetsAsync');}const assetIds=arrayize(assets).map(getId);checkAssetIds(assetIds);return await MediaLibrary.deleteAssetsAsync(assetIds);}export async function getAssetInfoAsync(asset,options={shouldDownloadFromNetwork:true}){if(!MediaLibrary.getAssetInfoAsync){throw new UnavailabilityError('MediaLibrary','getAssetInfoAsync');}const assetId=getId(asset);checkAssetIds([assetId]);const assetInfo=await MediaLibrary.getAssetInfoAsync(assetId,options);if(Array.isArray(assetInfo)){return assetInfo[0];}return assetInfo;}export async function getAlbumsAsync({includeSmartAlbums=false}={}){if(!MediaLibrary.getAlbumsAsync){throw new UnavailabilityError('MediaLibrary','getAlbumsAsync');}return await MediaLibrary.getAlbumsAsync({includeSmartAlbums});}export async function getAlbumAsync(title){if(!MediaLibrary.getAlbumAsync){throw new UnavailabilityError('MediaLibrary','getAlbumAsync');}if(typeof title!=='string'){throw new Error('Album title must be a string!');}return await MediaLibrary.getAlbumAsync(title);}export async function createAlbumAsync(albumName,asset,copyAsset=true,initialAssetLocalUri){if(!MediaLibrary.createAlbumAsync){throw new UnavailabilityError('MediaLibrary','createAlbumAsync');}const assetId=getId(asset);if(false&&(typeof assetId!=='string'||assetId.length===0)&&!initialAssetLocalUri){throw new Error('MediaLibrary.createAlbumAsync must be called with an asset or a localUri on Android.');}if(!albumName||typeof albumName!=='string'){throw new Error('Invalid argument \"albumName\". It must be a string!');}if(assetId!=null&&typeof assetId!=='string'){throw new Error('Asset ID must be a string!');}if(false){return await MediaLibrary.createAlbumAsync(albumName,assetId,initialAssetLocalUri);}return await MediaLibrary.createAlbumAsync(albumName,assetId,!!copyAsset,initialAssetLocalUri);}export async function deleteAlbumsAsync(albums,assetRemove=false){if(!MediaLibrary.deleteAlbumsAsync){throw new UnavailabilityError('MediaLibrary','deleteAlbumsAsync');}const albumIds=arrayize(albums).map(getId);checkAlbumIds(albumIds);if(false){return await MediaLibrary.deleteAlbumsAsync(albumIds);}return await MediaLibrary.deleteAlbumsAsync(albumIds,!!assetRemove);}export async function getAssetsAsync(assetsOptions={}){if(!MediaLibrary.getAssetsAsync){throw new UnavailabilityError('MediaLibrary','getAssetsAsync');}const{first,after,album,sortBy,mediaType,createdAfter,createdBefore}=assetsOptions;const options={first:first==null?20:first,after:getId(after),album:getId(album),sortBy:arrayize(sortBy),mediaType:arrayize(mediaType||[MediaType.photo]),createdAfter:dateToNumber(createdAfter),createdBefore:dateToNumber(createdBefore)};if(first!=null&&typeof options.first!=='number'){throw new Error('Option \"first\" must be a number!');}if(after!=null&&typeof options.after!=='string'){throw new Error('Option \"after\" must be a string!');}if(album!=null&&typeof options.album!=='string'){throw new Error('Option \"album\" must be a string!');}if(after!=null&&false&&isNaN(parseInt(getId(after),10))){throw new Error('Option \"after\" must be a valid ID!');}if(first!=null&&first<0){throw new Error('Option \"first\" must be a positive integer!');}options.mediaType.forEach(checkMediaType);return await MediaLibrary.getAssetsAsync(Object.assign({},options,{sortBy:options.sortBy.map(sortByOptionToString)}));}export function addListener(listener){return MediaLibrary.addListener(MediaLibrary.CHANGE_LISTENER_NAME,listener);}export function removeSubscription(subscription){subscription.remove();}export function removeAllListeners(){MediaLibrary.removeAllListeners(MediaLibrary.CHANGE_LISTENER_NAME);}export async function getMomentsAsync(){if(!MediaLibrary.getMomentsAsync){throw new UnavailabilityError('MediaLibrary','getMomentsAsync');}return await MediaLibrary.getMomentsAsync();}export async function migrateAlbumIfNeededAsync(album){if(!MediaLibrary.migrateAlbumIfNeededAsync){return;}return await MediaLibrary.migrateAlbumIfNeededAsync(getId(album));}export async function albumNeedsMigrationAsync(album){if(!MediaLibrary.albumNeedsMigrationAsync){return false;}return await MediaLibrary.albumNeedsMigrationAsync(getId(album));}","map":{"version":3,"names":["PermissionStatus","createPermissionHook","UnavailabilityError","Platform","MediaLibrary","isExpoGo","expo","globalThis","modules","ExpoGo","loggedExpoGoWarning","console","warn","arrayize","item","Array","isArray","getId","ref","id","undefined","checkAssetIds","assetIds","some","Error","checkAlbumIds","albumIds","checkMediaType","mediaType","Object","values","MediaType","indexOf","checkSortBy","sortBy","checkSortByKey","SortBy","sortByOptionToString","dateToNumber","value","Date","getTime","isAvailableAsync","requestPermissionsAsync","writeOnly","granularPermissions","getPermissionsAsync","usePermissions","getMethod","options","requestMethod","presentPermissionsPickerAsync","mediaTypes","Version","createAssetAsync","localUri","album","albumId","asset","saveToLibraryAsync","addAssetsToAlbumAsync","assets","copy","map","removeAssetsFromAlbumAsync","deleteAssetsAsync","getAssetInfoAsync","shouldDownloadFromNetwork","assetId","assetInfo","getAlbumsAsync","includeSmartAlbums","getAlbumAsync","title","createAlbumAsync","albumName","copyAsset","initialAssetLocalUri","length","deleteAlbumsAsync","albums","assetRemove","getAssetsAsync","assetsOptions","first","after","createdAfter","createdBefore","photo","isNaN","parseInt","forEach","assign","addListener","listener","CHANGE_LISTENER_NAME","removeSubscription","subscription","remove","removeAllListeners","getMomentsAsync","migrateAlbumIfNeededAsync","albumNeedsMigrationAsync"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-media-library/src/MediaLibrary.ts"],"sourcesContent":["import {\n  PermissionResponse as EXPermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  createPermissionHook,\n  UnavailabilityError,\n  EventSubscription,\n} from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nimport MediaLibrary from './ExpoMediaLibrary';\n\nconst isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n\nlet loggedExpoGoWarning = false;\n\nif (isExpoGo && !loggedExpoGoWarning) {\n  console.warn(\n    'Due to changes in Androids permission requirements, Expo Go can no longer provide full access to the media library. To test the full functionality of this module, you can create a development build. https://docs.expo.dev/develop/development-builds/create-a-build'\n  );\n  loggedExpoGoWarning = true;\n}\n\n// @needsAudit\nexport type PermissionResponse = EXPermissionResponse & {\n  /**\n   * Indicates if your app has access to the whole or only part of the photo library. Possible values are:\n   * - `'all'` if the user granted your app access to the whole photo library\n   * - `'limited'` if the user granted your app access only to selected photos (only available on Android API 14+ and iOS 14.0+)\n   * - `'none'` if user denied or hasn't yet granted the permission\n   */\n  accessPrivileges?: 'all' | 'limited' | 'none';\n};\n\n/**\n * Determines the type of media that the app will ask the OS to get access to.\n * @platform android 13+\n */\nexport type GranularPermission = 'audio' | 'photo' | 'video';\n\nexport type MediaTypeValue = 'audio' | 'photo' | 'video' | 'unknown' | 'pairedVideo';\n\n/**\n * Represents the possible types of media that the app will ask the OS to get access to when calling [`presentPermissionsPickerAsync()`](#medialibrarypresentpermissionspickerasyncmediatypes).\n * @platform android 14+\n * */\nexport type MediaTypeFilter = 'photo' | 'video';\n\nexport type SortByKey =\n  | 'default'\n  | 'mediaType'\n  | 'width'\n  | 'height'\n  | 'creationTime'\n  | 'modificationTime'\n  | 'duration';\nexport type SortByValue = [SortByKey, boolean] | SortByKey;\n\ntype InternalSortByValue = `${SortByKey} ${'ASC' | 'DESC'}`;\n\nexport type MediaTypeObject = {\n  audio: 'audio';\n  photo: 'photo';\n  video: 'video';\n  unknown: 'unknown';\n};\n\nexport type SortByObject = {\n  default: 'default';\n  mediaType: 'mediaType';\n  width: 'width';\n  height: 'height';\n  creationTime: 'creationTime';\n  modificationTime: 'modificationTime';\n  duration: 'duration';\n};\n\n// @needsAudit\nexport type Asset = {\n  /**\n   * Internal ID that represents an asset.\n   */\n  id: string;\n  /**\n   * Filename of the asset.\n   */\n  filename: string;\n  /**\n   * URI that points to the asset. `ph://*` (iOS), `file://*` (Android)\n   */\n  uri: string;\n  /**\n   * Media type.\n   */\n  mediaType: MediaTypeValue;\n  /**\n   * An array of media subtypes.\n   * @platform ios\n   */\n  mediaSubtypes?: MediaSubtype[];\n  /**\n   * Width of the image or video.\n   */\n  width: number;\n  /**\n   * Height of the image or video.\n   */\n  height: number;\n  /**\n   * File creation timestamp.\n   */\n  creationTime: number;\n  /**\n   * Last modification timestamp.\n   */\n  modificationTime: number;\n  /**\n   * Duration of the video or audio asset in seconds.\n   */\n  duration: number;\n  /**\n   * Album ID that the asset belongs to.\n   * @platform android\n   */\n  albumId?: string;\n};\n\n// @needsAudit\nexport type AssetInfo = Asset & {\n  /**\n   * Local URI for the asset.\n   */\n  localUri?: string;\n  /**\n   * GPS location if available.\n   */\n  location?: Location;\n  /**\n   * EXIF metadata associated with the image.\n   */\n  exif?: object;\n  /**\n   * Whether the asset is marked as favorite.\n   * @platform ios\n   */\n  isFavorite?: boolean;\n  /**\n   * This field is available only if flag `shouldDownloadFromNetwork` is set to `false`.\n   * Whether the asset is stored on the network (iCloud on iOS).\n   * @platform ios\n   */\n  isNetworkAsset?: boolean; //iOS only\n  /**\n   * Display orientation of the image. Orientation is available only for assets whose\n   * `mediaType` is `MediaType.photo`. Value will range from 1 to 8, see [EXIF orientation specification](http://sylvana.net/jpegcrop/exif_orientation.html)\n   * for more details.\n   * @platform ios\n   */\n  orientation?: number;\n  /**\n   * Contains information about the video paired with the image file.\n   * This field is available if the `mediaType` is `\"photo\"`, and the `mediaSubtypes` includes `\"livePhoto\"`.\n   * @platform ios\n   */\n  pairedVideoAsset?: Asset | null;\n};\n\n/**\n * Constants identifying specific variations of asset media, such as panorama or screenshot photos,\n * and time-lapse or high-frame-rate video. Maps to [these values](https://developer.apple.com/documentation/photokit/phassetmediasubtype#1603888).\n * */\nexport type MediaSubtype =\n  | 'depthEffect'\n  | 'hdr'\n  | 'highFrameRate'\n  | 'livePhoto'\n  | 'panorama'\n  | 'screenshot'\n  | 'stream'\n  | 'timelapse';\n\n// @needsAudit\nexport type MediaLibraryAssetInfoQueryOptions = {\n  /**\n   * Whether allow the asset to be downloaded from network. Only available in iOS with iCloud assets.\n   * @default true\n   */\n  shouldDownloadFromNetwork?: boolean;\n};\n\n// @needsAudit\nexport type MediaLibraryAssetsChangeEvent = {\n  /**\n   * Whether the media library's changes could be described as \"incremental changes\".\n   * `true` indicates the changes are described by the `insertedAssets`, `deletedAssets` and\n   * `updatedAssets` values. `false` indicates that the scope of changes is too large and you\n   * should perform a full assets reload (eg. a user has changed access to individual assets in the\n   * media library).\n   */\n  hasIncrementalChanges: boolean;\n  /**\n   * Available only if `hasIncrementalChanges` is `true`.\n   * Array of [`Asset`](#asset)s that have been inserted to the library.\n   */\n  insertedAssets?: Asset[];\n  /**\n   * Available only if `hasIncrementalChanges` is `true`.\n   * Array of [`Asset`](#asset)s that have been deleted from the library.\n   */\n  deletedAssets?: Asset[];\n  /**\n   * Available only if `hasIncrementalChanges` is `true`.\n   * Array of [`Asset`](#asset)s that have been updated or completed downloading from network\n   * storage (iCloud on iOS).\n   */\n  updatedAssets?: Asset[];\n};\n\n// @docsMissing\nexport type Location = {\n  latitude: number;\n  longitude: number;\n};\n\n// @needsAudit\nexport type Album = {\n  /**\n   * Album ID.\n   */\n  id: string;\n  /**\n   * Album title.\n   */\n  title: string;\n  /**\n   * Estimated number of assets in the album.\n   */\n  assetCount: number;\n  /**\n   * The type of the assets album.\n   * @platform ios\n   */\n  type?: AlbumType;\n  /**\n   * Apply only to albums whose type is `'moment'`. Earliest creation timestamp of all\n   * assets in the moment.\n   * @platform ios\n   */\n  startTime: number;\n  /**\n   * Apply only to albums whose type is `'moment'`. Latest creation timestamp of all\n   * assets in the moment.\n   * @platform ios\n   */\n  endTime: number;\n  /**\n   * Apply only to albums whose type is `'moment'`. Approximated location of all\n   * assets in the moment.\n   * @platform ios\n   */\n  approximateLocation?: Location;\n  /**\n   * Apply only to albums whose type is `'moment'`. Names of locations grouped\n   * in the moment.\n   * @platform ios\n   */\n  locationNames?: string[];\n};\n\n// @docsMissing\nexport type AlbumType = 'album' | 'moment' | 'smartAlbum';\n\n// @docsMissing\nexport type AlbumsOptions = {\n  includeSmartAlbums?: boolean;\n};\n\n// @needsAudit\nexport type AssetsOptions = {\n  /**\n   * The maximum number of items on a single page.\n   * @default 20\n   */\n  first?: number;\n  /**\n   * Asset ID of the last item returned on the previous page. To get the ID of the next page,\n   * pass [`endCursor`](#pagedinfo) as its value.\n   */\n  after?: AssetRef;\n  /**\n   * [Album](#album) or its ID to get assets from specific album.\n   */\n  album?: AlbumRef;\n  /**\n   * An array of [`SortByValue`](#sortbyvalue)s or a single `SortByValue` value. By default, all\n   * keys are sorted in descending order, however you can also pass a pair `[key, ascending]` where\n   * the second item is a `boolean` value that means whether to use ascending order. Note that if\n   * the `SortBy.default` key is used, then `ascending` argument will not matter. Earlier items have\n   * higher priority when sorting out the results.\n   * If empty, this method uses the default sorting that is provided by the platform.\n   */\n  sortBy?: SortByValue[] | SortByValue;\n  /**\n   * An array of [MediaTypeValue](#mediatypevalue)s or a single `MediaTypeValue`.\n   * @default MediaType.photo\n   */\n  mediaType?: MediaTypeValue[] | MediaTypeValue;\n  /**\n   * `Date` object or Unix timestamp in milliseconds limiting returned assets only to those that\n   * were created after this date.\n   */\n  createdAfter?: Date | number;\n  /**\n   * Similarly as `createdAfter`, but limits assets only to those that were created before specified\n   * date.\n   */\n  createdBefore?: Date | number;\n};\n\n// @needsAudit\nexport type PagedInfo<T> = {\n  /**\n   * A page of [`Asset`](#asset)s fetched by the query.\n   */\n  assets: T[];\n  /**\n   * ID of the last fetched asset. It should be passed as `after` option in order to get the\n   * next page.\n   */\n  endCursor: string;\n  /**\n   * Whether there are more assets to fetch.\n   */\n  hasNextPage: boolean;\n  /**\n   * Estimated total number of assets that match the query.\n   */\n  totalCount: number;\n};\n\n// @docsMissing\nexport type AssetRef = Asset | string;\n\n// @docsMissing\nexport type AlbumRef = Album | string;\n\nexport {\n  PermissionStatus,\n  PermissionExpiration,\n  EXPermissionResponse,\n  PermissionHookOptions,\n  EventSubscription as Subscription,\n};\n\nfunction arrayize<T>(item: T | T[]): T[] {\n  if (Array.isArray(item)) {\n    return item;\n  }\n  return item ? [item] : [];\n}\n\nfunction getId(ref: string | undefined | { id?: string }): string | undefined {\n  if (typeof ref === 'string') {\n    return ref;\n  }\n  return ref ? ref.id : undefined;\n}\n\nfunction checkAssetIds(assetIds: unknown[]): asserts assetIds is string[] {\n  if (assetIds.some((id) => !id || typeof id !== 'string')) {\n    throw new Error('Asset ID must be a string!');\n  }\n}\n\nfunction checkAlbumIds(albumIds: unknown[]): asserts albumIds is string[] {\n  if (albumIds.some((id) => !id || typeof id !== 'string')) {\n    throw new Error('Album ID must be a string!');\n  }\n}\n\nfunction checkMediaType(mediaType: unknown): asserts mediaType is keyof MediaTypeObject {\n  if (Object.values(MediaType).indexOf(mediaType as any) === -1) {\n    throw new Error(`Invalid mediaType: ${mediaType}`);\n  }\n}\n\nfunction checkSortBy(sortBy: unknown): asserts sortBy is SortByValue {\n  if (Array.isArray(sortBy)) {\n    checkSortByKey(sortBy[0]);\n\n    if (typeof sortBy[1] !== 'boolean') {\n      throw new Error('Invalid sortBy array argument. Second item must be a boolean!');\n    }\n  } else {\n    checkSortByKey(sortBy);\n  }\n}\n\nfunction checkSortByKey(sortBy: any): void {\n  if (Object.values(SortBy).indexOf(sortBy) === -1) {\n    throw new Error(`Invalid sortBy key: ${sortBy}`);\n  }\n}\n\nfunction sortByOptionToString(sortBy: SortByValue | undefined): InternalSortByValue {\n  checkSortBy(sortBy);\n  if (Array.isArray(sortBy)) {\n    return `${sortBy[0]} ${sortBy[1] ? 'ASC' : 'DESC'}`;\n  }\n  return `${sortBy} DESC`;\n}\n\nfunction dateToNumber(value?: Date | number): number | undefined {\n  return value instanceof Date ? value.getTime() : value;\n}\n\n// @needsAudit\n/**\n * Possible media types.\n */\nexport const MediaType: MediaTypeObject = MediaLibrary.MediaType;\n\n// @needsAudit\n/**\n * Supported keys that can be used to sort `getAssetsAsync` results.\n */\nexport const SortBy: SortByObject = MediaLibrary.SortBy;\n\n// @needsAudit\n/**\n * Returns whether the Media Library API is enabled on the current device.\n * @return A promise which fulfils with a `boolean`, indicating whether the Media Library API is\n * available on the current device.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!MediaLibrary && 'getAssetsAsync' in MediaLibrary;\n}\n\n// @needsAudit @docsMissing\n/**\n * Asks the user to grant permissions for accessing media in user's media library.\n * @param writeOnly\n * @param granularPermissions - A list of [`GranularPermission`](#granularpermission) values. This parameter has an\n * effect only on Android 13 and newer. By default, `expo-media-library` will ask for all possible permissions.\n * @return A promise that fulfils with [`PermissionResponse`](#permissionresponse) object.\n */\nexport async function requestPermissionsAsync(\n  writeOnly: boolean = false,\n  granularPermissions?: GranularPermission[]\n): Promise<PermissionResponse> {\n  if (!MediaLibrary.requestPermissionsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'requestPermissionsAsync');\n  }\n  if (Platform.OS === 'android') {\n    return await MediaLibrary.requestPermissionsAsync(writeOnly, granularPermissions);\n  }\n  return await MediaLibrary.requestPermissionsAsync(writeOnly);\n}\n\n// @needsAudit @docsMissing\n/**\n * Checks user's permissions for accessing media library.\n * @param writeOnly\n * @param granularPermissions - A list of [`GranularPermission`](#granularpermission) values. This parameter has\n * an effect only on Android 13 and newer. By default, `expo-media-library` will ask for all possible permissions.\n * @return A promise that fulfils with [`PermissionResponse`](#permissionresponse) object.\n */\nexport async function getPermissionsAsync(\n  writeOnly: boolean = false,\n  granularPermissions?: GranularPermission[]\n): Promise<PermissionResponse> {\n  if (!MediaLibrary.getPermissionsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getPermissionsAsync');\n  }\n  if (Platform.OS === 'android') {\n    return await MediaLibrary.getPermissionsAsync(writeOnly, granularPermissions);\n  }\n  return await MediaLibrary.getPermissionsAsync(writeOnly);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the media library.\n * This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook<\n  PermissionResponse,\n  { writeOnly?: boolean; granularPermissions?: GranularPermission[] }\n>({\n  // TODO(cedric): permission requesters should have an options param or a different requester\n  getMethod: (options) => getPermissionsAsync(options?.writeOnly, options?.granularPermissions),\n  requestMethod: (options) =>\n    requestPermissionsAsync(options?.writeOnly, options?.granularPermissions),\n});\n\n// @needsAudit\n/**\n * Allows the user to update the assets that your app has access to.\n * The system modal is only displayed if the user originally allowed only `limited` access to their\n * media library, otherwise this method is a no-op.\n * @param mediaTypes Limits the type(s) of media that the user will be granting access to. By default, a list that shows both photos and videos is presented.\n *\n * @return A promise that either rejects if the method is unavailable, or resolves to `void`.\n * > __Note:__ This method doesn't inform you if the user changes which assets your app has access to.\n * That information is only exposed by iOS, and to obtain it, you need to subscribe for updates to the user's media library using [`addListener()`](#medialibraryaddlistenerlistener).\n * If `hasIncrementalChanges` is `false`, the user changed their permissions.\n *\n * @platform android 14+\n * @platform ios\n */\nexport async function presentPermissionsPickerAsync(\n  mediaTypes: MediaTypeFilter[] = ['photo', 'video']\n): Promise<void> {\n  if (Platform.OS === 'android' && isExpoGo) {\n    throw new UnavailabilityError(\n      'MediaLibrary',\n      'presentPermissionsPickerAsync is unavailable in Expo Go'\n    );\n  }\n  if (Platform.OS === 'android' && Platform.Version >= 34) {\n    await MediaLibrary.requestPermissionsAsync(false, mediaTypes);\n    return;\n  }\n  if (!MediaLibrary.presentPermissionsPickerAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'presentPermissionsPickerAsync');\n  }\n  return await MediaLibrary.presentPermissionsPickerAsync();\n}\n\n// @needsAudit\n/**\n * Creates an asset from existing file. The most common use case is to save a picture taken by [Camera](./camera).\n * This method requires `CAMERA_ROLL` permission.\n *\n * @example\n * ```js\n * const { uri } = await Camera.takePictureAsync();\n * const asset = await MediaLibrary.createAssetAsync(uri);\n * ```\n * @param localUri A URI to the image or video file. It must contain an extension. On Android it\n * must be a local path, so it must start with `file:///`\n *\n * @param album An [Album](#album) or its ID. If provided, the asset will be added to this album upon creation, otherwise it will be added to the default album for the media type.\n * The album has exist.\n * @return A promise which fulfils with an object representing an [`Asset`](#asset).\n */\nexport async function createAssetAsync(localUri: string, album?: AlbumRef): Promise<Asset> {\n  if (!MediaLibrary.createAssetAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'createAssetAsync');\n  }\n\n  const albumId = getId(album);\n\n  if (!localUri || typeof localUri !== 'string') {\n    throw new Error('Invalid argument \"localUri\". It must be a string!');\n  }\n  const asset = await MediaLibrary.createAssetAsync(localUri, albumId);\n\n  if (Array.isArray(asset)) {\n    // Android returns an array with asset, we need to pick the first item\n    return asset[0];\n  }\n  return asset;\n}\n\n// @needsAudit\n/**\n * Saves the file at given `localUri` to the user's media library. Unlike [`createAssetAsync()`](#medialibrarycreateassetasynclocaluri),\n * This method doesn't return created asset.\n * On __iOS 11+__, it's possible to use this method without asking for `CAMERA_ROLL` permission,\n * however then yours `Info.plist` should have `NSPhotoLibraryAddUsageDescription` key.\n * @param localUri A URI to the image or video file. It must contain an extension. On Android it\n * must be a local path, so it must start with `file:///`.\n */\nexport async function saveToLibraryAsync(localUri: string): Promise<void> {\n  if (!MediaLibrary.saveToLibraryAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'saveToLibraryAsync');\n  }\n  return await MediaLibrary.saveToLibraryAsync(localUri);\n}\n\n// @needsAudit\n/**\n * Adds array of assets to the album.\n *\n * On Android, by default it copies assets from the current album to provided one, however it's also\n * possible to move them by passing `false` as `copyAssets` argument. In case they're copied you\n * should keep in mind that `getAssetsAsync` will return duplicated assets.\n * @param assets An array of [Asset](#asset) or their IDs.\n * @param album An [Album](#album) or its ID.\n * @param copy __Android only.__ Whether to copy assets to the new album instead of move them.\n * Defaults to `true`.\n * @return Returns promise which fulfils with `true` if the assets were successfully added to\n * the album.\n */\nexport async function addAssetsToAlbumAsync(\n  assets: AssetRef[] | AssetRef,\n  album: AlbumRef,\n  copy: boolean = true\n): Promise<boolean> {\n  if (!MediaLibrary.addAssetsToAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'addAssetsToAlbumAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n  const albumId = getId(album);\n\n  checkAssetIds(assetIds);\n\n  if (!albumId || typeof albumId !== 'string') {\n    throw new Error('Invalid album ID. It must be a string!');\n  }\n\n  if (Platform.OS === 'ios') {\n    return await MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId);\n  }\n  return await MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId, !!copy);\n}\n\n// @needsAudit\n/**\n * Removes given assets from album.\n *\n * On Android, album will be automatically deleted if there are no more assets inside.\n * @param assets An array of [Asset](#asset) or their IDs.\n * @param album An [Album](#album) or its ID.\n * @return Returns promise which fulfils with `true` if the assets were successfully removed from\n * the album.\n */\nexport async function removeAssetsFromAlbumAsync(\n  assets: AssetRef[] | AssetRef,\n  album: AlbumRef\n): Promise<boolean> {\n  if (!MediaLibrary.removeAssetsFromAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'removeAssetsFromAlbumAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n  const albumId = getId(album);\n\n  checkAssetIds(assetIds);\n  return await MediaLibrary.removeAssetsFromAlbumAsync(assetIds, albumId);\n}\n\n// @needsAudit\n/**\n * Deletes assets from the library. On iOS it deletes assets from all albums they belong to, while\n * on Android it keeps all copies of them (album is strictly connected to the asset). Also, there is\n * additional dialog on iOS that requires user to confirm this action.\n * @param assets An array of [Asset](#asset) or their IDs.\n * @return Returns promise which fulfils with `true` if the assets were successfully deleted.\n */\nexport async function deleteAssetsAsync(assets: AssetRef[] | AssetRef): Promise<boolean> {\n  if (!MediaLibrary.deleteAssetsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'deleteAssetsAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n\n  checkAssetIds(assetIds);\n  return await MediaLibrary.deleteAssetsAsync(assetIds);\n}\n\n// @needsAudit\n/**\n * Provides more information about an asset, including GPS location, local URI and EXIF metadata.\n * @param asset An [Asset](#asset) or its ID.\n * @param options\n * @return An [AssetInfo](#assetinfo) object, which is an `Asset` extended by an additional fields.\n */\nexport async function getAssetInfoAsync(\n  asset: AssetRef,\n  options: MediaLibraryAssetInfoQueryOptions = { shouldDownloadFromNetwork: true }\n): Promise<AssetInfo> {\n  if (!MediaLibrary.getAssetInfoAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAssetInfoAsync');\n  }\n\n  const assetId = getId(asset);\n\n  checkAssetIds([assetId]);\n\n  const assetInfo = await MediaLibrary.getAssetInfoAsync(assetId, options);\n\n  if (Array.isArray(assetInfo)) {\n    // Android returns an array with asset info, we need to pick the first item\n    return assetInfo[0];\n  }\n  return assetInfo;\n}\n\n// @needsAudit\n/**\n * Queries for user-created albums in media gallery.\n * @return A promise which fulfils with an array of [`Album`](#asset)s. Depending on Android version,\n * root directory of your storage may be listed as album titled `\"0\"` or unlisted at all.\n */\nexport async function getAlbumsAsync({ includeSmartAlbums = false }: AlbumsOptions = {}): Promise<\n  Album[]\n> {\n  if (!MediaLibrary.getAlbumsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAlbumsAsync');\n  }\n  return await MediaLibrary.getAlbumsAsync({ includeSmartAlbums });\n}\n\n// @needsAudit\n/**\n * Queries for an album with a specific name.\n * @param title Name of the album to look for.\n * @return An object representing an [`Album`](#album), if album with given name exists, otherwise\n * returns `null`.\n */\nexport async function getAlbumAsync(title: string): Promise<Album> {\n  if (!MediaLibrary.getAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAlbumAsync');\n  }\n  if (typeof title !== 'string') {\n    throw new Error('Album title must be a string!');\n  }\n  return await MediaLibrary.getAlbumAsync(title);\n}\n\n// @needsAudit\n/**\n * Creates an album with given name and initial asset. The asset parameter is required on Android,\n * since it's not possible to create empty album on this platform. On Android, by default it copies\n * given asset from the current album to the new one, however it's also possible to move it by\n * passing `false` as `copyAsset` argument.\n * In case it's copied you should keep in mind that `getAssetsAsync` will return duplicated asset.\n * > On Android, it's not possible to create an empty album. You must provide an existing asset to copy or move into the album or an uri of a local file, which will be used to create an initial asset for the album.\n * @param albumName Name of the album to create.\n * @param asset An [Asset](#asset) or its ID. On Android you either need to provide an asset or a localUri.\n * @param initialAssetLocalUri A URI to the local media file, which will be used to create the initial asset inside the album. It must contain an extension. On Android it\n * must be a local path, so it must start with `file:///`. If the `asset` was provided, this parameter will be ignored.\n * @param copyAsset __Android Only.__ Whether to copy asset to the new album instead of move it. This parameter is ignored if `asset` was not provided.\n * Defaults to `true`.\n * @return Newly created [`Album`](#album).\n */\nexport async function createAlbumAsync(\n  albumName: string,\n  asset?: AssetRef,\n  copyAsset: boolean = true,\n  initialAssetLocalUri?: string\n): Promise<Album> {\n  if (!MediaLibrary.createAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'createAlbumAsync');\n  }\n\n  const assetId = getId(asset);\n\n  if (\n    Platform.OS === 'android' &&\n    (typeof assetId !== 'string' || assetId.length === 0) &&\n    !initialAssetLocalUri\n  ) {\n    // it's not possible to create empty album on Android, so initial asset must be provided\n    throw new Error(\n      'MediaLibrary.createAlbumAsync must be called with an asset or a localUri on Android.'\n    );\n  }\n  if (!albumName || typeof albumName !== 'string') {\n    throw new Error('Invalid argument \"albumName\". It must be a string!');\n  }\n  if (assetId != null && typeof assetId !== 'string') {\n    throw new Error('Asset ID must be a string!');\n  }\n\n  if (Platform.OS === 'ios') {\n    return await MediaLibrary.createAlbumAsync(albumName, assetId, initialAssetLocalUri);\n  }\n  return await MediaLibrary.createAlbumAsync(albumName, assetId, !!copyAsset, initialAssetLocalUri);\n}\n\n// @needsAudit\n/**\n * Deletes given albums from the library. On Android by default it deletes assets belonging to given\n * albums from the library. On iOS it doesn't delete these assets, however it's possible to do by\n * passing `true` as `deleteAssets`.\n * @param albums An array of [`Album`](#asset)s or their IDs.\n * @param assetRemove __iOS Only.__ Whether to also delete assets belonging to given albums.\n * Defaults to `false`.\n * @return Returns a promise which fulfils with `true` if the albums were successfully deleted from\n * the library.\n */\nexport async function deleteAlbumsAsync(\n  albums: AlbumRef[] | AlbumRef,\n  assetRemove: boolean = false\n): Promise<boolean> {\n  if (!MediaLibrary.deleteAlbumsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'deleteAlbumsAsync');\n  }\n\n  const albumIds = arrayize(albums).map(getId);\n\n  checkAlbumIds(albumIds);\n  if (Platform.OS === 'android') {\n    return await MediaLibrary.deleteAlbumsAsync(albumIds);\n  }\n  return await MediaLibrary.deleteAlbumsAsync(albumIds, !!assetRemove);\n}\n\n// @needsAudit\n/**\n * Fetches a page of assets matching the provided criteria.\n * @param assetsOptions\n * @return A promise that fulfils with to [`PagedInfo`](#pagedinfo) object with array of [`Asset`](#asset)s.\n */\nexport async function getAssetsAsync(assetsOptions: AssetsOptions = {}): Promise<PagedInfo<Asset>> {\n  if (!MediaLibrary.getAssetsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAssetsAsync');\n  }\n\n  const { first, after, album, sortBy, mediaType, createdAfter, createdBefore } = assetsOptions;\n\n  const options = {\n    first: first == null ? 20 : first,\n    after: getId(after),\n    album: getId(album),\n    sortBy: arrayize(sortBy),\n    mediaType: arrayize(mediaType || [MediaType.photo]),\n    createdAfter: dateToNumber(createdAfter),\n    createdBefore: dateToNumber(createdBefore),\n  };\n\n  if (first != null && typeof options.first !== 'number') {\n    throw new Error('Option \"first\" must be a number!');\n  }\n  if (after != null && typeof options.after !== 'string') {\n    throw new Error('Option \"after\" must be a string!');\n  }\n  if (album != null && typeof options.album !== 'string') {\n    throw new Error('Option \"album\" must be a string!');\n  }\n  if (after != null && Platform.OS === 'android' && isNaN(parseInt(getId(after) as string, 10))) {\n    throw new Error('Option \"after\" must be a valid ID!');\n  }\n  if (first != null && first < 0) {\n    throw new Error('Option \"first\" must be a positive integer!');\n  }\n\n  options.mediaType.forEach(checkMediaType);\n  // TODO(@kitten): Add expected native types for `MediaLibrary`\n  return await MediaLibrary.getAssetsAsync({\n    ...options,\n    sortBy: options.sortBy.map(sortByOptionToString),\n  });\n}\n\n// @needsAudit\n/**\n * Subscribes for updates in user's media library.\n * @param listener A callback that is fired when any assets have been inserted or deleted from the\n * library. On Android it's invoked with an empty object. On iOS, it's invoked with [`MediaLibraryAssetsChangeEvent`](#medialibraryassetschangeevent)\n * object.\n *\n * Additionally, only on iOS, the listener is also invoked when the user changes access to individual assets in the media library\n * using `presentPermissionsPickerAsync()`.\n * @return An [`Subscription`](#subscription) object that you can call `remove()` on when you would\n * like to unsubscribe the listener.\n */\nexport function addListener(\n  listener: (event: MediaLibraryAssetsChangeEvent) => void\n): EventSubscription {\n  return MediaLibrary.addListener(MediaLibrary.CHANGE_LISTENER_NAME, listener);\n}\n\n// @docsMissing\nexport function removeSubscription(subscription: EventSubscription): void {\n  subscription.remove();\n}\n\n// @needsAudit\n/**\n * Removes all listeners.\n */\nexport function removeAllListeners(): void {\n  MediaLibrary.removeAllListeners(MediaLibrary.CHANGE_LISTENER_NAME);\n}\n\n// @needsAudit\n/**\n * Fetches a list of moments, which is a group of assets taken around the same place\n * and time.\n * @return An array of [albums](#album) whose type is `moment`.\n * @platform ios\n */\nexport async function getMomentsAsync() {\n  if (!MediaLibrary.getMomentsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getMomentsAsync');\n  }\n\n  return await MediaLibrary.getMomentsAsync();\n}\n\n// @needsAudit\n/**\n * Moves album content to the special media directories on **Android R** or **above** if needed.\n * Those new locations are in line with the Android `scoped storage` - so your application won't\n * lose write permission to those directories in the future.\n *\n * This method does nothing if:\n * - app is running on **iOS**, **web** or **Android below R**\n * - app has **write permission** to the album folder\n *\n * The migration is possible when the album contains only compatible files types.\n * For instance, movies and pictures are compatible with each other, but music and pictures are not.\n * If automatic migration isn't possible, the function rejects.\n * In that case, you can use methods from the `expo-file-system` to migrate all your files manually.\n *\n * # Why do you need to migrate files?\n * __Android R__ introduced a lot of changes in the storage system. Now applications can't save\n * anything to the root directory. The only available locations are from the `MediaStore` API.\n * Unfortunately, the media library stored albums in folders for which, because of those changes,\n * the application doesn't have permissions anymore. However, it doesn't mean you need to migrate\n * all your albums. If your application doesn't add assets to albums, you don't have to migrate.\n * Everything will work as it used to. You can read more about scoped storage in [the Android documentation](https://developer.android.com/about/versions/11/privacy/storage).\n *\n * @param album An [Album](#album) or its ID.\n * @return A promise which fulfils to `void`.\n */\nexport async function migrateAlbumIfNeededAsync(album: AlbumRef): Promise<void> {\n  if (!MediaLibrary.migrateAlbumIfNeededAsync) {\n    return;\n  }\n\n  return await MediaLibrary.migrateAlbumIfNeededAsync(getId(album));\n}\n\n// @needsAudit\n/**\n * Checks if the album should be migrated to a different location. In other words, it checks if the\n * application has the write permission to the album folder. If not, it returns `true`, otherwise `false`.\n * > Note: For **Android below R**, **web** or **iOS**, this function always returns `false`.\n * @param album An [Album](#album) or its ID.\n * @return Returns a promise which fulfils with `true` if the album should be migrated.\n */\nexport async function albumNeedsMigrationAsync(album: AlbumRef): Promise<boolean> {\n  if (!MediaLibrary.albumNeedsMigrationAsync) {\n    return false;\n  }\n\n  return await MediaLibrary.albumNeedsMigrationAsync(getId(album));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}