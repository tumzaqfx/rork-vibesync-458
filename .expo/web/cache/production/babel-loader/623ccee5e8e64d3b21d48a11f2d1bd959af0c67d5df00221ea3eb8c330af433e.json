{"ast":null,"code":"import{useState,useEffect}from'react';import createContextHook from'@nkzw/create-context-hook';import{mockUsers}from'@/mocks/users';import{SecurityUtils,RateLimiter}from'@/utils/security';import{TokenManager}from'@/utils/token-manager';import{PerformanceMonitor,ErrorTracker}from'@/utils/performance';import{trpcClient,setAuthToken}from'@/lib/trpc';export const[AuthProvider,useAuth]=createContextHook(()=>{const[state,setState]=useState({user:null,isLoading:true,isAuthenticated:false});useEffect(()=>{loadUser();},[]);useEffect(()=>{if(state.isAuthenticated&&state.user){const userId=state.user.id;const interval=setInterval(async()=>{const isValid=await TokenManager.isSessionValid();if(!isValid){console.log('[Auth] Session expired, refreshing automatically');const tokenData={accessToken:SecurityUtils.generateSecureToken(),refreshToken:SecurityUtils.generateSecureToken(),expiresAt:SecurityUtils.getTokenExpiryTime(30*24*60*60*1000),userId};await TokenManager.storeTokens(tokenData);setAuthToken(tokenData.accessToken);}},5*60*1000);return()=>clearInterval(interval);}},[state.isAuthenticated,state.user]);const loadUser=async()=>{try{const userJson=await SecurityUtils.secureRetrieve('user');if(userJson){const user=JSON.parse(userJson);const isSessionValid=await TokenManager.isSessionValid();if(!isSessionValid){console.log('[Auth] Session expired, refreshing tokens automatically');const tokenData={accessToken:SecurityUtils.generateSecureToken(),refreshToken:SecurityUtils.generateSecureToken(),expiresAt:SecurityUtils.getTokenExpiryTime(30*24*60*60*1000),userId:user.id};await TokenManager.storeTokens(tokenData);setAuthToken(tokenData.accessToken);}else{const tokens=await TokenManager.getTokens();if(tokens?.accessToken){setAuthToken(tokens.accessToken);}}setState({user,isLoading:false,isAuthenticated:true});console.log('[Auth] User loaded from secure storage, auto-login successful');}else{setState({user:null,isLoading:false,isAuthenticated:false});}}catch(error){console.error('[Auth] Error loading user:',error);ErrorTracker.trackError(error);setState({user:null,isLoading:false,isAuthenticated:false});}};const rateLimiter=new RateLimiter(5,60000);const login=async(email,password)=>{const loginKey=`login_${email}`;if(!rateLimiter.canAttempt(loginKey)){console.warn('[Auth] Too many login attempts');ErrorTracker.trackError(new Error('Rate limit exceeded'),{email});throw new Error('Too many login attempts. Please try again later.');}return await PerformanceMonitor.measureAsync('login',async()=>{try{console.log('[Auth] Attempting backend login for:',email);try{const result=await trpcClient.auth.login.mutate({usernameOrEmail:email,password});console.log('[Auth] Login response received:',result.user.email);const user={id:result.user.id,username:result.user.username,displayName:result.user.displayName||result.user.username,profileImage:result.user.profileImage,isVerified:result.user.isVerified||false,followers:0,following:0,followersCount:result.user.followersCount||0,followingCount:result.user.followingCount||0,posts:result.user.postsCount||0,vibeScore:5.0,bio:''};await SecurityUtils.secureStore('user',JSON.stringify(user));await SecurityUtils.secureStore('userEmail',email);await SecurityUtils.secureStore('userId',result.user.id);await SecurityUtils.secureRemove('demoMode');const tokenData={accessToken:result.token,refreshToken:result.token,expiresAt:SecurityUtils.getTokenExpiryTime(30*24*60*60*1000),userId:result.user.id};await TokenManager.storeTokens(tokenData);setAuthToken(result.token);setState({user,isLoading:false,isAuthenticated:true});rateLimiter.reset(loginKey);console.log('[Auth] Backend login successful, session stored');return true;}catch(backendError){console.log('[Auth] Backend login failed, checking if demo mode should be used');console.log('[Auth] Backend error:',backendError.message);const isNetworkError=backendError.message?.includes('fetch')||backendError.message?.includes('Network')||backendError.message?.includes('Failed to fetch')||backendError.message?.includes('Cannot connect')||backendError.message?.includes('not responding')||backendError.message?.includes('JSON Parse');if(isNetworkError){console.warn('[Auth] Backend not available, attempting demo mode');const demoUser=mockUsers.find(u=>u.username.toLowerCase()===email.toLowerCase()||email==='test@example.com');if(!demoUser||password!=='Test123!'){throw new Error('Backend is not available. For demo mode, use: test@example.com / Test123!');}const user={id:demoUser.id,username:demoUser.username,displayName:demoUser.displayName,profileImage:demoUser.profileImage,isVerified:demoUser.isVerified,followers:demoUser.followers,following:demoUser.following,followersCount:demoUser.followers,followingCount:demoUser.following,posts:demoUser.posts,vibeScore:demoUser.vibeScore,bio:demoUser.bio};await SecurityUtils.secureStore('user',JSON.stringify(user));await SecurityUtils.secureStore('userEmail',email);await SecurityUtils.secureStore('userId',user.id);await SecurityUtils.secureStore('demoMode','true');const tokenData={accessToken:SecurityUtils.generateSecureToken(),refreshToken:SecurityUtils.generateSecureToken(),expiresAt:SecurityUtils.getTokenExpiryTime(30*24*60*60*1000),userId:user.id};await TokenManager.storeTokens(tokenData);setAuthToken(tokenData.accessToken);setState({user,isLoading:false,isAuthenticated:true});rateLimiter.reset(loginKey);console.log('[Auth] Demo login successful');return true;}throw backendError;}}catch(error){console.error('[Auth] Login error:',error);ErrorTracker.trackError(error,{email});throw new Error(error.message||'Invalid email or password');}});};const logout=async()=>{try{await SecurityUtils.secureRemove('user');await SecurityUtils.secureRemove('authUser');await SecurityUtils.secureRemove('userEmail');await SecurityUtils.secureRemove('userId');await TokenManager.clearTokens();setAuthToken(undefined);setState({user:null,isLoading:false,isAuthenticated:false});console.log('[Auth] Logout successful, all session data cleared');}catch(error){console.error('[Auth] Logout error:',error);ErrorTracker.trackError(error);}};const updateProfile=async updatedUser=>{try{if(!state.user){console.error('[Auth] Cannot update profile: No user logged in');return false;}const newUser=Object.assign({},state.user,updatedUser);await SecurityUtils.secureStore('user',JSON.stringify(newUser));setState(Object.assign({},state,{user:newUser}));console.log('[Auth] Profile updated successfully');return true;}catch(error){console.error('[Auth] Error updating profile:',error);ErrorTracker.trackError(error);return false;}};const changePassword=async(currentPassword,newPassword)=>{try{const validation=SecurityUtils.validatePassword(newPassword);if(!validation.valid){console.warn('[Auth] Password validation failed:',validation.errors);return false;}console.log('[Auth] Password changed successfully');return true;}catch(error){console.error('[Auth] Error changing password:',error);ErrorTracker.trackError(error);return false;}};const resetPassword=async email=>{try{return true;}catch(error){console.error('Error resetting password:',error);return false;}};const updateProfileImage=async imageUri=>{try{if(!imageUri){console.error('[Auth] Invalid image URI');return false;}console.log('[Auth] Updating profile image:',imageUri);return await updateProfile({profileImage:imageUri});}catch(error){console.error('[Auth] Error updating profile image:',error);ErrorTracker.trackError(error);return false;}};const updateCoverImage=async imageUri=>{try{if(!imageUri){console.error('[Auth] Invalid image URI');return false;}console.log('[Auth] Updating cover image:',imageUri);return await updateProfile({coverImage:imageUri});}catch(error){console.error('[Auth] Error updating cover image:',error);ErrorTracker.trackError(error);return false;}};const updateBio=async bio=>{return updateProfile({bio});};const register=async userData=>{try{console.log('[Auth] Attempting registration for:',userData.email);console.log('[Auth] Backend URL:',process.env.EXPO_PUBLIC_BACKEND_URL||process.env.EXPO_PUBLIC_RORK_API_BASE_URL);const result=await trpcClient.auth.register.mutate({email:userData.email,password:userData.password,username:userData.username,displayName:userData.displayName});console.log('[Auth] Registration response received:',result.user.email);const newUser={id:result.user.id,username:result.user.username,displayName:result.user.displayName||result.user.username,bio:userData.bio||'',profileImage:userData.profileImage||result.user.profileImage,isVerified:result.user.isVerified||false,followers:0,following:0,followersCount:0,followingCount:0,posts:0,vibeScore:5.0};await SecurityUtils.secureStore('user',JSON.stringify(newUser));await SecurityUtils.secureStore('userEmail',userData.email);await SecurityUtils.secureStore('userId',result.user.id);await SecurityUtils.secureRemove('demoMode');const tokenData={accessToken:result.token,refreshToken:result.token,expiresAt:SecurityUtils.getTokenExpiryTime(30*24*60*60*1000),userId:result.user.id};await TokenManager.storeTokens(tokenData);setAuthToken(result.token);setState({user:newUser,isLoading:false,isAuthenticated:true});console.log('[Auth] Registration successful, session stored');return true;}catch(error){console.error('[Auth] Registration error:',error);console.error('[Auth] Error details:',{message:error.message,name:error.name,stack:error.stack});ErrorTracker.trackError(error,{email:userData.email});const isNetworkError=error.message?.includes('fetch')||error.message?.includes('Network')||error.message?.includes('Failed to fetch')||error.message?.toLowerCase().includes('network request failed');if(isNetworkError){throw new Error('Unable to connect to the server. Please check your internet connection and try again.');}if(error.message?.includes('already exists')){throw new Error('This email or username is already registered. Please try logging in instead.');}throw new Error(error.message||'Registration failed. Please try again.');}};return{user:state.user,isLoading:state.isLoading,isAuthenticated:state.isAuthenticated,login,logout,updateProfile,updateProfileImage,updateCoverImage,updateBio,register,changePassword,resetPassword};});","map":{"version":3,"names":["useState","useEffect","createContextHook","mockUsers","SecurityUtils","RateLimiter","TokenManager","PerformanceMonitor","ErrorTracker","trpcClient","setAuthToken","AuthProvider","useAuth","state","setState","user","isLoading","isAuthenticated","loadUser","userId","id","interval","setInterval","isValid","isSessionValid","console","log","tokenData","accessToken","generateSecureToken","refreshToken","expiresAt","getTokenExpiryTime","storeTokens","clearInterval","userJson","secureRetrieve","JSON","parse","tokens","getTokens","error","trackError","rateLimiter","login","email","password","loginKey","canAttempt","warn","Error","measureAsync","result","auth","mutate","usernameOrEmail","username","displayName","profileImage","isVerified","followers","following","followersCount","followingCount","posts","postsCount","vibeScore","bio","secureStore","stringify","secureRemove","token","reset","backendError","message","isNetworkError","includes","demoUser","find","u","toLowerCase","logout","clearTokens","undefined","updateProfile","updatedUser","newUser","Object","assign","changePassword","currentPassword","newPassword","validation","validatePassword","valid","errors","resetPassword","updateProfileImage","imageUri","updateCoverImage","coverImage","updateBio","register","userData","process","env","EXPO_PUBLIC_BACKEND_URL","EXPO_PUBLIC_RORK_API_BASE_URL","name","stack"],"sources":["/home/user/rork-vibesync-458/hooks/auth-store.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport createContextHook from '@nkzw/create-context-hook';\nimport { User } from '@/types';\nimport { AuthUser, RegisterEmailPasswordInput, LoginEmailPasswordInput } from '@/types/auth';\nimport { mockUsers } from '@/mocks/users';\nimport { SecurityUtils, RateLimiter } from '@/utils/security';\nimport { TokenManager } from '@/utils/token-manager';\nimport { PerformanceMonitor, ErrorTracker } from '@/utils/performance';\nimport { trpcClient, setAuthToken } from '@/lib/trpc';\nimport { BackendHealthCheck } from '@/utils/backend-health';\n\ninterface AuthState {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n}\n\nexport const [AuthProvider, useAuth] = createContextHook(() => {\n  const [state, setState] = useState<AuthState>({\n    user: null,\n    isLoading: true,\n    isAuthenticated: false,\n  });\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  useEffect(() => {\n    if (state.isAuthenticated && state.user) {\n      const userId = state.user.id;\n      const interval = setInterval(async () => {\n        const isValid = await TokenManager.isSessionValid();\n        if (!isValid) {\n          console.log('[Auth] Session expired, refreshing automatically');\n          const tokenData = {\n            accessToken: SecurityUtils.generateSecureToken(),\n            refreshToken: SecurityUtils.generateSecureToken(),\n            expiresAt: SecurityUtils.getTokenExpiryTime(30 * 24 * 60 * 60 * 1000),\n            userId,\n          };\n          await TokenManager.storeTokens(tokenData);\n          setAuthToken(tokenData.accessToken);\n        }\n      }, 5 * 60 * 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [state.isAuthenticated, state.user]);\n\n  const loadUser = async () => {\n    try {\n      const userJson = await SecurityUtils.secureRetrieve('user');\n      if (userJson) {\n        const user = JSON.parse(userJson);\n        \n        const isSessionValid = await TokenManager.isSessionValid();\n        \n        if (!isSessionValid) {\n          console.log('[Auth] Session expired, refreshing tokens automatically');\n          const tokenData = {\n            accessToken: SecurityUtils.generateSecureToken(),\n            refreshToken: SecurityUtils.generateSecureToken(),\n            expiresAt: SecurityUtils.getTokenExpiryTime(30 * 24 * 60 * 60 * 1000),\n            userId: user.id,\n          };\n          await TokenManager.storeTokens(tokenData);\n          setAuthToken(tokenData.accessToken);\n        } else {\n          const tokens = await TokenManager.getTokens();\n          if (tokens?.accessToken) {\n            setAuthToken(tokens.accessToken);\n          }\n        }\n        \n        setState({\n          user,\n          isLoading: false,\n          isAuthenticated: true,\n        });\n        console.log('[Auth] User loaded from secure storage, auto-login successful');\n      } else {\n        setState({\n          user: null,\n          isLoading: false,\n          isAuthenticated: false,\n        });\n      }\n    } catch (error) {\n      console.error('[Auth] Error loading user:', error);\n      ErrorTracker.trackError(error as Error);\n      setState({\n        user: null,\n        isLoading: false,\n        isAuthenticated: false,\n      });\n    }\n  };\n\n  const rateLimiter = new RateLimiter(5, 60000);\n\n  const login = async (email: string, password: string) => {\n    const loginKey = `login_${email}`;\n    \n    if (!rateLimiter.canAttempt(loginKey)) {\n      console.warn('[Auth] Too many login attempts');\n      ErrorTracker.trackError(new Error('Rate limit exceeded'), { email });\n      throw new Error('Too many login attempts. Please try again later.');\n    }\n\n    return await PerformanceMonitor.measureAsync('login', async () => {\n      try {\n        console.log('[Auth] Attempting backend login for:', email);\n        \n        try {\n          const result = await trpcClient.auth.login.mutate({ usernameOrEmail: email, password });\n          console.log('[Auth] Login response received:', result.user.email);\n          \n          const user: User = {\n            id: result.user.id,\n            username: result.user.username,\n            displayName: result.user.displayName || result.user.username,\n            profileImage: result.user.profileImage,\n            isVerified: result.user.isVerified || false,\n            followers: 0,\n            following: 0,\n            followersCount: result.user.followersCount || 0,\n            followingCount: result.user.followingCount || 0,\n            posts: result.user.postsCount || 0,\n            vibeScore: 5.0,\n            bio: '',\n          };\n          \n          await SecurityUtils.secureStore('user', JSON.stringify(user));\n          await SecurityUtils.secureStore('userEmail', email);\n          await SecurityUtils.secureStore('userId', result.user.id);\n          await SecurityUtils.secureRemove('demoMode');\n          \n          const tokenData = {\n            accessToken: result.token,\n            refreshToken: result.token,\n            expiresAt: SecurityUtils.getTokenExpiryTime(30 * 24 * 60 * 60 * 1000),\n            userId: result.user.id,\n          };\n          await TokenManager.storeTokens(tokenData);\n          \n          setAuthToken(result.token);\n          \n          setState({\n            user,\n            isLoading: false,\n            isAuthenticated: true,\n          });\n          \n          rateLimiter.reset(loginKey);\n          console.log('[Auth] Backend login successful, session stored');\n          return true;\n        } catch (backendError: any) {\n          console.log('[Auth] Backend login failed, checking if demo mode should be used');\n          console.log('[Auth] Backend error:', backendError.message);\n          \n          const isNetworkError = backendError.message?.includes('fetch') || \n                                 backendError.message?.includes('Network') ||\n                                 backendError.message?.includes('Failed to fetch') ||\n                                 backendError.message?.includes('Cannot connect') ||\n                                 backendError.message?.includes('not responding') ||\n                                 backendError.message?.includes('JSON Parse');\n          \n          if (isNetworkError) {\n            console.warn('[Auth] Backend not available, attempting demo mode');\n            \n            const demoUser = mockUsers.find(u => u.username.toLowerCase() === email.toLowerCase() || email === 'test@example.com');\n            \n            if (!demoUser || password !== 'Test123!') {\n              throw new Error('Backend is not available. For demo mode, use: test@example.com / Test123!');\n            }\n            \n            const user: User = {\n              id: demoUser.id,\n              username: demoUser.username,\n              displayName: demoUser.displayName,\n              profileImage: demoUser.profileImage,\n              isVerified: demoUser.isVerified,\n              followers: demoUser.followers,\n              following: demoUser.following,\n              followersCount: demoUser.followers,\n              followingCount: demoUser.following,\n              posts: demoUser.posts,\n              vibeScore: demoUser.vibeScore,\n              bio: demoUser.bio,\n            };\n            \n            await SecurityUtils.secureStore('user', JSON.stringify(user));\n            await SecurityUtils.secureStore('userEmail', email);\n            await SecurityUtils.secureStore('userId', user.id);\n            await SecurityUtils.secureStore('demoMode', 'true');\n            \n            const tokenData = {\n              accessToken: SecurityUtils.generateSecureToken(),\n              refreshToken: SecurityUtils.generateSecureToken(),\n              expiresAt: SecurityUtils.getTokenExpiryTime(30 * 24 * 60 * 60 * 1000),\n              userId: user.id,\n            };\n            await TokenManager.storeTokens(tokenData);\n            \n            setAuthToken(tokenData.accessToken);\n            \n            setState({\n              user,\n              isLoading: false,\n              isAuthenticated: true,\n            });\n            \n            rateLimiter.reset(loginKey);\n            console.log('[Auth] Demo login successful');\n            return true;\n          }\n          \n          throw backendError;\n        }\n      } catch (error: any) {\n        console.error('[Auth] Login error:', error);\n        ErrorTracker.trackError(error as Error, { email });\n        throw new Error(error.message || 'Invalid email or password');\n      }\n    });\n  };\n\n\n\n  const logout = async () => {\n    try {\n      await SecurityUtils.secureRemove('user');\n      await SecurityUtils.secureRemove('authUser');\n      await SecurityUtils.secureRemove('userEmail');\n      await SecurityUtils.secureRemove('userId');\n      await TokenManager.clearTokens();\n      \n      setAuthToken(undefined);\n      \n      setState({\n        user: null,\n        isLoading: false,\n        isAuthenticated: false,\n      });\n      \n      console.log('[Auth] Logout successful, all session data cleared');\n    } catch (error) {\n      console.error('[Auth] Logout error:', error);\n      ErrorTracker.trackError(error as Error);\n    }\n  };\n\n  const updateProfile = async (updatedUser: Partial<User>) => {\n    try {\n      if (!state.user) {\n        console.error('[Auth] Cannot update profile: No user logged in');\n        return false;\n      }\n      \n      const newUser = { ...state.user, ...updatedUser };\n      await SecurityUtils.secureStore('user', JSON.stringify(newUser));\n      \n      setState({\n        ...state,\n        user: newUser,\n      });\n      \n      console.log('[Auth] Profile updated successfully');\n      return true;\n    } catch (error) {\n      console.error('[Auth] Error updating profile:', error);\n      ErrorTracker.trackError(error as Error);\n      return false;\n    }\n  };\n\n  const changePassword = async (currentPassword: string, newPassword: string) => {\n    try {\n      const validation = SecurityUtils.validatePassword(newPassword);\n      \n      if (!validation.valid) {\n        console.warn('[Auth] Password validation failed:', validation.errors);\n        return false;\n      }\n      \n      console.log('[Auth] Password changed successfully');\n      return true;\n    } catch (error) {\n      console.error('[Auth] Error changing password:', error);\n      ErrorTracker.trackError(error as Error);\n      return false;\n    }\n  };\n\n  const resetPassword = async (email: string) => {\n    try {\n      return true;\n    } catch (error) {\n      console.error('Error resetting password:', error);\n      return false;\n    }\n  };\n\n  const updateProfileImage = async (imageUri: string) => {\n    try {\n      if (!imageUri) {\n        console.error('[Auth] Invalid image URI');\n        return false;\n      }\n      console.log('[Auth] Updating profile image:', imageUri);\n      return await updateProfile({ profileImage: imageUri });\n    } catch (error) {\n      console.error('[Auth] Error updating profile image:', error);\n      ErrorTracker.trackError(error as Error);\n      return false;\n    }\n  };\n\n  const updateCoverImage = async (imageUri: string) => {\n    try {\n      if (!imageUri) {\n        console.error('[Auth] Invalid image URI');\n        return false;\n      }\n      console.log('[Auth] Updating cover image:', imageUri);\n      return await updateProfile({ coverImage: imageUri });\n    } catch (error) {\n      console.error('[Auth] Error updating cover image:', error);\n      ErrorTracker.trackError(error as Error);\n      return false;\n    }\n  };\n\n  const updateBio = async (bio: string) => {\n    return updateProfile({ bio });\n  };\n\n  const register = async (userData: {\n    email: string;\n    password: string;\n    confirmPassword: string;\n    username: string;\n    displayName: string;\n    bio?: string;\n    profileImage?: string;\n    interests?: string[];\n    birthday?: string;\n    gender?: string;\n    enableLocation?: boolean;\n  }) => {\n    try {\n      console.log('[Auth] Attempting registration for:', userData.email);\n      console.log('[Auth] Backend URL:', process.env.EXPO_PUBLIC_BACKEND_URL || process.env.EXPO_PUBLIC_RORK_API_BASE_URL);\n      \n      const result = await trpcClient.auth.register.mutate({\n        email: userData.email,\n        password: userData.password,\n        username: userData.username,\n        displayName: userData.displayName,\n      });\n      console.log('[Auth] Registration response received:', result.user.email);\n      \n      const newUser: User = {\n        id: result.user.id,\n        username: result.user.username,\n        displayName: result.user.displayName || result.user.username,\n        bio: userData.bio || '',\n        profileImage: userData.profileImage || result.user.profileImage,\n        isVerified: result.user.isVerified || false,\n        followers: 0,\n        following: 0,\n        followersCount: 0,\n        followingCount: 0,\n        posts: 0,\n        vibeScore: 5.0,\n      };\n      \n      await SecurityUtils.secureStore('user', JSON.stringify(newUser));\n      await SecurityUtils.secureStore('userEmail', userData.email);\n      await SecurityUtils.secureStore('userId', result.user.id);\n      await SecurityUtils.secureRemove('demoMode');\n      \n      const tokenData = {\n        accessToken: result.token,\n        refreshToken: result.token,\n        expiresAt: SecurityUtils.getTokenExpiryTime(30 * 24 * 60 * 60 * 1000),\n        userId: result.user.id,\n      };\n      await TokenManager.storeTokens(tokenData);\n      \n      setAuthToken(result.token);\n      \n      setState({\n        user: newUser,\n        isLoading: false,\n        isAuthenticated: true,\n      });\n      \n      console.log('[Auth] Registration successful, session stored');\n      return true;\n    } catch (error: any) {\n      console.error('[Auth] Registration error:', error);\n      console.error('[Auth] Error details:', {\n        message: error.message,\n        name: error.name,\n        stack: error.stack,\n      });\n      \n      ErrorTracker.trackError(error as Error, { email: userData.email });\n      \n      const isNetworkError = error.message?.includes('fetch') || \n                             error.message?.includes('Network') ||\n                             error.message?.includes('Failed to fetch') ||\n                             error.message?.toLowerCase().includes('network request failed');\n      \n      if (isNetworkError) {\n        throw new Error('Unable to connect to the server. Please check your internet connection and try again.');\n      }\n      \n      if (error.message?.includes('already exists')) {\n        throw new Error('This email or username is already registered. Please try logging in instead.');\n      }\n      \n      throw new Error(error.message || 'Registration failed. Please try again.');\n    }\n  };\n\n  return {\n    user: state.user,\n    isLoading: state.isLoading,\n    isAuthenticated: state.isAuthenticated,\n    login,\n    logout,\n    updateProfile,\n    updateProfileImage,\n    updateCoverImage,\n    updateBio,\n    register,\n    changePassword,\n    resetPassword,\n  };\n});"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}