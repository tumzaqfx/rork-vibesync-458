{"ast":null,"code":"function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import{Component}from'react';import invariant from'invariant';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import Keyboard from\"react-native-web/dist/exports/Keyboard\";import StatusBar from\"react-native-web/dist/exports/StatusBar\";import I18nManager from\"react-native-web/dist/exports/I18nManager\";import{PanGestureHandler}from'../handlers/PanGestureHandler';import{TapGestureHandler}from'../handlers/TapGestureHandler';import{State}from'../State';const DRAG_TOSS=0.05;const IDLE='Idle';const DRAGGING='Dragging';const SETTLING='Settling';export default class DrawerLayout extends Component{constructor(_props){super(_props);_defineProperty(this,\"openValue\",void 0);_defineProperty(this,\"onGestureEvent\",void 0);_defineProperty(this,\"accessibilityIsModalView\",React.createRef());_defineProperty(this,\"pointerEventsView\",React.createRef());_defineProperty(this,\"panGestureHandler\",React.createRef());_defineProperty(this,\"drawerShown\",false);_defineProperty(this,\"updateAnimatedEvent\",(props,state)=>{const{drawerPosition,drawerWidth,drawerType}=props;const{dragX:dragXValue,touchX:touchXValue,drawerTranslation,containerWidth}=state;let dragX=dragXValue;let touchX=touchXValue;if(drawerPosition!=='left'){dragX=Animated.multiply(new Animated.Value(-1),dragXValue);touchX=Animated.add(new Animated.Value(containerWidth),Animated.multiply(new Animated.Value(-1),touchXValue));touchXValue.setValue(containerWidth);}else{touchXValue.setValue(0);}let translationX=dragX;if(drawerType==='front'){const startPositionX=Animated.add(touchX,Animated.multiply(new Animated.Value(-1),dragX));const dragOffsetFromOnStartPosition=startPositionX.interpolate({inputRange:[drawerWidth-1,drawerWidth,drawerWidth+1],outputRange:[0,0,1]});translationX=Animated.add(dragX,dragOffsetFromOnStartPosition);}this.openValue=Animated.add(translationX,drawerTranslation).interpolate({inputRange:[0,drawerWidth],outputRange:[0,1],extrapolate:'clamp'});const gestureOptions={useNativeDriver:props.useNativeAnimations};if(this.props.onDrawerSlide){gestureOptions.listener=ev=>{var _this$props$onDrawerS,_this$props;const translationX=Math.floor(Math.abs(ev.nativeEvent.translationX));const position=translationX/this.state.containerWidth;(_this$props$onDrawerS=(_this$props=this.props).onDrawerSlide)===null||_this$props$onDrawerS===void 0?void 0:_this$props$onDrawerS.call(_this$props,position);};}this.onGestureEvent=Animated.event([{nativeEvent:{translationX:dragXValue,x:touchXValue}}],gestureOptions);});_defineProperty(this,\"handleContainerLayout\",({nativeEvent})=>{this.setState({containerWidth:nativeEvent.layout.width});});_defineProperty(this,\"emitStateChanged\",(newState,drawerWillShow)=>{var _this$props$onDrawerS2,_this$props2;(_this$props$onDrawerS2=(_this$props2=this.props).onDrawerStateChanged)===null||_this$props$onDrawerS2===void 0?void 0:_this$props$onDrawerS2.call(_this$props2,newState,drawerWillShow);});_defineProperty(this,\"openingHandlerStateChange\",({nativeEvent})=>{if(nativeEvent.oldState===State.ACTIVE){this.handleRelease({nativeEvent});}else if(nativeEvent.state===State.ACTIVE){this.emitStateChanged(DRAGGING,false);this.setState({drawerState:DRAGGING});if(this.props.keyboardDismissMode==='on-drag'){Keyboard.dismiss();}if(this.props.hideStatusBar){StatusBar.setHidden(true,this.props.statusBarAnimation||'slide');}}});_defineProperty(this,\"onTapHandlerStateChange\",({nativeEvent})=>{if(this.drawerShown&&nativeEvent.oldState===State.ACTIVE&&this.props.drawerLockMode!=='locked-open'){this.closeDrawer();}});_defineProperty(this,\"handleRelease\",({nativeEvent})=>{const{drawerWidth,drawerPosition,drawerType}=this.props;const{containerWidth}=this.state;let{translationX:dragX,velocityX,x:touchX}=nativeEvent;if(drawerPosition!=='left'){dragX=-dragX;touchX=containerWidth-touchX;velocityX=-velocityX;}const gestureStartX=touchX-dragX;let dragOffsetBasedOnStart=0;if(drawerType==='front'){dragOffsetBasedOnStart=gestureStartX>drawerWidth?gestureStartX-drawerWidth:0;}const startOffsetX=dragX+dragOffsetBasedOnStart+(this.drawerShown?drawerWidth:0);const projOffsetX=startOffsetX+DRAG_TOSS*velocityX;const shouldOpen=projOffsetX>drawerWidth/2;if(shouldOpen){this.animateDrawer(startOffsetX,drawerWidth,velocityX);}else{this.animateDrawer(startOffsetX,0,velocityX);}});_defineProperty(this,\"updateShowing\",showing=>{var _this$accessibilityIs,_this$pointerEventsVi,_this$panGestureHandl;this.drawerShown=showing;(_this$accessibilityIs=this.accessibilityIsModalView.current)===null||_this$accessibilityIs===void 0?void 0:_this$accessibilityIs.setNativeProps({accessibilityViewIsModal:showing});(_this$pointerEventsVi=this.pointerEventsView.current)===null||_this$pointerEventsVi===void 0?void 0:_this$pointerEventsVi.setNativeProps({pointerEvents:showing?'auto':'none'});const{drawerPosition,minSwipeDistance,edgeWidth}=this.props;const fromLeft=drawerPosition==='left';const gestureOrientation=(fromLeft?1:-1)*(this.drawerShown?-1:1);const hitSlop=fromLeft?{left:0,width:showing?undefined:edgeWidth}:{right:0,width:showing?undefined:edgeWidth};(_this$panGestureHandl=this.panGestureHandler.current)===null||_this$panGestureHandl===void 0?void 0:_this$panGestureHandl.setNativeProps({hitSlop,activeOffsetX:gestureOrientation*minSwipeDistance});});_defineProperty(this,\"animateDrawer\",(fromValue,toValue,velocity,speed)=>{this.state.dragX.setValue(0);this.state.touchX.setValue(this.props.drawerPosition==='left'?0:this.state.containerWidth);if(fromValue!=null){let nextFramePosition=fromValue;if(this.props.useNativeAnimations){if(fromValue<toValue&&velocity>0){nextFramePosition=Math.min(fromValue+velocity/60.0,toValue);}else if(fromValue>toValue&&velocity<0){nextFramePosition=Math.max(fromValue+velocity/60.0,toValue);}}this.state.drawerTranslation.setValue(nextFramePosition);}const willShow=toValue!==0;this.updateShowing(willShow);this.emitStateChanged(SETTLING,willShow);this.setState({drawerState:SETTLING});if(this.props.hideStatusBar){StatusBar.setHidden(willShow,this.props.statusBarAnimation||'slide');}Animated.spring(this.state.drawerTranslation,{velocity,bounciness:0,toValue,useNativeDriver:this.props.useNativeAnimations,speed:speed!==null&&speed!==void 0?speed:undefined}).start(({finished})=>{if(finished){this.emitStateChanged(IDLE,willShow);this.setState({drawerOpened:willShow});if(this.state.drawerState!==DRAGGING){this.setState({drawerState:IDLE});}if(willShow){var _this$props$onDrawerO,_this$props3;(_this$props$onDrawerO=(_this$props3=this.props).onDrawerOpen)===null||_this$props$onDrawerO===void 0?void 0:_this$props$onDrawerO.call(_this$props3);}else{var _this$props$onDrawerC,_this$props4;(_this$props$onDrawerC=(_this$props4=this.props).onDrawerClose)===null||_this$props$onDrawerC===void 0?void 0:_this$props$onDrawerC.call(_this$props4);}}});});_defineProperty(this,\"openDrawer\",(options={})=>{this.animateDrawer(undefined,this.props.drawerWidth,options.velocity?options.velocity:0,options.speed);this.forceUpdate();});_defineProperty(this,\"closeDrawer\",(options={})=>{this.animateDrawer(undefined,0,options.velocity?options.velocity:0,options.speed);this.forceUpdate();});_defineProperty(this,\"renderOverlay\",()=>{invariant(this.openValue,'should be set');let overlayOpacity;if(this.state.drawerState!==IDLE){overlayOpacity=this.openValue;}else{overlayOpacity=this.state.drawerOpened?1:0;}const dynamicOverlayStyles={opacity:overlayOpacity,backgroundColor:this.props.overlayColor};return React.createElement(TapGestureHandler,{onHandlerStateChange:this.onTapHandlerStateChange},React.createElement(Animated.View,{pointerEvents:this.drawerShown?'auto':'none',ref:this.pointerEventsView,style:[styles.overlay,dynamicOverlayStyles]}));});_defineProperty(this,\"renderDrawer\",()=>{const{drawerBackgroundColor,drawerWidth,drawerPosition,drawerType,drawerContainerStyle,contentContainerStyle}=this.props;const fromLeft=drawerPosition==='left';const drawerSlide=drawerType!=='back';const containerSlide=drawerType!=='front';const reverseContentDirection=I18nManager.isRTL?fromLeft:!fromLeft;const dynamicDrawerStyles={backgroundColor:drawerBackgroundColor,width:drawerWidth};const openValue=this.openValue;invariant(openValue,'should be set');let containerStyles;if(containerSlide){const containerTranslateX=openValue.interpolate({inputRange:[0,1],outputRange:fromLeft?[0,drawerWidth]:[0,-drawerWidth],extrapolate:'clamp'});containerStyles={transform:[{translateX:containerTranslateX}]};}let drawerTranslateX=0;if(drawerSlide){const closedDrawerOffset=fromLeft?-drawerWidth:drawerWidth;if(this.state.drawerState!==IDLE){drawerTranslateX=openValue.interpolate({inputRange:[0,1],outputRange:[closedDrawerOffset,0],extrapolate:'clamp'});}else{drawerTranslateX=this.state.drawerOpened?0:closedDrawerOffset;}}const drawerStyles={transform:[{translateX:drawerTranslateX}],flexDirection:reverseContentDirection?'row-reverse':'row'};return React.createElement(Animated.View,{style:styles.main,onLayout:this.handleContainerLayout},React.createElement(Animated.View,{style:[drawerType==='front'?styles.containerOnBack:styles.containerInFront,containerStyles,contentContainerStyle],importantForAccessibility:this.drawerShown?'no-hide-descendants':'yes'},typeof this.props.children==='function'?this.props.children(this.openValue):this.props.children,this.renderOverlay()),React.createElement(Animated.View,{pointerEvents:\"box-none\",ref:this.accessibilityIsModalView,accessibilityViewIsModal:this.drawerShown,style:[styles.drawerContainer,drawerStyles,drawerContainerStyle]},React.createElement(View,{style:dynamicDrawerStyles},this.props.renderNavigationView(this.openValue))));});_defineProperty(this,\"setPanGestureRef\",ref=>{var _this$props$onGesture,_this$props5;this.panGestureHandler.current=ref;(_this$props$onGesture=(_this$props5=this.props).onGestureRef)===null||_this$props$onGesture===void 0?void 0:_this$props$onGesture.call(_this$props5,ref);});const _dragX=new Animated.Value(0);const _touchX=new Animated.Value(0);const _drawerTranslation=new Animated.Value(0);this.state={dragX:_dragX,touchX:_touchX,drawerTranslation:_drawerTranslation,containerWidth:0,drawerState:IDLE,drawerOpened:false};this.updateAnimatedEvent(_props,this.state);}shouldComponentUpdate(props,state){if(this.props.drawerPosition!==props.drawerPosition||this.props.drawerWidth!==props.drawerWidth||this.props.drawerType!==props.drawerType||this.state.containerWidth!==state.containerWidth){this.updateAnimatedEvent(props,state);}return true;}render(){const{drawerPosition,drawerLockMode,edgeWidth,minSwipeDistance}=this.props;const fromLeft=drawerPosition==='left';const gestureOrientation=(fromLeft?1:-1)*(this.drawerShown?-1:1);const hitSlop=fromLeft?{left:0,width:this.drawerShown?undefined:edgeWidth}:{right:0,width:this.drawerShown?undefined:edgeWidth};return React.createElement(PanGestureHandler,{userSelect:this.props.userSelect,activeCursor:this.props.activeCursor,mouseButton:this.props.mouseButton,enableContextMenu:this.props.enableContextMenu,ref:this.setPanGestureRef,hitSlop:hitSlop,activeOffsetX:gestureOrientation*minSwipeDistance,failOffsetY:[-15,15],onGestureEvent:this.onGestureEvent,onHandlerStateChange:this.openingHandlerStateChange,enableTrackpadTwoFingerGesture:this.props.enableTrackpadTwoFingerGesture,enabled:drawerLockMode!=='locked-closed'&&drawerLockMode!=='locked-open'},this.renderDrawer());}}_defineProperty(DrawerLayout,\"defaultProps\",{drawerWidth:200,drawerPosition:'left',useNativeAnimations:true,drawerType:'front',edgeWidth:20,minSwipeDistance:3,overlayColor:'rgba(0, 0, 0, 0.7)',drawerLockMode:'unlocked',enableTrackpadTwoFingerGesture:false});_defineProperty(DrawerLayout,\"positions\",{Left:'left',Right:'right'});const styles=StyleSheet.create({drawerContainer:Object.assign({},StyleSheet.absoluteFillObject,{zIndex:1001,flexDirection:'row'}),containerInFront:Object.assign({},StyleSheet.absoluteFillObject,{zIndex:1002}),containerOnBack:Object.assign({},StyleSheet.absoluteFillObject),main:{flex:1,zIndex:0,overflow:'hidden'},overlay:Object.assign({},StyleSheet.absoluteFillObject,{zIndex:1000})});","map":{"version":3,"names":["React","Component","invariant","Animated","StyleSheet","View","Keyboard","StatusBar","I18nManager","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","constructor","_props","_defineProperty","createRef","props","state","drawerPosition","drawerWidth","drawerType","dragX","dragXValue","touchX","touchXValue","drawerTranslation","containerWidth","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","_this$props$onDrawerS","_this$props","Math","floor","abs","nativeEvent","position","call","onGestureEvent","event","x","setState","layout","width","newState","drawerWillShow","_this$props$onDrawerS2","_this$props2","onDrawerStateChanged","oldState","ACTIVE","handleRelease","emitStateChanged","drawerState","keyboardDismissMode","dismiss","hideStatusBar","setHidden","statusBarAnimation","drawerShown","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","showing","_this$accessibilityIs","_this$pointerEventsVi","_this$panGestureHandl","accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","pointerEventsView","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","panGestureHandler","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","updateShowing","spring","bounciness","start","finished","drawerOpened","_this$props$onDrawerO","_this$props3","onDrawerOpen","_this$props$onDrawerC","_this$props4","onDrawerClose","options","forceUpdate","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","createElement","onHandlerStateChange","onTapHandlerStateChange","ref","style","styles","overlay","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","handleContainerLayout","containerOnBack","containerInFront","importantForAccessibility","children","renderOverlay","drawerContainer","renderNavigationView","_this$props$onGesture","_this$props5","onGestureRef","_dragX","_touchX","_drawerTranslation","updateAnimatedEvent","shouldComponentUpdate","render","userSelect","activeCursor","mouseButton","enableContextMenu","setPanGestureRef","failOffsetY","openingHandlerStateChange","enableTrackpadTwoFingerGesture","enabled","renderDrawer","Left","Right","create","Object","assign","absoluteFillObject","zIndex","flex","overflow"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-gesture-handler/lib/module/components/DrawerLayout.tsx"],"sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies on\n// react-native-gesture-handler library which isn't very popular at the moment I\n// decided to keep it here for the time being. It will allow us to move faster\n// and fix issues that may arise in gesture handler library that could be found\n// when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n  UserSelect,\n  ActiveCursor,\n  MouseButton,\n} from '../handlers/gestureHandlerCommon';\nimport { PanGestureHandler } from '../handlers/PanGestureHandler';\nimport type {\n  PanGestureHandlerEventPayload,\n  TapGestureHandlerEventPayload,\n} from '../handlers/GestureHandlerEventPayload';\nimport { TapGestureHandler } from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerPosition = 'left' | 'right';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerType = 'front' | 'back' | 'slide';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native`\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport interface DrawerLayoutProps {\n  /**\n   * This attribute is present in the standard implementation already and is one\n   * of the required params. Gesture handler version of DrawerLayout make it\n   * possible for the function passed as `renderNavigationView` to take an\n   * Animated value as a parameter that indicates the progress of drawer\n   * opening/closing animation (progress value is 0 when closed and 1 when\n   * opened). This can be used by the drawer component to animated its children\n   * while the drawer is opening or closing.\n   */\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n\n  drawerPosition?: DrawerPosition;\n\n  drawerWidth?: number;\n\n  drawerBackgroundColor?: string;\n\n  drawerLockMode?: DrawerLockMode;\n\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n\n  /**\n   * Called when the drawer is closed.\n   */\n  onDrawerClose?: () => void;\n\n  /**\n   * Called when the drawer is opened.\n   */\n  onDrawerOpen?: () => void;\n\n  /**\n   * Called when the status of the drawer changes.\n   */\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n\n  /**\n   * Defines how far from the edge of the content view the gesture should\n   * activate.\n   */\n  edgeWidth?: number;\n\n  minSwipeDistance?: number;\n\n  /**\n   * When set to true Drawer component will use\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} API to hide the OS\n   * status bar whenever the drawer is pulled or when its in an \"open\" state.\n   */\n  hideStatusBar?: boolean;\n\n  /**\n   * @default 'slide'\n   *\n   * Can be used when hideStatusBar is set to true and will select the animation\n   * used for hiding/showing the status bar. See\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} documentation for\n   * more details\n   */\n  statusBarAnimation?: StatusBarAnimation;\n\n  /**\n   * @default black\n   *\n   * Color of a semi-transparent overlay to be displayed on top of the content\n   * view when drawer gets open. A solid color should be used as the opacity is\n   * added by the Drawer itself and the opacity of the overlay is animated (from\n   * 0% to 70%).\n   */\n  overlayColor?: string;\n\n  contentContainerStyle?: StyleProp<ViewStyle>;\n\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  onDrawerSlide?: (position: number) => void;\n\n  onGestureRef?: (ref: PanGestureHandler) => void;\n\n  // Implicit `children` prop has been removed in @types/react^18.0.0\n  children?:\n    | React.ReactNode\n    | ((openValue?: AnimatedInterpolation) => React.ReactNode);\n\n  /**\n   * @default 'none'\n   * Defines which userSelect property should be used.\n   * Values: 'none'|'text'|'auto'\n   */\n  userSelect?: UserSelect;\n\n  /**\n   * @default 'auto'\n   * Defines which cursor property should be used when gesture activates.\n   * Values: see CSS cursor values\n   */\n  activeCursor?: ActiveCursor;\n\n  /**\n   * @default 'MouseButton.LEFT'\n   * Allows to choose which mouse button should underlying pan handler react to.\n   */\n  mouseButton?: MouseButton;\n\n  /**\n   * @default 'false if MouseButton.RIGHT is specified'\n   * Allows to enable/disable context menu.\n   */\n  enableContextMenu?: boolean;\n}\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n  drawerState: DrawerState;\n  drawerOpened: boolean;\n};\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\n\n/**\n * @deprecated use Reanimated version of DrawerLayout instead\n */\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  shouldComponentUpdate(props: DrawerLayoutProps, state: DrawerLayoutState) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private openValue?: AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView = React.createRef<View>();\n  private pointerEventsView = React.createRef<View>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer. In\n      // order to handle right-side drawer the only thing we need to do is to\n      // reverse events coming from gesture handler in a way they emulate\n      // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n      // calulcated by subtracing real touchX from the width of the container\n      // (such that when touch happens at the right edge the value is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep\n    // start position of the gesture. Then we use that value to calculate how\n    // much we need to subtract from the dragX. If the gesture started on the\n    // greyed out area we take the distance from the edge of the drawer to the\n    // start position. Otherwise we don't subtract at all and the drawer be\n    // pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      this.setState({ drawerState: DRAGGING });\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the\n        // animation because it takes one frame of a roundtrip to pass RELEASE\n        // event from native driver to JS before we can start animating. Without\n        // it, it is more noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    this.setState({ drawerState: SETTLING });\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        this.setState({ drawerOpened: willShow });\n        if (this.state.drawerState !== DRAGGING) {\n          // It's possilbe that user started drag while the drawer\n          // was settling, don't override state in this case\n          this.setState({ drawerState: IDLE });\n        }\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(\n      undefined,\n      0,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    let overlayOpacity;\n\n    if (this.state.drawerState !== IDLE) {\n      overlayOpacity = this.openValue;\n    } else {\n      overlayOpacity = this.state.drawerOpened ? 1 : 0;\n    }\n\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // We rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right\n    // according to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      if (this.state.drawerState !== IDLE) {\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp',\n        });\n      } else {\n        drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n      }\n    }\n    const drawerStyles: {\n      transform: { translateX: number | AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK taken from\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (\n      this.panGestureHandler as React.MutableRefObject<PanGestureHandler>\n    ).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const { drawerPosition, drawerLockMode, edgeWidth, minSwipeDistance } =\n      this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        userSelect={this.props.userSelect}\n        activeCursor={this.props.activeCursor}\n        mouseButton={this.props.mouseButton}\n        enableContextMenu={this.props.enableContextMenu}\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"],"mappings":"sLAQA,MAAO,GAAK,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,SAAT,KAA0B,OAA1B,CACA,MAAO,CAAAC,SAAP,KAAsB,WAAtB,QAAAC,QAAA,qDAAAC,UAAA,uDAAAC,IAAA,iDAAAC,QAAA,qDAAAC,SAAA,sDAAAC,WAAA,iDAsBA,OAASC,iBAAT,KAAkC,+BAAlC,CAKA,OAASC,iBAAT,KAAkC,+BAAlC,CACA,OAASC,KAAT,KAAsB,UAAtB,CAEA,KAAM,CAAAC,SAAS,CAAG,IAAlB,CAEA,KAAM,CAAAC,IAAiB,CAAG,MAA1B,CACA,KAAM,CAAAC,QAAqB,CAAG,UAA9B,CACA,KAAM,CAAAC,QAAqB,CAAG,UAA9B,CA0LA,cAAe,MAAM,CAAAC,YAAN,QAA2B,CAAAf,SAGxC,CAaAgB,WAAWA,CAACC,MAAD,CAA2B,CACpC,MAAMA,MAAN,EADoCC,eAAA,0BAAAA,eAAA,+BAAAA,eAAA,iCAoCHnB,KAAK,CAACoB,SAAN,EApCG,EAAAD,eAAA,0BAqCVnB,KAAK,CAACoB,SAAN,EArCU,EAAAD,eAAA,0BAsCVnB,KAAK,CAACoB,SAAN,EAtCU,EAAAD,eAAA,oBAuChB,KAvCgB,EAAAA,eAAA,4BA8CR,CAC5BE,KAD4B,CAE5BC,KAF4B,GAGzB,CAEH,KAAM,CAAEC,cAAF,CAAkBC,WAAlB,CAA+BC,UAA/B,EAA8CJ,KAApD,CACA,KAAM,CACJK,KAAK,CAAEC,UADH,CAEJC,MAAM,CAAEC,WAFJ,CAGJC,iBAHI,CAIJC,cAJI,EAKFT,KALJ,CAOA,GAAI,CAAAI,KAAK,CAAGC,UAAZ,CACA,GAAI,CAAAC,MAAM,CAAGC,WAAb,CAEA,GAAIN,cAAc,GAAK,MAAvB,CAA+B,CAO7BG,KAAK,CAAGvB,QAAQ,CAAC6B,QAAT,CACN,GAAI,CAAA7B,QAAQ,CAAC8B,KAAb,CAAmB,CAAC,CAApB,CADM,CAENN,UAFM,CAAR,CAIAC,MAAM,CAAGzB,QAAQ,CAAC+B,GAAT,CACP,GAAI,CAAA/B,QAAQ,CAAC8B,KAAb,CAAmBF,cAAnB,CADO,CAEP5B,QAAQ,CAAC6B,QAAT,CAAkB,GAAI,CAAA7B,QAAQ,CAAC8B,KAAb,CAAmB,CAAC,CAApB,CAAlB,CAA0CJ,WAA1C,CAFO,CAAT,CAIAA,WAAW,CAACM,QAAZ,CAAqBJ,cAArB,EACD,CAhBD,IAgBO,CACLF,WAAW,CAACM,QAAZ,CAAqB,CAArB,EACD,CA2BD,GAAI,CAAAC,YAAY,CAAGV,KAAnB,CACA,GAAID,UAAU,GAAK,OAAnB,CAA4B,CAC1B,KAAM,CAAAY,cAAc,CAAGlC,QAAQ,CAAC+B,GAAT,CACrBN,MADqB,CAErBzB,QAAQ,CAAC6B,QAAT,CAAkB,GAAI,CAAA7B,QAAQ,CAAC8B,KAAb,CAAmB,CAAC,CAApB,CAAlB,CAA0CP,KAA1C,CAFqB,CAAvB,CAKA,KAAM,CAAAY,6BAA6B,CAAGD,cAAc,CAACE,WAAf,CAA2B,CAC/DC,UAAU,CAAE,CAAChB,WAAW,CAAI,CAAhB,CAAmBA,WAAnB,CAAiCA,WAAW,CAAI,CAAhD,CADmD,CAE/DiB,WAAW,CAAE,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAFkD,CAA3B,CAAtC,CAIAL,YAAY,CAAGjC,QAAQ,CAAC+B,GAAT,CACbR,KADa,CAEbY,6BAFa,CAAf,CAID,CAED,KAAKI,SAAL,CAAiBvC,QAAQ,CAAC+B,GAAT,CAAaE,YAAb,CAA2BN,iBAA3B,EAA8CS,WAA9C,CAA0D,CACzEC,UAAU,CAAE,CAAC,CAAD,CAAIhB,WAAJ,CAD6D,CAEzEiB,WAAW,CAAE,CAAC,CAAD,CAAI,CAAJ,CAF4D,CAGzEE,WAAW,CAAE,OAH4D,CAA1D,CAAjB,CAMA,KAAM,CAAAC,cAML,CAAG,CACFC,eAAe,CAAExB,KAAK,CAACyB,mBADrB,CANJ,CAUA,GAAI,KAAKzB,KAAL,CAAW0B,aAAf,CAA8B,CAC5BH,cAAc,CAACI,QAAf,CAA2BC,EAAD,EAAQ,KAAAC,qBAAA,CAAAC,WAAA,CAChC,KAAM,CAAAf,YAAY,CAAGgB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASL,EAAE,CAACM,WAAH,CAAenB,YAAxB,CAAX,CAArB,CACA,KAAM,CAAAoB,QAAQ,CAAGpB,YAAY,CAAG,KAAKd,KAAL,CAAWS,cAA3C,CAEA,CAAAmB,qBAAA,EAAAC,WAAA,MAAK9B,KAAL,EAAW0B,aAAX,UAAAG,qBAAA,iBAAAA,qBAAA,CAAAO,IAAA,CAAAN,WAAA,CAA2BK,QAA3B,EACD,CALD,CAMD,CAED,KAAKE,cAAL,CAAsBvD,QAAQ,CAACwD,KAAT,CACpB,CAAC,CAAEJ,WAAW,CAAE,CAAEnB,YAAY,CAAET,UAAhB,CAA4BiC,CAAC,CAAE/B,WAA/B,CAAf,CAAD,CADoB,CAEpBe,cAFoB,CAAtB,CAID,CAzJqC,EAAAzB,eAAA,8BA2JN,CAAC,CAAEoC,WAAF,CAAD,GAAwC,CACtE,KAAKM,QAAL,CAAc,CAAE9B,cAAc,CAAEwB,WAAW,CAACO,MAAZ,CAAmBC,KAArC,CAAd,EACD,CA7JqC,EAAA5C,eAAA,yBA+JX,CACzB6C,QADyB,CAEzBC,cAFyB,GAGtB,KAAAC,sBAAA,CAAAC,YAAA,CACH,CAAAD,sBAAA,EAAAC,YAAA,MAAK9C,KAAL,EAAW+C,oBAAX,UAAAF,sBAAA,iBAAAA,sBAAA,CAAAT,IAAA,CAAAU,YAAA,CAAkCH,QAAlC,CAA4CC,cAA5C,EACD,CApKqC,EAAA9C,eAAA,kCAsKF,CAAC,CACnCoC,WADmC,CAAD,GAE0B,CAC5D,GAAIA,WAAW,CAACc,QAAZ,GAAyB1D,KAAK,CAAC2D,MAAnC,CAA2C,CACzC,KAAKC,aAAL,CAAmB,CAAEhB,WAAF,CAAnB,EACD,CAFD,IAEO,IAAIA,WAAW,CAACjC,KAAZ,GAAsBX,KAAK,CAAC2D,MAAhC,CAAwC,CAC7C,KAAKE,gBAAL,CAAsB1D,QAAtB,CAAgC,KAAhC,EACA,KAAK+C,QAAL,CAAc,CAAEY,WAAW,CAAE3D,QAAf,CAAd,EACA,GAAI,KAAKO,KAAL,CAAWqD,mBAAX,GAAmC,SAAvC,CAAkD,CAChDpE,QAAQ,CAACqE,OAAT,GACD,CACD,GAAI,KAAKtD,KAAL,CAAWuD,aAAf,CAA8B,CAC5BrE,SAAS,CAACsE,SAAV,CAAoB,IAApB,CAA0B,KAAKxD,KAAL,CAAWyD,kBAAX,EAAiC,OAA3D,EACD,CACF,CACF,CArLqC,EAAA3D,eAAA,gCAuLJ,CAAC,CACjCoC,WADiC,CAAD,GAE4B,CAC5D,GACE,KAAKwB,WAAL,EACAxB,WAAW,CAACc,QAAZ,GAAyB1D,KAAK,CAAC2D,MAD/B,EAEA,KAAKjD,KAAL,CAAW2D,cAAX,GAA8B,aAHhC,CAIE,CACA,KAAKC,WAAL,GACD,CACF,CAjMqC,EAAA9D,eAAA,sBAmMd,CAAC,CACvBoC,WADuB,CAAD,GAEsC,CAC5D,KAAM,CAAE/B,WAAF,CAAeD,cAAf,CAA+BE,UAA/B,EAA8C,KAAKJ,KAAzD,CACA,KAAM,CAAEU,cAAF,EAAqB,KAAKT,KAAhC,CACA,GAAI,CAAEc,YAAY,CAAEV,KAAhB,CAAuBwD,SAAvB,CAAkCtB,CAAC,CAAEhC,MAArC,EAAgD2B,WAApD,CAEA,GAAIhC,cAAc,GAAK,MAAvB,CAA+B,CAG7BG,KAAK,CAAG,CAACA,KAAT,CACAE,MAAM,CAAGG,cAAc,CAAGH,MAA1B,CACAsD,SAAS,CAAG,CAACA,SAAb,CACD,CAED,KAAM,CAAAC,aAAa,CAAGvD,MAAM,CAAGF,KAA/B,CACA,GAAI,CAAA0D,sBAAsB,CAAG,CAA7B,CAEA,GAAI3D,UAAU,GAAK,OAAnB,CAA4B,CAC1B2D,sBAAsB,CACpBD,aAAa,CAAG3D,WAAhB,CAA+B2D,aAAa,CAAG3D,WAA/C,CAA8D,CADhE,CAED,CAED,KAAM,CAAA6D,YAAY,CAChB3D,KAAK,CAAG0D,sBAAR,EAAkC,KAAKL,WAAL,CAAmBvD,WAAnB,CAAkC,CAApE,CADF,CAEA,KAAM,CAAA8D,WAAW,CAAGD,YAAY,CAAGzE,SAAS,CAAGsE,SAA/C,CAEA,KAAM,CAAAK,UAAU,CAAGD,WAAW,CAAG9D,WAAW,CAAI,CAAhD,CAEA,GAAI+D,UAAJ,CAAgB,CACd,KAAKC,aAAL,CAAmBH,YAAnB,CAAiC7D,WAAjC,CAA+C0D,SAA/C,EACD,CAFD,IAEO,CACL,KAAKM,aAAL,CAAmBH,YAAnB,CAAiC,CAAjC,CAAoCH,SAApC,EACD,CACF,CArOqC,EAAA/D,eAAA,sBAuObsE,OAAD,EAAsB,KAAAC,qBAAA,CAAAC,qBAAA,CAAAC,qBAAA,CAC5C,KAAKb,WAAL,CAAmBU,OAAnB,CACA,CAAAC,qBAAA,MAAKG,wBAAL,CAA8BC,OAA9B,UAAAJ,qBAAA,iBAAAA,qBAAA,CAAuCK,cAAvC,CAAsD,CACpDC,wBAAwB,CAAEP,OAD0B,CAAtD,EAGA,CAAAE,qBAAA,MAAKM,iBAAL,CAAuBH,OAAvB,UAAAH,qBAAA,iBAAAA,qBAAA,CAAgCI,cAAhC,CAA+C,CAC7CG,aAAa,CAAET,OAAO,CAAG,MAAH,CAAY,MADW,CAA/C,EAGA,KAAM,CAAElE,cAAF,CAAkB4E,gBAAlB,CAAoCC,SAApC,EAAkD,KAAK/E,KAA7D,CACA,KAAM,CAAAgF,QAAQ,CAAG9E,cAAc,GAAK,MAApC,CAIA,KAAM,CAAA+E,kBAAkB,CACtB,CAACD,QAAQ,CAAG,CAAH,CAAO,CAAC,CAAjB,GAAuB,KAAKtB,WAAL,CAAmB,CAAC,CAApB,CAAwB,CAA/C,CADF,CAKA,KAAM,CAAAwB,OAAO,CAAGF,QAAQ,CACpB,CAAEG,IAAI,CAAE,CAAR,CAAWzC,KAAK,CAAE0B,OAAO,CAAGgB,SAAH,CAAeL,SAAxC,CADoB,CAEpB,CAAEM,KAAK,CAAE,CAAT,CAAY3C,KAAK,CAAE0B,OAAO,CAAGgB,SAAH,CAAeL,SAAzC,CAFJ,CAIA,CAAAR,qBAAA,MAAKe,iBAAL,CAAuBb,OAAvB,UAAAF,qBAAA,iBAAAA,qBAAA,CAAgCG,cAAhC,CAA+C,CAC7CQ,OAD6C,CAE7CK,aAAa,CAAEN,kBAAkB,CAAGH,gBAFS,CAA/C,EAID,CAjQqC,EAAAhF,eAAA,sBAmQd,CACtB0F,SADsB,CAEtBC,OAFsB,CAGtBC,QAHsB,CAItBC,KAJsB,GAKnB,CACH,KAAK1F,KAAL,CAAWI,KAAX,CAAiBS,QAAjB,CAA0B,CAA1B,EACA,KAAKb,KAAL,CAAWM,MAAX,CAAkBO,QAAlB,CACE,KAAKd,KAAL,CAAWE,cAAX,GAA8B,MAA9B,CAAuC,CAAvC,CAA2C,KAAKD,KAAL,CAAWS,cADxD,EAIA,GAAI8E,SAAS,EAAI,IAAjB,CAAuB,CACrB,GAAI,CAAAI,iBAAiB,CAAGJ,SAAxB,CACA,GAAI,KAAKxF,KAAL,CAAWyB,mBAAf,CAAoC,CAKlC,GAAI+D,SAAS,CAAGC,OAAZ,EAAuBC,QAAQ,CAAG,CAAtC,CAAyC,CACvCE,iBAAiB,CAAG7D,IAAI,CAAC8D,GAAL,CAASL,SAAS,CAAGE,QAAQ,CAAG,IAAhC,CAAsCD,OAAtC,CAApB,CACD,CAFD,IAEO,IAAID,SAAS,CAAGC,OAAZ,EAAuBC,QAAQ,CAAG,CAAtC,CAAyC,CAC9CE,iBAAiB,CAAG7D,IAAI,CAAC+D,GAAL,CAASN,SAAS,CAAGE,QAAQ,CAAG,IAAhC,CAAsCD,OAAtC,CAApB,CACD,CACF,CACD,KAAKxF,KAAL,CAAWQ,iBAAX,CAA6BK,QAA7B,CAAsC8E,iBAAtC,EACD,CAED,KAAM,CAAAG,QAAQ,CAAGN,OAAO,GAAK,CAA7B,CACA,KAAKO,aAAL,CAAmBD,QAAnB,EACA,KAAK5C,gBAAL,CAAsBzD,QAAtB,CAAgCqG,QAAhC,EACA,KAAKvD,QAAL,CAAc,CAAEY,WAAW,CAAE1D,QAAf,CAAd,EACA,GAAI,KAAKM,KAAL,CAAWuD,aAAf,CAA8B,CAC5BrE,SAAS,CAACsE,SAAV,CAAoBuC,QAApB,CAA8B,KAAK/F,KAAL,CAAWyD,kBAAX,EAAiC,OAA/D,EACD,CACD3E,QAAQ,CAACmH,MAAT,CAAgB,KAAKhG,KAAL,CAAWQ,iBAA3B,CAA8C,CAC5CiF,QAD4C,CAE5CQ,UAAU,CAAE,CAFgC,CAG5CT,OAH4C,CAI5CjE,eAAe,CAAE,KAAKxB,KAAL,CAAWyB,mBAJgB,CAK5CkE,KAAK,CAAEA,KAAF,SAAEA,KAAF,UAAEA,KAAF,CAAWP,SAL4B,CAA9C,EAMGe,KANH,CAMS,CAAC,CAAEC,QAAF,CAAD,GAAkB,CACzB,GAAIA,QAAJ,CAAc,CACZ,KAAKjD,gBAAL,CAAsB3D,IAAtB,CAA4BuG,QAA5B,EACA,KAAKvD,QAAL,CAAc,CAAE6D,YAAY,CAAEN,QAAhB,CAAd,EACA,GAAI,KAAK9F,KAAL,CAAWmD,WAAX,GAA2B3D,QAA/B,CAAyC,CAGvC,KAAK+C,QAAL,CAAc,CAAEY,WAAW,CAAE5D,IAAf,CAAd,EACD,CACD,GAAIuG,QAAJ,CAAc,KAAAO,qBAAA,CAAAC,YAAA,CACZ,CAAAD,qBAAA,EAAAC,YAAA,MAAKvG,KAAL,EAAWwG,YAAX,UAAAF,qBAAA,iBAAAA,qBAAA,CAAAlE,IAAA,CAAAmE,YAAA,EACD,CAFD,IAEO,KAAAE,qBAAA,CAAAC,YAAA,CACL,CAAAD,qBAAA,EAAAC,YAAA,MAAK1G,KAAL,EAAW2G,aAAX,UAAAF,qBAAA,iBAAAA,qBAAA,CAAArE,IAAA,CAAAsE,YAAA,EACD,CACF,CACF,CArBD,EAsBD,CA3TqC,EAAA5G,eAAA,mBA6TzB,CAAC8G,OAA6B,CAAG,EAAjC,GAAwC,CACnD,KAAKzC,aAAL,CAEEiB,SAFF,CAGE,KAAKpF,KAAL,CAAWG,WAHb,CAIEyG,OAAO,CAAClB,QAAR,CAAmBkB,OAAO,CAAClB,QAA3B,CAAsC,CAJxC,CAKEkB,OAAO,CAACjB,KALV,EAUA,KAAKkB,WAAL,GACD,CAzUqC,EAAA/G,eAAA,oBA2UxB,CAAC8G,OAA6B,CAAG,EAAjC,GAAwC,CAEpD,KAAKzC,aAAL,CACEiB,SADF,CAEE,CAFF,CAGEwB,OAAO,CAAClB,QAAR,CAAmBkB,OAAO,CAAClB,QAA3B,CAAsC,CAHxC,CAIEkB,OAAO,CAACjB,KAJV,EASA,KAAKkB,WAAL,GACD,CAvVqC,EAAA/G,eAAA,sBAyVd,IAAM,CAE5BjB,SAAS,CAAC,KAAKwC,SAAN,CAAiB,eAAjB,CAAT,CACA,GAAI,CAAAyF,cAAJ,CAEA,GAAI,KAAK7G,KAAL,CAAWmD,WAAX,GAA2B5D,IAA/B,CAAqC,CACnCsH,cAAc,CAAG,KAAKzF,SAAtB,CACD,CAFD,IAEO,CACLyF,cAAc,CAAG,KAAK7G,KAAL,CAAWoG,YAAX,CAA0B,CAA1B,CAA8B,CAA/C,CACD,CAED,KAAM,CAAAU,oBAAoB,CAAG,CAC3BC,OAAO,CAAEF,cADkB,CAE3BG,eAAe,CAAE,KAAKjH,KAAL,CAAWkH,YAFD,CAA7B,CAKA,MACE,CAAAvI,KAAA,CAAAwI,aAAA,CAAC9H,iBAAD,EAAmB+H,oBAAoB,CAAE,KAAKC,uBAA9C,EACE1I,KAAA,CAAAwI,aAAA,CAACrI,QAAD,CAAUE,IAAV,EACE6F,aAAa,CAAE,KAAKnB,WAAL,CAAmB,MAAnB,CAA4B,MAD7C,CAEE4D,GAAG,CAAE,KAAK1C,iBAFZ,CAGE2C,KAAK,CAAE,CAACC,MAAM,CAACC,OAAR,CAAiBV,oBAAjB,CAHT,EADF,CADF,CASD,CAlXqC,EAAAjH,eAAA,qBAoXf,IAAM,CAC3B,KAAM,CACJ4H,qBADI,CAEJvH,WAFI,CAGJD,cAHI,CAIJE,UAJI,CAKJuH,oBALI,CAMJC,qBANI,EAOF,KAAK5H,KAPT,CASA,KAAM,CAAAgF,QAAQ,CAAG9E,cAAc,GAAK,MAApC,CACA,KAAM,CAAA2H,WAAW,CAAGzH,UAAU,GAAK,MAAnC,CACA,KAAM,CAAA0H,cAAc,CAAG1H,UAAU,GAAK,OAAtC,CAMA,KAAM,CAAA2H,uBAAuB,CAAG5I,WAAW,CAAC6I,KAAZ,CAAoBhD,QAApB,CAA+B,CAACA,QAAhE,CAEA,KAAM,CAAAiD,mBAAmB,CAAG,CAC1BhB,eAAe,CAAES,qBADS,CAE1BhF,KAAK,CAAEvC,WAFmB,CAA5B,CAIA,KAAM,CAAAkB,SAAS,CAAG,KAAKA,SAAvB,CACAxC,SAAS,CAACwC,SAAD,CAAY,eAAZ,CAAT,CAEA,GAAI,CAAA6G,eAAJ,CACA,GAAIJ,cAAJ,CAAoB,CAClB,KAAM,CAAAK,mBAAmB,CAAG9G,SAAS,CAACH,WAAV,CAAsB,CAChDC,UAAU,CAAE,CAAC,CAAD,CAAI,CAAJ,CADoC,CAEhDC,WAAW,CAAE4D,QAAQ,CAAG,CAAC,CAAD,CAAI7E,WAAJ,CAAH,CAAuB,CAAC,CAAD,CAAI,CAACA,WAAL,CAFI,CAGhDmB,WAAW,CAAE,OAHmC,CAAtB,CAA5B,CAKA4G,eAAe,CAAG,CAChBE,SAAS,CAAE,CAAC,CAAEC,UAAU,CAAEF,mBAAd,CAAD,CADK,CAAlB,CAGD,CAED,GAAI,CAAAG,gBAAgD,CAAG,CAAvD,CACA,GAAIT,WAAJ,CAAiB,CACf,KAAM,CAAAU,kBAAkB,CAAGvD,QAAQ,CAAG,CAAC7E,WAAJ,CAAmBA,WAAtD,CACA,GAAI,KAAKF,KAAL,CAAWmD,WAAX,GAA2B5D,IAA/B,CAAqC,CACnC8I,gBAAgB,CAAGjH,SAAS,CAACH,WAAV,CAAsB,CACvCC,UAAU,CAAE,CAAC,CAAD,CAAI,CAAJ,CAD2B,CAEvCC,WAAW,CAAE,CAACmH,kBAAD,CAAqB,CAArB,CAF0B,CAGvCjH,WAAW,CAAE,OAH0B,CAAtB,CAAnB,CAKD,CAND,IAMO,CACLgH,gBAAgB,CAAG,KAAKrI,KAAL,CAAWoG,YAAX,CAA0B,CAA1B,CAA8BkC,kBAAjD,CACD,CACF,CACD,KAAM,CAAAC,YAGL,CAAG,CACFJ,SAAS,CAAE,CAAC,CAAEC,UAAU,CAAEC,gBAAd,CAAD,CADT,CAEFG,aAAa,CAAEV,uBAAuB,CAAG,aAAH,CAAmB,KAFvD,CAHJ,CAQA,MACE,CAAApJ,KAAA,CAAAwI,aAAA,CAACrI,QAAD,CAAUE,IAAV,EAAeuI,KAAK,CAAEC,MAAM,CAACkB,IAA7B,CAAmCC,QAAQ,CAAE,KAAKC,qBAAlD,EACEjK,KAAA,CAAAwI,aAAA,CAACrI,QAAD,CAAUE,IAAV,EACEuI,KAAK,CAAE,CACLnH,UAAU,GAAK,OAAf,CACIoH,MAAM,CAACqB,eADX,CAEIrB,MAAM,CAACsB,gBAHN,CAILZ,eAJK,CAKLN,qBALK,CADT,CAQEmB,yBAAyB,CACvB,KAAKrF,WAAL,CAAmB,qBAAnB,CAA2C,KAT/C,EAWG,MAAO,MAAK1D,KAAL,CAAWgJ,QAAlB,GAA+B,UAA/B,CACG,KAAKhJ,KAAL,CAAWgJ,QAAX,CAAoB,KAAK3H,SAAzB,CADH,CAEG,KAAKrB,KAAL,CAAWgJ,QAbjB,CAcG,KAAKC,aAAL,EAdH,CADF,CAiBEtK,KAAA,CAAAwI,aAAA,CAACrI,QAAD,CAAUE,IAAV,EACE6F,aAAa,CAAC,UADhB,CAEEyC,GAAG,CAAE,KAAK9C,wBAFZ,CAGEG,wBAAwB,CAAE,KAAKjB,WAHjC,CAIE6D,KAAK,CAAE,CAACC,MAAM,CAAC0B,eAAR,CAAyBV,YAAzB,CAAuCb,oBAAvC,CAJT,EAKEhJ,KAAA,CAAAwI,aAAA,CAACnI,IAAD,EAAMuI,KAAK,CAAEU,mBAAb,EACG,KAAKjI,KAAL,CAAWmJ,oBAAX,CAAgC,KAAK9H,SAArC,CADH,CALF,CAjBF,CADF,CA6BD,CA7cqC,EAAAvB,eAAA,yBA+cVwH,GAAD,EAA4B,KAAA8B,qBAAA,CAAAC,YAAA,CAInD,KAAK/D,iBADP,CAEEb,OAFF,CAEY6C,GAFZ,CAGA,CAAA8B,qBAAA,EAAAC,YAAA,MAAKrJ,KAAL,EAAWsJ,YAAX,UAAAF,qBAAA,iBAAAA,qBAAA,CAAAhH,IAAA,CAAAiH,YAAA,CAA0B/B,GAA1B,EACD,CAtdqC,EAGpC,KAAM,CAAAiC,MAAK,CAAG,GAAI,CAAAzK,QAAQ,CAAC8B,KAAb,CAAmB,CAAnB,CAAd,CACA,KAAM,CAAA4I,OAAM,CAAG,GAAI,CAAA1K,QAAQ,CAAC8B,KAAb,CAAmB,CAAnB,CAAf,CACA,KAAM,CAAA6I,kBAAiB,CAAG,GAAI,CAAA3K,QAAQ,CAAC8B,KAAb,CAAmB,CAAnB,CAA1B,CAEA,KAAKX,KAAL,CAAa,CACXI,KAAK,CAALkJ,MADW,CAEXhJ,MAAM,CAANiJ,OAFW,CAGX/I,iBAAiB,CAAjBgJ,kBAHW,CAIX/I,cAAc,CAAE,CAJL,CAKX0C,WAAW,CAAE5D,IALF,CAMX6G,YAAY,CAAE,KANH,CAAb,CASA,KAAKqD,mBAAL,CAAyB7J,MAAzB,CAAgC,KAAKI,KAArC,EACD,CAED0J,qBAAqBA,CAAC3J,KAAD,CAA2BC,KAA3B,CAAqD,CACxE,GACE,KAAKD,KAAL,CAAWE,cAAX,GAA8BF,KAAK,CAACE,cAApC,EACA,KAAKF,KAAL,CAAWG,WAAX,GAA2BH,KAAK,CAACG,WADjC,EAEA,KAAKH,KAAL,CAAWI,UAAX,GAA0BJ,KAAK,CAACI,UAFhC,EAGA,KAAKH,KAAL,CAAWS,cAAX,GAA8BT,KAAK,CAACS,cAJtC,CAKE,CACA,KAAKgJ,mBAAL,CAAyB1J,KAAzB,CAAgCC,KAAhC,EACD,CAED,MAAO,KAAP,CACD,CA0bD2J,MAAMA,CAAA,CAAG,CACP,KAAM,CAAE1J,cAAF,CAAkByD,cAAlB,CAAkCoB,SAAlC,CAA6CD,gBAA7C,EACJ,KAAK9E,KADP,CAGA,KAAM,CAAAgF,QAAQ,CAAG9E,cAAc,GAAK,MAApC,CAKA,KAAM,CAAA+E,kBAAkB,CACtB,CAACD,QAAQ,CAAG,CAAH,CAAO,CAAC,CAAjB,GAAuB,KAAKtB,WAAL,CAAmB,CAAC,CAApB,CAAwB,CAA/C,CADF,CAMA,KAAM,CAAAwB,OAAO,CAAGF,QAAQ,CACpB,CAAEG,IAAI,CAAE,CAAR,CAAWzC,KAAK,CAAE,KAAKgB,WAAL,CAAmB0B,SAAnB,CAA+BL,SAAjD,CADoB,CAEpB,CAAEM,KAAK,CAAE,CAAT,CAAY3C,KAAK,CAAE,KAAKgB,WAAL,CAAmB0B,SAAnB,CAA+BL,SAAlD,CAFJ,CAIA,MACE,CAAApG,KAAA,CAAAwI,aAAA,CAAC/H,iBAAD,EAEEyK,UAAU,CAAE,KAAK7J,KAAL,CAAW6J,UAFzB,CAGEC,YAAY,CAAE,KAAK9J,KAAL,CAAW8J,YAH3B,CAIEC,WAAW,CAAE,KAAK/J,KAAL,CAAW+J,WAJ1B,CAKEC,iBAAiB,CAAE,KAAKhK,KAAL,CAAWgK,iBALhC,CAME1C,GAAG,CAAE,KAAK2C,gBANZ,CAOE/E,OAAO,CAAEA,OAPX,CAQEK,aAAa,CAAEN,kBAAkB,CAAGH,gBARtC,CASEoF,WAAW,CAAE,CAAC,CAAC,EAAF,CAAM,EAAN,CATf,CAUE7H,cAAc,CAAE,KAAKA,cAVvB,CAWE+E,oBAAoB,CAAE,KAAK+C,yBAX7B,CAYEC,8BAA8B,CAC5B,KAAKpK,KAAL,CAAWoK,8BAbf,CAeEC,OAAO,CACL1G,cAAc,GAAK,eAAnB,EAAsCA,cAAc,GAAK,aAhB7D,EAkBG,KAAK2G,YAAL,EAlBH,CADF,CAsBD,CA9gBD,C,gBAHmB3K,Y,gBAIG,CACpBQ,WAAW,CAAE,GADO,CAEpBD,cAAc,CAAE,MAFI,CAGpBuB,mBAAmB,CAAE,IAHD,CAIpBrB,UAAU,CAAE,OAJQ,CAKpB2E,SAAS,CAAE,EALS,CAMpBD,gBAAgB,CAAE,CANE,CAOpBoC,YAAY,CAAE,oBAPM,CAQpBvD,cAAc,CAAE,UARI,CASpByG,8BAA8B,CAAE,KATZ,C,kBAJHzK,Y,aAyDA,CACjB4K,IAAI,CAAE,MADW,CAEjBC,KAAK,CAAE,OAFU,C,EA2drB,KAAM,CAAAhD,MAAM,CAAGzI,UAAU,CAAC0L,MAAX,CAAkB,CAC/BvB,eAAe,CAAAwB,MAAA,CAAAC,MAAA,IACV5L,UAAU,CAAC6L,kBADC,EAEfC,MAAM,CAAE,IAFO,CAGfpC,aAAa,CAAE,OAJc,CAM/BK,gBAAgB,CAAA4B,MAAA,CAAAC,MAAA,IACX5L,UAAU,CAAC6L,kBADE,EAEhBC,MAAM,CAAE,MARqB,CAU/BhC,eAAe,CAAA6B,MAAA,CAAAC,MAAA,IACV5L,UAAU,CAAC6L,kBAAA,CAXe,CAa/BlC,IAAI,CAAE,CACJoC,IAAI,CAAE,CADF,CAEJD,MAAM,CAAE,CAFJ,CAGJE,QAAQ,CAAE,QAHN,CAbyB,CAkB/BtD,OAAO,CAAAiD,MAAA,CAAAC,MAAA,IACF5L,UAAU,CAAC6L,kBADP,EAEPC,MAAM,CAAE,MApBqB,CAAlB,CAAf","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}