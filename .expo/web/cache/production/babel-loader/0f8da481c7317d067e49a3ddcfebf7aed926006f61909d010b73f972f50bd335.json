{"ast":null,"code":"import{useState,useEffect,useCallback,useMemo}from'react';import AsyncStorage from'@react-native-async-storage/async-storage';import createContextHook from'@nkzw/create-context-hook';const DEFAULT_PREFERENCES={notifications:{friendship_follow:true,playlist_sync:true,voice_note_interaction:true,engagement_boost:true,monthly_digest:true},unsubscribed:false};export const[EmailPreferencesProvider,useEmailPreferences]=createContextHook(()=>{const[preferences,setPreferences]=useState(null);const[loading,setLoading]=useState(true);const loadPreferences=useCallback(async()=>{try{const stored=await AsyncStorage.getItem('email_preferences');if(stored){setPreferences(JSON.parse(stored));}}catch(error){console.error('[EmailPreferences] Error loading preferences:',error);}finally{setLoading(false);}},[]);useEffect(()=>{loadPreferences();},[loadPreferences]);const syncPreferencesWithBackend=useCallback(async prefs=>{try{const API_URL=process.env.EXPO_PUBLIC_API_URL||'http://localhost:3000';await fetch(`${API_URL}/api/trpc/email.updatePreferences`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(prefs)});console.log('[EmailPreferences] Synced with backend');}catch(error){console.error('[EmailPreferences] Error syncing with backend:',error);}},[]);const savePreferences=useCallback(async newPreferences=>{try{await AsyncStorage.setItem('email_preferences',JSON.stringify(newPreferences));setPreferences(newPreferences);await syncPreferencesWithBackend(newPreferences);}catch(error){console.error('[EmailPreferences] Error saving preferences:',error);}},[syncPreferencesWithBackend]);const initializePreferences=useCallback(async(userId,email)=>{const newPreferences=Object.assign({userId,email},DEFAULT_PREFERENCES);await savePreferences(newPreferences);},[savePreferences]);const updateNotificationPreference=useCallback(async(key,value)=>{if(!preferences)return;const updated=Object.assign({},preferences,{notifications:Object.assign({},preferences.notifications,{[key]:value})});await savePreferences(updated);},[preferences,savePreferences]);const unsubscribeFromAll=useCallback(async()=>{if(!preferences)return;const updated=Object.assign({},preferences,{unsubscribed:true,unsubscribedAt:new Date().toISOString()});await savePreferences(updated);},[preferences,savePreferences]);const resubscribe=useCallback(async()=>{if(!preferences)return;const updated=Object.assign({},preferences,{unsubscribed:false,unsubscribedAt:undefined});await savePreferences(updated);},[preferences,savePreferences]);const canSendEmail=useCallback(emailType=>{if(!preferences)return false;if(preferences.unsubscribed)return false;return preferences.notifications[emailType];},[preferences]);return useMemo(()=>({preferences,loading,initializePreferences,updateNotificationPreference,unsubscribeFromAll,resubscribe,canSendEmail}),[preferences,loading,initializePreferences,updateNotificationPreference,unsubscribeFromAll,resubscribe,canSendEmail]);});","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","AsyncStorage","createContextHook","DEFAULT_PREFERENCES","notifications","friendship_follow","playlist_sync","voice_note_interaction","engagement_boost","monthly_digest","unsubscribed","EmailPreferencesProvider","useEmailPreferences","preferences","setPreferences","loading","setLoading","loadPreferences","stored","getItem","JSON","parse","error","console","syncPreferencesWithBackend","prefs","API_URL","process","env","EXPO_PUBLIC_API_URL","fetch","method","headers","body","stringify","log","savePreferences","newPreferences","setItem","initializePreferences","userId","email","Object","assign","updateNotificationPreference","key","value","updated","unsubscribeFromAll","unsubscribedAt","Date","toISOString","resubscribe","undefined","canSendEmail","emailType"],"sources":["/home/user/rork-vibesync-458/hooks/email-preferences-store.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport createContextHook from '@nkzw/create-context-hook';\nimport { EmailPreferences } from '@/types/email';\n\nconst DEFAULT_PREFERENCES: Omit<EmailPreferences, 'userId' | 'email'> = {\n  notifications: {\n    friendship_follow: true,\n    playlist_sync: true,\n    voice_note_interaction: true,\n    engagement_boost: true,\n    monthly_digest: true,\n  },\n  unsubscribed: false,\n};\n\nexport const [EmailPreferencesProvider, useEmailPreferences] = createContextHook(() => {\n  const [preferences, setPreferences] = useState<EmailPreferences | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const loadPreferences = useCallback(async () => {\n    try {\n      const stored = await AsyncStorage.getItem('email_preferences');\n      if (stored) {\n        setPreferences(JSON.parse(stored));\n      }\n    } catch (error) {\n      console.error('[EmailPreferences] Error loading preferences:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadPreferences();\n  }, [loadPreferences]);\n\n  const syncPreferencesWithBackend = useCallback(async (prefs: EmailPreferences) => {\n    try {\n      const API_URL = process.env.EXPO_PUBLIC_API_URL || 'http://localhost:3000';\n      \n      await fetch(`${API_URL}/api/trpc/email.updatePreferences`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(prefs),\n      });\n\n      console.log('[EmailPreferences] Synced with backend');\n    } catch (error) {\n      console.error('[EmailPreferences] Error syncing with backend:', error);\n    }\n  }, []);\n\n  const savePreferences = useCallback(async (newPreferences: EmailPreferences) => {\n    try {\n      await AsyncStorage.setItem('email_preferences', JSON.stringify(newPreferences));\n      setPreferences(newPreferences);\n      \n      await syncPreferencesWithBackend(newPreferences);\n    } catch (error) {\n      console.error('[EmailPreferences] Error saving preferences:', error);\n    }\n  }, [syncPreferencesWithBackend]);\n\n  const initializePreferences = useCallback(async (userId: string, email: string) => {\n    const newPreferences: EmailPreferences = {\n      userId,\n      email,\n      ...DEFAULT_PREFERENCES,\n    };\n    \n    await savePreferences(newPreferences);\n  }, [savePreferences]);\n\n  const updateNotificationPreference = useCallback(async (\n    key: keyof EmailPreferences['notifications'],\n    value: boolean\n  ) => {\n    if (!preferences) return;\n\n    const updated: EmailPreferences = {\n      ...preferences,\n      notifications: {\n        ...preferences.notifications,\n        [key]: value,\n      },\n    };\n\n    await savePreferences(updated);\n  }, [preferences, savePreferences]);\n\n  const unsubscribeFromAll = useCallback(async () => {\n    if (!preferences) return;\n\n    const updated: EmailPreferences = {\n      ...preferences,\n      unsubscribed: true,\n      unsubscribedAt: new Date().toISOString(),\n    };\n\n    await savePreferences(updated);\n  }, [preferences, savePreferences]);\n\n  const resubscribe = useCallback(async () => {\n    if (!preferences) return;\n\n    const updated: EmailPreferences = {\n      ...preferences,\n      unsubscribed: false,\n      unsubscribedAt: undefined,\n    };\n\n    await savePreferences(updated);\n  }, [preferences, savePreferences]);\n\n  const canSendEmail = useCallback((emailType: keyof EmailPreferences['notifications']): boolean => {\n    if (!preferences) return false;\n    if (preferences.unsubscribed) return false;\n    return preferences.notifications[emailType];\n  }, [preferences]);\n\n  return useMemo(\n    () => ({\n      preferences,\n      loading,\n      initializePreferences,\n      updateNotificationPreference,\n      unsubscribeFromAll,\n      resubscribe,\n      canSendEmail,\n    }),\n    [preferences, loading, initializePreferences, updateNotificationPreference, unsubscribeFromAll, resubscribe, canSendEmail]\n  );\n});\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,CAAEC,WAAW,CAAEC,OAAO,KAAQ,OAAO,CACjE,MAAO,CAAAC,YAAY,KAAM,2CAA2C,CACpE,MAAO,CAAAC,iBAAiB,KAAM,2BAA2B,CAGzD,KAAM,CAAAC,mBAA+D,CAAG,CACtEC,aAAa,CAAE,CACbC,iBAAiB,CAAE,IAAI,CACvBC,aAAa,CAAE,IAAI,CACnBC,sBAAsB,CAAE,IAAI,CAC5BC,gBAAgB,CAAE,IAAI,CACtBC,cAAc,CAAE,IAClB,CAAC,CACDC,YAAY,CAAE,KAChB,CAAC,CAED,MAAO,MAAM,CAACC,wBAAwB,CAAEC,mBAAmB,CAAC,CAAGV,iBAAiB,CAAC,IAAM,CACrF,KAAM,CAACW,WAAW,CAAEC,cAAc,CAAC,CAAGjB,QAAQ,CAA0B,IAAI,CAAC,CAC7E,KAAM,CAACkB,OAAO,CAAEC,UAAU,CAAC,CAAGnB,QAAQ,CAAC,IAAI,CAAC,CAE5C,KAAM,CAAAoB,eAAe,CAAGlB,WAAW,CAAC,SAAY,CAC9C,GAAI,CACF,KAAM,CAAAmB,MAAM,CAAG,KAAM,CAAAjB,YAAY,CAACkB,OAAO,CAAC,mBAAmB,CAAC,CAC9D,GAAID,MAAM,CAAE,CACVJ,cAAc,CAACM,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,CAAC,CACpC,CACF,CAAE,MAAOI,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,+CAA+C,CAAEA,KAAK,CAAC,CACvE,CAAC,OAAS,CACRN,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAAE,EAAE,CAAC,CAENlB,SAAS,CAAC,IAAM,CACdmB,eAAe,CAAC,CAAC,CACnB,CAAC,CAAE,CAACA,eAAe,CAAC,CAAC,CAErB,KAAM,CAAAO,0BAA0B,CAAGzB,WAAW,CAAC,KAAO,CAAA0B,KAAuB,EAAK,CAChF,GAAI,CACF,KAAM,CAAAC,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,mBAAmB,EAAI,uBAAuB,CAE1E,KAAM,CAAAC,KAAK,CAAC,GAAGJ,OAAO,mCAAmC,CAAE,CACzDK,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEb,IAAI,CAACc,SAAS,CAACT,KAAK,CAC5B,CAAC,CAAC,CAEFF,OAAO,CAACY,GAAG,CAAC,wCAAwC,CAAC,CACvD,CAAE,MAAOb,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gDAAgD,CAAEA,KAAK,CAAC,CACxE,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAc,eAAe,CAAGrC,WAAW,CAAC,KAAO,CAAAsC,cAAgC,EAAK,CAC9E,GAAI,CACF,KAAM,CAAApC,YAAY,CAACqC,OAAO,CAAC,mBAAmB,CAAElB,IAAI,CAACc,SAAS,CAACG,cAAc,CAAC,CAAC,CAC/EvB,cAAc,CAACuB,cAAc,CAAC,CAE9B,KAAM,CAAAb,0BAA0B,CAACa,cAAc,CAAC,CAClD,CAAE,MAAOf,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,8CAA8C,CAAEA,KAAK,CAAC,CACtE,CACF,CAAC,CAAE,CAACE,0BAA0B,CAAC,CAAC,CAEhC,KAAM,CAAAe,qBAAqB,CAAGxC,WAAW,CAAC,MAAOyC,MAAc,CAAEC,KAAa,GAAK,CACjF,KAAM,CAAAJ,cAAgC,CAAAK,MAAA,CAAAC,MAAA,EACpCH,MAAM,CACNC,KAAK,EACFtC,mBAAmB,CACvB,CAED,KAAM,CAAAiC,eAAe,CAACC,cAAc,CAAC,CACvC,CAAC,CAAE,CAACD,eAAe,CAAC,CAAC,CAErB,KAAM,CAAAQ,4BAA4B,CAAG7C,WAAW,CAAC,MAC/C8C,GAA4C,CAC5CC,KAAc,GACX,CACH,GAAI,CAACjC,WAAW,CAAE,OAElB,KAAM,CAAAkC,OAAyB,CAAAL,MAAA,CAAAC,MAAA,IAC1B9B,WAAW,EACdT,aAAa,CAAAsC,MAAA,CAAAC,MAAA,IACR9B,WAAW,CAACT,aAAa,EAC5B,CAACyC,GAAG,EAAGC,KAAK,EACb,EACF,CAED,KAAM,CAAAV,eAAe,CAACW,OAAO,CAAC,CAChC,CAAC,CAAE,CAAClC,WAAW,CAAEuB,eAAe,CAAC,CAAC,CAElC,KAAM,CAAAY,kBAAkB,CAAGjD,WAAW,CAAC,SAAY,CACjD,GAAI,CAACc,WAAW,CAAE,OAElB,KAAM,CAAAkC,OAAyB,CAAAL,MAAA,CAAAC,MAAA,IAC1B9B,WAAW,EACdH,YAAY,CAAE,IAAI,CAClBuC,cAAc,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,EACzC,CAED,KAAM,CAAAf,eAAe,CAACW,OAAO,CAAC,CAChC,CAAC,CAAE,CAAClC,WAAW,CAAEuB,eAAe,CAAC,CAAC,CAElC,KAAM,CAAAgB,WAAW,CAAGrD,WAAW,CAAC,SAAY,CAC1C,GAAI,CAACc,WAAW,CAAE,OAElB,KAAM,CAAAkC,OAAyB,CAAAL,MAAA,CAAAC,MAAA,IAC1B9B,WAAW,EACdH,YAAY,CAAE,KAAK,CACnBuC,cAAc,CAAEI,SAAS,EAC1B,CAED,KAAM,CAAAjB,eAAe,CAACW,OAAO,CAAC,CAChC,CAAC,CAAE,CAAClC,WAAW,CAAEuB,eAAe,CAAC,CAAC,CAElC,KAAM,CAAAkB,YAAY,CAAGvD,WAAW,CAAEwD,SAAkD,EAAc,CAChG,GAAI,CAAC1C,WAAW,CAAE,MAAO,MAAK,CAC9B,GAAIA,WAAW,CAACH,YAAY,CAAE,MAAO,MAAK,CAC1C,MAAO,CAAAG,WAAW,CAACT,aAAa,CAACmD,SAAS,CAAC,CAC7C,CAAC,CAAE,CAAC1C,WAAW,CAAC,CAAC,CAEjB,MAAO,CAAAb,OAAO,CACZ,KAAO,CACLa,WAAW,CACXE,OAAO,CACPwB,qBAAqB,CACrBK,4BAA4B,CAC5BI,kBAAkB,CAClBI,WAAW,CACXE,YACF,CAAC,CAAC,CACF,CAACzC,WAAW,CAAEE,OAAO,CAAEwB,qBAAqB,CAAEK,4BAA4B,CAAEI,kBAAkB,CAAEI,WAAW,CAAEE,YAAY,CAC3H,CAAC,CACH,CAAC,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}