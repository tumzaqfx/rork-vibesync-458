{"ast":null,"code":"const SENDGRID_API_KEY=process.env.SENDGRID_API_KEY||'';const AWS_SES_REGION=process.env.AWS_SES_REGION||'us-east-1';const AWS_ACCESS_KEY=process.env.AWS_ACCESS_KEY_ID||'';const AWS_SECRET_KEY=process.env.AWS_SECRET_ACCESS_KEY||'';const FROM_EMAIL=process.env.FROM_EMAIL||'noreply@vibesync.com';const FROM_NAME=process.env.FROM_NAME||'VibeSync';export class EmailService{constructor(){if(SENDGRID_API_KEY&&SENDGRID_API_KEY!==''){this.provider='sendgrid';console.log('[EmailService] Using SendGrid provider');}else if(AWS_ACCESS_KEY&&AWS_SECRET_KEY&&AWS_ACCESS_KEY!==''&&AWS_SECRET_KEY!==''){this.provider='aws-ses';console.log('[EmailService] Using AWS SES provider');}else{this.provider='mock';console.log('[EmailService] No email provider configured. Using mock mode.');console.log('[EmailService] To enable real emails, set SENDGRID_API_KEY or AWS credentials in .env');}}async sendEmail(to,subject,htmlBody,textBody,category='transactional'){console.log(`[EmailService] Sending ${category} email to ${to}: ${subject}`);try{switch(this.provider){case'sendgrid':return await this.sendViaSendGrid(to,subject,htmlBody,textBody,category);case'aws-ses':return await this.sendViaAWSSES(to,subject,htmlBody,textBody);case'mock':return this.sendViaMock(to,subject,htmlBody,textBody);default:throw new Error('Unknown email provider');}}catch(error){console.error('[EmailService] Error sending email:',error);return{success:false,error:error instanceof Error?error.message:'Unknown error'};}}async sendViaSendGrid(to,subject,htmlBody,textBody,category){const response=await fetch('https://api.sendgrid.com/v3/mail/send',{method:'POST',headers:{'Authorization':`Bearer ${SENDGRID_API_KEY}`,'Content-Type':'application/json'},body:JSON.stringify({personalizations:[{to:[{email:to}]}],from:{email:FROM_EMAIL,name:FROM_NAME},subject,content:[{type:'text/plain',value:textBody},{type:'text/html',value:htmlBody}],categories:[category],tracking_settings:{click_tracking:{enable:true},open_tracking:{enable:true}}})});if(response.ok){const messageId=response.headers.get('x-message-id')||'unknown';return{success:true,messageId};}else{const error=await response.text();return{success:false,error};}}async sendViaAWSSES(to,subject,htmlBody,textBody){console.log('[EmailService] AWS SES integration not fully implemented. Using mock.');return this.sendViaMock(to,subject,htmlBody,textBody);}sendViaMock(to,subject,htmlBody,textBody){console.log('\\n========== MOCK EMAIL ==========');console.log(`To: ${to}`);console.log(`Subject: ${subject}`);console.log('\\n--- Text Body ---');console.log(textBody);console.log('\\n--- HTML Body Preview ---');console.log(`${htmlBody.substring(0,500)}...`);console.log('================================\\n');return{success:true,messageId:`mock-${Date.now()}`};}async sendTemplateEmail(template,payload){const subject=this.replaceTokens(template.subject,payload);const htmlBody=this.replaceTokens(template.htmlBody,payload);const textBody=this.replaceTokens(template.textBody,payload);return this.sendEmail(payload.email,subject,htmlBody,textBody,template.category);}replaceTokens(template,payload){let result=template;for(const[key,value]of Object.entries(payload)){const token=`{${key}}`;result=result.replace(new RegExp(token,'g'),String(value||''));}return result;}async verifyEmailDeliverability(email){const emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;return emailRegex.test(email);}}export class EmailQueue{queue=[];processing=false;constructor(){this.emailService=new EmailService();}async enqueue(type,trigger,payload,maxAttempts=3){const item={id:`email-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,type,trigger,payload,status:'pending',attempts:0,maxAttempts,createdAt:new Date().toISOString()};this.queue.push(item);console.log(`[EmailQueue] Enqueued ${type} email for ${payload.email}`);if(!this.processing){this.processQueue();}return item.id;}async processQueue(){if(this.processing||this.queue.length===0)return;this.processing=true;while(this.queue.length>0){const item=this.queue[0];if(item.status==='pending'||item.status==='retrying'){await this.processItem(item);}if(item.status==='sent'||item.status==='failed'){this.queue.shift();}else{break;}}this.processing=false;}async processItem(item){item.attempts++;console.log(`[EmailQueue] Processing ${item.type} (attempt ${item.attempts}/${item.maxAttempts})`);try{const template=getEmailTemplate(item.type);const result=await this.emailService.sendTemplateEmail(template,item.payload);if(result.success){item.status='sent';item.sentAt=new Date().toISOString();console.log(`[EmailQueue] Successfully sent ${item.type} to ${item.payload.email}`);}else{throw new Error(result.error||'Unknown error');}}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error';console.error(`[EmailQueue] Error sending ${item.type}:`,errorMessage);if(item.attempts>=item.maxAttempts){item.status='failed';item.error=errorMessage;console.error(`[EmailQueue] Failed to send ${item.type} after ${item.attempts} attempts`);}else{item.status='retrying';await new Promise(resolve=>setTimeout(resolve,1000*item.attempts));}}}getQueueStatus(){return{pending:this.queue.filter(i=>i.status==='pending').length,sent:this.queue.filter(i=>i.status==='sent').length,failed:this.queue.filter(i=>i.status==='failed').length,retrying:this.queue.filter(i=>i.status==='retrying').length};}}export const emailQueue=new EmailQueue();function getEmailTemplate(type){const templates=require('./email-templates').emailTemplates;const template=templates[type];if(!template){throw new Error(`Email template not found: ${type}`);}return template;}","map":{"version":3,"names":["SENDGRID_API_KEY","process","env","AWS_SES_REGION","AWS_ACCESS_KEY","AWS_ACCESS_KEY_ID","AWS_SECRET_KEY","AWS_SECRET_ACCESS_KEY","FROM_EMAIL","FROM_NAME","EmailService","constructor","provider","console","log","sendEmail","to","subject","htmlBody","textBody","category","sendViaSendGrid","sendViaAWSSES","sendViaMock","Error","error","success","message","response","fetch","method","headers","body","JSON","stringify","personalizations","email","from","name","content","type","value","categories","tracking_settings","click_tracking","enable","open_tracking","ok","messageId","get","text","substring","Date","now","sendTemplateEmail","template","payload","replaceTokens","result","key","Object","entries","token","replace","RegExp","String","verifyEmailDeliverability","emailRegex","test","EmailQueue","queue","processing","emailService","enqueue","trigger","maxAttempts","item","id","Math","random","toString","substr","status","attempts","createdAt","toISOString","push","processQueue","length","processItem","shift","getEmailTemplate","sentAt","errorMessage","Promise","resolve","setTimeout","getQueueStatus","pending","filter","i","sent","failed","retrying","emailQueue","templates","require","emailTemplates"],"sources":["/home/user/rork-vibesync-458/utils/email-service.ts"],"sourcesContent":["import {\n  EmailType,\n  EmailPayload,\n  EmailTemplate,\n  EmailQueueItem,\n  EmailPreferences,\n} from '@/types/email';\n\nconst SENDGRID_API_KEY = process.env.SENDGRID_API_KEY || '';\nconst AWS_SES_REGION = process.env.AWS_SES_REGION || 'us-east-1';\nconst AWS_ACCESS_KEY = process.env.AWS_ACCESS_KEY_ID || '';\nconst AWS_SECRET_KEY = process.env.AWS_SECRET_ACCESS_KEY || '';\nconst FROM_EMAIL = process.env.FROM_EMAIL || 'noreply@vibesync.com';\nconst FROM_NAME = process.env.FROM_NAME || 'VibeSync';\n\nexport class EmailService {\n  private provider: 'sendgrid' | 'aws-ses' | 'mock';\n\n  constructor() {\n    if (SENDGRID_API_KEY && SENDGRID_API_KEY !== '') {\n      this.provider = 'sendgrid';\n      console.log('[EmailService] Using SendGrid provider');\n    } else if (AWS_ACCESS_KEY && AWS_SECRET_KEY && AWS_ACCESS_KEY !== '' && AWS_SECRET_KEY !== '') {\n      this.provider = 'aws-ses';\n      console.log('[EmailService] Using AWS SES provider');\n    } else {\n      this.provider = 'mock';\n      console.log('[EmailService] No email provider configured. Using mock mode.');\n      console.log('[EmailService] To enable real emails, set SENDGRID_API_KEY or AWS credentials in .env');\n    }\n  }\n\n  async sendEmail(\n    to: string,\n    subject: string,\n    htmlBody: string,\n    textBody: string,\n    category: 'transactional' | 'promotional' | 'notification' = 'transactional'\n  ): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    console.log(`[EmailService] Sending ${category} email to ${to}: ${subject}`);\n\n    try {\n      switch (this.provider) {\n        case 'sendgrid':\n          return await this.sendViaSendGrid(to, subject, htmlBody, textBody, category);\n        case 'aws-ses':\n          return await this.sendViaAWSSES(to, subject, htmlBody, textBody);\n        case 'mock':\n          return this.sendViaMock(to, subject, htmlBody, textBody);\n        default:\n          throw new Error('Unknown email provider');\n      }\n    } catch (error) {\n      console.error('[EmailService] Error sending email:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  private async sendViaSendGrid(\n    to: string,\n    subject: string,\n    htmlBody: string,\n    textBody: string,\n    category: string\n  ): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const response = await fetch('https://api.sendgrid.com/v3/mail/send', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${SENDGRID_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        personalizations: [{ to: [{ email: to }] }],\n        from: { email: FROM_EMAIL, name: FROM_NAME },\n        subject,\n        content: [\n          { type: 'text/plain', value: textBody },\n          { type: 'text/html', value: htmlBody },\n        ],\n        categories: [category],\n        tracking_settings: {\n          click_tracking: { enable: true },\n          open_tracking: { enable: true },\n        },\n      }),\n    });\n\n    if (response.ok) {\n      const messageId = response.headers.get('x-message-id') || 'unknown';\n      return { success: true, messageId };\n    } else {\n      const error = await response.text();\n      return { success: false, error };\n    }\n  }\n\n  private async sendViaAWSSES(\n    to: string,\n    subject: string,\n    htmlBody: string,\n    textBody: string\n  ): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    console.log('[EmailService] AWS SES integration not fully implemented. Using mock.');\n    return this.sendViaMock(to, subject, htmlBody, textBody);\n  }\n\n  private sendViaMock(\n    to: string,\n    subject: string,\n    htmlBody: string,\n    textBody: string\n  ): { success: boolean; messageId: string } {\n    console.log('\\n========== MOCK EMAIL ==========');\n    console.log(`To: ${to}`);\n    console.log(`Subject: ${subject}`);\n    console.log('\\n--- Text Body ---');\n    console.log(textBody);\n    console.log('\\n--- HTML Body Preview ---');\n    console.log(`${htmlBody.substring(0, 500)}...`);\n    console.log('================================\\n');\n    return { success: true, messageId: `mock-${Date.now()}` };\n  }\n\n  async sendTemplateEmail(\n    template: EmailTemplate,\n    payload: EmailPayload\n  ): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const subject = this.replaceTokens(template.subject, payload);\n    const htmlBody = this.replaceTokens(template.htmlBody, payload);\n    const textBody = this.replaceTokens(template.textBody, payload);\n\n    return this.sendEmail(payload.email, subject, htmlBody, textBody, template.category);\n  }\n\n  private replaceTokens(template: string, payload: Record<string, any>): string {\n    let result = template;\n    for (const [key, value] of Object.entries(payload)) {\n      const token = `{${key}}`;\n      result = result.replace(new RegExp(token, 'g'), String(value || ''));\n    }\n    return result;\n  }\n\n  async verifyEmailDeliverability(email: string): Promise<boolean> {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n}\n\nexport class EmailQueue {\n  private queue: EmailQueueItem[] = [];\n  private processing = false;\n  private emailService: EmailService;\n\n  constructor() {\n    this.emailService = new EmailService();\n  }\n\n  async enqueue(\n    type: EmailType,\n    trigger: any,\n    payload: EmailPayload,\n    maxAttempts = 3\n  ): Promise<string> {\n    const item: EmailQueueItem = {\n      id: `email-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      type,\n      trigger,\n      payload,\n      status: 'pending',\n      attempts: 0,\n      maxAttempts,\n      createdAt: new Date().toISOString(),\n    };\n\n    this.queue.push(item);\n    console.log(`[EmailQueue] Enqueued ${type} email for ${payload.email}`);\n\n    if (!this.processing) {\n      this.processQueue();\n    }\n\n    return item.id;\n  }\n\n  private async processQueue(): Promise<void> {\n    if (this.processing || this.queue.length === 0) return;\n\n    this.processing = true;\n\n    while (this.queue.length > 0) {\n      const item = this.queue[0];\n\n      if (item.status === 'pending' || item.status === 'retrying') {\n        await this.processItem(item);\n      }\n\n      if (item.status === 'sent' || item.status === 'failed') {\n        this.queue.shift();\n      } else {\n        break;\n      }\n    }\n\n    this.processing = false;\n  }\n\n  private async processItem(item: EmailQueueItem): Promise<void> {\n    item.attempts++;\n    console.log(\n      `[EmailQueue] Processing ${item.type} (attempt ${item.attempts}/${item.maxAttempts})`\n    );\n\n    try {\n      const template = getEmailTemplate(item.type);\n      const result = await this.emailService.sendTemplateEmail(template, item.payload);\n\n      if (result.success) {\n        item.status = 'sent';\n        item.sentAt = new Date().toISOString();\n        console.log(`[EmailQueue] Successfully sent ${item.type} to ${item.payload.email}`);\n      } else {\n        throw new Error(result.error || 'Unknown error');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      console.error(`[EmailQueue] Error sending ${item.type}:`, errorMessage);\n\n      if (item.attempts >= item.maxAttempts) {\n        item.status = 'failed';\n        item.error = errorMessage;\n        console.error(`[EmailQueue] Failed to send ${item.type} after ${item.attempts} attempts`);\n      } else {\n        item.status = 'retrying';\n        await new Promise((resolve) => setTimeout(resolve, 1000 * item.attempts));\n      }\n    }\n  }\n\n  getQueueStatus(): {\n    pending: number;\n    sent: number;\n    failed: number;\n    retrying: number;\n  } {\n    return {\n      pending: this.queue.filter((i) => i.status === 'pending').length,\n      sent: this.queue.filter((i) => i.status === 'sent').length,\n      failed: this.queue.filter((i) => i.status === 'failed').length,\n      retrying: this.queue.filter((i) => i.status === 'retrying').length,\n    };\n  }\n}\n\nexport const emailQueue = new EmailQueue();\n\nfunction getEmailTemplate(type: EmailType): EmailTemplate {\n  const templates = require('./email-templates').emailTemplates;\n  const template = templates[type];\n  if (!template) {\n    throw new Error(`Email template not found: ${type}`);\n  }\n  return template;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}