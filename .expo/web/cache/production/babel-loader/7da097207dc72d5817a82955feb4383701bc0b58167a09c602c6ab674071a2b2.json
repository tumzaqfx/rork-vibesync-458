{"ast":null,"code":"'use client';import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"style\",\"source\",\"placeholder\",\"contentFit\",\"contentPosition\",\"transition\",\"fadeDuration\",\"resizeMode\",\"defaultSource\",\"loadingIndicatorSource\"],_excluded2=[\"resizeMode\"];import{Platform,createSnapshotFriendlyRef}from'expo-modules-core';import React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import ExpoImage from'./ExpoImage';import ImageModule from'./ImageModule';import{resolveContentFit,resolveContentPosition,resolveTransition}from'./utils';import{resolveSource,resolveSources}from'./utils/resolveSources';import{jsx as _jsx}from\"react/jsx-runtime\";let loggedDefaultSourceDeprecationWarning=false;let loggedRenderingChildrenWarning=false;export class Image extends React.PureComponent{constructor(props){super(props);this.nativeViewRef=createSnapshotFriendlyRef();this.containerViewRef=createSnapshotFriendlyRef();}getAnimatableRef=()=>{if(true){return this.containerViewRef.current;}else{return this;}};static Image=ImageModule.Image;static async prefetch(urls,options){let cachePolicy='memory-disk';let headers;switch(typeof options){case'string':cachePolicy=options;break;case'object':cachePolicy=options.cachePolicy??cachePolicy;headers=options.headers;break;}return ImageModule.prefetch(Array.isArray(urls)?urls:[urls],cachePolicy,headers);}static async clearMemoryCache(){return await ImageModule.clearMemoryCache();}static async clearDiskCache(){return await ImageModule.clearDiskCache();}static async getCachePathAsync(cacheKey){return await ImageModule.getCachePathAsync(cacheKey);}static async generateBlurhashAsync(url,numberOfComponents){return await ImageModule.generateBlurhashAsync(url,numberOfComponents);}async startAnimating(){await this.nativeViewRef.current?.startAnimating();}async stopAnimating(){await this.nativeViewRef.current?.stopAnimating();}async lockResourceAsync(){await this.nativeViewRef.current?.lockResourceAsync();}async unlockResourceAsync(){await this.nativeViewRef.current?.unlockResourceAsync();}async reloadAsync(){await this.nativeViewRef.current?.reloadAsync();}static async loadAsync(source,options){const resolvedSource=resolveSource(source);return await ImageModule.loadAsync(resolvedSource,options);}render(){const _this$props=this.props,{style,source,placeholder,contentFit,contentPosition,transition,fadeDuration,resizeMode:resizeModeProp,defaultSource,loadingIndicatorSource}=_this$props,restProps=_objectWithoutPropertiesLoose(_this$props,_excluded);const _ref=StyleSheet.flatten(style)||{},{resizeMode:resizeModeStyle}=_ref,restStyle=_objectWithoutPropertiesLoose(_ref,_excluded2);const resizeMode=resizeModeProp??resizeModeStyle;if((defaultSource||loadingIndicatorSource)&&!loggedDefaultSourceDeprecationWarning){console.warn('[expo-image]: `defaultSource` and `loadingIndicatorSource` props are deprecated, use `placeholder` instead');loggedDefaultSourceDeprecationWarning=true;}if(restProps.children&&!loggedRenderingChildrenWarning){console.warn('The <Image> component does not support children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');loggedRenderingChildrenWarning=true;}return _jsx(ExpoImage,Object.assign({},restProps,{style:restStyle,source:resolveSources(source),placeholder:resolveSources(placeholder??defaultSource??loadingIndicatorSource),contentFit:resolveContentFit(contentFit,resizeMode),contentPosition:resolveContentPosition(contentPosition),transition:resolveTransition(transition,fadeDuration),nativeViewRef:this.nativeViewRef,containerViewRef:this.containerViewRef}));}}","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_excluded","_excluded2","Platform","createSnapshotFriendlyRef","React","StyleSheet","ExpoImage","ImageModule","resolveContentFit","resolveContentPosition","resolveTransition","resolveSource","resolveSources","jsx","_jsx","loggedDefaultSourceDeprecationWarning","loggedRenderingChildrenWarning","Image","PureComponent","constructor","props","nativeViewRef","containerViewRef","getAnimatableRef","current","prefetch","urls","options","cachePolicy","headers","Array","isArray","clearMemoryCache","clearDiskCache","getCachePathAsync","cacheKey","generateBlurhashAsync","url","numberOfComponents","startAnimating","stopAnimating","lockResourceAsync","unlockResourceAsync","reloadAsync","loadAsync","source","resolvedSource","render","_this$props","style","placeholder","contentFit","contentPosition","transition","fadeDuration","resizeMode","resizeModeProp","defaultSource","loadingIndicatorSource","restProps","_ref","flatten","resizeModeStyle","restStyle","console","warn","children","Object","assign"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-image/src/Image.tsx"],"sourcesContent":["'use client';\n\nimport { Platform, createSnapshotFriendlyRef } from 'expo-modules-core';\nimport React from 'react';\nimport { StyleSheet, type View } from 'react-native';\n\nimport ExpoImage from './ExpoImage';\nimport {\n  ImageLoadOptions,\n  ImagePrefetchOptions,\n  ImageProps,\n  ImageRef,\n  ImageSource,\n} from './Image.types';\nimport ImageModule from './ImageModule';\nimport { resolveContentFit, resolveContentPosition, resolveTransition } from './utils';\nimport { resolveSource, resolveSources } from './utils/resolveSources';\n\nlet loggedDefaultSourceDeprecationWarning = false;\nlet loggedRenderingChildrenWarning = false;\n\nexport class Image extends React.PureComponent<ImageProps> {\n  nativeViewRef: React.RefObject<ExpoImage | null>;\n  containerViewRef: React.RefObject<View | null>;\n\n  constructor(props: ImageProps) {\n    super(props);\n    this.nativeViewRef = createSnapshotFriendlyRef();\n    this.containerViewRef = createSnapshotFriendlyRef();\n  }\n\n  // Reanimated support on web\n  getAnimatableRef = () => {\n    if (Platform.OS === 'web') {\n      return this.containerViewRef.current;\n    } else {\n      return this;\n    }\n  };\n\n  /**\n   * @hidden\n   */\n  static Image = ImageModule.Image;\n\n  /**\n   * Preloads images at the given URLs that can be later used in the image view.\n   * Preloaded images are cached to the memory and disk by default, so make sure\n   * to use `disk` (default) or `memory-disk` [cache policy](#cachepolicy).\n   * @param urls - A URL string or an array of URLs of images to prefetch.\n   * @param {ImagePrefetchOptions['cachePolicy']} cachePolicy - The cache policy for prefetched images.\n   * @return A promise resolving to `true` as soon as all images have been\n   * successfully prefetched. If an image fails to be prefetched, the promise\n   * will immediately resolve to `false` regardless of whether other images have\n   * finished prefetching.\n   */\n  static async prefetch(\n    urls: string | string[],\n    cachePolicy?: ImagePrefetchOptions['cachePolicy']\n  ): Promise<boolean>;\n  /**\n   * Preloads images at the given URLs that can be later used in the image view.\n   * Preloaded images are cached to the memory and disk by default, so make sure\n   * to use `disk` (default) or `memory-disk` [cache policy](#cachepolicy).\n   * @param urls - A URL string or an array of URLs of images to prefetch.\n   * @param options - Options for prefetching images.\n   * @return A promise resolving to `true` as soon as all images have been\n   * successfully prefetched. If an image fails to be prefetched, the promise\n   * will immediately resolve to `false` regardless of whether other images have\n   * finished prefetching.\n   */\n  static async prefetch(urls: string | string[], options?: ImagePrefetchOptions): Promise<boolean>;\n  static async prefetch(\n    urls: string | string[],\n    options?: ImagePrefetchOptions['cachePolicy'] | ImagePrefetchOptions\n  ): Promise<boolean> {\n    let cachePolicy: ImagePrefetchOptions['cachePolicy'] = 'memory-disk';\n    let headers: ImagePrefetchOptions['headers'];\n    switch (typeof options) {\n      case 'string':\n        cachePolicy = options;\n        break;\n      case 'object':\n        cachePolicy = options.cachePolicy ?? cachePolicy;\n        headers = options.headers;\n        break;\n    }\n\n    return ImageModule.prefetch(Array.isArray(urls) ? urls : [urls], cachePolicy, headers);\n  }\n\n  /**\n   * Asynchronously clears all images stored in memory.\n   * @platform android\n   * @platform ios\n   * @return A promise resolving to `true` when the operation succeeds.\n   * It may resolve to `false` on Android when the activity is no longer available.\n   * Resolves to `false` on Web.\n   */\n  static async clearMemoryCache(): Promise<boolean> {\n    return await ImageModule.clearMemoryCache();\n  }\n\n  /**\n   * Asynchronously clears all images from the disk cache.\n   * @platform android\n   * @platform ios\n   * @return A promise resolving to `true` when the operation succeeds.\n   * It may resolve to `false` on Android when the activity is no longer available.\n   * Resolves to `false` on Web.\n   */\n  static async clearDiskCache(): Promise<boolean> {\n    return await ImageModule.clearDiskCache();\n  }\n\n  /**\n   * Asynchronously checks if an image exists in the disk cache and resolves to\n   * the path of the cached image if it does.\n   * @param cacheKey - The cache key for the requested image. Unless you have set\n   * a custom cache key, this will be the source URL of the image.\n   * @platform android\n   * @platform ios\n   * @return A promise resolving to the path of the cached image. It will resolve\n   * to `null` if the image does not exist in the cache.\n   */\n  static async getCachePathAsync(cacheKey: string): Promise<string | null> {\n    return await ImageModule.getCachePathAsync(cacheKey);\n  }\n\n  /**\n   * Asynchronously generates a [Blurhash](https://blurha.sh) from an image.\n   * @param url - The URL of the image to generate a blurhash from.\n   * @param numberOfComponents - The number of components to encode the blurhash with.\n   * Must be between 1 and 9. Defaults to `[4, 3]`.\n   * @platform ios\n   * @return A promise resolving to the blurhash string.\n   */\n  static async generateBlurhashAsync(\n    url: string,\n    numberOfComponents: [number, number] | { width: number; height: number }\n  ): Promise<string | null> {\n    return await ImageModule.generateBlurhashAsync(url, numberOfComponents);\n  }\n\n  /**\n   * Asynchronously starts playback of the view's image if it is animated.\n   * @platform android\n   * @platform ios\n   */\n  async startAnimating(): Promise<void> {\n    await this.nativeViewRef.current?.startAnimating();\n  }\n\n  /**\n   * Asynchronously stops the playback of the view's image if it is animated.\n   * @platform android\n   * @platform ios\n   */\n  async stopAnimating(): Promise<void> {\n    await this.nativeViewRef.current?.stopAnimating();\n  }\n\n  /**\n   * Prevents the resource from being reloaded by locking it.\n   * @platform android\n   * @platform ios\n   */\n  async lockResourceAsync(): Promise<void> {\n    await this.nativeViewRef.current?.lockResourceAsync();\n  }\n\n  /**\n   * Releases the lock on the resource, allowing it to be reloaded.\n   * @platform android\n   * @platform ios\n   */\n  async unlockResourceAsync(): Promise<void> {\n    await this.nativeViewRef.current?.unlockResourceAsync();\n  }\n\n  /**\n   * Reloads the resource, ignoring lock.\n   * @platform android\n   * @platform ios\n   */\n  async reloadAsync(): Promise<void> {\n    await this.nativeViewRef.current?.reloadAsync();\n  }\n\n  /**\n   * Loads an image from the given source to memory and resolves to\n   * an object that references the native image instance.\n   * @platform android\n   * @platform ios\n   * @platform web\n   */\n  static async loadAsync(\n    source: ImageSource | string | number,\n    options?: ImageLoadOptions\n  ): Promise<ImageRef> {\n    const resolvedSource = resolveSource(source) as ImageSource;\n    return await ImageModule.loadAsync(resolvedSource, options);\n  }\n\n  render() {\n    const {\n      style,\n      source,\n      placeholder,\n      contentFit,\n      contentPosition,\n      transition,\n      fadeDuration,\n      resizeMode: resizeModeProp,\n      defaultSource,\n      loadingIndicatorSource,\n      ...restProps\n    } = this.props;\n\n    const { resizeMode: resizeModeStyle, ...restStyle } = StyleSheet.flatten(style) || {};\n    const resizeMode = resizeModeProp ?? resizeModeStyle;\n\n    if ((defaultSource || loadingIndicatorSource) && !loggedDefaultSourceDeprecationWarning) {\n      console.warn(\n        '[expo-image]: `defaultSource` and `loadingIndicatorSource` props are deprecated, use `placeholder` instead'\n      );\n      loggedDefaultSourceDeprecationWarning = true;\n    }\n    // @ts-expect-error\n    if (restProps.children && !loggedRenderingChildrenWarning) {\n      console.warn(\n        'The <Image> component does not support children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.'\n      );\n      loggedRenderingChildrenWarning = true;\n    }\n    return (\n      <ExpoImage\n        {...restProps}\n        style={restStyle}\n        source={resolveSources(source)}\n        placeholder={resolveSources(placeholder ?? defaultSource ?? loadingIndicatorSource)}\n        contentFit={resolveContentFit(contentFit, resizeMode)}\n        contentPosition={resolveContentPosition(contentPosition)}\n        transition={resolveTransition(transition, fadeDuration)}\n        nativeViewRef={this.nativeViewRef}\n        containerViewRef={this.containerViewRef}\n      />\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}