{"ast":null,"code":"import{Platform,UnavailabilityError}from'expo-modules-core';import ExpoHaptics from'./ExpoHaptics';import{NotificationFeedbackType,ImpactFeedbackStyle,AndroidHaptics}from'./Haptics.types';export async function notificationAsync(type=NotificationFeedbackType.Success){if(!ExpoHaptics?.notificationAsync){throw new UnavailabilityError('Haptics','notificationAsync');}await ExpoHaptics.notificationAsync(type);}export async function impactAsync(style=ImpactFeedbackStyle.Medium){if(!ExpoHaptics?.impactAsync){throw new UnavailabilityError('Haptic','impactAsync');}await ExpoHaptics.impactAsync(style);}export async function selectionAsync(){if(!ExpoHaptics?.selectionAsync){throw new UnavailabilityError('Haptic','selectionAsync');}await ExpoHaptics.selectionAsync();}export async function performAndroidHapticsAsync(type){if(true){return;}ExpoHaptics.performHapticsAsync(type);}export{NotificationFeedbackType,ImpactFeedbackStyle,AndroidHaptics};","map":{"version":3,"names":["Platform","UnavailabilityError","ExpoHaptics","NotificationFeedbackType","ImpactFeedbackStyle","AndroidHaptics","notificationAsync","type","Success","impactAsync","style","Medium","selectionAsync","performAndroidHapticsAsync","performHapticsAsync"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-haptics/src/Haptics.ts"],"sourcesContent":["import { Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoHaptics from './ExpoHaptics';\nimport { NotificationFeedbackType, ImpactFeedbackStyle, AndroidHaptics } from './Haptics.types';\n\n// @needsAudit\n/**\n * The kind of notification response used in the feedback.\n * @param type A notification feedback type that on Android is simulated using [`Vibrator`](https://developer.android.com/reference/android/os/Vibrator)\n * and iOS is directly mapped to [`UINotificationFeedbackType`](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype).\n * You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function notificationAsync(\n  type: NotificationFeedbackType = NotificationFeedbackType.Success\n): Promise<void> {\n  if (!ExpoHaptics?.notificationAsync) {\n    throw new UnavailabilityError('Haptics', 'notificationAsync');\n  }\n  await ExpoHaptics.notificationAsync(type);\n}\n\n// @needsAudit\n/**\n * @param style A collision indicator that on Android is simulated using [`Vibrator`](https://developer.android.com/reference/android/os/Vibrator)\n * and on iOS, it is directly mapped to [`UIImpactFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackgenerator/feedbackstyle).\n * You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy, Rigid, Soft}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function impactAsync(\n  style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium\n): Promise<void> {\n  if (!ExpoHaptics?.impactAsync) {\n    throw new UnavailabilityError('Haptic', 'impactAsync');\n  }\n  await ExpoHaptics.impactAsync(style);\n}\n\n// @needsAudit\n/**\n * Used to let a user know when a selection change has been registered.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function selectionAsync(): Promise<void> {\n  if (!ExpoHaptics?.selectionAsync) {\n    throw new UnavailabilityError('Haptic', 'selectionAsync');\n  }\n  await ExpoHaptics.selectionAsync();\n}\n\n/**\n * Use the device haptics engine to provide physical feedback to the user.\n *\n * @platform android\n */\nexport async function performAndroidHapticsAsync(type: AndroidHaptics) {\n  if (Platform.OS !== 'android') {\n    return;\n  }\n  ExpoHaptics.performHapticsAsync(type);\n}\n\nexport { NotificationFeedbackType, ImpactFeedbackStyle, AndroidHaptics };\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,mBAAmB,KAAQ,mBAAmB,CAEjE,MAAO,CAAAC,WAAW,KAAM,eAAe,CACvC,OAASC,wBAAwB,CAAEC,mBAAmB,CAAEC,cAAc,KAAQ,iBAAiB,CAU/F,MAAO,eAAe,CAAAC,iBAAiBA,CACrCC,IAA8B,CAAGJ,wBAAwB,CAACK,OAAO,CAClD,CACf,GAAI,CAACN,WAAW,EAAEI,iBAAiB,CAAE,CACnC,KAAM,IAAI,CAAAL,mBAAmB,CAAC,SAAS,CAAE,mBAAmB,CAAC,CAC/D,CACA,KAAM,CAAAC,WAAW,CAACI,iBAAiB,CAACC,IAAI,CAAC,CAC3C,CASA,MAAO,eAAe,CAAAE,WAAWA,CAC/BC,KAA0B,CAAGN,mBAAmB,CAACO,MAAM,CACxC,CACf,GAAI,CAACT,WAAW,EAAEO,WAAW,CAAE,CAC7B,KAAM,IAAI,CAAAR,mBAAmB,CAAC,QAAQ,CAAE,aAAa,CAAC,CACxD,CACA,KAAM,CAAAC,WAAW,CAACO,WAAW,CAACC,KAAK,CAAC,CACtC,CAOA,MAAO,eAAe,CAAAE,cAAcA,CAAA,CAAkB,CACpD,GAAI,CAACV,WAAW,EAAEU,cAAc,CAAE,CAChC,KAAM,IAAI,CAAAX,mBAAmB,CAAC,QAAQ,CAAE,gBAAgB,CAAC,CAC3D,CACA,KAAM,CAAAC,WAAW,CAACU,cAAc,CAAC,CAAC,CACpC,CAOA,MAAO,eAAe,CAAAC,0BAA0BA,CAACN,IAAoB,CAAE,CACrE,QAA+B,CAC7B,OACF,CACAL,WAAW,CAACY,mBAAmB,CAACP,IAAI,CAAC,CACvC,CAEA,OAASJ,wBAAwB,CAAEC,mBAAmB,CAAEC,cAAc","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}