{"ast":null,"code":"import*as Localization from'expo-localization';const EU_COUNTRIES=['AT','BE','BG','HR','CY','CZ','DK','EE','FI','FR','DE','GR','HU','IE','IT','LV','LT','LU','MT','NL','PL','PT','RO','SK','SI','ES','SE','GB','UK'];export function detectRegion(){try{const locales=Localization.getLocales();const primaryLocale=locales[0];const countryCode=primaryLocale?.regionCode?.toUpperCase()||'US';let region='OTHER';if(EU_COUNTRIES.includes(countryCode)){region='EU';}else if(countryCode==='US'||countryCode==='CA'){region='US_CA';}else if(countryCode==='ZA'){region='ZA';}console.log('[RegionDetection] Detected region:',{region,countryCode});return{region,countryCode,countryName:primaryLocale?.regionCode||'Unknown'};}catch(error){console.error('[RegionDetection] Error detecting region:',error);return{region:'OTHER',countryCode:'US',countryName:'Unknown'};}}export function getRegionName(region){switch(region){case'EU':return'European Union';case'US_CA':return'United States / Canada';case'ZA':return'South Africa';default:return'International';}}","map":{"version":3,"names":["Localization","EU_COUNTRIES","detectRegion","locales","getLocales","primaryLocale","countryCode","regionCode","toUpperCase","region","includes","console","log","countryName","error","getRegionName"],"sources":["/home/user/rork-vibesync-458/utils/region-detection.ts"],"sourcesContent":["import * as Localization from 'expo-localization';\n\nexport type Region = 'EU' | 'US_CA' | 'ZA' | 'OTHER';\n\nexport interface RegionInfo {\n  region: Region;\n  countryCode: string;\n  countryName: string;\n}\n\nconst EU_COUNTRIES = [\n  'AT', 'BE', 'BG', 'HR', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR',\n  'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL',\n  'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'GB', 'UK'\n];\n\nexport function detectRegion(): RegionInfo {\n  try {\n    const locales = Localization.getLocales();\n    const primaryLocale = locales[0];\n    const countryCode = primaryLocale?.regionCode?.toUpperCase() || 'US';\n\n    let region: Region = 'OTHER';\n    \n    if (EU_COUNTRIES.includes(countryCode)) {\n      region = 'EU';\n    } else if (countryCode === 'US' || countryCode === 'CA') {\n      region = 'US_CA';\n    } else if (countryCode === 'ZA') {\n      region = 'ZA';\n    }\n\n    console.log('[RegionDetection] Detected region:', { region, countryCode });\n\n    return {\n      region,\n      countryCode,\n      countryName: primaryLocale?.regionCode || 'Unknown',\n    };\n  } catch (error) {\n    console.error('[RegionDetection] Error detecting region:', error);\n    return {\n      region: 'OTHER',\n      countryCode: 'US',\n      countryName: 'Unknown',\n    };\n  }\n}\n\nexport function getRegionName(region: Region): string {\n  switch (region) {\n    case 'EU':\n      return 'European Union';\n    case 'US_CA':\n      return 'United States / Canada';\n    case 'ZA':\n      return 'South Africa';\n    default:\n      return 'International';\n  }\n}\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,YAAY,KAAM,mBAAmB,CAUjD,KAAM,CAAAC,YAAY,CAAG,CACnB,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAC1D,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAC1D,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CACrD,CAED,MAAO,SAAS,CAAAC,YAAYA,CAAA,CAAe,CACzC,GAAI,CACF,KAAM,CAAAC,OAAO,CAAGH,YAAY,CAACI,UAAU,CAAC,CAAC,CACzC,KAAM,CAAAC,aAAa,CAAGF,OAAO,CAAC,CAAC,CAAC,CAChC,KAAM,CAAAG,WAAW,CAAGD,aAAa,EAAEE,UAAU,EAAEC,WAAW,CAAC,CAAC,EAAI,IAAI,CAEpE,GAAI,CAAAC,MAAc,CAAG,OAAO,CAE5B,GAAIR,YAAY,CAACS,QAAQ,CAACJ,WAAW,CAAC,CAAE,CACtCG,MAAM,CAAG,IAAI,CACf,CAAC,IAAM,IAAIH,WAAW,GAAK,IAAI,EAAIA,WAAW,GAAK,IAAI,CAAE,CACvDG,MAAM,CAAG,OAAO,CAClB,CAAC,IAAM,IAAIH,WAAW,GAAK,IAAI,CAAE,CAC/BG,MAAM,CAAG,IAAI,CACf,CAEAE,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAE,CAAEH,MAAM,CAAEH,WAAY,CAAC,CAAC,CAE1E,MAAO,CACLG,MAAM,CACNH,WAAW,CACXO,WAAW,CAAER,aAAa,EAAEE,UAAU,EAAI,SAC5C,CAAC,CACH,CAAE,MAAOO,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,2CAA2C,CAAEA,KAAK,CAAC,CACjE,MAAO,CACLL,MAAM,CAAE,OAAO,CACfH,WAAW,CAAE,IAAI,CACjBO,WAAW,CAAE,SACf,CAAC,CACH,CACF,CAEA,MAAO,SAAS,CAAAE,aAAaA,CAACN,MAAc,CAAU,CACpD,OAAQA,MAAM,EACZ,IAAK,IAAI,CACP,MAAO,gBAAgB,CACzB,IAAK,OAAO,CACV,MAAO,wBAAwB,CACjC,IAAK,IAAI,CACP,MAAO,cAAc,CACvB,QACE,MAAO,eAAe,CAC1B,CACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}