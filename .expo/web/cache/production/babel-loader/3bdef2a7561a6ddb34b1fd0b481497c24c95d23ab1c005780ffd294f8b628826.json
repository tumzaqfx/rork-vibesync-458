{"ast":null,"code":"'use strict';import{registerEventHandler,unregisterEventHandler}from\"./core.js\";import{shouldBeUseWeb}from\"./PlatformChecker.js\";const SHOULD_BE_USE_WEB=shouldBeUseWeb();function jsListener(eventName,handler){return evt=>{handler(Object.assign({},evt.nativeEvent,{eventName}));};}class WorkletEventHandlerNative{#viewTags;#registrations;constructor(worklet,eventNames){this.worklet=worklet;this.eventNames=eventNames;this.#viewTags=new Set();this.#registrations=new Map();}updateEventHandler(newWorklet,newEvents){this.worklet=newWorklet;this.eventNames=newEvents;this.#registrations.forEach(registrationIDs=>{registrationIDs.forEach(id=>unregisterEventHandler(id));});Array.from(this.#viewTags).forEach(tag=>{const newRegistrations=this.eventNames.map(eventName=>registerEventHandler(this.worklet,eventName,tag));this.#registrations.set(tag,newRegistrations);});}registerForEvents(viewTag,fallbackEventName){this.#viewTags.add(viewTag);const newRegistrations=this.eventNames.map(eventName=>registerEventHandler(this.worklet,eventName,viewTag));this.#registrations.set(viewTag,newRegistrations);if(this.eventNames.length===0&&fallbackEventName){const newRegistration=registerEventHandler(this.worklet,fallbackEventName,viewTag);this.#registrations.set(viewTag,[newRegistration]);}}unregisterFromEvents(viewTag){this.#viewTags.delete(viewTag);this.#registrations.get(viewTag)?.forEach(id=>{unregisterEventHandler(id);});this.#registrations.delete(viewTag);}}class WorkletEventHandlerWeb{constructor(worklet,eventNames=[]){this.worklet=worklet;this.eventNames=eventNames;this.listeners={};this.setupWebListeners();}setupWebListeners(){this.listeners={};this.eventNames.forEach(eventName=>{this.listeners[eventName]=jsListener(eventName,this.worklet);});}updateEventHandler(newWorklet,newEvents){this.worklet=newWorklet;this.eventNames=newEvents;this.setupWebListeners();}registerForEvents(_viewTag,_fallbackEventName){}unregisterFromEvents(_viewTag){}}export const WorkletEventHandler=SHOULD_BE_USE_WEB?WorkletEventHandlerWeb:WorkletEventHandlerNative;","map":{"version":3,"names":["registerEventHandler","unregisterEventHandler","shouldBeUseWeb","SHOULD_BE_USE_WEB","jsListener","eventName","handler","evt","Object","assign","nativeEvent","WorkletEventHandlerNative","viewTags","registrations","constructor","worklet","eventNames","Set","Map","updateEventHandler","newWorklet","newEvents","forEach","registrationIDs","id","Array","from","tag","newRegistrations","map","set","registerForEvents","viewTag","fallbackEventName","add","length","newRegistration","unregisterFromEvents","delete","get","WorkletEventHandlerWeb","listeners","setupWebListeners","_viewTag","_fallbackEventName","WorkletEventHandler"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-reanimated/src/WorkletEventHandler.ts"],"sourcesContent":["'use strict';\nimport type { NativeSyntheticEvent } from 'react-native';\nimport { registerEventHandler, unregisterEventHandler } from './core';\nimport type {\n  EventPayload,\n  ReanimatedEvent,\n  IWorkletEventHandler,\n} from './hook/commonTypes';\nimport { shouldBeUseWeb } from './PlatformChecker';\n\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\n\ntype JSEvent<Event extends object> = NativeSyntheticEvent<EventPayload<Event>>;\n\n// In JS implementation (e.g. for web) we don't use Reanimated's\n// event emitter, therefore we have to handle here\n// the event that came from React Native and convert it.\nfunction jsListener<Event extends object>(\n  eventName: string,\n  handler: (event: ReanimatedEvent<Event>) => void\n) {\n  return (evt: JSEvent<Event>) => {\n    handler({ ...evt.nativeEvent, eventName } as ReanimatedEvent<Event>);\n  };\n}\n\nclass WorkletEventHandlerNative<Event extends object>\n  implements IWorkletEventHandler<Event>\n{\n  eventNames: string[];\n  worklet: (event: ReanimatedEvent<Event>) => void;\n  #viewTags: Set<number>;\n  #registrations: Map<number, number[]>; // keys are viewTags, values are arrays of registration ID's for each viewTag\n  constructor(\n    worklet: (event: ReanimatedEvent<Event>) => void,\n    eventNames: string[]\n  ) {\n    this.worklet = worklet;\n    this.eventNames = eventNames;\n    this.#viewTags = new Set<number>();\n    this.#registrations = new Map<number, number[]>();\n  }\n\n  updateEventHandler(\n    newWorklet: (event: ReanimatedEvent<Event>) => void,\n    newEvents: string[]\n  ): void {\n    // Update worklet and event names\n    this.worklet = newWorklet;\n    this.eventNames = newEvents;\n\n    // Detach all events\n    this.#registrations.forEach((registrationIDs) => {\n      registrationIDs.forEach((id) => unregisterEventHandler(id));\n      // No need to remove registrationIDs from map, since it gets overwritten when attaching\n    });\n\n    // Attach new events with new worklet\n    Array.from(this.#viewTags).forEach((tag) => {\n      const newRegistrations = this.eventNames.map((eventName) =>\n        registerEventHandler(this.worklet, eventName, tag)\n      );\n      this.#registrations.set(tag, newRegistrations);\n    });\n  }\n\n  registerForEvents(viewTag: number, fallbackEventName?: string): void {\n    this.#viewTags.add(viewTag);\n\n    const newRegistrations = this.eventNames.map((eventName) =>\n      registerEventHandler(this.worklet, eventName, viewTag)\n    );\n    this.#registrations.set(viewTag, newRegistrations);\n\n    if (this.eventNames.length === 0 && fallbackEventName) {\n      const newRegistration = registerEventHandler(\n        this.worklet,\n        fallbackEventName,\n        viewTag\n      );\n      this.#registrations.set(viewTag, [newRegistration]);\n    }\n  }\n\n  unregisterFromEvents(viewTag: number): void {\n    this.#viewTags.delete(viewTag);\n    this.#registrations.get(viewTag)?.forEach((id) => {\n      unregisterEventHandler(id);\n    });\n    this.#registrations.delete(viewTag);\n  }\n}\n\nclass WorkletEventHandlerWeb<Event extends object>\n  implements IWorkletEventHandler<Event>\n{\n  eventNames: string[];\n  listeners:\n    | Record<string, (event: ReanimatedEvent<ReanimatedEvent<Event>>) => void>\n    | Record<string, (event: JSEvent<Event>) => void>;\n\n  worklet: (event: ReanimatedEvent<Event>) => void;\n\n  constructor(\n    worklet: (event: ReanimatedEvent<Event>) => void,\n    eventNames: string[] = []\n  ) {\n    this.worklet = worklet;\n    this.eventNames = eventNames;\n    this.listeners = {};\n    this.setupWebListeners();\n  }\n\n  setupWebListeners() {\n    this.listeners = {};\n    this.eventNames.forEach((eventName) => {\n      this.listeners[eventName] = jsListener(eventName, this.worklet);\n    });\n  }\n\n  updateEventHandler(\n    newWorklet: (event: ReanimatedEvent<Event>) => void,\n    newEvents: string[]\n  ): void {\n    // Update worklet and event names\n    this.worklet = newWorklet;\n    this.eventNames = newEvents;\n    this.setupWebListeners();\n  }\n\n  registerForEvents(_viewTag: number, _fallbackEventName?: string): void {\n    // noop\n  }\n\n  unregisterFromEvents(_viewTag: number): void {\n    // noop\n  }\n}\n\nexport const WorkletEventHandler = SHOULD_BE_USE_WEB\n  ? WorkletEventHandlerWeb\n  : WorkletEventHandlerNative;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}