{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import Platform from\"react-native-web/dist/exports/Platform\";import DEFAULT_CONFIGURATION from'./internal/defaultConfiguration';import NativeInterface from'./internal/nativeInterface';import State from'./internal/state';import*as Types from'./internal/types';let _configuration=DEFAULT_CONFIGURATION;let _state=null;const createState=()=>{return new State(_configuration);};let isRequestInProgress=false;let requestQueue=[];export function configure(configuration){_configuration=Object.assign({},DEFAULT_CONFIGURATION,configuration);if(_state){_state.tearDown();_state=createState();}if(false){NativeInterface.configure(configuration);}}export function fetch(requestedInterface){if(!_state){_state=createState();}return _state.latest(requestedInterface);}export function refresh(){if(!_state){_state=createState();}if(isRequestInProgress){return new Promise(resolve=>{requestQueue.push(resolve);});}isRequestInProgress=true;return _state._fetchCurrentState().then(result=>{requestQueue.forEach(resolve=>resolve(result));requestQueue=[];return result;}).finally(()=>{isRequestInProgress=false;});}export function addEventListener(listener){if(!_state){_state=createState();}_state.add(listener);return()=>{_state&&_state.remove(listener);};}export function useNetInfo(configuration){if(configuration){configure(configuration);}const[netInfo,setNetInfo]=useState({type:Types.NetInfoStateType.unknown,isConnected:null,isInternetReachable:null,details:null});useEffect(()=>{const unsubscribe=addEventListener(setNetInfo);return()=>unsubscribe();},[]);return netInfo;}export function useNetInfoInstance(isPaused=false,configuration){const[networkInfoManager,setNetworkInfoManager]=useState();const[netInfo,setNetInfo]=useState({type:Types.NetInfoStateType.unknown,isConnected:null,isInternetReachable:null,details:null});useEffect(()=>{if(isPaused){return;}const config=Object.assign({},DEFAULT_CONFIGURATION,configuration);const state=new State(config);setNetworkInfoManager(state);state.add(setNetInfo);return state.tearDown;},[isPaused,configuration]);const refresh=useCallback(()=>{if(networkInfoManager&&!isRequestInProgress){isRequestInProgress=true;networkInfoManager._fetchCurrentState().finally(()=>{isRequestInProgress=false;});}},[networkInfoManager]);return{netInfo,refresh};}export*from'./internal/types';export default{configure,fetch,refresh,addEventListener,useNetInfo,useNetInfoInstance};","map":{"version":3,"names":["useState","useEffect","useCallback","Platform","DEFAULT_CONFIGURATION","NativeInterface","State","Types","_configuration","_state","createState","isRequestInProgress","requestQueue","configure","configuration","Object","assign","tearDown","fetch","requestedInterface","latest","refresh","Promise","resolve","push","_fetchCurrentState","then","result","forEach","finally","addEventListener","listener","add","remove","useNetInfo","netInfo","setNetInfo","type","NetInfoStateType","unknown","isConnected","isInternetReachable","details","unsubscribe","useNetInfoInstance","isPaused","networkInfoManager","setNetworkInfoManager","config","state"],"sources":["/home/user/rork-vibesync-458/node_modules/@react-native-community/netinfo/lib/module/index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {useState, useEffect, useCallback} from 'react';\nimport {Platform} from 'react-native';\nimport DEFAULT_CONFIGURATION from './internal/defaultConfiguration';\nimport NativeInterface from './internal/nativeInterface';\nimport State from './internal/state';\nimport * as Types from './internal/types';\n\n// Stores the currently used configuration\nlet _configuration = DEFAULT_CONFIGURATION;\n\n// Stores the singleton reference to the state manager\nlet _state: State | null = null;\nconst createState = (): State => {\n  return new State(_configuration);\n};\n\n// Track ongoing requests\nlet isRequestInProgress = false;\nlet requestQueue: ((state: Types.NetInfoState) => void)[] = [];\n\n/**\n * Configures the library with the given configuration. Note that calling this will stop all\n * previously added listeners from being called again. It is best to call this right when your\n * application is started to avoid issues. The configuration sets up a global singleton instance.\n *\n * @param configuration The new configuration to set.\n */\nexport function configure(\n  configuration: Partial<Types.NetInfoConfiguration>,\n): void {\n  _configuration = {\n    ...DEFAULT_CONFIGURATION,\n    ...configuration,\n  };\n\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n\n  if (Platform.OS === 'ios') {\n    NativeInterface.configure(configuration);\n  }\n}\n\n/**\n * Returns a `Promise` that resolves to a `NetInfoState` object.\n * This function operates on the global singleton instance configured using `configure()`\n *\n * @param [requestedInterface] interface from which to obtain the information\n *\n * @returns A Promise which contains the current connection state.\n */\nexport function fetch(\n  requestedInterface?: string,\n): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\n\n/**\n * Force-refreshes the internal state of the global singleton managed by this library.\n *\n * @returns A Promise which contains the updated connection state.\n */\nexport function refresh(): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n\n // If a request is already in progress, return a promise that will resolve when the current request finishes\n  if (isRequestInProgress) {\n    return new Promise((resolve) => {\n      requestQueue.push(resolve);\n    });\n  }\n\n  isRequestInProgress = true;\n\n  return _state._fetchCurrentState().then((result) => {\n    requestQueue.forEach((resolve) => resolve(result));\n    requestQueue = [];\n    return result;\n  }).finally(() => {\n    isRequestInProgress = false;\n  });\n}\n\n/**\n * Subscribe to the global singleton's connection information. The callback is called with a parameter of type\n * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n * will be called with the latest information soon after you subscribe and then with any\n * subsequent changes afterwards. You should not assume that the listener is called in the same\n * way across devices or platforms.\n *\n * @param listener The listener which is called when the network state changes.\n *\n * @returns A function which can be called to unsubscribe.\n */\nexport function addEventListener(\n  listener: Types.NetInfoChangeHandler,\n): Types.NetInfoSubscription {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n  return (): void => {\n    _state && _state.remove(listener);\n  };\n}\n\n/**\n * A React Hook into this library's singleton which updates when the connection state changes.\n *\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns The connection state.\n */\nexport function useNetInfo(\n  configuration?: Partial<Types.NetInfoConfiguration>,\n): Types.NetInfoState {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect((): (() => void) => {\n    const unsubscribe = addEventListener(setNetInfo);\n    return () => unsubscribe();\n  }, []);\n\n  return netInfo;\n}\n\n/**\n * A React Hook which manages an isolated instance of the network info manager.\n * This is not a hook into a singleton shared state. NetInfo.configure, NetInfo.addEventListener,\n * NetInfo.fetch, NetInfo.refresh are performed on a global singleton and have no affect on this hook.\n * @param {boolean} isPaused - Pause the internal network checks.\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns the netInfo state and a refresh function\n */\nexport function useNetInfoInstance(\n  isPaused = false,\n  configuration?: Partial<Types.NetInfoConfiguration>,\n) {\n  const [networkInfoManager, setNetworkInfoManager] = useState<State>();\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect(() => {\n    if (isPaused) {\n      return;\n    }\n    const config = {\n      ...DEFAULT_CONFIGURATION,\n      ...configuration,\n    };\n    const state = new State(config);\n    setNetworkInfoManager(state);\n    state.add(setNetInfo);\n    return state.tearDown;\n  }, [isPaused, configuration]);\n\n  const refresh = useCallback(() => {\n    if (networkInfoManager && !isRequestInProgress) {\n      isRequestInProgress = true;\n      networkInfoManager._fetchCurrentState().finally(() => {\n        isRequestInProgress = false;\n      });\n    }\n  }, [networkInfoManager]);\n\n  return {\n    netInfo,\n    refresh,\n  };\n}\n\nexport * from './internal/types';\n\nexport default {\n  configure,\n  fetch,\n  refresh,\n  addEventListener,\n  useNetInfo,\n  useNetInfoInstance,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}