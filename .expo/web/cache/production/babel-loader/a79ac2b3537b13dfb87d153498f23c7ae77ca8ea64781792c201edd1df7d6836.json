{"ast":null,"code":"import{useState,useEffect,useCallback,useMemo}from'react';import AsyncStorage from'@react-native-async-storage/async-storage';import Appearance from\"react-native-web/dist/exports/Appearance\";import createContextHook from'@nkzw/create-context-hook';import{DarkTheme,LightTheme}from'@/constants/colors';const THEME_STORAGE_KEY='@vibesync_theme';export const[ThemeProvider,useTheme]=createContextHook(()=>{const[theme,setThemeState]=useState('dark');const[systemTheme,setSystemTheme]=useState(Appearance.getColorScheme());const[userPreference,setUserPreference]=useState('system');useEffect(()=>{const subscription=Appearance.addChangeListener(({colorScheme})=>{console.log('System theme changed to:',colorScheme);setSystemTheme(colorScheme);});return()=>subscription?.remove();},[]);useEffect(()=>{const loadTheme=async()=>{try{const savedTheme=await AsyncStorage.getItem(THEME_STORAGE_KEY);if(savedTheme){const parsedTheme=savedTheme;setUserPreference(parsedTheme);console.log('Loaded theme preference:',parsedTheme);}}catch(error){console.error('Error loading theme:',error);}};loadTheme();},[]);useEffect(()=>{let activeTheme;if(userPreference==='system'){activeTheme=systemTheme==='light'?'light':'dark';}else{activeTheme=userPreference;}console.log('Setting active theme:',activeTheme,'from preference:',userPreference,'system:',systemTheme);setThemeState(activeTheme);},[userPreference,systemTheme]);const setTheme=useCallback(async newTheme=>{try{await AsyncStorage.setItem(THEME_STORAGE_KEY,newTheme);setUserPreference(newTheme);console.log('Theme preference saved:',newTheme);}catch(error){console.error('Error saving theme:',error);}},[]);const toggleTheme=useCallback(()=>{const newTheme=theme==='dark'?'light':'dark';setTheme(newTheme);},[theme,setTheme]);const colors=useMemo(()=>theme==='dark'?DarkTheme:LightTheme,[theme]);const isDark=theme==='dark';const isLight=theme==='light';return{theme,colors,isDark,isLight,setTheme,toggleTheme,systemTheme,userPreference};});","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","AsyncStorage","Appearance","createContextHook","DarkTheme","LightTheme","THEME_STORAGE_KEY","ThemeProvider","useTheme","theme","setThemeState","systemTheme","setSystemTheme","getColorScheme","userPreference","setUserPreference","subscription","addChangeListener","colorScheme","console","log","remove","loadTheme","savedTheme","getItem","parsedTheme","error","activeTheme","setTheme","newTheme","setItem","toggleTheme","colors","isDark","isLight"],"sources":["/home/user/rork-vibesync-458/hooks/theme-store.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Appearance, ColorSchemeName } from 'react-native';\nimport createContextHook from '@nkzw/create-context-hook';\nimport { Theme, ThemePreference, ColorScheme, DarkTheme, LightTheme } from '@/constants/colors';\n\ninterface ThemeContextType {\n  theme: Theme;\n  colors: ColorScheme;\n  isDark: boolean;\n  isLight: boolean;\n  setTheme: (theme: ThemePreference) => void;\n  userPreference: ThemePreference;\n  toggleTheme: () => void;\n  systemTheme: ColorSchemeName;\n}\n\nconst THEME_STORAGE_KEY = '@vibesync_theme';\n\nexport const [ThemeProvider, useTheme] = createContextHook(() => {\n  const [theme, setThemeState] = useState<Theme>('dark');\n  const [systemTheme, setSystemTheme] = useState<ColorSchemeName>(Appearance.getColorScheme());\n  const [userPreference, setUserPreference] = useState<ThemePreference>('system');\n\n  // Listen to system theme changes\n  useEffect(() => {\n    const subscription = Appearance.addChangeListener(({ colorScheme }) => {\n      console.log('System theme changed to:', colorScheme);\n      setSystemTheme(colorScheme);\n    });\n\n    return () => subscription?.remove();\n  }, []);\n\n  // Load saved theme preference\n  useEffect(() => {\n    const loadTheme = async () => {\n      try {\n        const savedTheme = await AsyncStorage.getItem(THEME_STORAGE_KEY);\n        if (savedTheme) {\n          const parsedTheme = savedTheme as ThemePreference;\n          setUserPreference(parsedTheme);\n          console.log('Loaded theme preference:', parsedTheme);\n        }\n      } catch (error) {\n        console.error('Error loading theme:', error);\n      }\n    };\n\n    loadTheme();\n  }, []);\n\n  // Update active theme based on user preference and system theme\n  useEffect(() => {\n    let activeTheme: Theme;\n    \n    if (userPreference === 'system') {\n      activeTheme = systemTheme === 'light' ? 'light' : 'dark';\n    } else {\n      activeTheme = userPreference;\n    }\n    \n    console.log('Setting active theme:', activeTheme, 'from preference:', userPreference, 'system:', systemTheme);\n    setThemeState(activeTheme);\n  }, [userPreference, systemTheme]);\n\n  const setTheme = useCallback(async (newTheme: ThemePreference) => {\n    try {\n      await AsyncStorage.setItem(THEME_STORAGE_KEY, newTheme);\n      setUserPreference(newTheme);\n      console.log('Theme preference saved:', newTheme);\n    } catch (error) {\n      console.error('Error saving theme:', error);\n    }\n  }, []);\n\n  const toggleTheme = useCallback(() => {\n    const newTheme = theme === 'dark' ? 'light' : 'dark';\n    setTheme(newTheme);\n  }, [theme, setTheme]);\n\n  const colors = useMemo(() => theme === 'dark' ? DarkTheme : LightTheme, [theme]);\n  const isDark = theme === 'dark';\n  const isLight = theme === 'light';\n\n  return {\n    theme,\n    colors,\n    isDark,\n    isLight,\n    setTheme,\n    toggleTheme,\n    systemTheme,\n    userPreference,\n  } as ThemeContextType;\n});"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}