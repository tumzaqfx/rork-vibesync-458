{"ast":null,"code":"'use strict';import{useEffect,useRef}from'react';import{initialUpdaterRun}from\"../animation/index.js\";import{makeMutable,startMapper,stopMapper}from\"../core.js\";import{shouldBeUseWeb}from\"../PlatformChecker.js\";const _worklet_3093677085834_init_data={code:\"function reactNativeReanimated_useDerivedValueJs1(){const{sharedValue,updater}=this.__closure;sharedValue.value=updater();}\"};export function useDerivedValue(updater,dependencies){const initRef=useRef(null);let inputs=Object.values(updater.__closure??{});if(shouldBeUseWeb()){if(!inputs.length&&dependencies?.length){inputs=dependencies;}}if(dependencies===undefined){dependencies=[...inputs,updater.__workletHash];}else{dependencies.push(updater.__workletHash);}if(initRef.current===null){initRef.current=makeMutable(initialUpdaterRun(updater));}const sharedValue=initRef.current;useEffect(()=>{const fun=function(){const reactNativeReanimated_useDerivedValueJs1=function(){sharedValue.value=updater();};reactNativeReanimated_useDerivedValueJs1.__closure={sharedValue,updater};reactNativeReanimated_useDerivedValueJs1.__workletHash=3093677085834;reactNativeReanimated_useDerivedValueJs1.__initData=_worklet_3093677085834_init_data;return reactNativeReanimated_useDerivedValueJs1;}();const mapperId=startMapper(fun,inputs,[sharedValue]);return()=>{stopMapper(mapperId);};},dependencies);return sharedValue;}","map":{"version":3,"names":["useEffect","useRef","initialUpdaterRun","makeMutable","startMapper","stopMapper","shouldBeUseWeb","_worklet_3093677085834_init_data","code","useDerivedValue","updater","dependencies","initRef","inputs","Object","values","__closure","length","undefined","__workletHash","push","current","sharedValue","fun","reactNativeReanimated_useDerivedValueJs1","value","__initData","mapperId"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-reanimated/src/hook/useDerivedValue.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport { initialUpdaterRun } from '../animation';\nimport type { SharedValue, WorkletFunction } from '../commonTypes';\nimport { makeMutable, startMapper, stopMapper } from '../core';\nimport type { DependencyList } from './commonTypes';\nimport { shouldBeUseWeb } from '../PlatformChecker';\n\nexport interface DerivedValue<Value = unknown>\n  extends Readonly<Omit<SharedValue<Value>, 'set'>> {\n  /**\n   * @deprecated Derived values are readonly, don't use this method. It's here\n   *   only to prevent breaking changes in TypeScript types. It will be removed\n   *   in the future.\n   */\n  set: SharedValue<Value>['set'];\n}\n\n/**\n * Lets you create new shared values based on existing ones while keeping them\n * reactive.\n *\n * @param updater - A function called whenever at least one of the shared values\n *   or state used in the function body changes.\n * @param dependencies - An optional array of dependencies. Only relevant when\n *   using Reanimated without the Babel plugin on the Web.\n * @returns A new readonly shared value based on a value returned from the\n *   updater function\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useDerivedValue\n */\n// @ts-expect-error This overload is required by our API.\nexport function useDerivedValue<Value>(\n  updater: () => Value,\n  dependencies?: DependencyList\n): DerivedValue<Value>;\n\nexport function useDerivedValue<Value>(\n  updater: WorkletFunction<[], Value>,\n  dependencies?: DependencyList\n): DerivedValue<Value> {\n  const initRef = useRef<SharedValue<Value> | null>(null);\n  let inputs = Object.values(updater.__closure ?? {});\n  if (shouldBeUseWeb()) {\n    if (!inputs.length && dependencies?.length) {\n      // let web work without a Babel/SWC plugin\n      inputs = dependencies;\n    }\n  }\n\n  // build dependencies\n  if (dependencies === undefined) {\n    dependencies = [...inputs, updater.__workletHash];\n  } else {\n    dependencies.push(updater.__workletHash);\n  }\n\n  if (initRef.current === null) {\n    initRef.current = makeMutable(initialUpdaterRun(updater));\n  }\n\n  const sharedValue: SharedValue<Value> = initRef.current;\n\n  useEffect(() => {\n    const fun = () => {\n      'worklet';\n      sharedValue.value = updater();\n    };\n    const mapperId = startMapper(fun, inputs, [\n      sharedValue as SharedValue<unknown>,\n    ]);\n    return () => {\n      stopMapper(mapperId);\n    };\n  }, dependencies);\n\n  return sharedValue;\n}\n"],"mappings":"AAAA,YAAY,CACZ,OAASA,SAAS,CAAEC,MAAM,KAAQ,OAAO,CACzC,OAASC,iBAAiB,KAAQ,uBAAc,CAEhD,OAASC,WAAW,CAAEC,WAAW,CAAEC,UAAU,KAAQ,YAAS,CAE9D,OAASC,cAAc,KAAQ,uBAAoB,OAAAC,gCAAA,EAAAC,IAAA,gIA8BnD,MAAO,SAAS,CAAAC,eAAeA,CAC7BC,OAAmC,CACnCC,YAA6B,CACR,CACrB,KAAM,CAAAC,OAAO,CAAGX,MAAM,CAA4B,IAAI,CAAC,CACvD,GAAI,CAAAY,MAAM,CAAGC,MAAM,CAACC,MAAM,CAACL,OAAO,CAACM,SAAS,EAAI,CAAC,CAAC,CAAC,CACnD,GAAIV,cAAc,CAAC,CAAC,CAAE,CACpB,GAAI,CAACO,MAAM,CAACI,MAAM,EAAIN,YAAY,EAAEM,MAAM,CAAE,CAE1CJ,MAAM,CAAGF,YAAY,CACvB,CACF,CAGA,GAAIA,YAAY,GAAKO,SAAS,CAAE,CAC9BP,YAAY,CAAG,CAAC,GAAGE,MAAM,CAAEH,OAAO,CAACS,aAAa,CAAC,CACnD,CAAC,IAAM,CACLR,YAAY,CAACS,IAAI,CAACV,OAAO,CAACS,aAAa,CAAC,CAC1C,CAEA,GAAIP,OAAO,CAACS,OAAO,GAAK,IAAI,CAAE,CAC5BT,OAAO,CAACS,OAAO,CAAGlB,WAAW,CAACD,iBAAiB,CAACQ,OAAO,CAAC,CAAC,CAC3D,CAEA,KAAM,CAAAY,WAA+B,CAAGV,OAAO,CAACS,OAAO,CAEvDrB,SAAS,CAAC,IAAM,CACd,KAAM,CAAAuB,GAAG,CAAG,iBAAAC,wCAAA,SAAAA,CAAA,CAAM,CAEhBF,WAAW,CAACG,KAAK,CAAGf,OAAO,CAAC,CAAC,CAC/B,CAAC,CAAAc,wCAAA,CAAAR,SAAA,EAAAM,WAAA,CAAAZ,OAAA,EAAAc,wCAAA,CAAAL,aAAA,eAAAK,wCAAA,CAAAE,UAAA,CAAAnB,gCAAA,QAAAiB,wCAAA,EAHW,EAGX,CACD,KAAM,CAAAG,QAAQ,CAAGvB,WAAW,CAACmB,GAAG,CAAEV,MAAM,CAAE,CACxCS,WAAW,CACZ,CAAC,CACF,MAAO,IAAM,CACXjB,UAAU,CAACsB,QAAQ,CAAC,CACtB,CAAC,CACH,CAAC,CAAEhB,YAAY,CAAC,CAEhB,MAAO,CAAAW,WAAW,CACpB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}