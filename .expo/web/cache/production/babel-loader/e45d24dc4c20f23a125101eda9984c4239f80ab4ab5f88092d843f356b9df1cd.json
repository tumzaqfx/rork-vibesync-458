{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"onPress\",\"onLongPress\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{forwardRef,useEffect,useRef}from'react';import Platform from\"react-native-web/dist/exports/Platform\";import RNText from\"react-native-web/dist/exports/Text\";import{GestureObjects as Gesture}from'../handlers/gestures/gestureObjects';import{GestureDetector}from'../handlers/gestures/GestureDetector';export const Text=forwardRef((props,ref)=>{const{onPress,onLongPress}=props,rest=_objectWithoutPropertiesLoose(props,_excluded);const textRef=useRef(null);const native=Gesture.Native().runOnJS(true);const refHandler=node=>{textRef.current=node;if(ref===null){return;}if(typeof ref==='function'){ref(node);}else{ref.current=node;}};refHandler.rngh=true;useEffect(()=>{if(false){return;}const textElement=ref?ref.current:textRef.current;textElement===null||textElement===void 0?void 0:textElement.setAttribute('rnghtext','true');},[]);return onPress||onLongPress?React.createElement(GestureDetector,{gesture:native},React.createElement(RNText,_extends({onPress:onPress,onLongPress:onLongPress,ref:refHandler},rest))):React.createElement(RNText,_extends({ref:ref},rest));});","map":{"version":3,"names":["React","forwardRef","useEffect","useRef","Platform","RNText","GestureObjects","Gesture","GestureDetector","Text","props","ref","onPress","onLongPress","rest","_objectWithoutPropertiesLoose","_excluded","textRef","native","Native","runOnJS","refHandler","node","current","rngh","textElement","setAttribute","createElement","gesture","_extends"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-gesture-handler/lib/module/components/Text.tsx"],"sourcesContent":["import React, {\n  ForwardedRef,\n  forwardRef,\n  RefObject,\n  useEffect,\n  useRef,\n} from 'react';\nimport {\n  Platform,\n  Text as RNText,\n  TextProps as RNTextProps,\n} from 'react-native';\n\nimport { GestureObjects as Gesture } from '../handlers/gestures/gestureObjects';\nimport { GestureDetector } from '../handlers/gestures/GestureDetector';\n\nexport const Text = forwardRef(\n  (props: RNTextProps, ref: ForwardedRef<RNText>) => {\n    const { onPress, onLongPress, ...rest } = props;\n\n    const textRef = useRef<RNText | null>(null);\n    const native = Gesture.Native().runOnJS(true);\n\n    const refHandler = (node: any) => {\n      textRef.current = node;\n\n      if (ref === null) {\n        return;\n      }\n\n      if (typeof ref === 'function') {\n        ref(node);\n      } else {\n        ref.current = node;\n      }\n    };\n\n    // This is a special case for `Text` component. After https://github.com/software-mansion/react-native-gesture-handler/pull/3379 we check for\n    // `displayName` field. However, `Text` from RN has this field set to `Text`, but is also present in `RNSVGElements` set.\n    // We don't want to treat our `Text` as the one from `SVG`, therefore we add special field to ref.\n    refHandler.rngh = true;\n\n    useEffect(() => {\n      if (Platform.OS !== 'web') {\n        return;\n      }\n\n      const textElement = ref\n        ? (ref as RefObject<RNText>).current\n        : textRef.current;\n\n      // At this point we are sure that textElement is div in HTML tree\n      (textElement as unknown as HTMLDivElement)?.setAttribute(\n        'rnghtext',\n        'true'\n      );\n    }, []);\n\n    return onPress || onLongPress ? (\n      <GestureDetector gesture={native}>\n        <RNText\n          onPress={onPress}\n          onLongPress={onLongPress}\n          ref={refHandler}\n          {...rest}\n        />\n      </GestureDetector>\n    ) : (\n      <RNText ref={ref} {...rest} />\n    );\n  }\n);\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type Text = typeof Text & RNText;\n"],"mappings":"gaAAA,MAAO,CAAAA,KAAP,EAEEC,UAFF,CAIEC,SAJF,CAKEC,MALF,KAMO,OANP,QAAAC,QAAA,qDAAAC,MAAA,0CAaA,OAASC,cAAc,GAAI,CAAAC,OAA3B,KAA0C,qCAA1C,CACA,OAASC,eAAT,KAAgC,sCAAhC,CAEA,MAAO,MAAM,CAAAC,IAAI,CAAGR,UAAU,CAC5B,CAACS,KAAD,CAAqBC,GAArB,GAAmD,CACjD,KAAM,CAAEC,OAAF,CAAWC,WAAX,EAAoCH,KAA1C,CAAiCI,IAAA,CAAAC,6BAAA,CAASL,KAA1C,CAAAM,SAAA,EAEA,KAAM,CAAAC,OAAO,CAAGd,MAAM,CAAgB,IAAhB,CAAtB,CACA,KAAM,CAAAe,MAAM,CAAGX,OAAO,CAACY,MAAR,GAAiBC,OAAjB,CAAyB,IAAzB,CAAf,CAEA,KAAM,CAAAC,UAAU,CAAIC,IAAD,EAAe,CAChCL,OAAO,CAACM,OAAR,CAAkBD,IAAlB,CAEA,GAAIX,GAAG,GAAK,IAAZ,CAAkB,CAChB,OACD,CAED,GAAI,MAAO,CAAAA,GAAP,GAAe,UAAnB,CAA+B,CAC7BA,GAAG,CAACW,IAAD,CAAH,CACD,CAFD,IAEO,CACLX,GAAG,CAACY,OAAJ,CAAcD,IAAd,CACD,CACF,CAZD,CAiBAD,UAAU,CAACG,IAAX,CAAkB,IAAlB,CAEAtB,SAAS,CAAC,IAAM,CACd,SAA2B,CACzB,OACD,CAED,KAAM,CAAAuB,WAAW,CAAGd,GAAG,CAClBA,GAAD,CAA2BY,OADR,CAEnBN,OAAO,CAACM,OAFZ,CAKCE,WAAD,SAACA,WAAD,iBAACA,WAAD,CAA4CC,YAA5C,CACE,UADF,CAEE,MAFF,EAID,CAdQ,CAcN,EAdM,CAAT,CAgBA,MAAO,CAAAd,OAAO,EAAIC,WAAX,CACLb,KAAA,CAAA2B,aAAA,CAACnB,eAAD,EAAiBoB,OAAO,CAAEV,MAA1B,EACElB,KAAA,CAAA2B,aAAA,CAACtB,MAAD,CAAAwB,QAAA,EACEjB,OAAO,CAAEA,OADX,CAEEC,WAAW,CAAEA,WAFf,CAGEF,GAAG,CAAEU,UAHP,EAIMP,IAJN,EADF,CADK,CAULd,KAAA,CAAA2B,aAAA,CAACtB,MAAD,CAAAwB,QAAA,EAAQlB,GAAG,CAAEA,GAAb,EAAsBG,IAAtB,EAVF,CAYD,CAtD2B,CAAvB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}