{"ast":null,"code":"import sha1 from'./lib/sha1';import v35 from'./lib/v35';import{Uuidv5Namespace}from'./uuid.types';function uuidv4(){if(false||typeof crypto==='undefined'&&false){return eval('require')('node:crypto').randomUUID();}return crypto.randomUUID();}const uuid={v4:uuidv4,v5:v35('v5',0x50,sha1),namespace:Uuidv5Namespace};export default uuid;","map":{"version":3,"names":["sha1","v35","Uuidv5Namespace","uuidv4","crypto","eval","randomUUID","uuid","v4","v5","namespace"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-modules-core/src/uuid/uuid.web.ts"],"sourcesContent":["import sha1 from './lib/sha1';\nimport v35 from './lib/v35';\nimport { UUID, Uuidv5Namespace } from './uuid.types';\n\nfunction uuidv4(): string {\n  if (\n    // We use this code path in jest-expo.\n    process.env.NODE_ENV === 'test' ||\n    // Node.js has supported global crypto since v15.\n    (typeof crypto === 'undefined' &&\n      // Only use abstract imports in server environments.\n      typeof window === 'undefined')\n  ) {\n    // NOTE: Metro statically extracts all `require` statements to resolve them for environments\n    // that don't support `require` natively. Here we check if we're running in a server environment\n    // by using the standard `typeof window` check, then running `eval` to skip Metro's static\n    // analysis and keep the `require` statement intact for runtime evaluation.\n    // eslint-disable-next-line no-eval\n    return eval('require')('node:crypto').randomUUID();\n  }\n\n  return crypto.randomUUID();\n}\n\nconst uuid: UUID = {\n  v4: uuidv4,\n  v5: v35('v5', 0x50, sha1),\n  namespace: Uuidv5Namespace,\n};\n\nexport default uuid;\n"],"mappings":"AAAA,MAAO,CAAAA,IAAI,KAAM,YAAY,CAC7B,MAAO,CAAAC,GAAG,KAAM,WAAW,CAC3B,OAAeC,eAAe,KAAQ,cAAc,CAEpD,QAAS,CAAAC,MAAMA,CAAA,CAAW,CACxB,GAEE,OAEC,MAAO,CAAAC,MAAM,GAAK,WAAW,OAEE,CAChC,CAMA,MAAO,CAAAC,IAAI,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC,CAACC,UAAU,CAAC,CAAC,CACpD,CAEA,MAAO,CAAAF,MAAM,CAACE,UAAU,CAAC,CAAC,CAC5B,CAEA,KAAM,CAAAC,IAAU,CAAG,CACjBC,EAAE,CAAEL,MAAM,CACVM,EAAE,CAAER,GAAG,CAAC,IAAI,CAAE,IAAI,CAAED,IAAI,CAAC,CACzBU,SAAS,CAAER,eACb,CAAC,CAED,cAAe,CAAAK,IAAI","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}