{"ast":null,"code":"\"use strict\";import*as React from'react';import{DeprecatedNavigationInChildContext}from\"./DeprecatedNavigationInChildContext.js\";import{NavigationBuilderContext}from\"./NavigationBuilderContext.js\";import{shouldPreventRemove,useOnPreventRemove}from\"./useOnPreventRemove.js\";export function useOnAction({router,getState,setState,key,actionListeners,beforeRemoveListeners,routerConfigOptions,emitter}){const{onAction:onActionParent,onRouteFocus:onRouteFocusParent,addListener:addListenerParent,onDispatchAction}=React.useContext(NavigationBuilderContext);const navigationInChildEnabled=React.useContext(DeprecatedNavigationInChildContext);const routerConfigOptionsRef=React.useRef(routerConfigOptions);React.useEffect(()=>{routerConfigOptionsRef.current=routerConfigOptions;});const onAction=React.useCallback((action,visitedNavigators=new Set())=>{const state=getState();if(visitedNavigators.has(state.key)){return false;}visitedNavigators.add(state.key);if(typeof action.target!=='string'||action.target===state.key){let result=router.getStateForAction(state,action,routerConfigOptionsRef.current);result=result===null&&action.target===state.key?state:result;if(result!==null){onDispatchAction(action,state===result);if(state!==result){const isPrevented=shouldPreventRemove(emitter,beforeRemoveListeners,state.routes,result.routes,action);if(isPrevented){return true;}setState(result);}if(onRouteFocusParent!==undefined){const shouldFocus=router.shouldActionChangeFocus(action);if(shouldFocus&&key!==undefined){onRouteFocusParent(key);}}return true;}}if(onActionParent!==undefined){if(onActionParent(action,visitedNavigators)){return true;}}if(typeof action.target==='string'||action.type==='NAVIGATE_DEPRECATED'||navigationInChildEnabled){for(let i=actionListeners.length-1;i>=0;i--){const listener=actionListeners[i];if(listener(action,visitedNavigators)){return true;}}}return false;},[actionListeners,beforeRemoveListeners,emitter,getState,navigationInChildEnabled,key,onActionParent,onDispatchAction,onRouteFocusParent,router,setState]);useOnPreventRemove({getState,emitter,beforeRemoveListeners});React.useEffect(()=>addListenerParent?.('action',onAction),[addListenerParent,onAction]);return onAction;}","map":{"version":3,"names":["React","DeprecatedNavigationInChildContext","NavigationBuilderContext","shouldPreventRemove","useOnPreventRemove","useOnAction","router","getState","setState","key","actionListeners","beforeRemoveListeners","routerConfigOptions","emitter","onAction","onActionParent","onRouteFocus","onRouteFocusParent","addListener","addListenerParent","onDispatchAction","useContext","navigationInChildEnabled","routerConfigOptionsRef","useRef","useEffect","current","useCallback","action","visitedNavigators","Set","state","has","add","target","result","getStateForAction","isPrevented","routes","undefined","shouldFocus","shouldActionChangeFocus","type","i","length","listener"],"sources":["/home/user/rork-vibesync-458/node_modules/@react-navigation/core/src/useOnAction.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  PartialState,\n  Router,\n  RouterConfigOptions,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport { DeprecatedNavigationInChildContext } from './DeprecatedNavigationInChildContext';\nimport {\n  type ChildActionListener,\n  type ChildBeforeRemoveListener,\n  NavigationBuilderContext,\n} from './NavigationBuilderContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport { shouldPreventRemove, useOnPreventRemove } from './useOnPreventRemove';\n\ntype Options = {\n  router: Router<NavigationState, NavigationAction>;\n  key?: string;\n  getState: () => NavigationState;\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\n  actionListeners: ChildActionListener[];\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n  routerConfigOptions: RouterConfigOptions;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n};\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  actionListeners,\n  beforeRemoveListeners,\n  routerConfigOptions,\n  emitter,\n}: Options) {\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addListener: addListenerParent,\n    onDispatchAction,\n  } = React.useContext(NavigationBuilderContext);\n  const navigationInChildEnabled = React.useContext(\n    DeprecatedNavigationInChildContext\n  );\n\n  const routerConfigOptionsRef =\n    React.useRef<RouterConfigOptions>(routerConfigOptions);\n\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n\n  const onAction = React.useCallback(\n    (\n      action: NavigationAction,\n      visitedNavigators: Set<string> = new Set<string>()\n    ) => {\n      const state = getState();\n\n      // Since actions can bubble both up and down, they could come to the same navigator again\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\n      if (visitedNavigators.has(state.key)) {\n        return false;\n      }\n\n      visitedNavigators.add(state.key);\n\n      if (typeof action.target !== 'string' || action.target === state.key) {\n        let result = router.getStateForAction(\n          state,\n          action,\n          routerConfigOptionsRef.current\n        );\n\n        // If a target is specified and set to current navigator, the action shouldn't bubble\n        // So instead of `null`, we use the state object for such cases to signal that action was handled\n        result =\n          result === null && action.target === state.key ? state : result;\n\n        if (result !== null) {\n          onDispatchAction(action, state === result);\n\n          if (state !== result) {\n            const isPrevented = shouldPreventRemove(\n              emitter,\n              beforeRemoveListeners,\n              state.routes,\n              result.routes,\n              action\n            );\n\n            if (isPrevented) {\n              return true;\n            }\n\n            setState(result);\n          }\n\n          if (onRouteFocusParent !== undefined) {\n            // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n            // This means we need to focus all of the parent navigators of this navigator as well\n            const shouldFocus = router.shouldActionChangeFocus(action);\n\n            if (shouldFocus && key !== undefined) {\n              onRouteFocusParent(key);\n            }\n          }\n\n          return true;\n        }\n      }\n\n      if (onActionParent !== undefined) {\n        // Bubble action to the parent if the current navigator didn't handle it\n        if (onActionParent(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      if (\n        typeof action.target === 'string' ||\n        // For backward compatibility\n        action.type === 'NAVIGATE_DEPRECATED' ||\n        navigationInChildEnabled\n      ) {\n        // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n        // Handling this when target isn't specified is deprecated and will be removed in the future\n        for (let i = actionListeners.length - 1; i >= 0; i--) {\n          const listener = actionListeners[i];\n\n          if (listener(action, visitedNavigators)) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n    [\n      actionListeners,\n      beforeRemoveListeners,\n      emitter,\n      getState,\n      navigationInChildEnabled,\n      key,\n      onActionParent,\n      onDispatchAction,\n      onRouteFocusParent,\n      router,\n      setState,\n    ]\n  );\n\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners,\n  });\n\n  React.useEffect(\n    () => addListenerParent?.('action', onAction),\n    [addListenerParent, onAction]\n  );\n\n  return onAction;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}