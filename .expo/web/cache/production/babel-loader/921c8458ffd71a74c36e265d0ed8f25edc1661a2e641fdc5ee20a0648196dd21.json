{"ast":null,"code":"import{DEVICE_CONNECTIVITY_EVENT}from'./privateTypes';import{NetInfoCellularGeneration,NetInfoStateType}from'./types';const isWindowPresent=true;const connection=isWindowPresent&&!window.hasOwnProperty('tizen')&&!window.hasOwnProperty('webOS')?window.navigator.connection||window.navigator.mozConnection||window.navigator.webkitConnection:undefined;const typeMapping={bluetooth:NetInfoStateType.bluetooth,cellular:NetInfoStateType.cellular,ethernet:NetInfoStateType.ethernet,none:NetInfoStateType.none,other:NetInfoStateType.other,unknown:NetInfoStateType.unknown,wifi:NetInfoStateType.wifi,wimax:NetInfoStateType.wimax,mixed:NetInfoStateType.other};const effectiveTypeMapping={'2g':NetInfoCellularGeneration['2g'],'3g':NetInfoCellularGeneration['3g'],'4g':NetInfoCellularGeneration['4g'],'slow-2g':NetInfoCellularGeneration['2g']};const getCurrentState=_requestedInterface=>{const isConnected=isWindowPresent?navigator.onLine:false;const baseState={isInternetReachable:null};if(!connection){if(isConnected){const state=Object.assign({},baseState,{isConnected:true,type:NetInfoStateType.other,details:{isConnectionExpensive:false}});return state;}const state=Object.assign({},baseState,{isConnected:false,isInternetReachable:false,type:NetInfoStateType.none,details:null});return state;}const isConnectionExpensive=connection.saveData;const type=connection.type?typeMapping[connection.type]:isConnected?NetInfoStateType.other:NetInfoStateType.unknown;if(type===NetInfoStateType.bluetooth){const state=Object.assign({},baseState,{isConnected:true,type,details:{isConnectionExpensive}});return state;}else if(type===NetInfoStateType.cellular){const state=Object.assign({},baseState,{isConnected:true,type,details:{isConnectionExpensive,cellularGeneration:effectiveTypeMapping[connection.effectiveType]||null,carrier:null}});return state;}else if(type===NetInfoStateType.ethernet){const state=Object.assign({},baseState,{isConnected:true,type,details:{isConnectionExpensive,ipAddress:null,subnet:null}});return state;}else if(type===NetInfoStateType.wifi){const state=Object.assign({},baseState,{isConnected:true,type,details:{isConnectionExpensive,ssid:null,bssid:null,strength:null,ipAddress:null,subnet:null,frequency:null,linkSpeed:null,rxLinkSpeed:null,txLinkSpeed:null}});return state;}else if(type===NetInfoStateType.wimax){const state=Object.assign({},baseState,{isConnected:true,type,details:{isConnectionExpensive}});return state;}else if(type===NetInfoStateType.none){const state=Object.assign({},baseState,{isConnected:false,isInternetReachable:false,type,details:null});return state;}else if(type===NetInfoStateType.unknown){const state=Object.assign({},baseState,{isConnected,isInternetReachable:null,type,details:null});return state;}const state=Object.assign({},baseState,{isConnected:true,type:NetInfoStateType.other,details:{isConnectionExpensive}});return state;};const handlers=[];const nativeHandlers=[];const RNCNetInfo={addListener(type,handler){switch(type){case DEVICE_CONNECTIVITY_EVENT:{const nativeHandler=()=>{handler(getCurrentState());};if(connection){connection.addEventListener('change',nativeHandler);}else{if(isWindowPresent){window.addEventListener('online',nativeHandler,false);window.addEventListener('offline',nativeHandler,false);}}handlers.push(handler);nativeHandlers.push(nativeHandler);break;}}},removeListeners(type,handler){switch(type){case DEVICE_CONNECTIVITY_EVENT:{const index=handlers.indexOf(handler);const nativeHandler=nativeHandlers[index];if(connection){connection.removeEventListener('change',nativeHandler);}else{if(isWindowPresent){window.removeEventListener('online',nativeHandler);window.removeEventListener('offline',nativeHandler);}}handlers.splice(index,1);nativeHandlers.splice(index,1);break;}}},async getCurrentState(requestedInterface){return getCurrentState(requestedInterface);},configure(){return;}};export default RNCNetInfo;","map":{"version":3,"names":["DEVICE_CONNECTIVITY_EVENT","NetInfoCellularGeneration","NetInfoStateType","isWindowPresent","connection","window","hasOwnProperty","navigator","mozConnection","webkitConnection","undefined","typeMapping","bluetooth","cellular","ethernet","none","other","unknown","wifi","wimax","mixed","effectiveTypeMapping","getCurrentState","_requestedInterface","isConnected","onLine","baseState","isInternetReachable","state","Object","assign","type","details","isConnectionExpensive","saveData","cellularGeneration","effectiveType","carrier","ipAddress","subnet","ssid","bssid","strength","frequency","linkSpeed","rxLinkSpeed","txLinkSpeed","handlers","nativeHandlers","RNCNetInfo","addListener","handler","nativeHandler","addEventListener","push","removeListeners","index","indexOf","removeEventListener","splice","requestedInterface","configure"],"sources":["/home/user/rork-vibesync-458/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.web.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {\n  DEVICE_CONNECTIVITY_EVENT,\n  NetInfoNativeModule,\n  NetInfoNativeModuleState,\n} from './privateTypes';\nimport {\n  NetInfoBluetoothState,\n  NetInfoCellularGeneration,\n  NetInfoCellularState,\n  NetInfoEthernetState,\n  NetInfoNoConnectionState,\n  NetInfoOtherState,\n  NetInfoState,\n  NetInfoStateType,\n  NetInfoUnknownState,\n  NetInfoWifiState,\n  NetInfoWimaxState,\n} from './types';\n\n// See https://wicg.github.io/netinfo/#dom-connectiontype\ntype ConnectionType =\n  | 'bluetooth'\n  | 'cellular'\n  | 'ethernet'\n  | 'mixed'\n  | 'none'\n  | 'other'\n  | 'unknown'\n  | 'wifi'\n  | 'wimax';\n\n// See https://wicg.github.io/netinfo/#dom-effectiveconnectiontype\ntype ConnectionEffectiveType = '2g' | '3g' | '4g' | 'slow-2g';\n\n// https://wicg.github.io/netinfo/#dom-networkinformation-savedata\ntype ConnectionSaveData = boolean;\n\ninterface Events {\n  change: Event;\n}\n\ninterface Connection {\n  type: ConnectionType;\n  effectiveType: ConnectionEffectiveType;\n  saveData: ConnectionSaveData;\n  addEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n  removeEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n}\n\n// Create (optional) connection APIs on navigator\ndeclare global {\n  interface Navigator {\n    connection?: Connection;\n    mozConnection?: Connection;\n    webkitConnection?: Connection;\n  }\n}\n// Use a constant test of this form because in SSR on next.js, optional chaining is not sufficient,\n// but this test correctly detects that window is not available and allows for conditionals before access\nconst isWindowPresent = typeof window !== 'undefined';\n\n// Check if window exists and if the browser supports the connection API\nconst connection = (isWindowPresent && !window.hasOwnProperty('tizen') && !window.hasOwnProperty('webOS'))\n  ? window.navigator.connection ||\n    window.navigator.mozConnection ||\n    window.navigator.webkitConnection\n  : undefined;\n\n// Map browser types to native types\nconst typeMapping: Record<ConnectionType, NetInfoStateType> = {\n  bluetooth: NetInfoStateType.bluetooth,\n  cellular: NetInfoStateType.cellular,\n  ethernet: NetInfoStateType.ethernet,\n  none: NetInfoStateType.none,\n  other: NetInfoStateType.other,\n  unknown: NetInfoStateType.unknown,\n  wifi: NetInfoStateType.wifi,\n  wimax: NetInfoStateType.wimax,\n  mixed: NetInfoStateType.other,\n};\nconst effectiveTypeMapping: Record<\n  ConnectionEffectiveType,\n  NetInfoCellularGeneration\n> = {\n  '2g': NetInfoCellularGeneration['2g'],\n  '3g': NetInfoCellularGeneration['3g'],\n  '4g': NetInfoCellularGeneration['4g'],\n  'slow-2g': NetInfoCellularGeneration['2g'],\n};\n\n// Determine current state of connection\nconst getCurrentState = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _requestedInterface?: string,\n): Pick<NetInfoState, Exclude<keyof NetInfoState, 'isInternetReachable'>> => {\n  const isConnected = isWindowPresent ? navigator.onLine : false;\n  const baseState = {\n    isInternetReachable: null,\n  };\n\n  // If we don't have a connection object, we return minimal information\n  if (!connection) {\n    if (isConnected) {\n      const state: NetInfoOtherState = {\n        ...baseState,\n        isConnected: true,\n        type: NetInfoStateType.other,\n        details: {\n          isConnectionExpensive: false,\n        },\n      };\n      return state;\n    }\n\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type: NetInfoStateType.none,\n      details: null,\n    };\n    return state;\n  }\n\n  // Otherwise try to return detailed information\n  const isConnectionExpensive = connection.saveData;\n  const type: NetInfoStateType = connection.type\n    ? typeMapping[connection.type]\n    : isConnected\n    ? NetInfoStateType.other\n    : NetInfoStateType.unknown;\n\n  if (type === NetInfoStateType.bluetooth) {\n    const state: NetInfoBluetoothState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.cellular) {\n    const state: NetInfoCellularState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        cellularGeneration:\n          effectiveTypeMapping[connection.effectiveType] || null,\n        carrier: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.ethernet) {\n    const state: NetInfoEthernetState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ipAddress: null,\n        subnet: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wifi) {\n    const state: NetInfoWifiState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ssid: null,\n        bssid: null,\n        strength: null,\n        ipAddress: null,\n        subnet: null,\n        frequency: null,\n        linkSpeed: null,\n        rxLinkSpeed: null,\n        txLinkSpeed: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wimax) {\n    const state: NetInfoWimaxState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.none) {\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type,\n      details: null,\n    };\n    return state;\n  } else if (type === NetInfoStateType.unknown) {\n    const state: NetInfoUnknownState = {\n      ...baseState,\n      isConnected,\n      isInternetReachable: null,\n      type,\n      details: null,\n    };\n    return state;\n  }\n\n  const state: NetInfoOtherState = {\n    ...baseState,\n    isConnected: true,\n    type: NetInfoStateType.other,\n    details: {\n      isConnectionExpensive,\n    },\n  };\n  return state;\n};\n\nconst handlers: ((state: NetInfoNativeModuleState) => void)[] = [];\nconst nativeHandlers: (() => void)[] = [];\n\nconst RNCNetInfo: NetInfoNativeModule = {\n  addListener(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        const nativeHandler = (): void => {\n          handler(getCurrentState());\n        };\n\n        if (connection) {\n          connection.addEventListener('change', nativeHandler);\n        } else {\n          if (isWindowPresent) {\n            window.addEventListener('online', nativeHandler, false);\n            window.addEventListener('offline', nativeHandler, false);\n          }\n        }\n\n        // Remember handlers\n        handlers.push(handler);\n        nativeHandlers.push(nativeHandler);\n\n        break;\n      }\n    }\n  },\n\n  removeListeners(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        // Get native handler\n        const index = handlers.indexOf(handler);\n        const nativeHandler = nativeHandlers[index];\n\n        if (connection) {\n          connection.removeEventListener('change', nativeHandler);\n        } else {\n          if (isWindowPresent) {\n            window.removeEventListener('online', nativeHandler);\n            window.removeEventListener('offline', nativeHandler);\n          }\n        }\n\n        // Remove handlers\n        handlers.splice(index, 1);\n        nativeHandlers.splice(index, 1);\n\n        break;\n      }\n    }\n  },\n\n  async getCurrentState(requestedInterface): Promise<NetInfoNativeModuleState> {\n    return getCurrentState(requestedInterface);\n  },\n\n  configure(): void {\n    return;\n  },\n};\n\nexport default RNCNetInfo;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}