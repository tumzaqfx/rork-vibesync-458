{"ast":null,"code":"function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import React from'react';import{tagMessage}from'../utils';import PlatformConstants from'../PlatformConstants';import createHandler from'./createHandler';import{baseGestureHandlerProps}from'./gestureHandlerCommon';export const forceTouchGestureHandlerProps=['minForce','maxForce','feedbackOnActivation'];class ForceTouchFallback extends React.Component{componentDidMount(){console.warn(tagMessage('ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase'));}render(){return this.props.children;}}_defineProperty(ForceTouchFallback,\"forceTouchAvailable\",false);export const forceTouchHandlerName='ForceTouchGestureHandler';export const ForceTouchGestureHandler=PlatformConstants!==null&&PlatformConstants!==void 0&&PlatformConstants.forceTouchAvailable?createHandler({name:forceTouchHandlerName,allowedProps:[...baseGestureHandlerProps,...forceTouchGestureHandlerProps],config:{}}):ForceTouchFallback;ForceTouchGestureHandler.forceTouchAvailable=(PlatformConstants===null||PlatformConstants===void 0?void 0:PlatformConstants.forceTouchAvailable)||false;","map":{"version":3,"names":["React","tagMessage","PlatformConstants","createHandler","baseGestureHandlerProps","forceTouchGestureHandlerProps","ForceTouchFallback","Component","componentDidMount","console","warn","render","props","children","forceTouchHandlerName","ForceTouchGestureHandler","forceTouchAvailable","name","allowedProps","config"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-gesture-handler/lib/module/handlers/ForceTouchGestureHandler.ts"],"sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport { tagMessage } from '../utils';\nimport PlatformConstants from '../PlatformConstants';\nimport createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\nimport type { ForceTouchGestureHandlerEventPayload } from './GestureHandlerEventPayload';\n\nexport const forceTouchGestureHandlerProps = [\n  'minForce',\n  'maxForce',\n  'feedbackOnActivation',\n] as const;\n\n// implicit `children` prop has been removed in @types/react^18.0.0\nclass ForceTouchFallback extends React.Component<PropsWithChildren<unknown>> {\n  static forceTouchAvailable = false;\n  componentDidMount() {\n    console.warn(\n      tagMessage(\n        'ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase'\n      )\n    );\n  }\n  render() {\n    return this.props.children;\n  }\n}\n\nexport interface ForceTouchGestureConfig {\n  /**\n   *\n   * A minimal pressure that is required before handler can activate. Should be a\n   * value from range `[0.0, 1.0]`. Default is `0.2`.\n   */\n  minForce?: number;\n\n  /**\n   * A maximal pressure that could be applied for handler. If the pressure is\n   * greater, handler fails. Should be a value from range `[0.0, 1.0]`.\n   */\n  maxForce?: number;\n\n  /**\n   * Boolean value defining if haptic feedback has to be performed on\n   * activation.\n   */\n  feedbackOnActivation?: boolean;\n}\n\n/**\n * @deprecated ForceTouchGestureHandler will be removed in the future version of Gesture Handler. Use `Gesture.ForceTouch()` instead.\n */\nexport interface ForceTouchGestureHandlerProps\n  extends BaseGestureHandlerProps<ForceTouchGestureHandlerEventPayload>,\n    ForceTouchGestureConfig {}\n\n/**\n * @deprecated ForceTouchGestureHandler will be removed in the future version of Gesture Handler. Use `Gesture.ForceTouch()` instead.\n */\nexport type ForceTouchGestureHandler = typeof ForceTouchGestureHandler & {\n  forceTouchAvailable: boolean;\n};\n\nexport const forceTouchHandlerName = 'ForceTouchGestureHandler';\n\n/**\n * @deprecated ForceTouchGestureHandler will be removed in the future version of Gesture Handler. Use `Gesture.ForceTouch()` instead.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const ForceTouchGestureHandler = PlatformConstants?.forceTouchAvailable\n  ? createHandler<\n      ForceTouchGestureHandlerProps,\n      ForceTouchGestureHandlerEventPayload\n    >({\n      name: forceTouchHandlerName,\n      allowedProps: [\n        ...baseGestureHandlerProps,\n        ...forceTouchGestureHandlerProps,\n      ] as const,\n      config: {},\n    })\n  : ForceTouchFallback;\n\n(ForceTouchGestureHandler as ForceTouchGestureHandler).forceTouchAvailable =\n  PlatformConstants?.forceTouchAvailable || false;\n"],"mappings":"sLAAA,MAAO,CAAAA,KAAP,KAAyC,OAAzC,CACA,OAASC,UAAT,KAA2B,UAA3B,CACA,MAAO,CAAAC,iBAAP,KAA8B,sBAA9B,CACA,MAAO,CAAAC,aAAP,KAA0B,iBAA1B,CACA,OAEEC,uBAFF,KAGO,wBAHP,CAMA,MAAO,MAAM,CAAAC,6BAA6B,CAAG,CAC3C,UAD2C,CAE3C,UAF2C,CAG3C,sBAH2C,CAAtC,CAOP,KAAM,CAAAC,kBAAN,QAAiC,CAAAN,KAAK,CAACO,SAAsC,CAE3EC,iBAAiBA,CAAA,CAAG,CAClBC,OAAO,CAACC,IAAR,CACET,UAAU,CACR,8NADQ,CADZ,EAKD,CACDU,MAAMA,CAAA,CAAG,CACP,MAAO,MAAKC,KAAL,CAAWC,QAAlB,CACD,CAX0E,C,gBAAvEP,kB,uBACyB,K,EAgD/B,MAAO,MAAM,CAAAQ,qBAAqB,CAAG,0BAA9B,CAMP,MAAO,MAAM,CAAAC,wBAAwB,CAAGb,iBAAiB,OAAjB,EAAAA,iBAAiB,SAAjB,EAAAA,iBAAiB,CAAEc,mBAAnB,CACpCb,aAAa,CAGX,CACAc,IAAI,CAAEH,qBADN,CAEAI,YAAY,CAAE,CACZ,GAAGd,uBADS,CAEZ,GAAGC,6BAFS,CAFd,CAMAc,MAAM,CAAE,EANR,CAHW,CADuB,CAYpCb,kBAZG,CAcNS,wBAAD,CAAuDC,mBAAvD,CACE,CAAAd,iBAAiB,OAAjB,EAAAA,iBAAiB,SAAjB,QAAAA,iBAAiB,CAAEc,mBAAnB,GAA0C,KAD5C","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}