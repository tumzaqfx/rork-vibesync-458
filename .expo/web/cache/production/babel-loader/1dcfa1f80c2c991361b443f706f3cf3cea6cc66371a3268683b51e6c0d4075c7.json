{"ast":null,"code":"'use client';import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"colors\",\"locations\",\"start\",\"end\",\"dither\"];import{Component}from'react';import Platform from\"react-native-web/dist/exports/Platform\";import processColor from\"react-native-web/dist/exports/processColor\";import NativeLinearGradient from'./NativeLinearGradient';import{jsx as _jsx}from\"react/jsx-runtime\";export class LinearGradient extends Component{render(){const _this$props=this.props,{colors,locations,start,end,dither}=_this$props,props=_objectWithoutPropertiesLoose(_this$props,_excluded);let resolvedLocations=locations;if(locations&&colors.length!==locations.length){console.warn('LinearGradient colors and locations props should be arrays of the same length');resolvedLocations=locations.slice(0,colors.length);}return _jsx(NativeLinearGradient,Object.assign({},props,{colors:colors,dither:undefined,locations:resolvedLocations,startPoint:_normalizePoint(start),endPoint:_normalizePoint(end)}));}}function _normalizePoint(point){if(!point){return undefined;}if(Array.isArray(point)&&point.length!==2){console.warn('start and end props for LinearGradient must be of the format [x,y] or {x, y}');return undefined;}return Array.isArray(point)?point:[point.x,point.y];}","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_excluded","Component","Platform","processColor","NativeLinearGradient","jsx","_jsx","LinearGradient","render","_this$props","props","colors","locations","start","end","dither","resolvedLocations","length","console","warn","slice","Object","assign","undefined","startPoint","_normalizePoint","endPoint","point","Array","isArray","x","y"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-linear-gradient/src/LinearGradient.tsx"],"sourcesContent":["// Copyright Â© 2024 650 Industries.\n\n'use client';\n\nimport { Component } from 'react';\nimport { ColorValue, Platform, processColor, ViewProps } from 'react-native';\n\nimport NativeLinearGradient from './NativeLinearGradient';\nimport { NativeLinearGradientPoint } from './NativeLinearGradient.types';\n\n// @needsAudit\n/**\n * An object `{ x: number; y: number }` or array `[x, y]` that represents the point\n * at which the gradient starts or ends, as a fraction of the overall size of the gradient ranging\n * from `0` to `1`, inclusive.\n */\nexport type LinearGradientPoint =\n  | {\n      /**\n       * A number ranging from `0` to `1`, representing the position of gradient transformation.\n       */\n      x: number;\n      /**\n       * A number ranging from `0` to `1`, representing the position of gradient transformation.\n       */\n      y: number;\n    }\n  | NativeLinearGradientPoint;\n\n// @needsAudit\nexport type LinearGradientProps = ViewProps & {\n  /**\n   * A readonly array of colors that represent stops in the gradient. At least two colors are required\n   * (for a single-color background, use the `style.backgroundColor` prop on a `View` component).\n   *\n   * For TypeScript to know the provided array has 2 or more values, it should be provided \"inline\" or typed `as const`.\n   */\n  colors: readonly [ColorValue, ColorValue, ...ColorValue[]];\n  /**\n   * A readonly array that contains `number`s ranging from `0` to `1`, inclusive, and is the same length as the `colors` property.\n   * Each number indicates a color-stop location where each respective color should be located.\n   * If not specified, the colors will be distributed evenly across the gradient.\n   *\n   * For example, `[0.5, 0.8]` would render:\n   * - the first color, solid, from the beginning of the gradient view to 50% through (the middle);\n   * - a gradient from the first color to the second from the 50% point to the 80% point; and\n   * - the second color, solid, from the 80% point to the end of the gradient view.\n   *\n   * > The color-stop locations must be ascending from least to greatest.\n   * @default []\n   */\n  locations?: readonly [number, number, ...number[]] | null;\n  /**\n   * For example, `{ x: 0.1, y: 0.2 }` means that the gradient will start `10%` from the left and `20%` from the top.\n   *\n   * **On web**, this only changes the angle of the gradient because CSS gradients don't support changing the starting position.\n   * @default { x: 0.5, y: 0.0 }\n   */\n  start?: LinearGradientPoint | null;\n  /**\n   * For example, `{ x: 0.1, y: 0.2 }` means that the gradient will end `10%` from the left and `20%` from the bottom.\n   *\n   * **On web**, this only changes the angle of the gradient because CSS gradients don't support changing the end position.\n   * @default { x: 0.5, y: 1.0 }\n   */\n  end?: LinearGradientPoint | null;\n\n  /**\n   * Enables or disables paint dithering. Dithering can reduce the gradient color banding issue.\n   * Setting `false` may improve gradient rendering performance.\n   * @default true\n   * @platform android\n   */\n  dither?: boolean;\n};\n\n/**\n * Renders a native view that transitions between multiple colors in a linear direction.\n */\nexport class LinearGradient extends Component<LinearGradientProps> {\n  render() {\n    const { colors, locations, start, end, dither, ...props } = this.props;\n    let resolvedLocations: readonly number[] | null | undefined = locations;\n    if (locations && colors.length !== locations.length) {\n      console.warn('LinearGradient colors and locations props should be arrays of the same length');\n      resolvedLocations = locations.slice(0, colors.length);\n    }\n\n    return (\n      <NativeLinearGradient\n        {...props}\n        colors={Platform.select({\n          web: colors as any,\n          default: colors.map(processColor),\n        })}\n        dither={Platform.select({ android: dither })}\n        locations={resolvedLocations}\n        startPoint={_normalizePoint(start)}\n        endPoint={_normalizePoint(end)}\n      />\n    );\n  }\n}\n\nfunction _normalizePoint(\n  point?: LinearGradientPoint | null\n): NativeLinearGradientPoint | undefined {\n  if (!point) {\n    return undefined;\n  }\n\n  if (Array.isArray(point) && point.length !== 2) {\n    console.warn('start and end props for LinearGradient must be of the format [x,y] or {x, y}');\n    return undefined;\n  }\n\n  return Array.isArray(point) ? point : [point.x, point.y];\n}\n\nexport { NativeLinearGradientPoint };\n"],"mappings":"AAEA,YAAY,CAAC,OAAAA,6BAAA,iEAAAC,SAAA,+CAEb,OAASC,SAAS,KAAQ,OAAO,CAAC,OAAAC,QAAA,qDAAAC,YAAA,kDAGlC,MAAO,CAAAC,oBAAoB,KAAM,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAwE1D,MAAM,MAAO,CAAAC,cAAe,QAAQ,CAAAN,SAA8B,CAChEO,MAAMA,CAAA,EACJ,MAAAC,WAAA,CAA4D,IAAI,CAACC,KAAK,CAAhE,CAAEC,MAAM,CAAEC,SAAS,CAAEC,KAAK,CAAEC,GAAG,CAAEC,MAAgB,CAAE,CAAAN,WAAA,CAAPC,KAAK,CAAAX,6BAAA,CAAAU,WAAA,CAAAT,SAAA,EACvD,GAAI,CAAAgB,iBAAiB,CAAyCJ,SAAS,CACvE,GAAIA,SAAS,EAAID,MAAM,CAACM,MAAM,GAAKL,SAAS,CAACK,MAAM,CAAE,CACnDC,OAAO,CAACC,IAAI,CAAC,+EAA+E,CAAC,CAC7FH,iBAAiB,CAAGJ,SAAS,CAACQ,KAAK,CAAC,CAAC,CAAET,MAAM,CAACM,MAAM,CAAC,CACvD,CAEA,MACE,CAAAX,IAAA,CAACF,oBAAoB,CAAAiB,MAAA,CAAAC,MAAA,IACfZ,KAAK,EACTC,MAAM,CACCA,MAEJ,CACHI,MAAM,CAAAQ,SAAuC,CAC7CX,SAAS,CAAEI,iBAAkB,CAC7BQ,UAAU,CAAEC,eAAe,CAACZ,KAAK,CAAE,CACnCa,QAAQ,CAAED,eAAe,CAACX,GAAG,CAAE,GAC/B,CAEN,C,CAGF,QAAS,CAAAW,eAAeA,CACtBE,KAAkC,EAElC,GAAI,CAACA,KAAK,CAAE,CACV,MAAO,CAAAJ,SAAS,CAClB,CAEA,GAAIK,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAIA,KAAK,CAACV,MAAM,GAAK,CAAC,CAAE,CAC9CC,OAAO,CAACC,IAAI,CAAC,8EAA8E,CAAC,CAC5F,MAAO,CAAAI,SAAS,CAClB,CAEA,MAAO,CAAAK,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,CAAGA,KAAK,CAAG,CAACA,KAAK,CAACG,CAAC,CAAEH,KAAK,CAACI,CAAC,CAAC,CAC1D","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}