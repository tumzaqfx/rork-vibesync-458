{"ast":null,"code":"import*as React from'react';import findNodeHandle from\"react-native-web/dist/exports/findNodeHandle\";import Image from\"react-native-web/dist/exports/Image\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import Platform from\"react-native-web/dist/exports/Platform\";import{assertStatusValuesInBounds,getNativeSourceAndFullInitialStatusForLoadAsync,getNativeSourceFromSource,getUnloadedStatus,PlaybackMixin}from'./AV';import ExpoVideoManager from'./ExpoVideoManager';import ExponentAV from'./ExponentAV';import ExponentVideo from'./ExponentVideo';import{ResizeMode}from'./Video.types';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const _STYLES=StyleSheet.create({base:{overflow:'hidden',pointerEvents:'box-none'},poster:{position:'absolute',left:0,top:0,right:0,bottom:0,resizeMode:'contain'},video:{position:'absolute',left:0,top:0,right:0,bottom:0}});let didWarnAboutVideoDeprecation=false;const ExpoVideoManagerConstants=ExpoVideoManager;const ExpoVideoViewManager=ExpoVideoManager;class Video extends React.Component{_nativeRef=React.createRef();_onPlaybackStatusUpdate=null;constructor(props){super(props);this.state={showPoster:!!props.usePoster};}setNativeProps(nativeProps){const nativeVideo=this._nativeRef.current;if(!nativeVideo)throw new Error(`native video reference is not defined.`);nativeVideo.setNativeProps(nativeProps);}_handleNewStatus=status=>{if(this.state.showPoster&&status.isLoaded&&(status.isPlaying||status.positionMillis!==0)){this.setState({showPoster:false});}if(this.props.onPlaybackStatusUpdate){this.props.onPlaybackStatusUpdate(status);}if(this._onPlaybackStatusUpdate){this._onPlaybackStatusUpdate(status);}};_performOperationAndHandleStatusAsync=async operation=>{const video=this._nativeRef.current;if(!video){throw new Error(`Cannot complete operation because the Video component has not yet loaded`);}let handle=null;if(true&&'getVideoElement'in this._nativeRef.current){handle=this._nativeRef.current.getVideoElement();}if(false){handle=findNodeHandle(this._nativeRef.current);}if(!handle){throw new Error('failed to find node handle');}const status=await operation(handle);this._handleNewStatus(status);return status;};_setFullscreen=async value=>{return this._performOperationAndHandleStatusAsync(tag=>ExpoVideoViewManager.setFullscreen(tag,value));};presentFullscreenPlayer=async()=>{return this._setFullscreen(true);};dismissFullscreenPlayer=async()=>{return this._setFullscreen(false);};getStatusAsync=async()=>{return this._performOperationAndHandleStatusAsync(tag=>ExponentAV.getStatusForVideo(tag));};loadAsync=async(source,initialStatus={},downloadFirst=true)=>{const{nativeSource,fullInitialStatus}=await getNativeSourceAndFullInitialStatusForLoadAsync(source,initialStatus,downloadFirst);return this._performOperationAndHandleStatusAsync(tag=>ExponentAV.loadForVideo(tag,nativeSource,fullInitialStatus));};unloadAsync=async()=>{return this._performOperationAndHandleStatusAsync(tag=>ExponentAV.unloadForVideo(tag));};componentWillUnmount(){this.unloadAsync().catch(()=>{});}setStatusAsync=async status=>{assertStatusValuesInBounds(status);return this._performOperationAndHandleStatusAsync(tag=>ExponentAV.setStatusForVideo(tag,status));};replayAsync=async(status={})=>{if(status.positionMillis&&status.positionMillis!==0){throw new Error('Requested position after replay has to be 0.');}return this._performOperationAndHandleStatusAsync(tag=>ExponentAV.replayVideo(tag,Object.assign({},status,{positionMillis:0,shouldPlay:true})));};setOnPlaybackStatusUpdate(onPlaybackStatusUpdate){this._onPlaybackStatusUpdate=onPlaybackStatusUpdate;this.getStatusAsync();}_nativeOnPlaybackStatusUpdate=event=>{this._handleNewStatus(event.nativeEvent);};_nativeOnLoadStart=()=>{if(this.props.onLoadStart){this.props.onLoadStart();}};_nativeOnLoad=event=>{if(this.props.onLoad){this.props.onLoad(event.nativeEvent);}this._handleNewStatus(event.nativeEvent);};_nativeOnError=event=>{const error=event.nativeEvent.error;if(this.props.onError){this.props.onError(error);}this._handleNewStatus(getUnloadedStatus(error));};_nativeOnReadyForDisplay=event=>{if(this.props.onReadyForDisplay){this.props.onReadyForDisplay(event.nativeEvent);}};_nativeOnFullscreenUpdate=event=>{if(this.props.onFullscreenUpdate){this.props.onFullscreenUpdate(event.nativeEvent);}};_renderPoster=()=>{const PosterComponent=this.props.PosterComponent??Image;return this.props.usePoster&&this.state.showPoster?_jsx(PosterComponent,{style:[_STYLES.poster,this.props.posterStyle],source:this.props.posterSource}):null;};render(){maybeWarnAboutVideoDeprecation();const source=getNativeSourceFromSource(this.props.source)||undefined;let nativeResizeMode=ExpoVideoManagerConstants.ScaleNone;if(this.props.resizeMode){const resizeMode=this.props.resizeMode;if(resizeMode===ResizeMode.STRETCH){nativeResizeMode=ExpoVideoManagerConstants.ScaleToFill;}else if(resizeMode===ResizeMode.CONTAIN){nativeResizeMode=ExpoVideoManagerConstants.ScaleAspectFit;}else if(resizeMode===ResizeMode.COVER){nativeResizeMode=ExpoVideoManagerConstants.ScaleAspectFill;}}const status=Object.assign({},this.props.status);['progressUpdateIntervalMillis','positionMillis','shouldPlay','rate','shouldCorrectPitch','volume','isMuted','isLooping'].forEach(prop=>{if(prop in this.props){status[prop]=this.props[prop];}});const nativeProps=Object.assign({},omit(this.props,['source','onPlaybackStatusUpdate','usePoster','posterSource','posterStyle',...Object.keys(status)]),{style:[_STYLES.base,this.props.style],videoStyle:[_STYLES.video,this.props.videoStyle],source,resizeMode:nativeResizeMode,status,onStatusUpdate:this._nativeOnPlaybackStatusUpdate,onLoadStart:this._nativeOnLoadStart,onLoad:this._nativeOnLoad,onError:this._nativeOnError,onReadyForDisplay:this._nativeOnReadyForDisplay,onFullscreenUpdate:this._nativeOnFullscreenUpdate});return _jsxs(View,{style:nativeProps.style,children:[_jsx(ExponentVideo,Object.assign({ref:this._nativeRef},nativeProps,{style:nativeProps.videoStyle})),this._renderPoster()]});}}function omit(props,propNames){const copied=Object.assign({},props);for(const propName of propNames){delete copied[propName];}return copied;}function maybeWarnAboutVideoDeprecation(){if(false&&!didWarnAboutVideoDeprecation){didWarnAboutVideoDeprecation=true;console.log('⚠️ \\x1b[33m[expo-av]: Video component from `expo-av` is deprecated in favor of `expo-video`. '+'See the documentation at https://docs.expo.dev/versions/latest/sdk/video/ for the new API reference.');}}Object.assign(Video.prototype,PlaybackMixin);export default Video;","map":{"version":3,"names":["React","findNodeHandle","Image","StyleSheet","View","Platform","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getNativeSourceFromSource","getUnloadedStatus","PlaybackMixin","ExpoVideoManager","ExponentAV","ExponentVideo","ResizeMode","jsx","_jsx","jsxs","_jsxs","_STYLES","create","base","overflow","pointerEvents","poster","position","left","top","right","bottom","resizeMode","video","didWarnAboutVideoDeprecation","ExpoVideoManagerConstants","ExpoVideoViewManager","Video","Component","_nativeRef","createRef","_onPlaybackStatusUpdate","constructor","props","state","showPoster","usePoster","setNativeProps","nativeProps","nativeVideo","current","Error","_handleNewStatus","status","isLoaded","isPlaying","positionMillis","setState","onPlaybackStatusUpdate","_performOperationAndHandleStatusAsync","operation","handle","getVideoElement","_setFullscreen","value","tag","setFullscreen","presentFullscreenPlayer","dismissFullscreenPlayer","getStatusAsync","getStatusForVideo","loadAsync","source","initialStatus","downloadFirst","nativeSource","fullInitialStatus","loadForVideo","unloadAsync","unloadForVideo","componentWillUnmount","catch","setStatusAsync","setStatusForVideo","replayAsync","replayVideo","Object","assign","shouldPlay","setOnPlaybackStatusUpdate","_nativeOnPlaybackStatusUpdate","event","nativeEvent","_nativeOnLoadStart","onLoadStart","_nativeOnLoad","onLoad","_nativeOnError","error","onError","_nativeOnReadyForDisplay","onReadyForDisplay","_nativeOnFullscreenUpdate","onFullscreenUpdate","_renderPoster","PosterComponent","style","posterStyle","posterSource","render","maybeWarnAboutVideoDeprecation","undefined","nativeResizeMode","ScaleNone","STRETCH","ScaleToFill","CONTAIN","ScaleAspectFit","COVER","ScaleAspectFill","forEach","prop","omit","keys","videoStyle","onStatusUpdate","children","ref","propNames","copied","propName","console","log","prototype"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-av/src/Video.tsx"],"sourcesContent":["import * as React from 'react';\nimport { findNodeHandle, Image, NativeMethods, StyleSheet, View, Platform } from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackTolerance,\n  PitchCorrectionQuality,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n    pointerEvents: 'box-none',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\nlet didWarnAboutVideoDeprecation: boolean = false;\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nclass Video extends React.Component<VideoProps, VideoState> implements Playback {\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  /**\n   * @hidden\n   */\n  setNativeProps(nativeProps: VideoNativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: AVPlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    let handle = null;\n    if (Platform.OS === 'web' && 'getVideoElement' in this._nativeRef.current!) {\n      handle = (this._nativeRef.current as any).getVideoElement() as HTMLMediaElement;\n    }\n    if (Platform.OS !== 'web') {\n      handle = findNodeHandle(this._nativeRef.current)!;\n    }\n    if (!handle) {\n      throw new Error('failed to find node handle');\n    }\n\n    const status: AVPlaybackStatus = await operation(handle! as number);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // Fullscreening API\n\n  _setFullscreen = async (value: boolean): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  /**\n   * This presents a fullscreen view of your video component on top of your app's UI. Note that even if `useNativeControls` is set to `false`,\n   * native controls will be visible in fullscreen mode.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished presenting,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  presentFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(true);\n  };\n\n  /**\n   * This dismisses the fullscreen video view.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished dismissing,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  dismissFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(false);\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  /**\n   * @hidden\n   */\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  loadAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> => {\n    const { nativeSource, fullInitialStatus } =\n      await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  /**\n   * Equivalent to setting URI to `null`.\n   * @hidden\n   */\n  unloadAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  componentWillUnmount() {\n    // Auto unload video to perform necessary cleanup safely\n    this.unloadAsync().catch(() => {\n      // Ignored rejection. Sometimes the unloadAsync code is executed when video is already unloaded.\n      // In such cases, it throws:\n      // \"[Unhandled promise rejection: Error: Invalid view returned from registry,\n      //  expecting EXVideo, got: (null)]\"\n    });\n  }\n\n  /**\n   * Set status API, only available while `isLoaded = true`.\n   * @hidden\n   */\n  setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number, audioPan?: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n\n  // Callback wrappers\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () => {\n    const PosterComponent = this.props.PosterComponent ?? Image;\n\n    return this.props.usePoster && this.state.showPoster ? (\n      <PosterComponent\n        style={[_STYLES.poster, this.props.posterStyle]}\n        source={this.props.posterSource!}\n      />\n    ) : null;\n  };\n\n  render() {\n    maybeWarnAboutVideoDeprecation();\n\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: AVPlaybackStatusToSet = { ...this.props.status };\n    (\n      [\n        'progressUpdateIntervalMillis',\n        'positionMillis',\n        'shouldPlay',\n        'rate',\n        'shouldCorrectPitch',\n        'volume',\n        'isMuted',\n        'isLooping',\n      ] as const\n    ).forEach((prop) => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop] as any;\n      }\n    });\n\n    // Replace selected native props\n    const nativeProps: VideoNativeProps = {\n      ...omit(this.props, [\n        'source',\n        'onPlaybackStatusUpdate',\n        'usePoster',\n        'posterSource',\n        'posterStyle',\n        ...Object.keys(status),\n      ]),\n      style: [_STYLES.base, this.props.style],\n      videoStyle: [_STYLES.video, this.props.videoStyle],\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style}>\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={nativeProps.videoStyle} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nfunction omit(props: Record<string, any>, propNames: string[]) {\n  const copied = { ...props };\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\n\nfunction maybeWarnAboutVideoDeprecation() {\n  if (__DEV__ && !didWarnAboutVideoDeprecation) {\n    didWarnAboutVideoDeprecation = true;\n    console.log(\n      '⚠️ \\x1b[33m[expo-av]: Video component from `expo-av` is deprecated in favor of `expo-video`. ' +\n        'See the documentation at https://docs.expo.dev/versions/latest/sdk/video/ for the new API reference.'\n    );\n  }\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n\n// note(simek): TypeDoc cannot resolve correctly name of inline and default exported class\nexport default Video;\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAAC,OAAAC,cAAA,2DAAAC,KAAA,kDAAAC,UAAA,uDAAAC,IAAA,iDAAAC,QAAA,8CAG/B,OACEC,0BAA0B,CAC1BC,+CAA+C,CAC/CC,yBAAyB,CACzBC,iBAAiB,CAEjBC,aAAa,KAMR,MAAM,CACb,MAAO,CAAAC,gBAAgB,KAAM,oBAAoB,CACjD,MAAO,CAAAC,UAAU,KAAM,cAAc,CACrC,MAAO,CAAAC,aAAa,KAAM,iBAAiB,CAC3C,OAMEC,UAAU,KAEL,eAAe,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEvB,KAAM,CAAAC,OAAO,CAAGhB,UAAU,CAACiB,MAAM,CAAC,CAChCC,IAAI,CAAE,CACJC,QAAQ,CAAE,QAAQ,CAClBC,aAAa,CAAE,U,CAChB,CACDC,MAAM,CAAE,CACNC,QAAQ,CAAE,UAAU,CACpBC,IAAI,CAAE,CAAC,CACPC,GAAG,CAAE,CAAC,CACNC,KAAK,CAAE,CAAC,CACRC,MAAM,CAAE,CAAC,CACTC,UAAU,CAAE,S,CACb,CACDC,KAAK,CAAE,CACLN,QAAQ,CAAE,UAAU,CACpBC,IAAI,CAAE,CAAC,CACPC,GAAG,CAAE,CAAC,CACNC,KAAK,CAAE,CAAC,CACRC,MAAM,CAAE,C,EAEX,CAAC,CAEF,GAAI,CAAAG,4BAA4B,CAAY,KAAK,CAIjD,KAAM,CAAAC,yBAAyB,CAAGtB,gBAAgB,CAClD,KAAM,CAAAuB,oBAAoB,CAAGvB,gBAAgB,CAE7C,KAAM,CAAAwB,KAAM,QAAQ,CAAAnC,KAAK,CAACoC,SAAiC,CACzDC,UAAU,CAAGrC,KAAK,CAACsC,SAAS,EAAwD,CACpFC,uBAAuB,CAAgD,IAAI,CAE3EC,YAAYC,KAAiB,EAC3B,KAAK,CAACA,KAAK,CAAC,CACZ,IAAI,CAACC,KAAK,CAAG,CACXC,UAAU,CAAE,CAAC,CAACF,KAAK,CAACG,S,CACrB,CACH,CAKAC,cAAcA,CAACC,WAA6B,EAC1C,KAAM,CAAAC,WAAW,CAAG,IAAI,CAACV,UAAU,CAACW,OAAO,CAC3C,GAAI,CAACD,WAAW,CAAE,KAAM,IAAI,CAAAE,KAAK,CAAC,wCAAwC,CAAC,CAC3EF,WAAW,CAACF,cAAc,CAACC,WAAW,CAAC,CACzC,CAIAI,gBAAgB,CAAIC,MAAwB,EAAI,CAC9C,GACE,IAAI,CAACT,KAAK,CAACC,UAAU,EACrBQ,MAAM,CAACC,QAAQ,GACdD,MAAM,CAACE,SAAS,EAAIF,MAAM,CAACG,cAAc,GAAK,CAAC,CAAC,CACjD,CACA,IAAI,CAACC,QAAQ,CAAC,CAAEZ,UAAU,CAAE,KAAK,CAAE,CAAC,CACtC,CAEA,GAAI,IAAI,CAACF,KAAK,CAACe,sBAAsB,CAAE,CACrC,IAAI,CAACf,KAAK,CAACe,sBAAsB,CAACL,MAAM,CAAC,CAC3C,CACA,GAAI,IAAI,CAACZ,uBAAuB,CAAE,CAChC,IAAI,CAACA,uBAAuB,CAACY,MAAM,CAAC,CACtC,CACF,CAAC,CAEDM,qCAAqC,CAAG,KACtC,CAAAC,SAAqD,EACxB,CAC7B,KAAM,CAAA3B,KAAK,CAAG,IAAI,CAACM,UAAU,CAACW,OAAO,CACrC,GAAI,CAACjB,KAAK,CAAE,CACV,KAAM,IAAI,CAAAkB,KAAK,CAAC,0EAA0E,CAAC,CAC7F,CAEA,GAAI,CAAAU,MAAM,CAAG,IAAI,CACjB,GAAI,MAAyB,iBAAiB,EAAI,KAAI,CAACtB,UAAU,CAACW,OAAQ,CAAE,CAC1EW,MAAM,CAAI,IAAI,CAACtB,UAAU,CAACW,OAAe,CAACY,eAAe,EAAsB,CACjF,CACA,SAA2B,CACzBD,MAAM,CAAG1D,cAAc,CAAC,IAAI,CAACoC,UAAU,CAACW,OAAO,CAAE,CACnD,CACA,GAAI,CAACW,MAAM,CAAE,CACX,KAAM,IAAI,CAAAV,KAAK,CAAC,4BAA4B,CAAC,CAC/C,CAEA,KAAM,CAAAE,MAAM,CAAqB,KAAM,CAAAO,SAAS,CAACC,MAAiB,CAAC,CACnE,IAAI,CAACT,gBAAgB,CAACC,MAAM,CAAC,CAC7B,MAAO,CAAAA,MAAM,CACf,CAAC,CAIDU,cAAc,CAAG,KAAO,CAAAC,KAAc,EAA+B,CACnE,MAAO,KAAI,CAACL,qCAAqC,CAAEM,GAAW,EAC5D7B,oBAAoB,CAAC8B,aAAa,CAACD,GAAG,CAAED,KAAK,CAAC,CAC/C,CACH,CAAC,CAQDG,uBAAuB,CAAG,KAAAA,CAAA,GAAsC,CAC9D,MAAO,KAAI,CAACJ,cAAc,CAAC,IAAI,CAAC,CAClC,CAAC,CAODK,uBAAuB,CAAG,KAAAA,CAAA,GAAsC,CAC9D,MAAO,KAAI,CAACL,cAAc,CAAC,KAAK,CAAC,CACnC,CAAC,CAQDM,cAAc,CAAG,KAAAA,CAAA,GAAsC,CACrD,MAAO,KAAI,CAACV,qCAAqC,CAAEM,GAAW,EAC5DnD,UAAU,CAACwD,iBAAiB,CAACL,GAAG,CAAC,CAClC,CACH,CAAC,CAKDM,SAAS,CAAG,KAAAA,CACVC,MAAwB,CACxBC,aAAA,CAAuC,EAAE,CACzCC,aAAA,CAAyB,IAAI,GACA,CAC7B,KAAM,CAAEC,YAAY,CAAEC,iBAAiB,CAAE,CACvC,KAAM,CAAAnE,+CAA+C,CAAC+D,MAAM,CAAEC,aAAa,CAAEC,aAAa,CAAC,CAC7F,MAAO,KAAI,CAACf,qCAAqC,CAAEM,GAAW,EAC5DnD,UAAU,CAAC+D,YAAY,CAACZ,GAAG,CAAEU,YAAY,CAAEC,iBAAiB,CAAC,CAC9D,CACH,CAAC,CAMDE,WAAW,CAAG,KAAAA,CAAA,GAAsC,CAClD,MAAO,KAAI,CAACnB,qCAAqC,CAAEM,GAAW,EAC5DnD,UAAU,CAACiE,cAAc,CAACd,GAAG,CAAC,CAC/B,CACH,CAAC,CAEDe,oBAAoBA,CAAA,EAElB,IAAI,CAACF,WAAW,EAAE,CAACG,KAAK,CAAC,IAAK,CAK9B,CAAC,CAAC,CACJ,CAMAC,cAAc,CAAG,KAAO,CAAA7B,MAA6B,EAA+B,CAClF7C,0BAA0B,CAAC6C,MAAM,CAAC,CAClC,MAAO,KAAI,CAACM,qCAAqC,CAAEM,GAAW,EAC5DnD,UAAU,CAACqE,iBAAiB,CAAClB,GAAG,CAAEZ,MAAM,CAAC,CAC1C,CACH,CAAC,CAKD+B,WAAW,CAAG,KAAAA,CAAO/B,MAAA,CAAgC,EAAE,GAA+B,CACpF,GAAIA,MAAM,CAACG,cAAc,EAAIH,MAAM,CAACG,cAAc,GAAK,CAAC,CAAE,CACxD,KAAM,IAAI,CAAAL,KAAK,CAAC,8CAA8C,CAAC,CACjE,CAEA,MAAO,KAAI,CAACQ,qCAAqC,CAAEM,GAAW,EAC5DnD,UAAU,CAACuE,WAAW,CAACpB,GAAG,CAAAqB,MAAA,CAAAC,MAAA,IACrBlC,MAAM,EACTG,cAAc,CAAE,CAAC,CACjBgC,UAAU,CAAE,IAAI,EACjB,CAAC,CACH,CACH,CAAC,CAcDC,yBAAyBA,CAAC/B,sBAAmE,EAC3F,IAAI,CAACjB,uBAAuB,CAAGiB,sBAAsB,CACrD,IAAI,CAACW,cAAc,EAAE,CACvB,CA4BAqB,6BAA6B,CAAIC,KAAwC,EAAI,CAC3E,IAAI,CAACvC,gBAAgB,CAACuC,KAAK,CAACC,WAAW,CAAC,CAC1C,CAAC,CAGDC,kBAAkB,CAAGA,CAAA,GAAK,CACxB,GAAI,IAAI,CAAClD,KAAK,CAACmD,WAAW,CAAE,CAC1B,IAAI,CAACnD,KAAK,CAACmD,WAAW,EAAE,CAC1B,CACF,CAAC,CAEDC,aAAa,CAAIJ,KAAwC,EAAI,CAC3D,GAAI,IAAI,CAAChD,KAAK,CAACqD,MAAM,CAAE,CACrB,IAAI,CAACrD,KAAK,CAACqD,MAAM,CAACL,KAAK,CAACC,WAAW,CAAC,CACtC,CACA,IAAI,CAACxC,gBAAgB,CAACuC,KAAK,CAACC,WAAW,CAAC,CAC1C,CAAC,CAEDK,cAAc,CAAIN,KAAyC,EAAI,CAC7D,KAAM,CAAAO,KAAK,CAAWP,KAAK,CAACC,WAAW,CAACM,KAAK,CAC7C,GAAI,IAAI,CAACvD,KAAK,CAACwD,OAAO,CAAE,CACtB,IAAI,CAACxD,KAAK,CAACwD,OAAO,CAACD,KAAK,CAAC,CAC3B,CACA,IAAI,CAAC9C,gBAAgB,CAACzC,iBAAiB,CAACuF,KAAK,CAAC,CAAC,CACjD,CAAC,CAEDE,wBAAwB,CAAIT,KAAiD,EAAI,CAC/E,GAAI,IAAI,CAAChD,KAAK,CAAC0D,iBAAiB,CAAE,CAChC,IAAI,CAAC1D,KAAK,CAAC0D,iBAAiB,CAACV,KAAK,CAACC,WAAW,CAAC,CACjD,CACF,CAAC,CAEDU,yBAAyB,CAAIX,KAAkD,EAAI,CACjF,GAAI,IAAI,CAAChD,KAAK,CAAC4D,kBAAkB,CAAE,CACjC,IAAI,CAAC5D,KAAK,CAAC4D,kBAAkB,CAACZ,KAAK,CAACC,WAAW,CAAC,CAClD,CACF,CAAC,CAEDY,aAAa,CAAGA,CAAA,GAAK,CACnB,KAAM,CAAAC,eAAe,CAAG,IAAI,CAAC9D,KAAK,CAAC8D,eAAe,EAAIrG,KAAK,CAE3D,MAAO,KAAI,CAACuC,KAAK,CAACG,SAAS,EAAI,IAAI,CAACF,KAAK,CAACC,UAAU,CAClD3B,IAAA,CAACuF,eAAe,EACdC,KAAK,CAAE,CAACrF,OAAO,CAACK,MAAM,CAAE,IAAI,CAACiB,KAAK,CAACgE,WAAW,CAAE,CAChDnC,MAAM,CAAE,IAAI,CAAC7B,KAAK,CAACiE,YAAc,EACjC,CACA,IAAI,CACV,CAAC,CAEDC,MAAMA,CAAA,EACJC,8BAA8B,EAAE,CAEhC,KAAM,CAAAtC,MAAM,CAAG9D,yBAAyB,CAAC,IAAI,CAACiC,KAAK,CAAC6B,MAAM,CAAC,EAAIuC,SAAS,CAExE,GAAI,CAAAC,gBAAgB,CAAG7E,yBAAyB,CAAC8E,SAAS,CAC1D,GAAI,IAAI,CAACtE,KAAK,CAACX,UAAU,CAAE,CACzB,KAAM,CAAAA,UAAU,CAAG,IAAI,CAACW,KAAK,CAACX,UAAU,CACxC,GAAIA,UAAU,GAAKhB,UAAU,CAACkG,OAAO,CAAE,CACrCF,gBAAgB,CAAG7E,yBAAyB,CAACgF,WAAW,CAC1D,CAAC,IAAM,IAAInF,UAAU,GAAKhB,UAAU,CAACoG,OAAO,CAAE,CAC5CJ,gBAAgB,CAAG7E,yBAAyB,CAACkF,cAAc,CAC7D,CAAC,IAAM,IAAIrF,UAAU,GAAKhB,UAAU,CAACsG,KAAK,CAAE,CAC1CN,gBAAgB,CAAG7E,yBAAyB,CAACoF,eAAe,CAC9D,CACF,CAGA,KAAM,CAAAlE,MAAM,CAAAiC,MAAA,CAAAC,MAAA,IAA+B,IAAI,CAAC5C,KAAK,CAACU,MAAM,CAAE,CAE5D,CACE,8BAA8B,CAC9B,gBAAgB,CAChB,YAAY,CACZ,MAAM,CACN,oBAAoB,CACpB,QAAQ,CACR,SAAS,CACT,WAAW,CAEd,CAACmE,OAAO,CAAEC,IAAI,EAAI,CACjB,GAAIA,IAAI,GAAI,KAAI,CAAC9E,KAAK,CAAE,CACtBU,MAAM,CAACoE,IAAI,CAAC,CAAG,IAAI,CAAC9E,KAAK,CAAC8E,IAAI,CAAQ,CACxC,CACF,CAAC,CAAC,CAGF,KAAM,CAAAzE,WAAW,CAAAsC,MAAA,CAAAC,MAAA,IACZmC,IAAI,CAAC,IAAI,CAAC/E,KAAK,CAAE,CAClB,QAAQ,CACR,wBAAwB,CACxB,WAAW,CACX,cAAc,CACd,aAAa,CACb,GAAG2C,MAAM,CAACqC,IAAI,CAACtE,MAAM,CAAC,CACvB,CAAC,EACFqD,KAAK,CAAE,CAACrF,OAAO,CAACE,IAAI,CAAE,IAAI,CAACoB,KAAK,CAAC+D,KAAK,CAAC,CACvCkB,UAAU,CAAE,CAACvG,OAAO,CAACY,KAAK,CAAE,IAAI,CAACU,KAAK,CAACiF,UAAU,CAAC,CAClDpD,MAAM,CACNxC,UAAU,CAAEgF,gBAAgB,CAC5B3D,MAAM,CACNwE,cAAc,CAAE,IAAI,CAACnC,6BAA6B,CAClDI,WAAW,CAAE,IAAI,CAACD,kBAAkB,CACpCG,MAAM,CAAE,IAAI,CAACD,aAAa,CAC1BI,OAAO,CAAE,IAAI,CAACF,cAAc,CAC5BI,iBAAiB,CAAE,IAAI,CAACD,wBAAwB,CAChDG,kBAAkB,CAAE,IAAI,CAACD,yBAAyB,EACnD,CAED,MACE,CAAAlF,KAAA,CAACd,IAAI,EAACoG,KAAK,CAAE1D,WAAW,CAAC0D,KAAM,CAAAoB,QAAA,EAC7B5G,IAAA,CAACH,aAAa,CAAAuE,MAAA,CAAAC,MAAA,EAACwC,GAAG,CAAE,IAAI,CAACxF,UAAW,EAAKS,WAAW,EAAE0D,KAAK,CAAE1D,WAAW,CAAC4E,UAAW,GACpF,CAAC,IAAI,CAACpB,aAAa,EAAE,EACjB,CAAC,CAEX,C,CAGF,QAAS,CAAAkB,IAAIA,CAAC/E,KAA0B,CAAEqF,SAAmB,EAC3D,KAAM,CAAAC,MAAM,CAAA3C,MAAA,CAAAC,MAAA,IAAQ5C,KAAK,CAAE,CAC3B,IAAK,KAAM,CAAAuF,QAAQ,GAAI,CAAAF,SAAS,CAAE,CAChC,MAAO,CAAAC,MAAM,CAACC,QAAQ,CAAC,CACzB,CACA,MAAO,CAAAD,MAAM,CACf,CAEA,QAAS,CAAAnB,8BAA8BA,CAAA,EACrC,GAAI,OAAW,CAAC5E,4BAA4B,CAAE,CAC5CA,4BAA4B,CAAG,IAAI,CACnCiG,OAAO,CAACC,GAAG,CACT,+FAA+F,CAC7F,sGAAsG,CACzG,CACH,CACF,CAEA9C,MAAM,CAACC,MAAM,CAAClD,KAAK,CAACgG,SAAS,CAAEzH,aAAa,CAAC,CAG7C,cAAe,CAAAyB,KAAK","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}