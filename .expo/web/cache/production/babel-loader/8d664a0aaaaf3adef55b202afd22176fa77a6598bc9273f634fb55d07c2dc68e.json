{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"blurhash\",\"thumbhash\"];import{Platform}from'expo-modules-core';import resolveAssetSource from'./resolveAssetSource';import{resolveBlurhashString,resolveThumbhashString}from'./resolveHashString';import{isImageRef}from'../utils';export function isBlurhashString(str){return /^(blurhash:\\/)+[\\w#$%*+,\\-.:;=?@[\\]^_{}|~]+(\\/[\\d.]+)*$/.test(str);}export function isThumbhashString(str){return str.startsWith('thumbhash:/');}export function resolveSource(source){if(typeof source==='string'){if(isBlurhashString(source)){return resolveBlurhashString(source);}else if(isThumbhashString(source)){return resolveThumbhashString(source);}return{uri:source};}if(typeof source==='number'){return resolveAssetSource(source);}if(typeof source==='object'&&(source?.blurhash||source?.thumbhash)){const{blurhash,thumbhash}=source,restSource=_objectWithoutPropertiesLoose(source,_excluded);const resolved=thumbhash?resolveThumbhashString(thumbhash):resolveBlurhashString(blurhash);return Object.assign({},resolved,restSource);}return source??null;}export function resolveSources(sources){if(Array.isArray(sources)){return sources.map(resolveSource).filter(Boolean);}if(isImageRef(sources)){if(true){return sources;}return sources.__expo_shared_object_id__;}return[resolveSource(sources)].filter(Boolean);}","map":{"version":3,"names":["Platform","resolveAssetSource","resolveBlurhashString","resolveThumbhashString","isImageRef","isBlurhashString","str","test","isThumbhashString","startsWith","resolveSource","source","uri","blurhash","thumbhash","restSource","_objectWithoutPropertiesLoose","_excluded","resolved","Object","assign","resolveSources","sources","Array","isArray","map","filter","Boolean","__expo_shared_object_id__"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-image/src/utils/resolveSources.tsx"],"sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport resolveAssetSource from './resolveAssetSource';\nimport { resolveBlurhashString, resolveThumbhashString } from './resolveHashString';\nimport { ImageNativeProps, ImageProps, ImageSource } from '../Image.types';\nimport { isImageRef } from '../utils';\n\nexport function isBlurhashString(str: string): boolean {\n  return /^(blurhash:\\/)+[\\w#$%*+,\\-.:;=?@[\\]^_{}|~]+(\\/[\\d.]+)*$/.test(str);\n}\n\n// Base64 strings will be recognized as blurhash by default (to keep compatibility),\n// interpret as thumbhash only if correct uri scheme is provided\nexport function isThumbhashString(str: string): boolean {\n  return str.startsWith('thumbhash:/');\n}\n\nexport function resolveSource(source?: ImageSource | string | number | null): ImageSource | null {\n  if (typeof source === 'string') {\n    if (isBlurhashString(source)) {\n      return resolveBlurhashString(source);\n    } else if (isThumbhashString(source)) {\n      return resolveThumbhashString(source);\n    }\n    return { uri: source };\n  }\n  if (typeof source === 'number') {\n    return resolveAssetSource(source);\n  }\n  if (typeof source === 'object' && (source?.blurhash || source?.thumbhash)) {\n    const { blurhash, thumbhash, ...restSource } = source;\n    const resolved = thumbhash\n      ? resolveThumbhashString(thumbhash)\n      : resolveBlurhashString(blurhash as string);\n    return {\n      ...resolved,\n      ...restSource,\n    };\n  }\n  return source ?? null;\n}\n\n/**\n * Resolves provided `source` prop to an array of objects expected by the native implementation.\n */\nexport function resolveSources(sources?: ImageProps['source']): ImageNativeProps['source'] {\n  if (Array.isArray(sources)) {\n    return sources.map(resolveSource).filter(Boolean) as ImageSource[];\n  }\n  if (isImageRef(sources)) {\n    if (Platform.OS === 'web') {\n      return sources;\n    }\n    // @ts-expect-error\n    return sources.__expo_shared_object_id__;\n  }\n  return [resolveSource(sources)].filter(Boolean) as ImageSource[];\n}\n"],"mappings":"wIAAA,OAASA,QAAQ,KAAQ,mBAAmB,CAE5C,MAAO,CAAAC,kBAAkB,KAAM,sBAAsB,CACrD,OAASC,qBAAqB,CAAEC,sBAAsB,KAAQ,qBAAqB,CAEnF,OAASC,UAAU,KAAQ,UAAU,CAErC,MAAO,SAAS,CAAAC,gBAAgBA,CAACC,GAAW,CAAW,CACrD,MAAO,0DAAyD,CAACC,IAAI,CAACD,GAAG,CAAC,CAC5E,CAIA,MAAO,SAAS,CAAAE,iBAAiBA,CAACF,GAAW,CAAW,CACtD,MAAO,CAAAA,GAAG,CAACG,UAAU,CAAC,aAAa,CAAC,CACtC,CAEA,MAAO,SAAS,CAAAC,aAAaA,CAACC,MAA6C,CAAsB,CAC/F,GAAI,MAAO,CAAAA,MAAM,GAAK,QAAQ,CAAE,CAC9B,GAAIN,gBAAgB,CAACM,MAAM,CAAC,CAAE,CAC5B,MAAO,CAAAT,qBAAqB,CAACS,MAAM,CAAC,CACtC,CAAC,IAAM,IAAIH,iBAAiB,CAACG,MAAM,CAAC,CAAE,CACpC,MAAO,CAAAR,sBAAsB,CAACQ,MAAM,CAAC,CACvC,CACA,MAAO,CAAEC,GAAG,CAAED,MAAO,CAAC,CACxB,CACA,GAAI,MAAO,CAAAA,MAAM,GAAK,QAAQ,CAAE,CAC9B,MAAO,CAAAV,kBAAkB,CAACU,MAAM,CAAC,CACnC,CACA,GAAI,MAAO,CAAAA,MAAM,GAAK,QAAQ,GAAKA,MAAM,EAAEE,QAAQ,EAAIF,MAAM,EAAEG,SAAS,CAAC,CAAE,CACzE,KAAM,CAAED,QAAQ,CAAEC,SAAyB,CAAC,CAAGH,MAAM,CAArBI,UAAU,CAAAC,6BAAA,CAAKL,MAAM,CAAAM,SAAA,EACrD,KAAM,CAAAC,QAAQ,CAAGJ,SAAS,CACtBX,sBAAsB,CAACW,SAAS,CAAC,CACjCZ,qBAAqB,CAACW,QAAkB,CAAC,CAC7C,OAAAM,MAAA,CAAAC,MAAA,IACKF,QAAQ,CACRH,UAAU,EAEjB,CACA,MAAO,CAAAJ,MAAM,EAAI,IAAI,CACvB,CAKA,MAAO,SAAS,CAAAU,cAAcA,CAACC,OAA8B,CAA8B,CACzF,GAAIC,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,CAAE,CAC1B,MAAO,CAAAA,OAAO,CAACG,GAAG,CAACf,aAAa,CAAC,CAACgB,MAAM,CAACC,OAAO,CAAC,CACnD,CACA,GAAIvB,UAAU,CAACkB,OAAO,CAAC,CAAE,CACvB,QAA2B,CACzB,MAAO,CAAAA,OAAO,CAChB,CAEA,MAAO,CAAAA,OAAO,CAACM,yBAAyB,CAC1C,CACA,MAAO,CAAClB,aAAa,CAACY,OAAO,CAAC,CAAC,CAACI,MAAM,CAACC,OAAO,CAAC,CACjD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}