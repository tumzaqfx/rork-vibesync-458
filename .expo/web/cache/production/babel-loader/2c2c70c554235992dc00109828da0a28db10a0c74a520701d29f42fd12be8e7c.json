{"ast":null,"code":"\"use strict\";import*as React from'react';import{isArrayEqual}from\"./isArrayEqual.js\";import{NavigationBuilderContext}from\"./NavigationBuilderContext.js\";import{NavigationRouteContext}from\"./NavigationRouteContext.js\";export function useOnGetState({getState,getStateListeners}){const{addKeyedListener}=React.useContext(NavigationBuilderContext);const route=React.useContext(NavigationRouteContext);const key=route?route.key:'root';const getRehydratedState=React.useCallback(()=>{const state=getState();const routes=state.routes.map(route=>{const childState=getStateListeners[route.key]?.();if(route.state===childState){return route;}return Object.assign({},route,{state:childState});});if(isArrayEqual(state.routes,routes)){return state;}return Object.assign({},state,{routes});},[getState,getStateListeners]);React.useEffect(()=>{return addKeyedListener?.('getState',key,getRehydratedState);},[addKeyedListener,getRehydratedState,key]);}","map":{"version":3,"names":["React","isArrayEqual","NavigationBuilderContext","NavigationRouteContext","useOnGetState","getState","getStateListeners","addKeyedListener","useContext","route","key","getRehydratedState","useCallback","state","routes","map","childState","Object","assign","useEffect"],"sources":["/home/user/rork-vibesync-458/node_modules/@react-navigation/core/src/useOnGetState.tsx"],"sourcesContent":["import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport { isArrayEqual } from './isArrayEqual';\nimport {\n  type GetStateListener,\n  NavigationBuilderContext,\n} from './NavigationBuilderContext';\nimport { NavigationRouteContext } from './NavigationRouteContext';\n\ntype Options = {\n  getState: () => NavigationState;\n  getStateListeners: Record<string, GetStateListener | undefined>;\n};\n\nexport function useOnGetState({ getState, getStateListeners }: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateListeners[route.key]?.();\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateListeners]);\n\n  React.useEffect(() => {\n    return addKeyedListener?.('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}\n"],"mappings":"aACA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAE9B,OAASC,YAAY,KAAQ,mBAAgB,CAC7C,OAEEC,wBAAwB,KACnB,+BAA4B,CACnC,OAASC,sBAAsB,KAAQ,6BAA0B,CAOjE,MAAO,SAAS,CAAAC,aAAaA,CAAC,CAAEC,QAAQ,CAAEC,iBAA2B,CAAC,CAAE,CACtE,KAAM,CAAEC,gBAAiB,CAAC,CAAGP,KAAK,CAACQ,UAAU,CAACN,wBAAwB,CAAC,CACvE,KAAM,CAAAO,KAAK,CAAGT,KAAK,CAACQ,UAAU,CAACL,sBAAsB,CAAC,CACtD,KAAM,CAAAO,GAAG,CAAGD,KAAK,CAAGA,KAAK,CAACC,GAAG,CAAG,MAAM,CAEtC,KAAM,CAAAC,kBAAkB,CAAGX,KAAK,CAACY,WAAW,CAAC,IAAM,CACjD,KAAM,CAAAC,KAAK,CAAGR,QAAQ,CAAC,CAAC,CAGxB,KAAM,CAAAS,MAAM,CAAGD,KAAK,CAACC,MAAM,CAACC,GAAG,CAAEN,KAAK,EAAK,CACzC,KAAM,CAAAO,UAAU,CAAGV,iBAAiB,CAACG,KAAK,CAACC,GAAG,CAAC,GAAG,CAAC,CAEnD,GAAID,KAAK,CAACI,KAAK,GAAKG,UAAU,CAAE,CAC9B,MAAO,CAAAP,KAAK,CACd,CAEA,OAAAQ,MAAA,CAAAC,MAAA,IAAYT,KAAK,EAAEI,KAAK,CAAEG,UAAA,GAC5B,CAAC,CAAC,CAEF,GAAIf,YAAY,CAACY,KAAK,CAACC,MAAM,CAAEA,MAAM,CAAC,CAAE,CACtC,MAAO,CAAAD,KAAK,CACd,CAEA,OAAAI,MAAA,CAAAC,MAAA,IAAYL,KAAK,EAAEC,MAAA,GACrB,CAAC,CAAE,CAACT,QAAQ,CAAEC,iBAAiB,CAAC,CAAC,CAEjCN,KAAK,CAACmB,SAAS,CAAC,IAAM,CACpB,MAAO,CAAAZ,gBAAgB,GAAG,UAAU,CAAEG,GAAG,CAAEC,kBAAkB,CAAC,CAChE,CAAC,CAAE,CAACJ,gBAAgB,CAAEI,kBAAkB,CAAED,GAAG,CAAC,CAAC,CACjD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}