{"ast":null,"code":"import{isFabric,tagMessage}from'../../../utils';import{getShadowNodeFromRef}from'../../../getShadowNodeFromRef';import{useCallback}from'react';import findNodeHandle from'../../../findNodeHandle';export function useViewRefHandler(state,updateAttachedGestures){const refHandler=useCallback(ref=>{if(ref===null){return;}state.viewRef=ref;if(state.previousViewTag===-1){state.previousViewTag=findNodeHandle(state.viewRef);}if(!state.firstRender){updateAttachedGestures(true);}if(false&&isFabric()&&global.isViewFlatteningDisabled){const node=getShadowNodeFromRef(ref);if(global.isViewFlatteningDisabled(node)===false){console.error(tagMessage('GestureDetector has received a child that may get view-flattened. '+'\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'));}}},[state,updateAttachedGestures]);return refHandler;}","map":{"version":3,"names":["isFabric","tagMessage","getShadowNodeFromRef","useCallback","findNodeHandle","useViewRefHandler","state","updateAttachedGestures","refHandler","ref","viewRef","previousViewTag","firstRender","global","isViewFlatteningDisabled","node","console","error"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/GestureDetector/useViewRefHandler.ts"],"sourcesContent":["import { isFabric, tagMessage } from '../../../utils';\nimport { getShadowNodeFromRef } from '../../../getShadowNodeFromRef';\n\nimport { GestureDetectorState } from './types';\nimport React, { useCallback } from 'react';\nimport findNodeHandle from '../../../findNodeHandle';\n\ndeclare const global: {\n  isViewFlatteningDisabled: (node: unknown) => boolean | null; // JSI function\n};\n\n// Ref handler for the Wrap component attached under the GestureDetector.\n// It's responsible for setting the viewRef on the state and triggering the reattaching of handlers\n// if the view has changed.\nexport function useViewRefHandler(\n  state: GestureDetectorState,\n  updateAttachedGestures: (skipConfigUpdate?: boolean) => void\n) {\n  const refHandler = useCallback(\n    (ref: React.Component | null) => {\n      if (ref === null) {\n        return;\n      }\n\n      state.viewRef = ref;\n\n      // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed\n      if (state.previousViewTag === -1) {\n        state.previousViewTag = findNodeHandle(state.viewRef) as number;\n      }\n\n      // Pass true as `skipConfigUpdate`. Here we only want to trigger the eventual reattaching of handlers\n      // in case the view has changed. If the view doesn't change, the update will be handled by detector.\n      if (!state.firstRender) {\n        updateAttachedGestures(true);\n      }\n\n      if (__DEV__ && isFabric() && global.isViewFlatteningDisabled) {\n        const node = getShadowNodeFromRef(ref);\n        if (global.isViewFlatteningDisabled(node) === false) {\n          console.error(\n            tagMessage(\n              'GestureDetector has received a child that may get view-flattened. ' +\n                '\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'\n            )\n          );\n        }\n      }\n    },\n    [state, updateAttachedGestures]\n  );\n\n  return refHandler;\n}\n"],"mappings":"AAAA,OAASA,QAAT,CAAmBC,UAAnB,KAAqC,gBAArC,CACA,OAASC,oBAAT,KAAqC,+BAArC,CAGA,OAAgBC,WAAhB,KAAmC,OAAnC,CACA,MAAO,CAAAC,cAAP,KAA2B,yBAA3B,CASA,MAAO,SAAS,CAAAC,iBAATA,CACLC,KADK,CAELC,sBAFK,CAGL,CACA,KAAM,CAAAC,UAAU,CAAGL,WAAW,CAC3BM,GAAD,EAAiC,CAC/B,GAAIA,GAAG,GAAK,IAAZ,CAAkB,CAChB,OACD,CAEDH,KAAK,CAACI,OAAN,CAAgBD,GAAhB,CAGA,GAAIH,KAAK,CAACK,eAAN,GAA0B,CAAC,CAA/B,CAAkC,CAChCL,KAAK,CAACK,eAAN,CAAwBP,cAAc,CAACE,KAAK,CAACI,OAAP,CAAtC,CACD,CAID,GAAI,CAACJ,KAAK,CAACM,WAAX,CAAwB,CACtBL,sBAAsB,CAAC,IAAD,CAAtB,CACD,CAED,GAAI,OAAWP,QAAQ,EAAnB,EAAyBa,MAAM,CAACC,wBAApC,CAA8D,CAC5D,KAAM,CAAAC,IAAI,CAAGb,oBAAoB,CAACO,GAAD,CAAjC,CACA,GAAII,MAAM,CAACC,wBAAP,CAAgCC,IAAhC,IAA0C,KAA9C,CAAqD,CACnDC,OAAO,CAACC,KAAR,CACEhB,UAAU,CACR,qEACE,kGAFM,CADZ,EAMD,CACF,CACF,CA9B2B,CA+B5B,CAACK,KAAD,CAAQC,sBAAR,CA/B4B,CAA9B,CAkCA,MAAO,CAAAC,UAAP,CACD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}