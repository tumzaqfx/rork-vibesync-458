{"ast":null,"code":"import*as FileSystem from'expo-file-system';import{manipulateAsync,SaveFormat}from'expo-image-manipulator';export async function compressImage(uri,quality=0.8){try{console.log('[MediaUpload] Compressing image:',uri);const manipResult=await manipulateAsync(uri,[{resize:{width:1080}}],{compress:quality,format:SaveFormat.JPEG});const fileInfo=await FileSystem.getInfoAsync(manipResult.uri);return{uri:manipResult.uri,size:fileInfo.size||0,width:manipResult.width,height:manipResult.height};}catch(error){console.error('[MediaUpload] Image compression error:',error);throw new Error('Failed to compress image');}}export async function uploadMedia(uri,type,options={}){const{onProgress,maxRetries=3,timeout=30000,compressionQuality=0.8}=options;let attempt=0;let lastError=null;while(attempt<maxRetries){try{console.log(`[MediaUpload] Upload attempt ${attempt+1}/${maxRetries}`);let processedUri=uri;let fileSize=0;let dimensions={};if(type==='photo'){const compressed=await compressImage(uri,compressionQuality);processedUri=compressed.uri;fileSize=compressed.size;dimensions={width:compressed.width,height:compressed.height};}else{const fileInfo=await FileSystem.getInfoAsync(uri);fileSize=fileInfo.size||0;}const result=await simulateUpload(processedUri,fileSize,onProgress,timeout);console.log('[MediaUpload] Upload successful:',result);return Object.assign({},result,dimensions);}catch(error){lastError=error;attempt++;if(attempt<maxRetries){const delay=Math.min(1000*Math.pow(2,attempt),5000);console.log(`[MediaUpload] Retrying in ${delay}ms...`);await new Promise(resolve=>setTimeout(resolve,delay));}}}throw lastError||new Error('Upload failed after maximum retries');}async function simulateUpload(uri,fileSize,onProgress,timeout=30000){return new Promise((resolve,reject)=>{let progress=0;const chunkSize=5;let currentChunk=0;const timeoutId=setTimeout(()=>{clearInterval(intervalId);reject(new Error('Upload timeout'));},timeout);const intervalId=setInterval(()=>{currentChunk++;progress=Math.min(currentChunk*chunkSize,100);onProgress?.(progress);if(progress>=100){clearInterval(intervalId);clearTimeout(timeoutId);setTimeout(()=>{resolve({uri,size:fileSize});},500);}},150);});}export async function uploadVoiceNote(uri,duration,options={}){const{onProgress,maxRetries=3,timeout=20000}=options;let attempt=0;let lastError=null;while(attempt<maxRetries){try{console.log(`[MediaUpload] Voice upload attempt ${attempt+1}/${maxRetries}`);const fileInfo=await FileSystem.getInfoAsync(uri);const fileSize=fileInfo.size||0;const result=await simulateUpload(uri,fileSize,onProgress,timeout);console.log('[MediaUpload] Voice upload successful:',result);return Object.assign({},result,{duration});}catch(error){lastError=error;attempt++;if(attempt<maxRetries){const delay=Math.min(1000*Math.pow(2,attempt),5000);console.log(`[MediaUpload] Retrying in ${delay}ms...`);await new Promise(resolve=>setTimeout(resolve,delay));}}}throw lastError||new Error('Voice upload failed after maximum retries');}export function formatFileSize(bytes){if(bytes===0)return'0 Bytes';const k=1024;const sizes=['Bytes','KB','MB','GB'];const i=Math.floor(Math.log(bytes)/Math.log(k));return Math.round(bytes/Math.pow(k,i)*100)/100+' '+sizes[i];}export function validateMediaFile(uri,type,maxSize=50*1024*1024){return new Promise(async resolve=>{try{const fileInfo=await FileSystem.getInfoAsync(uri);const fileSize=fileInfo.size||0;if(fileSize>maxSize){console.warn('[MediaUpload] File too large:',formatFileSize(fileSize));resolve(false);return;}resolve(true);}catch(error){console.error('[MediaUpload] Validation error:',error);resolve(false);}});}","map":{"version":3,"names":["FileSystem","manipulateAsync","SaveFormat","compressImage","uri","quality","console","log","manipResult","resize","width","compress","format","JPEG","fileInfo","getInfoAsync","size","height","error","Error","uploadMedia","type","options","onProgress","maxRetries","timeout","compressionQuality","attempt","lastError","processedUri","fileSize","dimensions","compressed","result","simulateUpload","Object","assign","delay","Math","min","pow","Promise","resolve","setTimeout","reject","progress","chunkSize","currentChunk","timeoutId","clearInterval","intervalId","setInterval","clearTimeout","uploadVoiceNote","duration","formatFileSize","bytes","k","sizes","i","floor","round","validateMediaFile","maxSize","warn"],"sources":["/home/user/rork-vibesync-458/utils/media-upload.ts"],"sourcesContent":["import * as FileSystem from 'expo-file-system';\nimport { manipulateAsync, SaveFormat } from 'expo-image-manipulator';\n\nexport interface UploadOptions {\n  onProgress?: (progress: number) => void;\n  maxRetries?: number;\n  timeout?: number;\n  compressionQuality?: number;\n}\n\nexport interface MediaUploadResult {\n  uri: string;\n  size: number;\n  width?: number;\n  height?: number;\n  duration?: number;\n}\n\nexport async function compressImage(\n  uri: string,\n  quality: number = 0.8\n): Promise<MediaUploadResult> {\n  try {\n    console.log('[MediaUpload] Compressing image:', uri);\n\n    const manipResult = await manipulateAsync(\n      uri,\n      [{ resize: { width: 1080 } }],\n      { compress: quality, format: SaveFormat.JPEG }\n    );\n\n    const fileInfo = await FileSystem.getInfoAsync(manipResult.uri);\n    \n    return {\n      uri: manipResult.uri,\n      size: (fileInfo as any).size || 0,\n      width: manipResult.width,\n      height: manipResult.height,\n    };\n  } catch (error) {\n    console.error('[MediaUpload] Image compression error:', error);\n    throw new Error('Failed to compress image');\n  }\n}\n\nexport async function uploadMedia(\n  uri: string,\n  type: 'photo' | 'video',\n  options: UploadOptions = {}\n): Promise<MediaUploadResult> {\n  const {\n    onProgress,\n    maxRetries = 3,\n    timeout = 30000,\n    compressionQuality = 0.8,\n  } = options;\n\n  let attempt = 0;\n  let lastError: Error | null = null;\n\n  while (attempt < maxRetries) {\n    try {\n      console.log(`[MediaUpload] Upload attempt ${attempt + 1}/${maxRetries}`);\n\n      let processedUri = uri;\n      let fileSize = 0;\n      let dimensions = {};\n\n      if (type === 'photo') {\n        const compressed = await compressImage(uri, compressionQuality);\n        processedUri = compressed.uri;\n        fileSize = compressed.size;\n        dimensions = { width: compressed.width, height: compressed.height };\n      } else {\n        const fileInfo = await FileSystem.getInfoAsync(uri);\n        fileSize = (fileInfo as any).size || 0;\n      }\n\n      const result = await simulateUpload(processedUri, fileSize, onProgress, timeout);\n\n      console.log('[MediaUpload] Upload successful:', result);\n      return { ...result, ...dimensions };\n    } catch (error) {\n      lastError = error as Error;\n      attempt++;\n      \n      if (attempt < maxRetries) {\n        const delay = Math.min(1000 * Math.pow(2, attempt), 5000);\n        console.log(`[MediaUpload] Retrying in ${delay}ms...`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n\n  throw lastError || new Error('Upload failed after maximum retries');\n}\n\nasync function simulateUpload(\n  uri: string,\n  fileSize: number,\n  onProgress?: (progress: number) => void,\n  timeout: number = 30000\n): Promise<MediaUploadResult> {\n  return new Promise((resolve, reject) => {\n    let progress = 0;\n    const chunkSize = 5;\n    let currentChunk = 0;\n\n    const timeoutId = setTimeout(() => {\n      clearInterval(intervalId);\n      reject(new Error('Upload timeout'));\n    }, timeout);\n\n    const intervalId = setInterval(() => {\n      currentChunk++;\n      progress = Math.min(currentChunk * chunkSize, 100);\n      \n      onProgress?.(progress);\n\n      if (progress >= 100) {\n        clearInterval(intervalId);\n        clearTimeout(timeoutId);\n        \n        setTimeout(() => {\n          resolve({\n            uri,\n            size: fileSize,\n          });\n        }, 500);\n      }\n    }, 150);\n  });\n}\n\nexport async function uploadVoiceNote(\n  uri: string,\n  duration: number,\n  options: UploadOptions = {}\n): Promise<MediaUploadResult> {\n  const { onProgress, maxRetries = 3, timeout = 20000 } = options;\n\n  let attempt = 0;\n  let lastError: Error | null = null;\n\n  while (attempt < maxRetries) {\n    try {\n      console.log(`[MediaUpload] Voice upload attempt ${attempt + 1}/${maxRetries}`);\n\n      const fileInfo = await FileSystem.getInfoAsync(uri);\n      const fileSize = (fileInfo as any).size || 0;\n\n      const result = await simulateUpload(uri, fileSize, onProgress, timeout);\n\n      console.log('[MediaUpload] Voice upload successful:', result);\n      return { ...result, duration };\n    } catch (error) {\n      lastError = error as Error;\n      attempt++;\n      \n      if (attempt < maxRetries) {\n        const delay = Math.min(1000 * Math.pow(2, attempt), 5000);\n        console.log(`[MediaUpload] Retrying in ${delay}ms...`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n\n  throw lastError || new Error('Voice upload failed after maximum retries');\n}\n\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return Math.round((bytes / Math.pow(k, i)) * 100) / 100 + ' ' + sizes[i];\n}\n\nexport function validateMediaFile(\n  uri: string,\n  type: 'photo' | 'video' | 'voice',\n  maxSize: number = 50 * 1024 * 1024\n): Promise<boolean> {\n  return new Promise(async (resolve) => {\n    try {\n      const fileInfo = await FileSystem.getInfoAsync(uri);\n      const fileSize = (fileInfo as any).size || 0;\n\n      if (fileSize > maxSize) {\n        console.warn('[MediaUpload] File too large:', formatFileSize(fileSize));\n        resolve(false);\n        return;\n      }\n\n      resolve(true);\n    } catch (error) {\n      console.error('[MediaUpload] Validation error:', error);\n      resolve(false);\n    }\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}