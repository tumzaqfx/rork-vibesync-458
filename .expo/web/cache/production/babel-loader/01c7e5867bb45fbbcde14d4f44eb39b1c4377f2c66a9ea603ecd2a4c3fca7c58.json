{"ast":null,"code":"function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import{Component}from'react';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import I18nManager from\"react-native-web/dist/exports/I18nManager\";import{PanGestureHandler}from'../handlers/PanGestureHandler';import{TapGestureHandler}from'../handlers/TapGestureHandler';import{State}from'../State';const DRAG_TOSS=0.05;export default class Swipeable extends Component{constructor(_props){super(_props);_defineProperty(this,\"onGestureEvent\",void 0);_defineProperty(this,\"transX\",void 0);_defineProperty(this,\"showLeftAction\",void 0);_defineProperty(this,\"leftActionTranslate\",void 0);_defineProperty(this,\"showRightAction\",void 0);_defineProperty(this,\"rightActionTranslate\",void 0);_defineProperty(this,\"updateAnimatedEvent\",(props,state)=>{const{friction,overshootFriction}=props;const{dragX,rowTranslation,leftWidth=0,rowWidth=0}=state;const{rightOffset=rowWidth}=state;const rightWidth=Math.max(0,rowWidth-rightOffset);const{overshootLeft=leftWidth>0,overshootRight=rightWidth>0}=props;const transX=Animated.add(rowTranslation,dragX.interpolate({inputRange:[0,friction],outputRange:[0,1]})).interpolate({inputRange:[-rightWidth-1,-rightWidth,leftWidth,leftWidth+1],outputRange:[-rightWidth-(overshootRight?1/overshootFriction:0),-rightWidth,leftWidth,leftWidth+(overshootLeft?1/overshootFriction:0)]});this.transX=transX;this.showLeftAction=leftWidth>0?transX.interpolate({inputRange:[-1,0,leftWidth],outputRange:[0,0,1]}):new Animated.Value(0);this.leftActionTranslate=this.showLeftAction.interpolate({inputRange:[0,Number.MIN_VALUE],outputRange:[-10000,0],extrapolate:'clamp'});this.showRightAction=rightWidth>0?transX.interpolate({inputRange:[-rightWidth,0,1],outputRange:[1,0,0]}):new Animated.Value(0);this.rightActionTranslate=this.showRightAction.interpolate({inputRange:[0,Number.MIN_VALUE],outputRange:[-10000,0],extrapolate:'clamp'});});_defineProperty(this,\"onTapHandlerStateChange\",({nativeEvent})=>{if(nativeEvent.oldState===State.ACTIVE){this.close();}});_defineProperty(this,\"onHandlerStateChange\",ev=>{if(ev.nativeEvent.oldState===State.ACTIVE){this.handleRelease(ev);}if(ev.nativeEvent.state===State.ACTIVE){const{velocityX,translationX:dragX}=ev.nativeEvent;const{rowState}=this.state;const{friction}=this.props;const translationX=(dragX+DRAG_TOSS*velocityX)/friction;const direction=rowState===-1?'right':rowState===1?'left':translationX>0?'left':'right';if(rowState===0){var _this$props$onSwipeab,_this$props;(_this$props$onSwipeab=(_this$props=this.props).onSwipeableOpenStartDrag)===null||_this$props$onSwipeab===void 0?void 0:_this$props$onSwipeab.call(_this$props,direction);}else{var _this$props$onSwipeab2,_this$props2;(_this$props$onSwipeab2=(_this$props2=this.props).onSwipeableCloseStartDrag)===null||_this$props$onSwipeab2===void 0?void 0:_this$props$onSwipeab2.call(_this$props2,direction);}}});_defineProperty(this,\"handleRelease\",ev=>{const{velocityX,translationX:dragX}=ev.nativeEvent;const{leftWidth=0,rowWidth=0,rowState}=this.state;const{rightOffset=rowWidth}=this.state;const rightWidth=rowWidth-rightOffset;const{friction,leftThreshold=leftWidth/2,rightThreshold=rightWidth/2}=this.props;const startOffsetX=this.currentOffset()+dragX/friction;const translationX=(dragX+DRAG_TOSS*velocityX)/friction;let toValue=0;if(rowState===0){if(translationX>leftThreshold){toValue=leftWidth;}else if(translationX<-rightThreshold){toValue=-rightWidth;}}else if(rowState===1){if(translationX>-leftThreshold){toValue=leftWidth;}}else{if(translationX<rightThreshold){toValue=-rightWidth;}}this.animateRow(startOffsetX,toValue,velocityX/friction);});_defineProperty(this,\"animateRow\",(fromValue,toValue,velocityX)=>{const{dragX,rowTranslation}=this.state;dragX.setValue(0);rowTranslation.setValue(fromValue);this.setState({rowState:Math.sign(toValue)});Animated.spring(rowTranslation,Object.assign({restSpeedThreshold:1.7,restDisplacementThreshold:0.4,velocity:velocityX,bounciness:0,toValue,useNativeDriver:this.props.useNativeAnimations},this.props.animationOptions)).start(({finished})=>{if(finished){if(toValue>0){var _this$props$onSwipeab3,_this$props3,_this$props$onSwipeab4,_this$props4;(_this$props$onSwipeab3=(_this$props3=this.props).onSwipeableLeftOpen)===null||_this$props$onSwipeab3===void 0?void 0:_this$props$onSwipeab3.call(_this$props3);(_this$props$onSwipeab4=(_this$props4=this.props).onSwipeableOpen)===null||_this$props$onSwipeab4===void 0?void 0:_this$props$onSwipeab4.call(_this$props4,'left',this);}else if(toValue<0){var _this$props$onSwipeab5,_this$props5,_this$props$onSwipeab6,_this$props6;(_this$props$onSwipeab5=(_this$props5=this.props).onSwipeableRightOpen)===null||_this$props$onSwipeab5===void 0?void 0:_this$props$onSwipeab5.call(_this$props5);(_this$props$onSwipeab6=(_this$props6=this.props).onSwipeableOpen)===null||_this$props$onSwipeab6===void 0?void 0:_this$props$onSwipeab6.call(_this$props6,'right',this);}else{var _this$props$onSwipeab7,_this$props7;const closingDirection=fromValue>0?'left':'right';(_this$props$onSwipeab7=(_this$props7=this.props).onSwipeableClose)===null||_this$props$onSwipeab7===void 0?void 0:_this$props$onSwipeab7.call(_this$props7,closingDirection,this);}}});if(toValue>0){var _this$props$onSwipeab8,_this$props8,_this$props$onSwipeab9,_this$props9;(_this$props$onSwipeab8=(_this$props8=this.props).onSwipeableLeftWillOpen)===null||_this$props$onSwipeab8===void 0?void 0:_this$props$onSwipeab8.call(_this$props8);(_this$props$onSwipeab9=(_this$props9=this.props).onSwipeableWillOpen)===null||_this$props$onSwipeab9===void 0?void 0:_this$props$onSwipeab9.call(_this$props9,'left');}else if(toValue<0){var _this$props$onSwipeab10,_this$props10,_this$props$onSwipeab11,_this$props11;(_this$props$onSwipeab10=(_this$props10=this.props).onSwipeableRightWillOpen)===null||_this$props$onSwipeab10===void 0?void 0:_this$props$onSwipeab10.call(_this$props10);(_this$props$onSwipeab11=(_this$props11=this.props).onSwipeableWillOpen)===null||_this$props$onSwipeab11===void 0?void 0:_this$props$onSwipeab11.call(_this$props11,'right');}else{var _this$props$onSwipeab12,_this$props12;const closingDirection=fromValue>0?'left':'right';(_this$props$onSwipeab12=(_this$props12=this.props).onSwipeableWillClose)===null||_this$props$onSwipeab12===void 0?void 0:_this$props$onSwipeab12.call(_this$props12,closingDirection);}});_defineProperty(this,\"onRowLayout\",({nativeEvent})=>{this.setState({rowWidth:nativeEvent.layout.width});});_defineProperty(this,\"currentOffset\",()=>{const{leftWidth=0,rowWidth=0,rowState}=this.state;const{rightOffset=rowWidth}=this.state;const rightWidth=rowWidth-rightOffset;if(rowState===1){return leftWidth;}else if(rowState===-1){return-rightWidth;}return 0;});_defineProperty(this,\"close\",()=>{this.animateRow(this.currentOffset(),0);});_defineProperty(this,\"openLeft\",()=>{const{leftWidth=0}=this.state;this.animateRow(this.currentOffset(),leftWidth);});_defineProperty(this,\"openRight\",()=>{const{rowWidth=0}=this.state;const{rightOffset=rowWidth}=this.state;const rightWidth=rowWidth-rightOffset;this.animateRow(this.currentOffset(),-rightWidth);});_defineProperty(this,\"reset\",()=>{const{dragX,rowTranslation}=this.state;dragX.setValue(0);rowTranslation.setValue(0);this.setState({rowState:0});});const _dragX=new Animated.Value(0);this.state={dragX:_dragX,rowTranslation:new Animated.Value(0),rowState:0,leftWidth:undefined,rightOffset:undefined,rowWidth:undefined};this.updateAnimatedEvent(_props,this.state);this.onGestureEvent=Animated.event([{nativeEvent:{translationX:_dragX}}],{useNativeDriver:_props.useNativeAnimations});}shouldComponentUpdate(props,state){if(this.props.friction!==props.friction||this.props.overshootLeft!==props.overshootLeft||this.props.overshootRight!==props.overshootRight||this.props.overshootFriction!==props.overshootFriction||this.state.leftWidth!==state.leftWidth||this.state.rightOffset!==state.rightOffset||this.state.rowWidth!==state.rowWidth){this.updateAnimatedEvent(props,state);}return true;}render(){const{rowState}=this.state;const{children,renderLeftActions,renderRightActions,dragOffsetFromLeftEdge=10,dragOffsetFromRightEdge=10}=this.props;const left=renderLeftActions&&React.createElement(Animated.View,{style:[styles.leftActions,{transform:[{translateX:this.leftActionTranslate}]}]},renderLeftActions(this.showLeftAction,this.transX,this),React.createElement(View,{onLayout:({nativeEvent})=>this.setState({leftWidth:nativeEvent.layout.x})}));const right=renderRightActions&&React.createElement(Animated.View,{style:[styles.rightActions,{transform:[{translateX:this.rightActionTranslate}]}]},renderRightActions(this.showRightAction,this.transX,this),React.createElement(View,{onLayout:({nativeEvent})=>this.setState({rightOffset:nativeEvent.layout.x})}));return React.createElement(PanGestureHandler,_extends({activeOffsetX:[-dragOffsetFromRightEdge,dragOffsetFromLeftEdge],touchAction:\"pan-y\"},this.props,{onGestureEvent:this.onGestureEvent,onHandlerStateChange:this.onHandlerStateChange}),React.createElement(Animated.View,{onLayout:this.onRowLayout,style:[styles.container,this.props.containerStyle]},left,right,React.createElement(TapGestureHandler,{enabled:rowState!==0,touchAction:\"pan-y\",onHandlerStateChange:this.onTapHandlerStateChange},React.createElement(Animated.View,{pointerEvents:rowState===0?'auto':'box-only',style:[{transform:[{translateX:this.transX}]},this.props.childrenContainerStyle]},children))));}}_defineProperty(Swipeable,\"defaultProps\",{friction:1,overshootFriction:1,useNativeAnimations:true});const styles=StyleSheet.create({container:{overflow:'hidden'},leftActions:Object.assign({},StyleSheet.absoluteFillObject,{flexDirection:I18nManager.isRTL?'row-reverse':'row'}),rightActions:Object.assign({},StyleSheet.absoluteFillObject,{flexDirection:I18nManager.isRTL?'row':'row-reverse'})});","map":{"version":3,"names":["React","Component","Animated","StyleSheet","View","I18nManager","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","Swipeable","constructor","_props","_defineProperty","props","state","friction","overshootFriction","dragX","rowTranslation","leftWidth","rowWidth","rightOffset","rightWidth","Math","max","overshootLeft","overshootRight","transX","add","interpolate","inputRange","outputRange","showLeftAction","Value","leftActionTranslate","Number","MIN_VALUE","extrapolate","showRightAction","rightActionTranslate","nativeEvent","oldState","ACTIVE","close","ev","handleRelease","velocityX","translationX","rowState","direction","_this$props$onSwipeab","_this$props","onSwipeableOpenStartDrag","call","_this$props$onSwipeab2","_this$props2","onSwipeableCloseStartDrag","leftThreshold","rightThreshold","startOffsetX","currentOffset","toValue","animateRow","fromValue","setValue","setState","sign","spring","Object","assign","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","useNativeAnimations","animationOptions","start","finished","_this$props$onSwipeab3","_this$props3","_this$props$onSwipeab4","_this$props4","onSwipeableLeftOpen","onSwipeableOpen","_this$props$onSwipeab5","_this$props5","_this$props$onSwipeab6","_this$props6","onSwipeableRightOpen","_this$props$onSwipeab7","_this$props7","closingDirection","onSwipeableClose","_this$props$onSwipeab8","_this$props8","_this$props$onSwipeab9","_this$props9","onSwipeableLeftWillOpen","onSwipeableWillOpen","_this$props$onSwipeab10","_this$props10","_this$props$onSwipeab11","_this$props11","onSwipeableRightWillOpen","_this$props$onSwipeab12","_this$props12","onSwipeableWillClose","layout","width","_dragX","undefined","updateAnimatedEvent","onGestureEvent","event","shouldComponentUpdate","render","children","renderLeftActions","renderRightActions","dragOffsetFromLeftEdge","dragOffsetFromRightEdge","left","createElement","style","styles","leftActions","transform","translateX","onLayout","x","right","rightActions","_extends","activeOffsetX","touchAction","onHandlerStateChange","onRowLayout","container","containerStyle","enabled","onTapHandlerStateChange","pointerEvents","childrenContainerStyle","create","overflow","absoluteFillObject","flexDirection","isRTL"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-gesture-handler/lib/module/components/Swipeable.tsx"],"sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us to\n// move faster and fix possible issues quicker\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerProps,\n} from '../handlers/PanGestureHandler';\nimport {\n  PanGestureHandlerEventPayload,\n  TapGestureHandlerEventPayload,\n} from '../handlers/GestureHandlerEventPayload';\nimport { TapGestureHandler } from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\n\nexport interface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\n   * should exactly follow the gesture, 2 means it is going to be two times\n   * \"slower\".\n   */\n  friction?: number;\n\n  /**\n   * Distance from the left edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  leftThreshold?: number;\n\n  /**\n   * Distance from the right edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  rightThreshold?: number;\n\n  /**\n   * Distance that the panel must be dragged from the left edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromLeftEdge?: number;\n\n  /**\n   * Distance that the panel must be dragged from the right edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromRightEdge?: number;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the left\n   * actions panel's width. It is set to true by default as long as the left\n   * panel render method is present.\n   */\n  overshootLeft?: boolean;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the\n   * right actions panel's width. It is set to true by default as long as the\n   * right panel render method is present.\n   */\n  overshootRight?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\n   * a native feel, try 8 or above.\n   */\n  overshootFriction?: number;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableOpen()\n   *\n   * Called when left action panel gets open.\n   */\n  onSwipeableLeftOpen?: () => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableOpen()\n   *\n   * Called when right action panel gets open.\n   */\n  onSwipeableRightOpen?: () => void;\n\n  /**\n   * Called when action panel gets open (either right or left).\n   */\n  onSwipeableOpen?: (direction: 'left' | 'right', swipeable: Swipeable) => void;\n\n  /**\n   * Called when action panel is closed.\n   */\n  onSwipeableClose?: (\n    direction: 'left' | 'right',\n    swipeable: Swipeable\n  ) => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\n   *\n   * Called when left action panel starts animating on open.\n   */\n  onSwipeableLeftWillOpen?: () => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\n   *\n   * Called when right action panel starts animating on open.\n   */\n  onSwipeableRightWillOpen?: () => void;\n\n  /**\n   * Called when action panel starts animating on open (either right or left).\n   */\n  onSwipeableWillOpen?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts animating on close.\n   */\n  onSwipeableWillClose?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts being shown on dragging to open.\n   */\n  onSwipeableOpenStartDrag?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts being shown on dragging to close.\n   */\n  onSwipeableCloseStartDrag?: (direction: 'left' | 'right') => void;\n\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, +]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progressAnimatedValue: AnimatedInterpolation,\n    dragAnimatedValue: AnimatedInterpolation,\n    swipeable: Swipeable\n  ) => React.ReactNode;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, -]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progressAnimatedValue: AnimatedInterpolation,\n    dragAnimatedValue: AnimatedInterpolation,\n    swipeable: Swipeable\n  ) => React.ReactNode;\n\n  useNativeAnimations?: boolean;\n\n  animationOptions?: Record<string, unknown>;\n\n  /**\n   * Style object for the container (`Animated.View`), for example to override\n   * `overflow: 'hidden'`.\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the children container (`Animated.View`), for example to\n   * apply `flex: 1`\n   */\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\ntype SwipeableState = {\n  dragX: Animated.Value;\n  rowTranslation: Animated.Value;\n  rowState: number;\n  leftWidth?: number;\n  rightOffset?: number;\n  rowWidth?: number;\n};\n\n/**\n * @deprecated use Reanimated version of Swipeable instead\n *\n * This component allows for implementing swipeable rows or similar interaction.\n */\n\nexport default class Swipeable extends Component<\n  SwipeableProps,\n  SwipeableState\n> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n\n  constructor(props: SwipeableProps) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this.updateAnimatedEvent(props, this.state);\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations! }\n    );\n  }\n\n  shouldComponentUpdate(props: SwipeableProps, state: SwipeableState) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private transX?: AnimatedInterpolation;\n  private showLeftAction?: AnimatedInterpolation | Animated.Value;\n  private leftActionTranslate?: AnimatedInterpolation;\n  private showRightAction?: AnimatedInterpolation | Animated.Value;\n  private rightActionTranslate?: AnimatedInterpolation;\n\n  private updateAnimatedEvent = (\n    props: SwipeableProps,\n    state: SwipeableState\n  ) => {\n    const { friction, overshootFriction } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const { overshootLeft = leftWidth > 0, overshootRight = rightWidth > 0 } =\n      props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction!],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n      outputRange: [\n        -rightWidth - (overshootRight ? 1 / overshootFriction! : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 / overshootFriction! : 0),\n      ],\n    });\n    this.transX = transX;\n    this.showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this.leftActionTranslate = this.showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this.showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this.rightActionTranslate = this.showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  private onHandlerStateChange = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease(ev);\n    }\n\n    if (ev.nativeEvent.state === State.ACTIVE) {\n      const { velocityX, translationX: dragX } = ev.nativeEvent;\n      const { rowState } = this.state;\n      const { friction } = this.props;\n\n      const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n      const direction =\n        rowState === -1\n          ? 'right'\n          : rowState === 1\n            ? 'left'\n            : translationX > 0\n              ? 'left'\n              : 'right';\n\n      if (rowState === 0) {\n        this.props.onSwipeableOpenStartDrag?.(direction);\n      } else {\n        this.props.onSwipeableCloseStartDrag?.(direction);\n      }\n    }\n  };\n\n  private handleRelease = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    const { velocityX, translationX: dragX } = ev.nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this.currentOffset() + dragX / friction!;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // Swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // Swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this.animateRow(startOffsetX, toValue, velocityX / friction!);\n  };\n\n  private animateRow = (\n    fromValue: number,\n    toValue: number,\n    velocityX?:\n      | number\n      | {\n          x: number;\n          y: number;\n        }\n  ) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0) {\n          this.props.onSwipeableLeftOpen?.();\n          this.props.onSwipeableOpen?.('left', this);\n        } else if (toValue < 0) {\n          this.props.onSwipeableRightOpen?.();\n          this.props.onSwipeableOpen?.('right', this);\n        } else {\n          const closingDirection = fromValue > 0 ? 'left' : 'right';\n          this.props.onSwipeableClose?.(closingDirection, this);\n        }\n      }\n    });\n    if (toValue > 0) {\n      this.props.onSwipeableLeftWillOpen?.();\n      this.props.onSwipeableWillOpen?.('left');\n    } else if (toValue < 0) {\n      this.props.onSwipeableRightWillOpen?.();\n      this.props.onSwipeableWillOpen?.('right');\n    } else {\n      const closingDirection = fromValue > 0 ? 'left' : 'right';\n      this.props.onSwipeableWillClose?.(closingDirection);\n    }\n  };\n\n  private onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  private currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this.animateRow(this.currentOffset(), 0);\n  };\n\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this.animateRow(this.currentOffset(), leftWidth);\n  };\n\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this.animateRow(this.currentOffset(), -rightWidth);\n  };\n\n  reset = () => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(0);\n    this.setState({ rowState: 0 });\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const {\n      children,\n      renderLeftActions,\n      renderRightActions,\n      dragOffsetFromLeftEdge = 10,\n      dragOffsetFromRightEdge = 10,\n    } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          // All those and below parameters can have ! since they are all\n          // asigned in constructor in `updateAnimatedEvent` but TS cannot spot\n          // it for some reason\n          { transform: [{ translateX: this.leftActionTranslate! }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction!, this.transX!, this)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this.rightActionTranslate! }] },\n        ]}>\n        {renderRightActions(this.showRightAction!, this.transX!, this)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-dragOffsetFromRightEdge, dragOffsetFromLeftEdge]}\n        touchAction=\"pan-y\"\n        {...this.props}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View\n          onLayout={this.onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            touchAction=\"pan-y\"\n            onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this.transX! }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}