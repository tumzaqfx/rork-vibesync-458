{"ast":null,"code":"'use strict';function setAndForwardRef({getForwardedRef,setLocalRef}){return function forwardRef(ref){const forwardedRef=getForwardedRef();setLocalRef(ref);if(typeof forwardedRef==='function'){forwardedRef(ref);}else if(typeof forwardedRef==='object'&&forwardedRef!=null){forwardedRef.current=ref;}};}export default setAndForwardRef;","map":{"version":3,"names":["setAndForwardRef","getForwardedRef","setLocalRef","forwardRef","ref","forwardedRef","current"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-reanimated/src/createAnimatedComponent/setAndForwardRef.ts"],"sourcesContent":["'use strict';\n/** Imported from react-native */\n\nimport type { MutableRefObject } from 'react';\n\n/* eslint-disable */\n/**\n * This is a helper function for when a component needs to be able to forward a\n * ref to a child component, but still needs to have access to that component as\n * part of its implementation.\n *\n * Its main use case is in wrappers for native components.\n *\n * Usage:\n *\n * Class MyView extends React.Component { _nativeRef = null;\n *\n *     _setNativeRef = setAndForwardRef({\n *       getForwardedRef: () => this.props.forwardedRef,\n *       setLocalRef: ref => {\n *         this._nativeRef = ref;\n *       },\n *     });\n *\n *     render() {\n *       return <View ref={this._setNativeRef} />;\n *     }\n *\n * }\n *\n * Const MyViewWithRef = React.forwardRef((props, ref) => ( <MyView {...props}\n * forwardedRef={ref} /> ));\n *\n * Module.exports = MyViewWithRef;\n */\n/* eslint-enable */\n\ntype ForwardedRef<T> = () => MutableRefObject<T> | ((ref: T) => void);\n\nfunction setAndForwardRef<T>({\n  getForwardedRef,\n  setLocalRef,\n}: {\n  getForwardedRef: ForwardedRef<T>;\n  setLocalRef: (ref: T) => void;\n}): (ref: T) => void {\n  return function forwardRef(ref: T) {\n    const forwardedRef = getForwardedRef();\n\n    setLocalRef(ref);\n\n    // Forward to user ref prop (if one has been specified)\n    if (typeof forwardedRef === 'function') {\n      // Handle function-based refs. String-based refs are handled as functions.\n      forwardedRef(ref);\n    } else if (typeof forwardedRef === 'object' && forwardedRef != null) {\n      // Handle createRef-based refs\n      forwardedRef.current = ref;\n    }\n  };\n}\n\nexport default setAndForwardRef;\n"],"mappings":"AAAA,YAAY,CAuCZ,QAAS,CAAAA,gBAAgBA,CAAI,CAC3BC,eAAe,CACfC,WAIF,CAAC,CAAoB,CACnB,MAAO,SAAS,CAAAC,UAAUA,CAACC,GAAM,CAAE,CACjC,KAAM,CAAAC,YAAY,CAAGJ,eAAe,CAAC,CAAC,CAEtCC,WAAW,CAACE,GAAG,CAAC,CAGhB,GAAI,MAAO,CAAAC,YAAY,GAAK,UAAU,CAAE,CAEtCA,YAAY,CAACD,GAAG,CAAC,CACnB,CAAC,IAAM,IAAI,MAAO,CAAAC,YAAY,GAAK,QAAQ,EAAIA,YAAY,EAAI,IAAI,CAAE,CAEnEA,YAAY,CAACC,OAAO,CAAGF,GAAG,CAC5B,CACF,CAAC,CACH,CAEA,cAAe,CAAAJ,gBAAgB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}