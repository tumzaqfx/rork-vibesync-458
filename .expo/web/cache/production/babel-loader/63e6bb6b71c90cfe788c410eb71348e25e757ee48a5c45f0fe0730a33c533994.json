{"ast":null,"code":"import{useState,useEffect,useMemo,useCallback}from'react';import createContextHook from'@nkzw/create-context-hook';import*as Location from'expo-location';import*as Contacts from'expo-contacts';import Platform from\"react-native-web/dist/exports/Platform\";import{mockUsers}from'@/mocks/users';const calculateDistance=(lat1,lon1,lat2,lon2)=>{const R=6371;const dLat=(lat2-lat1)*Math.PI/180;const dLon=(lon2-lon1)*Math.PI/180;const a=Math.sin(dLat/2)*Math.sin(dLat/2)+Math.cos(lat1*Math.PI/180)*Math.cos(lat2*Math.PI/180)*Math.sin(dLon/2)*Math.sin(dLon/2);const c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));return R*c;};const getDistanceInKm=filter=>{switch(filter){case'1km':return 1;case'5km':return 5;case'20km':return 20;case'city':return 50;default:return 5;}};export const[DiscoveryProvider,useDiscovery]=createContextHook(()=>{const[currentUserId]=useState('5');const[userLocation,setUserLocation]=useState(null);const[locationPermission,setLocationPermission]=useState(false);const[contactsPermission,setContactsPermission]=useState(false);const[distanceFilter,setDistanceFilter]=useState('5km');const[syncedContacts,setSyncedContacts]=useState([]);const[isLoadingLocation,setIsLoadingLocation]=useState(false);const[isLoadingContacts,setIsLoadingContacts]=useState(false);const followGraph=useMemo(()=>{return{'5':['1','2','4'],'1':['2','3','4'],'2':['1','3','5'],'3':['1','2','4'],'4':['1','2','3','5']};},[]);const userLocations=useMemo(()=>{return{'1':{latitude:34.0522,longitude:-118.2437,city:'Los Angeles',lastUpdated:new Date().toISOString()},'2':{latitude:25.7617,longitude:-80.1918,city:'Miami',lastUpdated:new Date().toISOString()},'3':{latitude:47.6062,longitude:-122.3321,city:'Seattle',lastUpdated:new Date().toISOString()},'4':{latitude:40.7128,longitude:-74.006,city:'New York',lastUpdated:new Date().toISOString()},'5':{latitude:37.7749,longitude:-122.4194,city:'San Francisco',lastUpdated:new Date().toISOString()}};},[]);const requestLocationPermission=useCallback(async()=>{try{if(true){console.log('Location permission not required on web');return true;}const{status}=await Location.requestForegroundPermissionsAsync();const granted=status==='granted';setLocationPermission(granted);return granted;}catch(error){console.error('Error requesting location permission:',error);return false;}},[]);const requestContactsPermission=useCallback(async()=>{try{if(true){console.log('Contacts not available on web');return false;}const{status}=await Contacts.requestPermissionsAsync();const granted=status==='granted';setContactsPermission(granted);return granted;}catch(error){console.error('Error requesting contacts permission:',error);return false;}},[]);const getCurrentLocation=useCallback(async()=>{try{setIsLoadingLocation(true);if(true){const mockLocation=userLocations[currentUserId];setUserLocation(mockLocation);setIsLoadingLocation(false);return mockLocation;}const hasPermission=locationPermission||(await requestLocationPermission());if(!hasPermission){setIsLoadingLocation(false);return null;}const location=await Location.getCurrentPositionAsync({accuracy:Location.Accuracy.Balanced});const userLoc={latitude:location.coords.latitude,longitude:location.coords.longitude,lastUpdated:new Date().toISOString()};setUserLocation(userLoc);setIsLoadingLocation(false);return userLoc;}catch(error){console.error('Error getting location:',error);setIsLoadingLocation(false);return null;}},[currentUserId,locationPermission,userLocations,requestLocationPermission]);const getProximitySuggestions=useCallback((filter=distanceFilter)=>{if(!userLocation)return[];const maxDistance=getDistanceInKm(filter);const suggestions=[];mockUsers.forEach(user=>{if(user.id===currentUserId)return;const userLoc=userLocations[user.id];if(!userLoc)return;const distance=calculateDistance(userLocation.latitude,userLocation.longitude,userLoc.latitude,userLoc.longitude);if(distance<=maxDistance){const sharedInterests=[];if(user.bio?.includes('ðŸŽ¬')&&Math.random()>0.5)sharedInterests.push('Movies');if(user.bio?.includes('ðŸŽ¨')&&Math.random()>0.5)sharedInterests.push('Art');if(user.bio?.includes('ðŸ’»')&&Math.random()>0.5)sharedInterests.push('Tech');suggestions.push({user,distance:Math.round(distance*10)/10,distanceUnit:'km',sharedInterests,isRecentlyActive:Math.random()>0.3,activityHeatScore:Math.random()*10});}});return suggestions.sort((a,b)=>a.distance-b.distance);},[userLocation,distanceFilter,currentUserId,userLocations]);const getMutualConnections=useCallback(()=>{const currentUserFollowing=followGraph[currentUserId]||[];const connections=[];mockUsers.forEach(user=>{if(user.id===currentUserId)return;if(currentUserFollowing.includes(user.id))return;const userFollowers=Object.keys(followGraph).filter(userId=>followGraph[userId]?.includes(user.id));const mutualFollowers=userFollowers.filter(userId=>currentUserFollowing.includes(userId)).map(userId=>mockUsers.find(u=>u.id===userId)).filter(u=>u!==undefined);if(mutualFollowers.length>0){connections.push({user,mutualFollowers,mutualCount:mutualFollowers.length,connectionStrength:mutualFollowers.length*(user.isVerified?1.5:1)});}});return connections.sort((a,b)=>b.connectionStrength-a.connectionStrength);},[currentUserId,followGraph]);const syncContacts=useCallback(async()=>{try{setIsLoadingContacts(true);if(true){console.log('Contacts sync not available on web');setIsLoadingContacts(false);return[];}const hasPermission=contactsPermission||(await requestContactsPermission());if(!hasPermission){setIsLoadingContacts(false);return[];}const{data}=await Contacts.getContactsAsync({fields:[Contacts.Fields.PhoneNumbers,Contacts.Fields.Emails]});const suggestions=[];data.slice(0,10).forEach((contact,index)=>{const matchedUser=mockUsers[index%mockUsers.length];if(matchedUser&&matchedUser.id!==currentUserId){suggestions.push({user:matchedUser,contactName:contact.name||'Unknown',phoneNumber:contact.phoneNumbers?.[0]?.number,email:contact.emails?.[0]?.email,isNewUser:Math.random()>0.5,joinedAt:new Date(Date.now()-Math.random()*7*24*60*60*1000).toISOString()});}});setSyncedContacts(suggestions);setIsLoadingContacts(false);return suggestions;}catch(error){console.error('Error syncing contacts:',error);setIsLoadingContacts(false);return[];}},[contactsPermission,currentUserId,requestContactsPermission]);const calculateHybridScore=useCallback((user,proximity,mutual,contact)=>{let proximityScore=0;let mutualScore=0;let contactScore=0;const reasons=[];if(proximity){proximityScore=Math.max(0,10-proximity.distance);if(proximity.isRecentlyActive)proximityScore+=2;if(proximity.sharedInterests.length>0){proximityScore+=proximity.sharedInterests.length;reasons.push(`${proximity.sharedInterests.length} shared interests`);}reasons.push(`${proximity.distance}km away`);}if(mutual){mutualScore=mutual.connectionStrength;reasons.push(`${mutual.mutualCount} mutual connections`);}if(contact){contactScore=15;if(contact.isNewUser){contactScore+=5;reasons.push('Just joined VibeSync');}reasons.push('From your contacts');}if(user.isVerified){proximityScore*=1.2;mutualScore*=1.2;contactScore*=1.2;reasons.push('Verified user');}const totalScore=proximityScore+mutualScore+contactScore;return{userId:user.id,proximityScore,mutualScore,contactScore,totalScore,reasons};},[]);const getHybridSuggestions=useCallback(()=>{const proximityUsers=getProximitySuggestions();const mutualUsers=getMutualConnections();const contactUsers=syncedContacts;const userMap=new Map();proximityUsers.forEach(prox=>{const mutual=mutualUsers.find(m=>m.user.id===prox.user.id);const contact=contactUsers.find(c=>c.user.id===prox.user.id);const score=calculateHybridScore(prox.user,prox,mutual,contact);userMap.set(prox.user.id,{user:prox.user,score,primaryReason:contact?'contact':mutual?'hybrid':'proximity',distance:prox.distance,mutualCount:mutual?.mutualCount,isContact:!!contact,metadata:{sharedInterests:prox.sharedInterests,mutualFollowers:mutual?.mutualFollowers,contactInfo:contact?.contactName,activityLevel:prox.isRecentlyActive?'high':'medium'}});});mutualUsers.forEach(mutual=>{if(!userMap.has(mutual.user.id)){const contact=contactUsers.find(c=>c.user.id===mutual.user.id);const score=calculateHybridScore(mutual.user,undefined,mutual,contact);userMap.set(mutual.user.id,{user:mutual.user,score,primaryReason:contact?'contact':'mutual',mutualCount:mutual.mutualCount,isContact:!!contact,metadata:{mutualFollowers:mutual.mutualFollowers,contactInfo:contact?.contactName,activityLevel:'medium'}});}});contactUsers.forEach(contact=>{if(!userMap.has(contact.user.id)){const score=calculateHybridScore(contact.user,undefined,undefined,contact);userMap.set(contact.user.id,{user:contact.user,score,primaryReason:'contact',isContact:true,metadata:{contactInfo:contact.contactName,activityLevel:contact.isNewUser?'high':'low'}});}});return Array.from(userMap.values()).sort((a,b)=>b.score.totalScore-a.score.totalScore);},[getProximitySuggestions,getMutualConnections,syncedContacts,calculateHybridScore]);useEffect(()=>{getCurrentLocation();},[getCurrentLocation]);return useMemo(()=>({currentUserId,userLocation,locationPermission,contactsPermission,distanceFilter,syncedContacts,isLoadingLocation,isLoadingContacts,setDistanceFilter,requestLocationPermission,requestContactsPermission,getCurrentLocation,getProximitySuggestions,getMutualConnections,syncContacts,getHybridSuggestions}),[currentUserId,userLocation,locationPermission,contactsPermission,distanceFilter,syncedContacts,isLoadingLocation,isLoadingContacts,requestLocationPermission,requestContactsPermission,getCurrentLocation,getProximitySuggestions,getMutualConnections,syncContacts,getHybridSuggestions]);});","map":{"version":3,"names":["useState","useEffect","useMemo","useCallback","createContextHook","Location","Contacts","Platform","mockUsers","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","getDistanceInKm","filter","DiscoveryProvider","useDiscovery","currentUserId","userLocation","setUserLocation","locationPermission","setLocationPermission","contactsPermission","setContactsPermission","distanceFilter","setDistanceFilter","syncedContacts","setSyncedContacts","isLoadingLocation","setIsLoadingLocation","isLoadingContacts","setIsLoadingContacts","followGraph","userLocations","latitude","longitude","city","lastUpdated","Date","toISOString","requestLocationPermission","console","log","status","requestForegroundPermissionsAsync","granted","error","requestContactsPermission","requestPermissionsAsync","getCurrentLocation","mockLocation","hasPermission","location","getCurrentPositionAsync","accuracy","Accuracy","Balanced","userLoc","coords","getProximitySuggestions","maxDistance","suggestions","forEach","user","id","distance","sharedInterests","bio","includes","random","push","round","distanceUnit","isRecentlyActive","activityHeatScore","sort","b","getMutualConnections","currentUserFollowing","connections","userFollowers","Object","keys","userId","mutualFollowers","map","find","u","undefined","length","mutualCount","connectionStrength","isVerified","syncContacts","data","getContactsAsync","fields","Fields","PhoneNumbers","Emails","slice","contact","index","matchedUser","contactName","name","phoneNumber","phoneNumbers","number","email","emails","isNewUser","joinedAt","now","calculateHybridScore","proximity","mutual","proximityScore","mutualScore","contactScore","reasons","max","totalScore","getHybridSuggestions","proximityUsers","mutualUsers","contactUsers","userMap","Map","prox","m","score","set","primaryReason","isContact","metadata","contactInfo","activityLevel","has","Array","from","values"],"sources":["/home/user/rork-vibesync-458/hooks/discovery-store.ts"],"sourcesContent":["import { useState, useEffect, useMemo, useCallback } from 'react';\nimport createContextHook from '@nkzw/create-context-hook';\nimport * as Location from 'expo-location';\nimport * as Contacts from 'expo-contacts';\nimport { Platform } from 'react-native';\nimport {\n  User,\n  DistanceFilter,\n  UserLocation,\n  ProximitySuggestion,\n  MutualConnection,\n  ContactSuggestion,\n  DiscoverySuggestion,\n  SuggestionScore,\n} from '@/types';\nimport { mockUsers } from '@/mocks/users';\n\ninterface FollowGraph {\n  [userId: string]: string[];\n}\n\nconst calculateDistance = (\n  lat1: number,\n  lon1: number,\n  lat2: number,\n  lon2: number\n): number => {\n  const R = 6371;\n  const dLat = ((lat2 - lat1) * Math.PI) / 180;\n  const dLon = ((lon2 - lon1) * Math.PI) / 180;\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos((lat1 * Math.PI) / 180) *\n      Math.cos((lat2 * Math.PI) / 180) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\n\nconst getDistanceInKm = (filter: DistanceFilter): number => {\n  switch (filter) {\n    case '1km':\n      return 1;\n    case '5km':\n      return 5;\n    case '20km':\n      return 20;\n    case 'city':\n      return 50;\n    default:\n      return 5;\n  }\n};\n\nexport const [DiscoveryProvider, useDiscovery] = createContextHook(() => {\n  const [currentUserId] = useState<string>('5');\n  const [userLocation, setUserLocation] = useState<UserLocation | null>(null);\n  const [locationPermission, setLocationPermission] = useState<boolean>(false);\n  const [contactsPermission, setContactsPermission] = useState<boolean>(false);\n  const [distanceFilter, setDistanceFilter] = useState<DistanceFilter>('5km');\n  const [syncedContacts, setSyncedContacts] = useState<ContactSuggestion[]>([]);\n  const [isLoadingLocation, setIsLoadingLocation] = useState<boolean>(false);\n  const [isLoadingContacts, setIsLoadingContacts] = useState<boolean>(false);\n\n  const followGraph: FollowGraph = useMemo(() => {\n    return {\n      '5': ['1', '2', '4'],\n      '1': ['2', '3', '4'],\n      '2': ['1', '3', '5'],\n      '3': ['1', '2', '4'],\n      '4': ['1', '2', '3', '5'],\n    };\n  }, []);\n\n  const userLocations: { [userId: string]: UserLocation } = useMemo(() => {\n    return {\n      '1': { latitude: 34.0522, longitude: -118.2437, city: 'Los Angeles', lastUpdated: new Date().toISOString() },\n      '2': { latitude: 25.7617, longitude: -80.1918, city: 'Miami', lastUpdated: new Date().toISOString() },\n      '3': { latitude: 47.6062, longitude: -122.3321, city: 'Seattle', lastUpdated: new Date().toISOString() },\n      '4': { latitude: 40.7128, longitude: -74.006, city: 'New York', lastUpdated: new Date().toISOString() },\n      '5': { latitude: 37.7749, longitude: -122.4194, city: 'San Francisco', lastUpdated: new Date().toISOString() },\n    };\n  }, []);\n\n  const requestLocationPermission = useCallback(async (): Promise<boolean> => {\n    try {\n      if (Platform.OS === 'web') {\n        console.log('Location permission not required on web');\n        return true;\n      }\n\n      const { status } = await Location.requestForegroundPermissionsAsync();\n      const granted = status === 'granted';\n      setLocationPermission(granted);\n      return granted;\n    } catch (error) {\n      console.error('Error requesting location permission:', error);\n      return false;\n    }\n  }, []);\n\n  const requestContactsPermission = useCallback(async (): Promise<boolean> => {\n    try {\n      if (Platform.OS === 'web') {\n        console.log('Contacts not available on web');\n        return false;\n      }\n\n      const { status } = await Contacts.requestPermissionsAsync();\n      const granted = status === 'granted';\n      setContactsPermission(granted);\n      return granted;\n    } catch (error) {\n      console.error('Error requesting contacts permission:', error);\n      return false;\n    }\n  }, []);\n\n  const getCurrentLocation = useCallback(async (): Promise<UserLocation | null> => {\n    try {\n      setIsLoadingLocation(true);\n\n      if (Platform.OS === 'web') {\n        const mockLocation = userLocations[currentUserId];\n        setUserLocation(mockLocation);\n        setIsLoadingLocation(false);\n        return mockLocation;\n      }\n\n      const hasPermission = locationPermission || (await requestLocationPermission());\n      if (!hasPermission) {\n        setIsLoadingLocation(false);\n        return null;\n      }\n\n      const location = await Location.getCurrentPositionAsync({\n        accuracy: Location.Accuracy.Balanced,\n      });\n\n      const userLoc: UserLocation = {\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n        lastUpdated: new Date().toISOString(),\n      };\n\n      setUserLocation(userLoc);\n      setIsLoadingLocation(false);\n      return userLoc;\n    } catch (error) {\n      console.error('Error getting location:', error);\n      setIsLoadingLocation(false);\n      return null;\n    }\n  }, [currentUserId, locationPermission, userLocations, requestLocationPermission]);\n\n  const getProximitySuggestions = useCallback((\n    filter: DistanceFilter = distanceFilter\n  ): ProximitySuggestion[] => {\n    if (!userLocation) return [];\n\n    const maxDistance = getDistanceInKm(filter);\n    const suggestions: ProximitySuggestion[] = [];\n\n    mockUsers.forEach((user) => {\n      if (user.id === currentUserId) return;\n\n      const userLoc = userLocations[user.id];\n      if (!userLoc) return;\n\n      const distance = calculateDistance(\n        userLocation.latitude,\n        userLocation.longitude,\n        userLoc.latitude,\n        userLoc.longitude\n      );\n\n      if (distance <= maxDistance) {\n        const sharedInterests: string[] = [];\n        if (user.bio?.includes('ðŸŽ¬') && Math.random() > 0.5) sharedInterests.push('Movies');\n        if (user.bio?.includes('ðŸŽ¨') && Math.random() > 0.5) sharedInterests.push('Art');\n        if (user.bio?.includes('ðŸ’»') && Math.random() > 0.5) sharedInterests.push('Tech');\n\n        suggestions.push({\n          user,\n          distance: Math.round(distance * 10) / 10,\n          distanceUnit: 'km',\n          sharedInterests,\n          isRecentlyActive: Math.random() > 0.3,\n          activityHeatScore: Math.random() * 10,\n        });\n      }\n    });\n\n    return suggestions.sort((a, b) => a.distance - b.distance);\n  }, [userLocation, distanceFilter, currentUserId, userLocations]);\n\n  const getMutualConnections = useCallback((): MutualConnection[] => {\n    const currentUserFollowing = followGraph[currentUserId] || [];\n    const connections: MutualConnection[] = [];\n\n    mockUsers.forEach((user) => {\n      if (user.id === currentUserId) return;\n      if (currentUserFollowing.includes(user.id)) return;\n\n      const userFollowers = Object.keys(followGraph).filter((userId) =>\n        followGraph[userId]?.includes(user.id)\n      );\n\n      const mutualFollowers = userFollowers\n        .filter((userId) => currentUserFollowing.includes(userId))\n        .map((userId) => mockUsers.find((u) => u.id === userId))\n        .filter((u): u is User => u !== undefined);\n\n      if (mutualFollowers.length > 0) {\n        connections.push({\n          user,\n          mutualFollowers,\n          mutualCount: mutualFollowers.length,\n          connectionStrength: mutualFollowers.length * (user.isVerified ? 1.5 : 1),\n        });\n      }\n    });\n\n    return connections.sort((a, b) => b.connectionStrength - a.connectionStrength);\n  }, [currentUserId, followGraph]);\n\n  const syncContacts = useCallback(async (): Promise<ContactSuggestion[]> => {\n    try {\n      setIsLoadingContacts(true);\n\n      if (Platform.OS === 'web') {\n        console.log('Contacts sync not available on web');\n        setIsLoadingContacts(false);\n        return [];\n      }\n\n      const hasPermission = contactsPermission || (await requestContactsPermission());\n      if (!hasPermission) {\n        setIsLoadingContacts(false);\n        return [];\n      }\n\n      const { data } = await Contacts.getContactsAsync({\n        fields: [Contacts.Fields.PhoneNumbers, Contacts.Fields.Emails],\n      });\n\n      const suggestions: ContactSuggestion[] = [];\n\n      data.slice(0, 10).forEach((contact: any, index: number) => {\n        const matchedUser = mockUsers[index % mockUsers.length];\n        if (matchedUser && matchedUser.id !== currentUserId) {\n          suggestions.push({\n            user: matchedUser,\n            contactName: contact.name || 'Unknown',\n            phoneNumber: contact.phoneNumbers?.[0]?.number,\n            email: contact.emails?.[0]?.email,\n            isNewUser: Math.random() > 0.5,\n            joinedAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString(),\n          });\n        }\n      });\n\n      setSyncedContacts(suggestions);\n      setIsLoadingContacts(false);\n      return suggestions;\n    } catch (error) {\n      console.error('Error syncing contacts:', error);\n      setIsLoadingContacts(false);\n      return [];\n    }\n  }, [contactsPermission, currentUserId, requestContactsPermission]);\n\n  const calculateHybridScore = useCallback((\n    user: User,\n    proximity?: ProximitySuggestion,\n    mutual?: MutualConnection,\n    contact?: ContactSuggestion\n  ): SuggestionScore => {\n    let proximityScore = 0;\n    let mutualScore = 0;\n    let contactScore = 0;\n    const reasons: string[] = [];\n\n    if (proximity) {\n      proximityScore = Math.max(0, 10 - proximity.distance);\n      if (proximity.isRecentlyActive) proximityScore += 2;\n      if (proximity.sharedInterests.length > 0) {\n        proximityScore += proximity.sharedInterests.length;\n        reasons.push(`${proximity.sharedInterests.length} shared interests`);\n      }\n      reasons.push(`${proximity.distance}km away`);\n    }\n\n    if (mutual) {\n      mutualScore = mutual.connectionStrength;\n      reasons.push(`${mutual.mutualCount} mutual connections`);\n    }\n\n    if (contact) {\n      contactScore = 15;\n      if (contact.isNewUser) {\n        contactScore += 5;\n        reasons.push('Just joined VibeSync');\n      }\n      reasons.push('From your contacts');\n    }\n\n    if (user.isVerified) {\n      proximityScore *= 1.2;\n      mutualScore *= 1.2;\n      contactScore *= 1.2;\n      reasons.push('Verified user');\n    }\n\n    const totalScore = proximityScore + mutualScore + contactScore;\n\n    return {\n      userId: user.id,\n      proximityScore,\n      mutualScore,\n      contactScore,\n      totalScore,\n      reasons,\n    };\n  }, []);\n\n  const getHybridSuggestions = useCallback((): DiscoverySuggestion[] => {\n    const proximityUsers = getProximitySuggestions();\n    const mutualUsers = getMutualConnections();\n    const contactUsers = syncedContacts;\n\n    const userMap = new Map<string, DiscoverySuggestion>();\n\n    proximityUsers.forEach((prox) => {\n      const mutual = mutualUsers.find((m) => m.user.id === prox.user.id);\n      const contact = contactUsers.find((c) => c.user.id === prox.user.id);\n      const score = calculateHybridScore(prox.user, prox, mutual, contact);\n\n      userMap.set(prox.user.id, {\n        user: prox.user,\n        score,\n        primaryReason: contact ? 'contact' : mutual ? 'hybrid' : 'proximity',\n        distance: prox.distance,\n        mutualCount: mutual?.mutualCount,\n        isContact: !!contact,\n        metadata: {\n          sharedInterests: prox.sharedInterests,\n          mutualFollowers: mutual?.mutualFollowers,\n          contactInfo: contact?.contactName,\n          activityLevel: prox.isRecentlyActive ? 'high' : 'medium',\n        },\n      });\n    });\n\n    mutualUsers.forEach((mutual) => {\n      if (!userMap.has(mutual.user.id)) {\n        const contact = contactUsers.find((c) => c.user.id === mutual.user.id);\n        const score = calculateHybridScore(mutual.user, undefined, mutual, contact);\n\n        userMap.set(mutual.user.id, {\n          user: mutual.user,\n          score,\n          primaryReason: contact ? 'contact' : 'mutual',\n          mutualCount: mutual.mutualCount,\n          isContact: !!contact,\n          metadata: {\n            mutualFollowers: mutual.mutualFollowers,\n            contactInfo: contact?.contactName,\n            activityLevel: 'medium',\n          },\n        });\n      }\n    });\n\n    contactUsers.forEach((contact) => {\n      if (!userMap.has(contact.user.id)) {\n        const score = calculateHybridScore(contact.user, undefined, undefined, contact);\n\n        userMap.set(contact.user.id, {\n          user: contact.user,\n          score,\n          primaryReason: 'contact',\n          isContact: true,\n          metadata: {\n            contactInfo: contact.contactName,\n            activityLevel: contact.isNewUser ? 'high' : 'low',\n          },\n        });\n      }\n    });\n\n    return Array.from(userMap.values()).sort((a, b) => b.score.totalScore - a.score.totalScore);\n  }, [getProximitySuggestions, getMutualConnections, syncedContacts, calculateHybridScore]);\n\n  useEffect(() => {\n    getCurrentLocation();\n  }, [getCurrentLocation]);\n\n  return useMemo(() => ({\n    currentUserId,\n    userLocation,\n    locationPermission,\n    contactsPermission,\n    distanceFilter,\n    syncedContacts,\n    isLoadingLocation,\n    isLoadingContacts,\n    setDistanceFilter,\n    requestLocationPermission,\n    requestContactsPermission,\n    getCurrentLocation,\n    getProximitySuggestions,\n    getMutualConnections,\n    syncContacts,\n    getHybridSuggestions,\n  }), [\n    currentUserId,\n    userLocation,\n    locationPermission,\n    contactsPermission,\n    distanceFilter,\n    syncedContacts,\n    isLoadingLocation,\n    isLoadingContacts,\n    requestLocationPermission,\n    requestContactsPermission,\n    getCurrentLocation,\n    getProximitySuggestions,\n    getMutualConnections,\n    syncContacts,\n    getHybridSuggestions,\n  ]);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}