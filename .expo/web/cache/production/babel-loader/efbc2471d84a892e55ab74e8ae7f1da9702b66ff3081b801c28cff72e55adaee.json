{"ast":null,"code":"import{append,appendTransform,identity,reset,toArray}from'../Matrix2D';import{parse}from'./transform';import{parse as parseTransformSvgToRnStyle}from'./transformToRn';function appendTransformProps(props){const{x,y,originX,originY,scaleX,scaleY,rotation,skewX,skewY}=props;appendTransform(x+originX,y+originY,scaleX,scaleY,rotation,skewX,skewY,originX,originY);}function universal2axis(universal,axisX,axisY,defaultValue){let x;let y;if(typeof universal==='number'){x=y=universal;}else if(typeof universal==='string'){const coords=universal.split(/\\s*,\\s*/);if(coords.length===2){x=+coords[0];y=+coords[1];}else if(coords.length===1){x=y=+coords[0];}}else if(Array.isArray(universal)){if(universal.length===2){x=+universal[0];y=+universal[1];}else if(universal.length===1){x=y=+universal[0];}}axisX=+axisX;if(!isNaN(axisX)){x=axisX;}axisY=+axisY;if(!isNaN(axisY)){y=axisY;}return[x||defaultValue||0,y||defaultValue||0];}export function transformsArrayToProps(transformObjectsArray){const props={};transformObjectsArray===null||transformObjectsArray===void 0||transformObjectsArray.forEach(transformObject=>{const keys=Object.keys(transformObject);if(keys.length!==1){console.error('You must specify exactly one property per transform object.');}const key=keys[0];const value=transformObject[key];props[key]=value;});return props;}export function props2transform(props){if(!props){return null;}const{rotation,translate,translateX,translateY,origin,originX,originY,scale,scaleX,scaleY,skew,skewX,skewY,x,y}=props;if(rotation==null&&translate==null&&translateX==null&&translateY==null&&origin==null&&originX==null&&originY==null&&scale==null&&scaleX==null&&scaleY==null&&skew==null&&skewX==null&&skewY==null&&x==null&&y==null){return null;}if(Array.isArray(x)||Array.isArray(y)){console.warn('Passing SvgLengthList to x or y attribute where SvgLength expected');}const tr=universal2axis(translate,translateX||(Array.isArray(x)?x[0]:x),translateY||(Array.isArray(y)?y[0]:y));const or=universal2axis(origin,originX,originY);const sc=universal2axis(scale,scaleX,scaleY,1);const sk=universal2axis(skew,skewX,skewY);return{rotation:rotation==null?0:+rotation||0,originX:or[0],originY:or[1],scaleX:sc[0],scaleY:sc[1],skewX:sk[0],skewY:sk[1],x:tr[0],y:tr[1]};}export function transformToMatrix(props,transform){if(!props&&!transform){return null;}reset();props&&appendTransformProps(props);if(transform){if(Array.isArray(transform)){if(typeof transform[0]==='number'){const columnMatrix=transform;append(columnMatrix[0],columnMatrix[1],columnMatrix[2],columnMatrix[3],columnMatrix[4],columnMatrix[5]);}else{const transformProps=props2transform(transformsArrayToProps(transform));transformProps&&appendTransformProps(transformProps);}}else if(typeof transform==='string'){try{const t=parse(transform);append(t[0],t[3],t[1],t[4],t[2],t[5]);}catch(e){console.error(e);}}else{const transformProps=props2transform(transform);transformProps&&appendTransformProps(transformProps);}}return toArray();}export default function extractTransform(props){if(Array.isArray(props)&&typeof props[0]==='number'){return props;}if(typeof props==='string'){try{const t=parse(props);return[t[0],t[3],t[1],t[4],t[2],t[5]];}catch(e){console.error(e);return identity;}}const transformProps=props;return transformToMatrix(props2transform(transformProps),transformProps===null||transformProps===void 0?void 0:transformProps.transform);}export function extractTransformSvgView(props){if(typeof props.transform==='string'){return parseTransformSvgToRnStyle(props.transform);}return props.transform;}","map":{"version":3,"names":["append","appendTransform","identity","reset","toArray","parse","parseTransformSvgToRnStyle","appendTransformProps","props","x","y","originX","originY","scaleX","scaleY","rotation","skewX","skewY","universal2axis","universal","axisX","axisY","defaultValue","coords","split","length","Array","isArray","isNaN","transformsArrayToProps","transformObjectsArray","forEach","transformObject","keys","Object","console","error","key","value","props2transform","translate","translateX","translateY","origin","scale","skew","warn","tr","or","sc","sk","transformToMatrix","transform","columnMatrix","transformProps","t","e","extractTransform","extractTransformSvgView"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-svg/src/lib/extract/extractTransform.ts"],"sourcesContent":["import type { TransformsStyle } from 'react-native';\nimport { append, appendTransform, identity, reset, toArray } from '../Matrix2D';\nimport { parse } from './transform';\nimport { parse as parseTransformSvgToRnStyle } from './transformToRn';\nimport type {\n  ColumnMajorTransformMatrix,\n  NumberProp,\n  TransformedProps,\n  TransformProps,\n} from './types';\n\nexport type TransformsStyleArray = Exclude<\n  TransformsStyle['transform'],\n  string\n>;\n\nfunction appendTransformProps(props: TransformedProps) {\n  const { x, y, originX, originY, scaleX, scaleY, rotation, skewX, skewY } =\n    props;\n  appendTransform(\n    x + originX,\n    y + originY,\n    scaleX,\n    scaleY,\n    rotation,\n    skewX,\n    skewY,\n    originX,\n    originY\n  );\n}\n\nfunction universal2axis(\n  universal: NumberProp | NumberProp[] | undefined,\n  axisX: NumberProp | void,\n  axisY: NumberProp | void,\n  defaultValue?: number\n): [number, number] {\n  let x;\n  let y;\n  if (typeof universal === 'number') {\n    x = y = universal;\n  } else if (typeof universal === 'string') {\n    const coords = universal.split(/\\s*,\\s*/);\n    if (coords.length === 2) {\n      x = +coords[0];\n      y = +coords[1];\n    } else if (coords.length === 1) {\n      x = y = +coords[0];\n    }\n  } else if (Array.isArray(universal)) {\n    if (universal.length === 2) {\n      x = +universal[0];\n      y = +universal[1];\n    } else if (universal.length === 1) {\n      x = y = +universal[0];\n    }\n  }\n\n  axisX = +axisX;\n  if (!isNaN(axisX)) {\n    x = axisX;\n  }\n\n  axisY = +axisY;\n  if (!isNaN(axisY)) {\n    y = axisY;\n  }\n\n  return [x || defaultValue || 0, y || defaultValue || 0];\n}\n\nexport function transformsArrayToProps(\n  transformObjectsArray: TransformsStyleArray\n) {\n  const props: TransformProps = {};\n  transformObjectsArray?.forEach((transformObject) => {\n    const keys = Object.keys(transformObject);\n    if (keys.length !== 1) {\n      console.error(\n        'You must specify exactly one property per transform object.'\n      );\n    }\n    const key = keys[0] as keyof TransformProps;\n    const value = transformObject[key as keyof typeof transformObject];\n    // @ts-expect-error FIXME\n    props[key] = value;\n  });\n  return props;\n}\n\nexport function props2transform(\n  props: TransformProps | undefined\n): TransformedProps | null {\n  if (!props) {\n    return null;\n  }\n  const {\n    rotation,\n    translate,\n    translateX,\n    translateY,\n    origin,\n    originX,\n    originY,\n    scale,\n    scaleX,\n    scaleY,\n    skew,\n    skewX,\n    skewY,\n    x,\n    y,\n  } = props;\n  if (\n    rotation == null &&\n    translate == null &&\n    translateX == null &&\n    translateY == null &&\n    origin == null &&\n    originX == null &&\n    originY == null &&\n    scale == null &&\n    scaleX == null &&\n    scaleY == null &&\n    skew == null &&\n    skewX == null &&\n    skewY == null &&\n    x == null &&\n    y == null\n  ) {\n    return null;\n  }\n\n  if (Array.isArray(x) || Array.isArray(y)) {\n    console.warn(\n      'Passing SvgLengthList to x or y attribute where SvgLength expected'\n    );\n  }\n  const tr = universal2axis(\n    translate,\n    translateX || (Array.isArray(x) ? x[0] : x),\n    translateY || (Array.isArray(y) ? y[0] : y)\n  );\n  const or = universal2axis(origin, originX, originY);\n  const sc = universal2axis(scale, scaleX, scaleY, 1);\n  const sk = universal2axis(skew, skewX, skewY);\n\n  return {\n    rotation: rotation == null ? 0 : +rotation || 0,\n    originX: or[0],\n    originY: or[1],\n    scaleX: sc[0],\n    scaleY: sc[1],\n    skewX: sk[0],\n    skewY: sk[1],\n    x: tr[0],\n    y: tr[1],\n  };\n}\n\nexport function transformToMatrix(\n  props: TransformedProps | null,\n  transform: TransformProps['transform']\n): ColumnMajorTransformMatrix | null {\n  if (!props && !transform) {\n    return null;\n  }\n  reset();\n  props && appendTransformProps(props);\n\n  if (transform) {\n    if (Array.isArray(transform)) {\n      if (typeof transform[0] === 'number') {\n        const columnMatrix = transform as ColumnMajorTransformMatrix;\n        append(\n          columnMatrix[0],\n          columnMatrix[1],\n          columnMatrix[2],\n          columnMatrix[3],\n          columnMatrix[4],\n          columnMatrix[5]\n        );\n      } else {\n        const transformProps = props2transform(\n          // @ts-expect-error FIXME\n          transformsArrayToProps(transform as TransformsStyleArray)\n        );\n        transformProps && appendTransformProps(transformProps);\n      }\n    } else if (typeof transform === 'string') {\n      try {\n        const t = parse(transform);\n        append(t[0], t[3], t[1], t[4], t[2], t[5]);\n      } catch (e) {\n        console.error(e);\n      }\n    } else {\n      // @ts-expect-error FIXME\n      const transformProps = props2transform(transform);\n      transformProps && appendTransformProps(transformProps);\n    }\n  }\n\n  return toArray();\n}\n\nexport default function extractTransform(\n  props: TransformProps | TransformProps['transform']\n): ColumnMajorTransformMatrix | null {\n  if (Array.isArray(props) && typeof props[0] === 'number') {\n    return props as ColumnMajorTransformMatrix;\n  }\n  if (typeof props === 'string') {\n    try {\n      const t = parse(props);\n      return [t[0], t[3], t[1], t[4], t[2], t[5]];\n    } catch (e) {\n      console.error(e);\n      return identity;\n    }\n  }\n  // this type is not correct since props can be of type TransformsStyle['transform'] too\n  // but it satisfies TS and should not produce any type errors\n  const transformProps = props as TransformProps;\n  return transformToMatrix(\n    props2transform(transformProps),\n    transformProps?.transform\n  );\n}\n\nexport function extractTransformSvgView(\n  props: TransformsStyle\n): TransformsStyle['transform'] {\n  if (typeof props.transform === 'string') {\n    return parseTransformSvgToRnStyle(props.transform);\n  }\n  return props.transform as TransformsStyle['transform'];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}