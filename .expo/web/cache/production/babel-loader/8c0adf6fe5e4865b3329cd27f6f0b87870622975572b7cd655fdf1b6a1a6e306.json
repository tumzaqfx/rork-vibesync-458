{"ast":null,"code":"import{decode83}from'./base83';import{ValidationError}from'./error';import{sRGBToLinear,signPow,linearTosRGB}from'./utils';const validateBlurhash=blurhash=>{if(!blurhash||blurhash.length<6){throw new ValidationError('The blurhash string must be at least 6 characters');}const sizeFlag=decode83(blurhash[0]);const numY=Math.floor(sizeFlag/9)+1;const numX=sizeFlag%9+1;if(blurhash.length!==4+2*numX*numY){throw new ValidationError(`blurhash length mismatch: length is ${blurhash.length} but it should be ${4+2*numX*numY}`);}};export const isBlurhashValid=blurhash=>{try{validateBlurhash(blurhash);}catch(error){return{result:false,errorReason:error.message};}return{result:true};};const decodeDC=value=>{const intR=value>>16;const intG=value>>8&255;const intB=value&255;return[sRGBToLinear(intR),sRGBToLinear(intG),sRGBToLinear(intB)];};const decodeAC=(value,maximumValue)=>{const quantR=Math.floor(value/(19*19));const quantG=Math.floor(value/19)%19;const quantB=value%19;const rgb=[signPow((quantR-9)/9,2.0)*maximumValue,signPow((quantG-9)/9,2.0)*maximumValue,signPow((quantB-9)/9,2.0)*maximumValue];return rgb;};const decode=(blurhash,width,height,punch)=>{validateBlurhash(blurhash);punch=(punch||1)|1;const sizeFlag=decode83(blurhash[0]);const numY=Math.floor(sizeFlag/9)+1;const numX=sizeFlag%9+1;const quantisedMaximumValue=decode83(blurhash[1]);const maximumValue=(quantisedMaximumValue+1)/166;const colors=new Array(numX*numY);for(let i=0;i<colors.length;i++){if(i===0){const value=decode83(blurhash.substring(2,6));colors[i]=decodeDC(value);}else{const value=decode83(blurhash.substring(4+i*2,6+i*2));colors[i]=decodeAC(value,maximumValue*punch);}}const bytesPerRow=width*4;const pixels=new Uint8ClampedArray(bytesPerRow*height);for(let y=0;y<height;y++){for(let x=0;x<width;x++){let r=0;let g=0;let b=0;for(let j=0;j<numY;j++){for(let i=0;i<numX;i++){const basis=Math.cos(Math.PI*x*i/width)*Math.cos(Math.PI*y*j/height);const color=colors[i+j*numX];r+=color[0]*basis;g+=color[1]*basis;b+=color[2]*basis;}}const intR=linearTosRGB(r);const intG=linearTosRGB(g);const intB=linearTosRGB(b);pixels[4*x+0+y*bytesPerRow]=intR;pixels[4*x+1+y*bytesPerRow]=intG;pixels[4*x+2+y*bytesPerRow]=intB;pixels[4*x+3+y*bytesPerRow]=255;}}return pixels;};export default decode;","map":{"version":3,"names":["decode83","ValidationError","sRGBToLinear","signPow","linearTosRGB","validateBlurhash","blurhash","length","sizeFlag","numY","Math","floor","numX","isBlurhashValid","error","result","errorReason","message","decodeDC","value","intR","intG","intB","decodeAC","maximumValue","quantR","quantG","quantB","rgb","decode","width","height","punch","quantisedMaximumValue","colors","Array","i","substring","bytesPerRow","pixels","Uint8ClampedArray","y","x","r","g","b","j","basis","cos","PI","color"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-image/src/utils/blurhash/decode.ts"],"sourcesContent":["import { decode83 } from './base83';\nimport { ValidationError } from './error';\nimport { sRGBToLinear, signPow, linearTosRGB } from './utils';\n\n/**\n * Returns an error message if invalid or undefined if valid\n * @param blurhash\n */\nconst validateBlurhash = (blurhash: string) => {\n  if (!blurhash || blurhash.length < 6) {\n    throw new ValidationError('The blurhash string must be at least 6 characters');\n  }\n\n  const sizeFlag = decode83(blurhash[0]);\n  const numY = Math.floor(sizeFlag / 9) + 1;\n  const numX = (sizeFlag % 9) + 1;\n\n  if (blurhash.length !== 4 + 2 * numX * numY) {\n    throw new ValidationError(\n      `blurhash length mismatch: length is ${blurhash.length} but it should be ${\n        4 + 2 * numX * numY\n      }`\n    );\n  }\n};\n\nexport const isBlurhashValid = (blurhash: string): { result: boolean; errorReason?: string } => {\n  try {\n    validateBlurhash(blurhash);\n  } catch (error: any) {\n    return { result: false, errorReason: error.message };\n  }\n\n  return { result: true };\n};\n\nconst decodeDC = (value: number) => {\n  const intR = value >> 16;\n  const intG = (value >> 8) & 255;\n  const intB = value & 255;\n  return [sRGBToLinear(intR), sRGBToLinear(intG), sRGBToLinear(intB)];\n};\n\nconst decodeAC = (value: number, maximumValue: number) => {\n  const quantR = Math.floor(value / (19 * 19));\n  const quantG = Math.floor(value / 19) % 19;\n  const quantB = value % 19;\n\n  const rgb = [\n    signPow((quantR - 9) / 9, 2.0) * maximumValue,\n    signPow((quantG - 9) / 9, 2.0) * maximumValue,\n    signPow((quantB - 9) / 9, 2.0) * maximumValue,\n  ];\n\n  return rgb;\n};\n\nconst decode = (blurhash: string, width: number, height: number, punch?: number) => {\n  validateBlurhash(blurhash);\n\n  punch = (punch || 1) | 1;\n\n  const sizeFlag = decode83(blurhash[0]);\n  const numY = Math.floor(sizeFlag / 9) + 1;\n  const numX = (sizeFlag % 9) + 1;\n\n  const quantisedMaximumValue = decode83(blurhash[1]);\n  const maximumValue = (quantisedMaximumValue + 1) / 166;\n\n  const colors = new Array(numX * numY);\n\n  for (let i = 0; i < colors.length; i++) {\n    if (i === 0) {\n      const value = decode83(blurhash.substring(2, 6));\n      colors[i] = decodeDC(value);\n    } else {\n      const value = decode83(blurhash.substring(4 + i * 2, 6 + i * 2));\n      colors[i] = decodeAC(value, maximumValue * punch);\n    }\n  }\n\n  const bytesPerRow = width * 4;\n  const pixels = new Uint8ClampedArray(bytesPerRow * height);\n\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      let r = 0;\n      let g = 0;\n      let b = 0;\n\n      for (let j = 0; j < numY; j++) {\n        for (let i = 0; i < numX; i++) {\n          const basis = Math.cos((Math.PI * x * i) / width) * Math.cos((Math.PI * y * j) / height);\n          const color = colors[i + j * numX];\n          r += color[0] * basis;\n          g += color[1] * basis;\n          b += color[2] * basis;\n        }\n      }\n\n      const intR = linearTosRGB(r);\n      const intG = linearTosRGB(g);\n      const intB = linearTosRGB(b);\n\n      pixels[4 * x + 0 + y * bytesPerRow] = intR;\n      pixels[4 * x + 1 + y * bytesPerRow] = intG;\n      pixels[4 * x + 2 + y * bytesPerRow] = intB;\n      pixels[4 * x + 3 + y * bytesPerRow] = 255; // alpha\n    }\n  }\n  return pixels;\n};\n\nexport default decode;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}