{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.Prefetch=Prefetch;const react_1=require(\"react\");const imperative_api_1=require(\"./imperative-api\");const useLoadedNavigation_1=require(\"./link/useLoadedNavigation\");function Prefetch(props){const navigation=(0,useLoadedNavigation_1.useOptionalNavigation)();(0,react_1.useLayoutEffect)(()=>{if(navigation?.isFocused()){imperative_api_1.router.prefetch(props.href);}},[navigation,props.href]);return null;}","map":{"version":3,"names":["exports","Prefetch","react_1","require","imperative_api_1","useLoadedNavigation_1","props","navigation","useOptionalNavigation","useLayoutEffect","isFocused","router","prefetch","href"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-router/src/Prefetch.tsx"],"sourcesContent":["import { useLayoutEffect } from 'react';\n\nimport { router } from './imperative-api';\nimport { useOptionalNavigation } from './link/useLoadedNavigation';\nimport { Href } from './types';\n\nexport type PreloadProps = {\n  href: Href;\n};\n\n/**\n * When rendered on a focused screen, this component will preload the specified route.\n */\nexport function Prefetch(props: PreloadProps) {\n  const navigation = useOptionalNavigation();\n\n  useLayoutEffect(() => {\n    if (navigation?.isFocused()) {\n      router.prefetch(props.href);\n    }\n  }, [navigation, props.href]);\n\n  return null;\n}\n"],"mappings":"sEAaAA,OAAA,CAAAC,QAAA,CAAAA,QAAA,CAbA,MAAAC,OAAA,CAAAC,OAAA,UAEA,MAAAC,gBAAA,CAAAD,OAAA,qBACA,MAAAE,qBAAA,CAAAF,OAAA,+BAUA,QAAgB,CAAAF,QAAQA,CAACK,KAAmB,EAC1C,KAAM,CAAAC,UAAU,CAAG,GAAAF,qBAAA,CAAAG,qBAAqB,GAAE,CAE1C,GAAAN,OAAA,CAAAO,eAAe,EAAC,IAAK,CACnB,GAAIF,UAAU,EAAEG,SAAS,EAAE,CAAE,CAC3BN,gBAAA,CAAAO,MAAM,CAACC,QAAQ,CAACN,KAAK,CAACO,IAAI,CAAC,CAC7B,CACF,CAAC,CAAE,CAACN,UAAU,CAAED,KAAK,CAACO,IAAI,CAAC,CAAC,CAE5B,MAAO,KAAI,CACb","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}