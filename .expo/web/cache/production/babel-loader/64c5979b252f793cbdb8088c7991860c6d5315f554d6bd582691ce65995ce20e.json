{"ast":null,"code":"import Platform from\"react-native-web/dist/exports/Platform\";export class BackendHealthCheck{static getBackendUrl(){const backendUrl=process.env.EXPO_PUBLIC_BACKEND_URL||'http://localhost:3000';if(true){console.log('[BackendHealth] Web: Using backend URL:',backendUrl);return backendUrl;}if(backendUrl.includes('localhost')){const localIp='10.0.2.2';const port=backendUrl.split(':')[2]||'3000';const androidUrl=`http://${localIp}:${port}`;console.log('[BackendHealth] Native: Converting localhost to Android emulator URL:',androidUrl);return androidUrl;}console.log('[BackendHealth] Native: Using backend URL:',backendUrl);return backendUrl;}static backendUrl=BackendHealthCheck.getBackendUrl();static healthCheckCache=null;static CACHE_DURATION=60000;static monitoringInterval=null;static healthChangeListeners=[];static lastHealthStatus=null;static async isBackendRunning(){if(!this.backendUrl){console.warn('[BackendHealth] No backend URL configured');return false;}if(this.backendUrl==='http://localhost:3000'){console.log('[BackendHealth] Using local backend URL:',this.backendUrl);}const now=Date.now();if(this.healthCheckCache&&now-this.healthCheckCache.timestamp<this.CACHE_DURATION){console.log('[BackendHealth] Using cached health status:',this.healthCheckCache.isHealthy);return this.healthCheckCache.isHealthy;}const healthEndpoints=['/health','/api/health'];for(const endpoint of healthEndpoints){try{const url=`${this.backendUrl}${endpoint}`;console.log('[BackendHealth] Checking backend health at:',url);const controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),10000);const response=await fetch(url,{method:'GET',signal:controller.signal,headers:{'Accept':'application/json','Content-Type':'application/json'},mode:true?'cors':undefined});clearTimeout(timeoutId);if(response.ok){const data=await response.json();const isHealthy=data.status==='ok';this.healthCheckCache={isHealthy,timestamp:now};console.log('[BackendHealth] ✅ Backend health check passed:',data);return isHealthy;}else{console.log(`[BackendHealth] ❌ Health check returned status ${response.status}`);}}catch(error){const errorMsg=error?.message||String(error);console.log(`[BackendHealth] ❌ Health check failed for ${endpoint}:`,errorMsg);if(errorMsg.includes('Network request failed')){console.log('[BackendHealth] 💡 Tip: Make sure backend is running on',this.backendUrl);if(true&&this.backendUrl.includes('localhost')){console.log('[BackendHealth] 💡 Web Tip: Consider using tunnel URL instead of localhost');}}continue;}}console.log('[BackendHealth] All health check endpoints failed');this.healthCheckCache={isHealthy:false,timestamp:now};return false;}static clearCache(){this.healthCheckCache=null;}static startMonitoring(intervalMs=30000){if(this.monitoringInterval){console.log('[BackendHealth] Monitoring already started');return;}console.log('[BackendHealth] Starting health monitoring with interval:',intervalMs);this.monitoringInterval=setInterval(async()=>{const isHealthy=await this.isBackendRunning();if(this.lastHealthStatus!==null&&this.lastHealthStatus!==isHealthy){this.notifyHealthChange(isHealthy);}this.lastHealthStatus=isHealthy;},intervalMs);this.isBackendRunning().then(isHealthy=>{this.lastHealthStatus=isHealthy;});}static stopMonitoring(){if(this.monitoringInterval){clearInterval(this.monitoringInterval);this.monitoringInterval=null;console.log('[BackendHealth] Monitoring stopped');}}static onHealthChange(callback){this.healthChangeListeners.push(callback);return()=>{const index=this.healthChangeListeners.indexOf(callback);if(index>-1){this.healthChangeListeners.splice(index,1);}};}static notifyHealthChange(isHealthy){this.healthChangeListeners.forEach(listener=>{try{listener(isHealthy);}catch(error){console.error('[BackendHealth] Error in health change listener:',error);}});}static getCurrentHealthStatus(){return this.lastHealthStatus;}}","map":{"version":3,"names":["BackendHealthCheck","getBackendUrl","backendUrl","process","env","EXPO_PUBLIC_BACKEND_URL","console","log","includes","localIp","port","split","androidUrl","healthCheckCache","CACHE_DURATION","monitoringInterval","healthChangeListeners","lastHealthStatus","isBackendRunning","warn","now","Date","timestamp","isHealthy","healthEndpoints","endpoint","url","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","signal","headers","mode","undefined","clearTimeout","ok","data","json","status","error","errorMsg","message","String","clearCache","startMonitoring","intervalMs","setInterval","notifyHealthChange","then","stopMonitoring","clearInterval","onHealthChange","callback","push","index","indexOf","splice","forEach","listener","getCurrentHealthStatus"],"sources":["/home/user/rork-vibesync-458/utils/backend-health.ts"],"sourcesContent":["import { Platform } from 'react-native';\n\nexport class BackendHealthCheck {\n  private static getBackendUrl() {\n    const backendUrl = process.env.EXPO_PUBLIC_BACKEND_URL || 'http://localhost:3000';\n    \n    if (Platform.OS === 'web') {\n      console.log('[BackendHealth] Web: Using backend URL:', backendUrl);\n      return backendUrl;\n    }\n    \n    if (backendUrl.includes('localhost')) {\n      const localIp = '10.0.2.2';\n      const port = backendUrl.split(':')[2] || '3000';\n      const androidUrl = `http://${localIp}:${port}`;\n      console.log('[BackendHealth] Native: Converting localhost to Android emulator URL:', androidUrl);\n      return androidUrl;\n    }\n    \n    console.log('[BackendHealth] Native: Using backend URL:', backendUrl);\n    return backendUrl;\n  }\n  private static backendUrl = BackendHealthCheck.getBackendUrl();\n  private static healthCheckCache: { isHealthy: boolean; timestamp: number } | null = null;\n  private static CACHE_DURATION = 60000;\n  private static monitoringInterval: ReturnType<typeof setInterval> | null = null;\n  private static healthChangeListeners: ((isHealthy: boolean) => void)[] = [];\n  private static lastHealthStatus: boolean | null = null;\n\n  static async isBackendRunning(): Promise<boolean> {\n    if (!this.backendUrl) {\n      console.warn('[BackendHealth] No backend URL configured');\n      return false;\n    }\n\n    if (this.backendUrl === 'http://localhost:3000') {\n      console.log('[BackendHealth] Using local backend URL:', this.backendUrl);\n    }\n\n    const now = Date.now();\n    if (\n      this.healthCheckCache &&\n      now - this.healthCheckCache.timestamp < this.CACHE_DURATION\n    ) {\n      console.log('[BackendHealth] Using cached health status:', this.healthCheckCache.isHealthy);\n      return this.healthCheckCache.isHealthy;\n    }\n\n    const healthEndpoints = ['/health', '/api/health'];\n    \n    for (const endpoint of healthEndpoints) {\n      try {\n        const url = `${this.backendUrl}${endpoint}`;\n        console.log('[BackendHealth] Checking backend health at:', url);\n        \n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n        const response = await fetch(url, {\n          method: 'GET',\n          signal: controller.signal,\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n          },\n          mode: Platform.OS === 'web' ? 'cors' : undefined,\n        });\n\n        clearTimeout(timeoutId);\n\n        if (response.ok) {\n          const data = await response.json();\n          const isHealthy = data.status === 'ok';\n          this.healthCheckCache = { isHealthy, timestamp: now };\n          \n          console.log('[BackendHealth] ✅ Backend health check passed:', data);\n          return isHealthy;\n        } else {\n          console.log(`[BackendHealth] ❌ Health check returned status ${response.status}`);\n        }\n      } catch (error: any) {\n        const errorMsg = error?.message || String(error);\n        console.log(`[BackendHealth] ❌ Health check failed for ${endpoint}:`, errorMsg);\n        \n        if (errorMsg.includes('Network request failed')) {\n          console.log('[BackendHealth] 💡 Tip: Make sure backend is running on', this.backendUrl);\n          if (Platform.OS === 'web' && this.backendUrl.includes('localhost')) {\n            console.log('[BackendHealth] 💡 Web Tip: Consider using tunnel URL instead of localhost');\n          }\n        }\n        continue;\n      }\n    }\n\n    console.log('[BackendHealth] All health check endpoints failed');\n    this.healthCheckCache = { isHealthy: false, timestamp: now };\n    return false;\n  }\n\n  static clearCache(): void {\n    this.healthCheckCache = null;\n  }\n\n  static startMonitoring(intervalMs: number = 30000): void {\n    if (this.monitoringInterval) {\n      console.log('[BackendHealth] Monitoring already started');\n      return;\n    }\n\n    console.log('[BackendHealth] Starting health monitoring with interval:', intervalMs);\n    \n    this.monitoringInterval = setInterval(async () => {\n      const isHealthy = await this.isBackendRunning();\n      \n      if (this.lastHealthStatus !== null && this.lastHealthStatus !== isHealthy) {\n        this.notifyHealthChange(isHealthy);\n      }\n      \n      this.lastHealthStatus = isHealthy;\n    }, intervalMs);\n\n    this.isBackendRunning().then((isHealthy) => {\n      this.lastHealthStatus = isHealthy;\n    });\n  }\n\n  static stopMonitoring(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n      console.log('[BackendHealth] Monitoring stopped');\n    }\n  }\n\n  static onHealthChange(callback: (isHealthy: boolean) => void): () => void {\n    this.healthChangeListeners.push(callback);\n    \n    return () => {\n      const index = this.healthChangeListeners.indexOf(callback);\n      if (index > -1) {\n        this.healthChangeListeners.splice(index, 1);\n      }\n    };\n  }\n\n  private static notifyHealthChange(isHealthy: boolean): void {\n    this.healthChangeListeners.forEach((listener) => {\n      try {\n        listener(isHealthy);\n      } catch (error) {\n        console.error('[BackendHealth] Error in health change listener:', error);\n      }\n    });\n  }\n\n  static getCurrentHealthStatus(): boolean | null {\n    return this.lastHealthStatus;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}