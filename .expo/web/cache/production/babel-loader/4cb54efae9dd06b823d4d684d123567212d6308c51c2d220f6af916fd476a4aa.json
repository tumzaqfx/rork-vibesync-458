{"ast":null,"code":"var _Reanimated;import{tagMessage}from'../../utils';let Reanimated;try{Reanimated=require('react-native-reanimated');}catch(e){Reanimated=undefined;}if(!((_Reanimated=Reanimated)!==null&&_Reanimated!==void 0&&_Reanimated.useSharedValue)){Reanimated=undefined;}const _worklet_7298969188432_init_data={code:\"function reactNativeGestureHandler_reanimatedWrapperJs1(){const{tagMessage}=this.__closure;console.warn(tagMessage('Please use newer version of react-native-reanimated in order to control state of the gestures.'));}\"};if(Reanimated!==undefined&&!Reanimated.setGestureState){Reanimated.setGestureState=function(){const reactNativeGestureHandler_reanimatedWrapperJs1=function(){console.warn(tagMessage('Please use newer version of react-native-reanimated in order to control state of the gestures.'));};reactNativeGestureHandler_reanimatedWrapperJs1.__closure={tagMessage};reactNativeGestureHandler_reanimatedWrapperJs1.__workletHash=7298969188432;reactNativeGestureHandler_reanimatedWrapperJs1.__initData=_worklet_7298969188432_init_data;return reactNativeGestureHandler_reanimatedWrapperJs1;}();}export{Reanimated};","map":{"version":3,"names":["tagMessage","Reanimated","require","e","undefined","_Reanimated","useSharedValue","_worklet_7298969188432_init_data","code","setGestureState","reactNativeGestureHandler_reanimatedWrapperJs1","console","warn","__closure","__workletHash","__initData"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/reanimatedWrapper.ts"],"sourcesContent":["import { ComponentClass } from 'react';\nimport {\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { tagMessage } from '../../utils';\n\nexport interface SharedValue<T> {\n  value: T;\n}\n\nlet Reanimated:\n  | {\n      default: {\n        // Slightly modified definition copied from 'react-native-reanimated'\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        createAnimatedComponent<P extends object>(\n          component: ComponentClass<P>,\n          options?: unknown\n        ): ComponentClass<P>;\n      };\n      useEvent: (\n        callback: (event: GestureUpdateEvent | GestureStateChangeEvent) => void,\n        events: string[],\n        rebuild: boolean\n      ) => unknown;\n      useSharedValue: <T>(value: T) => SharedValue<T>;\n      setGestureState: (handlerTag: number, newState: number) => void;\n    }\n  | undefined;\n\ntry {\n  Reanimated = require('react-native-reanimated');\n} catch (e) {\n  // When 'react-native-reanimated' is not available we want to quietly continue\n  // @ts-ignore TS demands the variable to be initialized\n  Reanimated = undefined;\n}\n\nif (!Reanimated?.useSharedValue) {\n  // @ts-ignore Make sure the loaded module is actually Reanimated, if it's not\n  // reset the module to undefined so we can fallback to the default implementation\n  Reanimated = undefined;\n}\n\nif (Reanimated !== undefined && !Reanimated.setGestureState) {\n  // The loaded module is Reanimated but it doesn't have the setGestureState defined\n  Reanimated.setGestureState = () => {\n    'worklet';\n    console.warn(\n      tagMessage(\n        'Please use newer version of react-native-reanimated in order to control state of the gestures.'\n      )\n    );\n  };\n}\n\nexport { Reanimated };\n"],"mappings":"gBAKA,OAASA,UAAT,KAA2B,aAA3B,CAMA,GAAI,CAAAC,UAAJ,CAoBA,GAAI,CACFA,UAAU,CAAGC,OAAO,CAAC,yBAAD,CAApB,CACD,CAAC,MAAOC,CAAP,CAAU,CAGVF,UAAU,CAAGG,SAAb,CACD,CAED,GAAI,GAAAC,WAAA,CAACJ,UAAD,UAAAI,WAAA,WAACA,WAAA,CAAYC,cAAb,CAAJ,CAAiC,CAG/BL,UAAU,CAAGG,SAAb,CACD,OAAAG,gCAAA,EAAAC,IAAA,4NAED,GAAIP,UAAU,GAAKG,SAAf,EAA4B,CAACH,UAAU,CAACQ,eAA5C,CAA6D,CAE3DR,UAAU,CAACQ,eAAX,CAA6B,iBAAAC,8CAAA,SAAAA,CAAA,CAAM,CAEjCC,OAAO,CAACC,IAAR,CACEZ,UAAU,CACR,gGADQ,CADZ,EAKD,CAPD,CAAAU,8CAAA,CAAAG,SAAA,EAAAb,UAAA,EAAAU,8CAAA,CAAAI,aAAA,eAAAJ,8CAAA,CAAAK,UAAA,CAAAR,gCAAA,QAAAG,8CAAA,EAA6B,EAA7B,CAQD,CAED,OAAST,UAAT","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}