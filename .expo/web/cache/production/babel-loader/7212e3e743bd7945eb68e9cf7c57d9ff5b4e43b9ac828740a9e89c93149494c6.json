{"ast":null,"code":"import{requireNativeView}from'expo';import{Platform,requireOptionalNativeModule}from'expo-modules-core';import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";let NativeContactAccessButton=null;if(false){NativeContactAccessButton=requireNativeView('ExpoContactAccessButton');}export default class ContactAccessButton extends React.PureComponent{static isAvailable(){return false&&(requireOptionalNativeModule('ExpoContactAccessButton')?.isAvailable??false);}render(){if(true||!NativeContactAccessButton){return null;}return _jsx(NativeContactAccessButton,Object.assign({},this.props));}}","map":{"version":3,"names":["requireNativeView","Platform","requireOptionalNativeModule","React","jsx","_jsx","NativeContactAccessButton","ContactAccessButton","PureComponent","isAvailable","render","Object","assign","props"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-contacts/src/ContactAccessButton.tsx"],"sourcesContent":["import { requireNativeView } from 'expo';\nimport { Platform, requireOptionalNativeModule } from 'expo-modules-core';\nimport React from 'react';\nimport { ColorValue, ViewProps } from 'react-native';\n\nexport type ContactAccessButtonProps = ViewProps & {\n  /**\n   * A string to match against contacts not yet exposed to the app.\n   * You typically get this value from a search UI that your app presents, like a text field.\n   * @platform ios 18.0+\n   */\n  query?: string;\n\n  /**\n   * When the query produces a single result, the contact access button shows the caption under the matching contact name.\n   * It can be nothing (default), email address or phone number.\n   * @platform ios 18.0+\n   */\n  caption?: 'default' | 'email' | 'phone';\n\n  /**\n   * An array of email addresses. The search omits contacts matching query that also match any email address in this array.\n   * @platform ios 18.0+\n   */\n  ignoredEmails?: string[];\n\n  /**\n   * An array of phone numbers. The search omits contacts matching query that also match any phone number in this set.\n   * @platform ios 18.0+\n   */\n  ignoredPhoneNumbers?: string[];\n\n  /**\n   * A tint color of the button and the modal that is presented when there is more than one match.\n   * @platform ios 18.0+\n   */\n  tintColor?: ColorValue;\n\n  /**\n   * A color of the button's background. Provided color should not be transparent,\n   * otherwise it may not satisfy platform requirements for button legibility.\n   * @platform ios 18.0+\n   */\n  backgroundColor?: ColorValue;\n\n  /**\n   * A color of the button's title. Slightly dimmed version of this color is used for the caption text.\n   * Make sure there is a good contrast between the text and the background,\n   * otherwise platform requirements for button legibility may not be satisfied.\n   * @platform ios 18.0+\n   */\n  textColor?: ColorValue;\n};\n\ntype ContactAccessButtonModule = {\n  /**\n   * Boolean value whether the contact access button is available on this platform.\n   */\n  isAvailable: boolean;\n};\n\nlet NativeContactAccessButton: React.ComponentType<ContactAccessButtonProps> | null = null;\n\nif (Platform.OS === 'ios') {\n  NativeContactAccessButton = requireNativeView('ExpoContactAccessButton');\n}\n\n/**\n * Creates a contact access button to quickly add contacts under limited-access authorization.\n *\n * For more details, you can read the Apple docs about the underlying [`ContactAccessButton`](https://developer.apple.com/documentation/contactsui/contactaccessbutton) SwiftUI view.\n *\n * @platform ios 18.0+\n */\nexport default class ContactAccessButton extends React.PureComponent<ContactAccessButtonProps> {\n  /**\n   * Returns a boolean whether the `ContactAccessButton` is available on the platform.\n   * This is `true` only on iOS 18.0 and newer.\n   */\n  static isAvailable(): boolean {\n    return (\n      Platform.OS === 'ios' &&\n      (requireOptionalNativeModule<ContactAccessButtonModule>('ExpoContactAccessButton')\n        ?.isAvailable ??\n        false)\n    );\n  }\n\n  render() {\n    if (Platform.OS !== 'ios' || !NativeContactAccessButton) {\n      return null;\n    }\n    return <NativeContactAccessButton {...this.props} />;\n  }\n}\n"],"mappings":"AAAA,OAASA,iBAAiB,KAAQ,MAAM,CACxC,OAASC,QAAQ,CAAEC,2BAA2B,KAAQ,mBAAmB,CACzE,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBA2D1B,GAAI,CAAAC,yBAA+E,CAAG,IAAI,CAE1F,SAA2B,CACzBA,yBAAyB,CAAGN,iBAAiB,CAAC,yBAAyB,CAAC,CAC1E,CASA,cAAe,MAAM,CAAAO,mBAAmB,QAAS,CAAAJ,KAAK,CAACK,aAAwC,CAK7F,MAAO,CAAAC,WAAWA,CAAA,CAAY,CAC5B,MACE,SACCP,2BAA2B,CAA4B,yBAAyB,CAAC,EAC9EO,WAAW,EACb,KAAK,CAAC,CAEZ,CAEAC,MAAMA,CAAA,CAAG,CACP,GAAI,MAAyB,CAACJ,yBAAyB,CAAE,CACvD,MAAO,KAAI,CACb,CACA,MAAO,CAAAD,IAAA,CAACC,yBAAyB,CAAAK,MAAA,CAAAC,MAAA,IAAK,IAAI,CAACC,KAAK,CAAG,CAAC,CACtD,CACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}