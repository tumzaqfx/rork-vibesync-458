{"ast":null,"code":"import{transformIntoHandlerTags}from'../../utils';import{MountRegistry}from'../../../mountRegistry';import{useEffect}from'react';function shouldUpdateDetector(relation,gesture){if(relation===undefined){return false;}for(const tag of transformIntoHandlerTags(relation)){if(tag===gesture.handlerTag){return true;}}return false;}export function useMountReactions(updateDetector,state){useEffect(()=>{return MountRegistry.addMountListener(gesture=>{for(const attachedGesture of state.attachedGestures){const blocksHandlers=attachedGesture.config.blocksHandlers;const requireToFail=attachedGesture.config.requireToFail;const simultaneousWith=attachedGesture.config.simultaneousWith;if(shouldUpdateDetector(blocksHandlers,gesture)||shouldUpdateDetector(requireToFail,gesture)||shouldUpdateDetector(simultaneousWith,gesture)){updateDetector();return;}}});},[updateDetector,state]);}","map":{"version":3,"names":["transformIntoHandlerTags","MountRegistry","useEffect","shouldUpdateDetector","relation","gesture","undefined","tag","handlerTag","useMountReactions","updateDetector","state","addMountListener","attachedGesture","attachedGestures","blocksHandlers","config","requireToFail","simultaneousWith"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/GestureDetector/useMountReactions.ts"],"sourcesContent":["import { transformIntoHandlerTags } from '../../utils';\nimport { MountRegistry } from '../../../mountRegistry';\nimport { AttachedGestureState } from './types';\nimport { useEffect } from 'react';\nimport { GestureRef } from '../gesture';\n\nfunction shouldUpdateDetector(\n  relation: GestureRef[] | undefined,\n  gesture: { handlerTag: number }\n) {\n  if (relation === undefined) {\n    return false;\n  }\n\n  for (const tag of transformIntoHandlerTags(relation)) {\n    if (tag === gesture.handlerTag) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function useMountReactions(\n  updateDetector: () => void,\n  state: AttachedGestureState\n) {\n  useEffect(() => {\n    return MountRegistry.addMountListener((gesture) => {\n      // At this point the ref in the gesture config should be updated, so we can check if one of the gestures\n      // set in a relation with the gesture got mounted. If so, we need to update the detector to propagate\n      // the changes to the native side.\n      for (const attachedGesture of state.attachedGestures) {\n        const blocksHandlers = attachedGesture.config.blocksHandlers;\n        const requireToFail = attachedGesture.config.requireToFail;\n        const simultaneousWith = attachedGesture.config.simultaneousWith;\n\n        if (\n          shouldUpdateDetector(blocksHandlers, gesture) ||\n          shouldUpdateDetector(requireToFail, gesture) ||\n          shouldUpdateDetector(simultaneousWith, gesture)\n        ) {\n          updateDetector();\n\n          // We can safely return here, if any other gestures should be updated, they will be by the above call\n          return;\n        }\n      }\n    });\n  }, [updateDetector, state]);\n}\n"],"mappings":"AAAA,OAASA,wBAAT,KAAyC,aAAzC,CACA,OAASC,aAAT,KAA8B,wBAA9B,CAEA,OAASC,SAAT,KAA0B,OAA1B,CAGA,QAAS,CAAAC,oBAATA,CACEC,QADF,CAEEC,OAFF,CAGE,CACA,GAAID,QAAQ,GAAKE,SAAjB,CAA4B,CAC1B,MAAO,MAAP,CACD,CAED,IAAK,KAAM,CAAAC,GAAX,GAAkB,CAAAP,wBAAwB,CAACI,QAAD,CAA1C,CAAsD,CACpD,GAAIG,GAAG,GAAKF,OAAO,CAACG,UAApB,CAAgC,CAC9B,MAAO,KAAP,CACD,CACF,CAED,MAAO,MAAP,CACD,CAED,MAAO,SAAS,CAAAC,iBAATA,CACLC,cADK,CAELC,KAFK,CAGL,CACAT,SAAS,CAAC,IAAM,CACd,MAAO,CAAAD,aAAa,CAACW,gBAAd,CAAgCP,OAAD,EAAa,CAIjD,IAAK,KAAM,CAAAQ,eAAX,GAA8B,CAAAF,KAAK,CAACG,gBAApC,CAAsD,CACpD,KAAM,CAAAC,cAAc,CAAGF,eAAe,CAACG,MAAhB,CAAuBD,cAA9C,CACA,KAAM,CAAAE,aAAa,CAAGJ,eAAe,CAACG,MAAhB,CAAuBC,aAA7C,CACA,KAAM,CAAAC,gBAAgB,CAAGL,eAAe,CAACG,MAAhB,CAAuBE,gBAAhD,CAEA,GACEf,oBAAoB,CAACY,cAAD,CAAiBV,OAAjB,CAApB,EACAF,oBAAoB,CAACc,aAAD,CAAgBZ,OAAhB,CADpB,EAEAF,oBAAoB,CAACe,gBAAD,CAAmBb,OAAnB,CAHtB,CAIE,CACAK,cAAc,GAGd,OACD,CACF,CACF,CApBM,CAAP,CAqBD,CAtBQ,CAsBN,CAACA,cAAD,CAAiBC,KAAjB,CAtBM,CAAT,CAuBD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}