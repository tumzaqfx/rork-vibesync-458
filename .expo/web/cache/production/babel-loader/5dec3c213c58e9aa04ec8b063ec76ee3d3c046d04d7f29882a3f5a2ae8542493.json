{"ast":null,"code":"import createHandler from'./createHandler';import{baseGestureHandlerProps}from'./gestureHandlerCommon';export const panGestureHandlerProps=['activeOffsetY','activeOffsetX','failOffsetY','failOffsetX','minDist','minVelocity','minVelocityX','minVelocityY','minPointers','maxPointers','avgTouches','enableTrackpadTwoFingerGesture','activateAfterLongPress'];export const panGestureHandlerCustomNativeProps=['activeOffsetYStart','activeOffsetYEnd','activeOffsetXStart','activeOffsetXEnd','failOffsetYStart','failOffsetYEnd','failOffsetXStart','failOffsetXEnd'];export const panHandlerName='PanGestureHandler';export const PanGestureHandler=createHandler({name:panHandlerName,allowedProps:[...baseGestureHandlerProps,...panGestureHandlerProps],config:{},transformProps:managePanProps,customNativeProps:panGestureHandlerCustomNativeProps});function validatePanGestureHandlerProps(props){if(Array.isArray(props.activeOffsetX)&&(props.activeOffsetX[0]>0||props.activeOffsetX[1]<0)){throw new Error(`First element of activeOffsetX should be negative, a the second one should be positive`);}if(Array.isArray(props.activeOffsetY)&&(props.activeOffsetY[0]>0||props.activeOffsetY[1]<0)){throw new Error(`First element of activeOffsetY should be negative, a the second one should be positive`);}if(Array.isArray(props.failOffsetX)&&(props.failOffsetX[0]>0||props.failOffsetX[1]<0)){throw new Error(`First element of failOffsetX should be negative, a the second one should be positive`);}if(Array.isArray(props.failOffsetY)&&(props.failOffsetY[0]>0||props.failOffsetY[1]<0)){throw new Error(`First element of failOffsetY should be negative, a the second one should be positive`);}if(props.minDist&&(props.failOffsetX||props.failOffsetY)){throw new Error(`It is not supported to use minDist with failOffsetX or failOffsetY, use activeOffsetX and activeOffsetY instead`);}if(props.minDist&&(props.activeOffsetX||props.activeOffsetY)){throw new Error(`It is not supported to use minDist with activeOffsetX or activeOffsetY`);}}function transformPanGestureHandlerProps(props){const res=Object.assign({},props);if(props.activeOffsetX!==undefined){delete res.activeOffsetX;if(Array.isArray(props.activeOffsetX)){res.activeOffsetXStart=props.activeOffsetX[0];res.activeOffsetXEnd=props.activeOffsetX[1];}else if(props.activeOffsetX<0){res.activeOffsetXStart=props.activeOffsetX;}else{res.activeOffsetXEnd=props.activeOffsetX;}}if(props.activeOffsetY!==undefined){delete res.activeOffsetY;if(Array.isArray(props.activeOffsetY)){res.activeOffsetYStart=props.activeOffsetY[0];res.activeOffsetYEnd=props.activeOffsetY[1];}else if(props.activeOffsetY<0){res.activeOffsetYStart=props.activeOffsetY;}else{res.activeOffsetYEnd=props.activeOffsetY;}}if(props.failOffsetX!==undefined){delete res.failOffsetX;if(Array.isArray(props.failOffsetX)){res.failOffsetXStart=props.failOffsetX[0];res.failOffsetXEnd=props.failOffsetX[1];}else if(props.failOffsetX<0){res.failOffsetXStart=props.failOffsetX;}else{res.failOffsetXEnd=props.failOffsetX;}}if(props.failOffsetY!==undefined){delete res.failOffsetY;if(Array.isArray(props.failOffsetY)){res.failOffsetYStart=props.failOffsetY[0];res.failOffsetYEnd=props.failOffsetY[1];}else if(props.failOffsetY<0){res.failOffsetYStart=props.failOffsetY;}else{res.failOffsetYEnd=props.failOffsetY;}}return res;}export function managePanProps(props){if(false){validatePanGestureHandlerProps(props);}return transformPanGestureHandlerProps(props);}","map":{"version":3,"names":["createHandler","baseGestureHandlerProps","panGestureHandlerProps","panGestureHandlerCustomNativeProps","panHandlerName","PanGestureHandler","name","allowedProps","config","transformProps","managePanProps","customNativeProps","validatePanGestureHandlerProps","props","Array","isArray","activeOffsetX","Error","activeOffsetY","failOffsetX","failOffsetY","minDist","transformPanGestureHandlerProps","res","Object","assign","undefined","activeOffsetXStart","activeOffsetXEnd","activeOffsetYStart","activeOffsetYEnd","failOffsetXStart","failOffsetXEnd","failOffsetYStart","failOffsetYEnd"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-gesture-handler/lib/module/handlers/PanGestureHandler.ts"],"sourcesContent":["import type { PanGestureHandlerEventPayload } from './GestureHandlerEventPayload';\nimport createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const panGestureHandlerProps = [\n  'activeOffsetY',\n  'activeOffsetX',\n  'failOffsetY',\n  'failOffsetX',\n  'minDist',\n  'minVelocity',\n  'minVelocityX',\n  'minVelocityY',\n  'minPointers',\n  'maxPointers',\n  'avgTouches',\n  'enableTrackpadTwoFingerGesture',\n  'activateAfterLongPress',\n] as const;\n\nexport const panGestureHandlerCustomNativeProps = [\n  'activeOffsetYStart',\n  'activeOffsetYEnd',\n  'activeOffsetXStart',\n  'activeOffsetXEnd',\n  'failOffsetYStart',\n  'failOffsetYEnd',\n  'failOffsetXStart',\n  'failOffsetXEnd',\n] as const;\n\ninterface CommonPanProperties {\n  /**\n   * Minimum distance the finger (or multiple finger) need to travel before the\n   * handler activates. Expressed in points.\n   */\n  minDist?: number;\n\n  /**\n   * Android only.\n   */\n  avgTouches?: boolean;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * enableTrackpadTwoFingerGesture swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * A number of fingers that is required to be placed before handler can\n   * activate. Should be a higher or equal to 0 integer.\n   */\n  minPointers?: number;\n\n  /**\n   * When the given number of fingers is placed on the screen and handler hasn't\n   * yet activated it will fail recognizing the gesture. Should be a higher or\n   * equal to 0 integer.\n   */\n  maxPointers?: number;\n\n  minVelocity?: number;\n  minVelocityX?: number;\n  minVelocityY?: number;\n  activateAfterLongPress?: number;\n}\n\nexport interface PanGestureConfig extends CommonPanProperties {\n  activeOffsetYStart?: number;\n  activeOffsetYEnd?: number;\n  activeOffsetXStart?: number;\n  activeOffsetXEnd?: number;\n  failOffsetYStart?: number;\n  failOffsetYEnd?: number;\n  failOffsetXStart?: number;\n  failOffsetXEnd?: number;\n}\n\n/**\n * @deprecated PanGestureHandler will be removed in the future version of Gesture Handler. Use `Gesture.Pan()` instead.\n */\nexport interface PanGestureHandlerProps\n  extends BaseGestureHandlerProps<PanGestureHandlerEventPayload>,\n    CommonPanProperties {\n  /**\n   * Range along X axis (in points) where fingers travels without activation of\n   * handler. Moving outside of this range implies activation of handler. Range\n   * can be given as an array or a single number. If range is set as an array,\n   * first value must be lower or equal to 0, a the second one higher or equal\n   * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n   * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n   */\n  activeOffsetY?:\n    | number\n    | [activeOffsetYStart: number, activeOffsetYEnd: number];\n\n  /**\n   * Range along X axis (in points) where fingers travels without activation of\n   * handler. Moving outside of this range implies activation of handler. Range\n   * can be given as an array or a single number. If range is set as an array,\n   * first value must be lower or equal to 0, a the second one higher or equal\n   * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n   * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n   */\n  activeOffsetX?:\n    | number\n    | [activeOffsetXStart: number, activeOffsetXEnd: number];\n\n  /**\n   * When the finger moves outside this range (in points) along Y axis and\n   * handler hasn't yet activated it will fail recognizing the gesture. Range\n   * can be given as an array or a single number. If range is set as an array,\n   * first value must be lower or equal to 0, a the second one higher or equal\n   * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n   * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n   */\n  failOffsetY?: number | [failOffsetYStart: number, failOffsetYEnd: number];\n\n  /**\n   * When the finger moves outside this range (in points) along X axis and\n   * handler hasn't yet activated it will fail recognizing the gesture. Range\n   * can be given as an array or a single number. If range is set as an array,\n   * first value must be lower or equal to 0, a the second one higher or equal\n   * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n   * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n   */\n  failOffsetX?: number | [failOffsetXStart: number, failOffsetXEnd: number];\n}\n\nexport const panHandlerName = 'PanGestureHandler';\n\n/**\n * @deprecated PanGestureHandler will be removed in the future version of Gesture Handler. Use `Gesture.Pan()` instead.\n */\nexport type PanGestureHandler = typeof PanGestureHandler;\n\n/**\n * @deprecated PanGestureHandler will be removed in the future version of Gesture Handler. Use `Gesture.Pan()` instead.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const PanGestureHandler = createHandler<\n  PanGestureHandlerProps,\n  PanGestureHandlerEventPayload\n>({\n  name: panHandlerName,\n  allowedProps: [\n    ...baseGestureHandlerProps,\n    ...panGestureHandlerProps,\n  ] as const,\n  config: {},\n  transformProps: managePanProps,\n  customNativeProps: panGestureHandlerCustomNativeProps,\n});\n\nfunction validatePanGestureHandlerProps(props: PanGestureHandlerProps) {\n  if (\n    Array.isArray(props.activeOffsetX) &&\n    (props.activeOffsetX[0] > 0 || props.activeOffsetX[1] < 0)\n  ) {\n    throw new Error(\n      `First element of activeOffsetX should be negative, a the second one should be positive`\n    );\n  }\n\n  if (\n    Array.isArray(props.activeOffsetY) &&\n    (props.activeOffsetY[0] > 0 || props.activeOffsetY[1] < 0)\n  ) {\n    throw new Error(\n      `First element of activeOffsetY should be negative, a the second one should be positive`\n    );\n  }\n\n  if (\n    Array.isArray(props.failOffsetX) &&\n    (props.failOffsetX[0] > 0 || props.failOffsetX[1] < 0)\n  ) {\n    throw new Error(\n      `First element of failOffsetX should be negative, a the second one should be positive`\n    );\n  }\n\n  if (\n    Array.isArray(props.failOffsetY) &&\n    (props.failOffsetY[0] > 0 || props.failOffsetY[1] < 0)\n  ) {\n    throw new Error(\n      `First element of failOffsetY should be negative, a the second one should be positive`\n    );\n  }\n\n  if (props.minDist && (props.failOffsetX || props.failOffsetY)) {\n    throw new Error(\n      `It is not supported to use minDist with failOffsetX or failOffsetY, use activeOffsetX and activeOffsetY instead`\n    );\n  }\n\n  if (props.minDist && (props.activeOffsetX || props.activeOffsetY)) {\n    throw new Error(\n      `It is not supported to use minDist with activeOffsetX or activeOffsetY`\n    );\n  }\n}\n\nfunction transformPanGestureHandlerProps(props: PanGestureHandlerProps) {\n  type InternalPanGHKeys =\n    | 'activeOffsetXStart'\n    | 'activeOffsetXEnd'\n    | 'failOffsetXStart'\n    | 'failOffsetXEnd'\n    | 'activeOffsetYStart'\n    | 'activeOffsetYEnd'\n    | 'failOffsetYStart'\n    | 'failOffsetYEnd';\n  type PanGestureHandlerInternalProps = PanGestureHandlerProps &\n    Partial<Record<InternalPanGHKeys, number>>;\n\n  const res: PanGestureHandlerInternalProps = { ...props };\n\n  if (props.activeOffsetX !== undefined) {\n    delete res.activeOffsetX;\n    if (Array.isArray(props.activeOffsetX)) {\n      res.activeOffsetXStart = props.activeOffsetX[0];\n      res.activeOffsetXEnd = props.activeOffsetX[1];\n    } else if (props.activeOffsetX < 0) {\n      res.activeOffsetXStart = props.activeOffsetX;\n    } else {\n      res.activeOffsetXEnd = props.activeOffsetX;\n    }\n  }\n\n  if (props.activeOffsetY !== undefined) {\n    delete res.activeOffsetY;\n    if (Array.isArray(props.activeOffsetY)) {\n      res.activeOffsetYStart = props.activeOffsetY[0];\n      res.activeOffsetYEnd = props.activeOffsetY[1];\n    } else if (props.activeOffsetY < 0) {\n      res.activeOffsetYStart = props.activeOffsetY;\n    } else {\n      res.activeOffsetYEnd = props.activeOffsetY;\n    }\n  }\n\n  if (props.failOffsetX !== undefined) {\n    delete res.failOffsetX;\n    if (Array.isArray(props.failOffsetX)) {\n      res.failOffsetXStart = props.failOffsetX[0];\n      res.failOffsetXEnd = props.failOffsetX[1];\n    } else if (props.failOffsetX < 0) {\n      res.failOffsetXStart = props.failOffsetX;\n    } else {\n      res.failOffsetXEnd = props.failOffsetX;\n    }\n  }\n\n  if (props.failOffsetY !== undefined) {\n    delete res.failOffsetY;\n    if (Array.isArray(props.failOffsetY)) {\n      res.failOffsetYStart = props.failOffsetY[0];\n      res.failOffsetYEnd = props.failOffsetY[1];\n    } else if (props.failOffsetY < 0) {\n      res.failOffsetYStart = props.failOffsetY;\n    } else {\n      res.failOffsetYEnd = props.failOffsetY;\n    }\n  }\n\n  return res;\n}\n\nexport function managePanProps(props: PanGestureHandlerProps) {\n  if (__DEV__) {\n    validatePanGestureHandlerProps(props);\n  }\n  return transformPanGestureHandlerProps(props);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}