{"ast":null,"code":"\"use strict\";import{CommonActions,findFocusedRoute,getActionFromState,getPathFromState,getStateFromPath,NavigationHelpersContext,NavigationRouteContext,useStateForPath}from'@react-navigation/core';import*as React from'react';import{LinkingContext}from\"./LinkingContext.js\";export function useLinkBuilder(){const navigation=React.useContext(NavigationHelpersContext);const route=React.useContext(NavigationRouteContext);const{options}=React.useContext(LinkingContext);const focusedRouteState=useStateForPath();const getPathFromStateHelper=options?.getPathFromState??getPathFromState;const getStateFromPathHelper=options?.getStateFromPath??getStateFromPath;const getActionFromStateHelper=options?.getActionFromState??getActionFromState;const buildHref=React.useCallback((name,params)=>{if(options?.enabled===false){return undefined;}const isScreen=navigation&&route?.key&&focusedRouteState?route.key===findFocusedRoute(focusedRouteState)?.key&&navigation.getState().routes.some(r=>r.key===route.key):false;const stateForRoute={routes:[{name,params}]};const constructState=state=>{if(state){const route=state.routes[0];if(isScreen&&!route.state){return stateForRoute;}return{routes:[Object.assign({},route,{state:constructState(route.state)})]};}return stateForRoute;};const state=constructState(focusedRouteState);const path=getPathFromStateHelper(state,options?.config);return path;},[options?.enabled,options?.config,route?.key,navigation,focusedRouteState,getPathFromStateHelper]);const buildAction=React.useCallback(href=>{if(!href.startsWith('/')){throw new Error(`The href must start with '/' (${href}).`);}const state=getStateFromPathHelper(href,options?.config);if(state){const action=getActionFromStateHelper(state,options?.config);return action??CommonActions.reset(state);}else{throw new Error('Failed to parse the href to a navigation state.');}},[options?.config,getStateFromPathHelper,getActionFromStateHelper]);return{buildHref,buildAction};}","map":{"version":3,"names":["CommonActions","findFocusedRoute","getActionFromState","getPathFromState","getStateFromPath","NavigationHelpersContext","NavigationRouteContext","useStateForPath","React","LinkingContext","useLinkBuilder","navigation","useContext","route","options","focusedRouteState","getPathFromStateHelper","getStateFromPathHelper","getActionFromStateHelper","buildHref","useCallback","name","params","enabled","undefined","isScreen","key","getState","routes","some","r","stateForRoute","constructState","state","Object","assign","path","config","buildAction","href","startsWith","Error","action","reset"],"sources":["/home/user/rork-vibesync-458/node_modules/@react-navigation/native/src/useLinkBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  findFocusedRoute,\n  getActionFromState,\n  getPathFromState,\n  getStateFromPath,\n  NavigationHelpersContext,\n  NavigationRouteContext,\n  useStateForPath,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport { LinkingContext } from './LinkingContext';\n\ntype MinimalState = {\n  routes: [{ name: string; params?: object; state?: MinimalState }];\n};\n\n/**\n * Helpers to build href or action based on the linking options.\n *\n * @returns `buildHref` to build an `href` for screen and `buildAction` to build an action from an `href`.\n */\nexport function useLinkBuilder() {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const route = React.useContext(NavigationRouteContext);\n\n  const { options } = React.useContext(LinkingContext);\n\n  const focusedRouteState = useStateForPath();\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n  const getStateFromPathHelper = options?.getStateFromPath ?? getStateFromPath;\n  const getActionFromStateHelper =\n    options?.getActionFromState ?? getActionFromState;\n\n  const buildHref = React.useCallback(\n    (name: string, params?: object) => {\n      if (options?.enabled === false) {\n        return undefined;\n      }\n\n      // Check that we're inside:\n      // - navigator's context\n      // - route context of the navigator (could be a screen, tab, etc.)\n      // - route matches the state for path (from the screen's context)\n      // This ensures that we're inside a screen\n      const isScreen =\n        navigation && route?.key && focusedRouteState\n          ? route.key === findFocusedRoute(focusedRouteState)?.key &&\n            navigation.getState().routes.some((r) => r.key === route.key)\n          : false;\n\n      const stateForRoute: MinimalState = {\n        routes: [{ name, params }],\n      };\n\n      const constructState = (\n        state: MinimalState | undefined\n      ): MinimalState => {\n        if (state) {\n          const route = state.routes[0];\n\n          // If we're inside a screen and at the innermost route\n          // We need to replace the state with the provided one\n          // This assumes that we're navigating to a sibling route\n          if (isScreen && !route.state) {\n            return stateForRoute;\n          }\n\n          // Otherwise, dive into the nested state of the route\n          return {\n            routes: [\n              {\n                ...route,\n                state: constructState(route.state),\n              },\n            ],\n          };\n        }\n\n        // Once there is no more nested state, we're at the innermost route\n        // We can add a state based on provided parameters\n        // This assumes that we're navigating to a child of this route\n        // In this case, the helper is used in a navigator for its routes\n        return stateForRoute;\n      };\n\n      const state = constructState(focusedRouteState);\n      const path = getPathFromStateHelper(state, options?.config);\n\n      return path;\n    },\n    [\n      options?.enabled,\n      options?.config,\n      route?.key,\n      navigation,\n      focusedRouteState,\n      getPathFromStateHelper,\n    ]\n  );\n\n  const buildAction = React.useCallback(\n    (href: string) => {\n      if (!href.startsWith('/')) {\n        throw new Error(`The href must start with '/' (${href}).`);\n      }\n\n      const state = getStateFromPathHelper(href, options?.config);\n\n      if (state) {\n        const action = getActionFromStateHelper(state, options?.config);\n\n        return action ?? CommonActions.reset(state);\n      } else {\n        throw new Error('Failed to parse the href to a navigation state.');\n      }\n    },\n    [options?.config, getStateFromPathHelper, getActionFromStateHelper]\n  );\n\n  return {\n    buildHref,\n    buildAction,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}