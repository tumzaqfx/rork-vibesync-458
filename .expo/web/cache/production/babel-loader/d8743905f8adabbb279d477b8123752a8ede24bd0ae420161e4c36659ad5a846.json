{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.parsePathAndParamsFromExpoGoLink=parsePathAndParamsFromExpoGoLink;exports.parsePathFromExpoGoLink=parsePathFromExpoGoLink;exports.extractExpoPathFromURL=extractExpoPathFromURL;function parsePathAndParamsFromExpoGoLink(url){const href=parsePathFromExpoGoLink(url);const results=href.match(/([^?]*)(\\?.*)?/);return{pathname:results?.[1]??'',queryString:results?.[2]??''};}function parsePathFromExpoGoLink(url){return url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)?.[1]??'';}function extractExactPathFromURL(url){if(url.match(/^https?:\\/\\//)){const{origin,href,hostname}=new URL(url);if(hostname==='exp.host'||hostname==='u.expo.dev'){return'';}return href.replace(origin,'');}const isExpoGo=typeof expo!=='undefined'&&globalThis.expo?.modules?.ExpoGo;if(isExpoGo&&url.match(/^exp(s)?:\\/\\//)){const pathname=parsePathFromExpoGoLink(url);if(pathname){return fromDeepLink('a://'+pathname);}const queryParams=url.match(/exps?:\\/\\/.*\\?(.*)/)?.[1];if(queryParams){return fromDeepLink('a://?'+queryParams);}return'';}return fromDeepLink(url);}function isExpoDevelopmentClient(url){return url.hostname==='expo-development-client';}function fromDeepLink(url){let res;try{res=new URL(url);}catch{return url.replace(/^[^:]+:\\/\\//,'');}if(isExpoDevelopmentClient(res)){if(!res.searchParams.get('url')){return'';}const incomingUrl=res.searchParams.get('url');return extractExactPathFromURL(decodeURI(incomingUrl));}let results='';if(res.host){results+=res.host;}if(res.pathname){results+=res.pathname;}const qs=!res.search?'':[...res.searchParams.entries()].map(([k,v])=>`${k}=${decodeURIComponent(v)}`).join('&');if(qs){results+='?'+qs;}return results;}function extractExpoPathFromURL(_prefixes,url=''){return extractExactPathFromURL(url).replace(/^\\//,'');}","map":{"version":3,"names":["exports","parsePathAndParamsFromExpoGoLink","parsePathFromExpoGoLink","extractExpoPathFromURL","url","href","results","match","pathname","queryString","extractExactPathFromURL","origin","hostname","URL","replace","isExpoGo","expo","globalThis","modules","ExpoGo","fromDeepLink","queryParams","isExpoDevelopmentClient","res","searchParams","get","incomingUrl","decodeURI","host","qs","search","entries","map","k","v","decodeURIComponent","join","_prefixes"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-router/src/fork/extractPathFromURL.ts"],"sourcesContent":["export function parsePathAndParamsFromExpoGoLink(url: string): {\n  pathname: string;\n  queryString: string;\n} {\n  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n\n  const href = parsePathFromExpoGoLink(url);\n  const results = href.match(/([^?]*)(\\?.*)?/);\n  return {\n    pathname: results?.[1] ?? '',\n    queryString: results?.[2] ?? '',\n  };\n}\n\nexport function parsePathFromExpoGoLink(url: string): string {\n  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n  return url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)?.[1] ?? '';\n}\n\n// This is only run on native.\nfunction extractExactPathFromURL(url: string): string {\n  if (\n    // If a universal link / app link / web URL is used, we should use the path\n    // from the URL, while stripping the origin.\n    url.match(/^https?:\\/\\//)\n  ) {\n    const { origin, href, hostname } = new URL(url);\n\n    if (hostname === 'exp.host' || hostname === 'u.expo.dev') {\n      // These are QR code generate deep-link that always like to the '/' path\n      // TODO: In the future, QR code may link to a specific path and this logic will need to be udpated\n      return '';\n    }\n\n    return href.replace(origin, '');\n  }\n\n  const isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n\n  // Handle special URLs used in Expo Go: `/--/pathname` -> `pathname`\n  if (\n    isExpoGo &&\n    // while not exhaustive, `exp` and `exps` are the only two schemes which\n    // are passed through to other apps in Expo Go.\n    url.match(/^exp(s)?:\\/\\//)\n  ) {\n    const pathname = parsePathFromExpoGoLink(url);\n    if (pathname) {\n      return fromDeepLink('a://' + pathname);\n    }\n    // Match the `?.*` segment of the URL.\n    const queryParams = url.match(/exps?:\\/\\/.*\\?(.*)/)?.[1];\n    if (queryParams) {\n      return fromDeepLink('a://?' + queryParams);\n    }\n\n    return '';\n  }\n\n  // TODO: Support dev client URLs\n\n  return fromDeepLink(url);\n}\n\n/** Major hack to support the makeshift expo-development-client system. */\nfunction isExpoDevelopmentClient(url: URL): boolean {\n  return url.hostname === 'expo-development-client';\n}\n\nfunction fromDeepLink(url: string): string {\n  let res: URL | null;\n  try {\n    // This is for all standard deep links, e.g. `foobar://` where everything\n    // after the `://` is the path.\n    res = new URL(url);\n  } catch {\n    /**\n     * We failed to parse the URL. This can occur for a variety of reasons, including:\n     * - Its a partial URL (e.g. `/route?query=param`).\n     * - It has a valid App scheme, but the scheme isn't a valid URL scheme (e.g. `my_app://`)\n     */\n\n    /**\n     * App schemes are not valid URL schemes, so they will fail to parse.\n     * We need to strip the scheme from these URLs\n     */\n    return url.replace(/^[^:]+:\\/\\//, '');\n  }\n\n  if (isExpoDevelopmentClient(res)) {\n    if (!res.searchParams.get('url')) {\n      return '';\n    }\n    const incomingUrl = res.searchParams.get('url')!;\n    return extractExactPathFromURL(decodeURI(incomingUrl));\n  }\n\n  let results = '';\n\n  if (res.host) {\n    results += res.host;\n  }\n\n  if (res.pathname) {\n    results += res.pathname;\n  }\n\n  const qs = !res.search\n    ? ''\n    : // @ts-ignore: `entries` is not on `URLSearchParams` in some typechecks.\n      [...res.searchParams.entries()].map(([k, v]) => `${k}=${decodeURIComponent(v)}`).join('&');\n\n  if (qs) {\n    results += '?' + qs;\n  }\n\n  return results;\n}\n\nexport function extractExpoPathFromURL(_prefixes: string[], url: string = '') {\n  return (\n    extractExactPathFromURL(url)\n      // TODO: We should get rid of this, dropping specificities is not good\n      .replace(/^\\//, '')\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}