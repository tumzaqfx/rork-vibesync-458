{"ast":null,"code":"\"use strict\";'use client';var _reactJsxRuntime=require(\"react/jsx-runtime\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.StackRouter=exports.stackRouterOverride=void 0;const native_1=require(\"@react-navigation/native\");const native_stack_1=require(\"@react-navigation/native-stack\");const withLayoutContext_1=require(\"./withLayoutContext\");const useScreens_1=require(\"../useScreens\");const Protected_1=require(\"../views/Protected\");const NativeStackNavigator=(0,native_stack_1.createNativeStackNavigator)().Navigator;const RNStack=(0,withLayoutContext_1.withLayoutContext)(NativeStackNavigator);function isStackAction(action){return action.type==='PUSH'||action.type==='NAVIGATE'||action.type==='POP'||action.type==='POP_TO_TOP'||action.type==='REPLACE';}const stackRouterOverride=original=>{return{getStateForAction:(state,action,options)=>{if(action.target&&action.target!==state.key){return null;}if(!isStackAction(action)){return original.getStateForAction(state,action,options);}const actionSingularOptions=action.payload&&'singular'in action.payload?action.payload.singular:undefined;function getIdFunction(fn){if(!('payload'in action)||!action.payload||!('name'in action.payload)||typeof action.payload.name!=='string'){return;}const name=action.payload.name;return(getActionSingularIdFn(actionSingularOptions,name)||options.routeGetIdList[name]||fn);}switch(action.type){case'PUSH':{const nextState=original.getStateForAction(state,action,Object.assign({},options,{routeGetIdList:Object.assign({},options.routeGetIdList,{[action.payload.name]:getIdFunction()})}));return actionSingularOptions?filterSingular(nextState,actionSingularOptions):nextState;}case'NAVIGATE':{const nextState=original.getStateForAction(state,action,Object.assign({},options,{routeGetIdList:Object.assign({},options.routeGetIdList,{[action.payload.name]:getIdFunction(options=>{return(0,useScreens_1.getSingularId)(action.payload.name,options);})})}));return actionSingularOptions?filterSingular(nextState,actionSingularOptions):nextState;}default:{return original.getStateForAction(state,action,options);}}}};};exports.stackRouterOverride=stackRouterOverride;function getActionSingularIdFn(actionGetId,name){if(typeof actionGetId==='function'){return options=>actionGetId(name,options.params??{});}else if(actionGetId===true){return options=>(0,useScreens_1.getSingularId)(name,options);}return undefined;}function filterSingular(state,singular){if(!state||!singular){return state;}if(!state.routes){return state;}const currentIndex=state.index||state.routes.length-1;const current=state.routes[currentIndex];const name=current.name;const getId=getActionSingularIdFn(singular,name);if(!getId){return state;}const id=getId({params:current.params});if(!id){return state;}let routes=state.routes;routes=routes.filter((route,index)=>{if(index===currentIndex){return true;}return name!==route.name||id!==getId({params:route.params});});return Object.assign({},state,{index:routes.length-1,routes});}const Stack=Object.assign(props=>{return _reactJsxRuntime.jsx(RNStack,Object.assign({},props,{UNSTABLE_router:exports.stackRouterOverride}));},{Screen:RNStack.Screen,Protected:Protected_1.Protected});exports.default=Stack;const StackRouter=options=>{const router=(0,native_1.StackRouter)(options);return Object.assign({},router,(0,exports.stackRouterOverride)(router));};exports.StackRouter=StackRouter;","map":{"version":3,"names":["_reactJsxRuntime","require","native_1","native_stack_1","withLayoutContext_1","useScreens_1","Protected_1","NativeStackNavigator","createNativeStackNavigator","Navigator","RNStack","withLayoutContext","isStackAction","action","type","stackRouterOverride","original","getStateForAction","state","options","target","key","actionSingularOptions","payload","singular","undefined","getIdFunction","fn","name","getActionSingularIdFn","routeGetIdList","nextState","Object","assign","filterSingular","getSingularId","exports","actionGetId","params","routes","currentIndex","index","length","current","getId","id","filter","route","Stack","props","jsx","UNSTABLE_router","Screen","Protected","default","StackRouter","router"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-router/src/layouts/StackClient.tsx"],"sourcesContent":["'use client';\nimport {\n  CommonNavigationAction,\n  NavigationAction,\n  ParamListBase,\n  PartialRoute,\n  PartialState,\n  Route,\n  RouterConfigOptions,\n  StackRouter as RNStackRouter,\n  StackActionType,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport {\n  NativeStackNavigationEventMap,\n  NativeStackNavigationOptions,\n  createNativeStackNavigator,\n} from '@react-navigation/native-stack';\nimport { ComponentProps } from 'react';\n\nimport { withLayoutContext } from './withLayoutContext';\nimport { SingularOptions, getSingularId } from '../useScreens';\nimport { Protected } from '../views/Protected';\n\ntype GetId = NonNullable<RouterConfigOptions['routeGetIdList'][string]>;\n\nconst NativeStackNavigator = createNativeStackNavigator().Navigator;\n\nconst RNStack = withLayoutContext<\n  NativeStackNavigationOptions,\n  typeof NativeStackNavigator,\n  StackNavigationState<ParamListBase>,\n  NativeStackNavigationEventMap\n>(NativeStackNavigator);\n\nfunction isStackAction(\n  action: NavigationAction\n): action is StackActionType | Extract<CommonNavigationAction, { type: 'NAVIGATE' }> {\n  return (\n    action.type === 'PUSH' ||\n    action.type === 'NAVIGATE' ||\n    action.type === 'POP' ||\n    action.type === 'POP_TO_TOP' ||\n    action.type === 'REPLACE'\n  );\n}\n\n/**\n * React Navigation matches a screen by its name or a 'getID' function that uniquely identifies a screen.\n * When a screen has been uniquely identified, the Stack can only have one instance of that screen.\n *\n * Expo Router allows for a screen to be matched by name and path params, a 'getID' function or a singular id.\n *\n * Instead of reimplementing the entire StackRouter, we can override the getStateForAction method to handle the singular screen logic.\n *\n */\nexport const stackRouterOverride: NonNullable<ComponentProps<typeof RNStack>['UNSTABLE_router']> = (\n  original\n) => {\n  return {\n    getStateForAction: (state, action, options) => {\n      if (action.target && action.target !== state.key) {\n        return null;\n      }\n\n      if (!isStackAction(action)) {\n        return original.getStateForAction(state, action, options);\n      }\n\n      // The dynamic getId added to an action, `router.push('screen', { singular: true })`\n      const actionSingularOptions =\n        action.payload && 'singular' in action.payload\n          ? (action.payload.singular as SingularOptions)\n          : undefined;\n\n      // Handle if 'getID' or 'singular' is set.\n      function getIdFunction(fn?: GetId): GetId | undefined {\n        // Actions can be fired by the user, so we do need to validate their structure.\n        if (\n          !('payload' in action) ||\n          !action.payload ||\n          !('name' in action.payload) ||\n          typeof action.payload.name !== 'string'\n        ) {\n          return;\n        }\n\n        const name = action.payload.name;\n\n        return (\n          // The dynamic singular added to an action, `router.push('screen', { singular: () => 'id' })`\n          getActionSingularIdFn(actionSingularOptions, name) ||\n          // The static getId added as a prop to `<Screen singular />` or `<Screen getId={} />`\n          options.routeGetIdList[name] ||\n          // The custom singular added by Expo Router to support its concept of `navigate`\n          fn\n        );\n      }\n\n      switch (action.type) {\n        case 'PUSH': {\n          /**\n           * PUSH should always push\n           *\n           * If 'getID' or 'singular' is set and a match is found, instead of pushing a new screen,\n           * the existing screen will be moved to the HEAD of the stack. If there are multiple matches, the rest will be removed.\n           */\n          const nextState = original.getStateForAction(state, action, {\n            ...options,\n            routeGetIdList: {\n              ...options.routeGetIdList,\n              [action.payload.name]: getIdFunction(),\n            },\n          });\n\n          /**\n           * React Navigation doesn't support dynamic getId function on the action. Because of this,\n           * can you enter a state where the screen is pushed multiple times but the normal getStateForAction\n           * doesn't remove the duplicates. We need to filter the state to only have singular screens.\n           */\n          return actionSingularOptions\n            ? filterSingular(nextState, actionSingularOptions)\n            : nextState;\n        }\n        case 'NAVIGATE': {\n          /**\n           * NAVIGATE should push unless the current name & route params of the current and target screen match.\n           * Search params and hashes should be ignored.\n           *\n           * If the name, route params & search params match, no action is taken.\n           * If both the name and route params match, the screen is replaced.\n           * If the name / route params do not match, the screen is pushed.\n           *\n           * If 'getID' or 'singular' is set and a match is found, instead of pushing a new screen,\n           * the existing screen will be moved to the HEAD of the stack. If there are multiple matches, the rest will be removed.\n           */\n          const nextState = original.getStateForAction(state, action, {\n            ...options,\n            routeGetIdList: {\n              ...options.routeGetIdList,\n              [action.payload.name]: getIdFunction((options) => {\n                return getSingularId(action.payload.name, options);\n              }),\n            },\n          });\n\n          /**\n           * React Navigation doesn't support dynamic getId function on the action. Because of this,\n           * can you enter a state where the screen is pushed multiple times but the normal getStateForAction\n           * doesn't remove the duplicates. We need to filter the state to only have singular screens.\n           */\n          return actionSingularOptions\n            ? filterSingular(nextState, actionSingularOptions)\n            : nextState;\n        }\n        default: {\n          return original.getStateForAction(state, action, options);\n        }\n      }\n    },\n  };\n};\n\nfunction getActionSingularIdFn(\n  actionGetId: SingularOptions | undefined,\n  name: string\n): GetId | undefined {\n  if (typeof actionGetId === 'function') {\n    return (options) => actionGetId(name, options.params ?? {});\n  } else if (actionGetId === true) {\n    return (options) => getSingularId(name, options);\n  }\n\n  return undefined;\n}\n\n/**\n * If there is a dynamic singular on an action, then we need to filter the state to only have singular screens.\n * As multiples may have been added before we did the singular navigation.\n */\nfunction filterSingular<\n  T extends\n    | StackNavigationState<ParamListBase>\n    | PartialState<StackNavigationState<ParamListBase>>\n    | null,\n>(state: T, singular: SingularOptions): T {\n  if (!state || !singular) {\n    return state;\n  }\n\n  if (!state.routes) {\n    return state;\n  }\n\n  const currentIndex = state.index || state.routes.length - 1;\n  const current = state.routes[currentIndex];\n  const name = current.name;\n\n  const getId = getActionSingularIdFn(singular, name);\n\n  if (!getId) {\n    return state;\n  }\n\n  const id = getId({ params: current.params });\n\n  if (!id) {\n    return state;\n  }\n\n  // TypeScript needs a type assertion here for the filter to work.\n  let routes = state.routes as PartialRoute<Route<string, object | undefined>>[];\n  routes = routes.filter((route, index) => {\n    // If the route is the current route, keep it.\n    if (index === currentIndex) {\n      return true;\n    }\n\n    // Remove all other routes with the same name and id.\n    return name !== route.name || id !== getId({ params: route.params });\n  });\n\n  return {\n    ...state,\n    index: routes.length - 1,\n    routes,\n  };\n}\n\nconst Stack = Object.assign(\n  (props: ComponentProps<typeof RNStack>) => {\n    return <RNStack {...props} UNSTABLE_router={stackRouterOverride} />;\n  },\n  {\n    Screen: RNStack.Screen as (\n      props: ComponentProps<typeof RNStack.Screen> & { singular?: boolean }\n    ) => null,\n    Protected,\n  }\n);\n\nexport default Stack;\n\nexport const StackRouter: typeof RNStackRouter = (options) => {\n  const router = RNStackRouter(options);\n  return {\n    ...router,\n    ...stackRouterOverride(router),\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}