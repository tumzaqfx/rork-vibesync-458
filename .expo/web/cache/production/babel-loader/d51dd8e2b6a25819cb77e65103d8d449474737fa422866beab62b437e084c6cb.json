{"ast":null,"code":"import{useState,useEffect}from'react';import AsyncStorage from'@react-native-async-storage/async-storage';import createContextHook from'@nkzw/create-context-hook';export const[NotificationProvider,useNotifications]=createContextHook(()=>{const[state,setState]=useState({notifications:[],unreadCount:0});useEffect(()=>{loadNotifications();},[]);const loadNotifications=async()=>{try{const stored=await AsyncStorage.getItem('notifications');if(stored){const notifications=JSON.parse(stored);const unreadCount=notifications.filter(n=>!n.isRead).length;setState(prev=>Object.assign({},prev,{notifications,unreadCount}));}}catch(error){console.error('Error loading notifications:',error);}};const saveNotifications=async notifications=>{try{await AsyncStorage.setItem('notifications',JSON.stringify(notifications));}catch(error){console.error('Error saving notifications:',error);}};const addNotification=notification=>{setState(prev=>{const newNotifications=[notification,...prev.notifications];const unreadCount=newNotifications.filter(n=>!n.isRead).length;saveNotifications(newNotifications);return Object.assign({},prev,{notifications:newNotifications,unreadCount});});};const markAsRead=notificationId=>{setState(prev=>{const updatedNotifications=prev.notifications.map(n=>n.id===notificationId?Object.assign({},n,{isRead:true}):n);const unreadCount=updatedNotifications.filter(n=>!n.isRead).length;saveNotifications(updatedNotifications);return Object.assign({},prev,{notifications:updatedNotifications,unreadCount});});};const markAllAsRead=()=>{setState(prev=>{const updatedNotifications=prev.notifications.map(n=>Object.assign({},n,{isRead:true}));saveNotifications(updatedNotifications);return Object.assign({},prev,{notifications:updatedNotifications,unreadCount:0});});};const clearNotifications=()=>{setState(prev=>Object.assign({},prev,{notifications:[],unreadCount:0}));AsyncStorage.removeItem('notifications');};const handleNotificationPress=data=>{console.log('Notification pressed with data:',data);if(data?.type==='message'){}else if(data?.type==='like'){}else if(data?.type==='follow'){}};const sendLocalNotification=async(title,body,data)=>{console.log('Local notification:',{title,body,data});addNotification({id:Date.now().toString(),title,message:body,type:'general',isRead:false,createdAt:new Date().toISOString(),userId:data?.userId||'system',actionData:data});};const createMockNotifications=()=>{const mockNotifications=[{id:'1',title:'New Like',message:'John liked your post',type:'like',isRead:false,createdAt:new Date(Date.now()-1000*60*5).toISOString(),userId:'user1',actionData:{postId:'post1'}},{id:'2',title:'New Message',message:'Sarah sent you a message',type:'message',isRead:false,createdAt:new Date(Date.now()-1000*60*15).toISOString(),userId:'user2',actionData:{conversationId:'conv1'}},{id:'3',title:'New Follower',message:'Mike started following you',type:'follow',isRead:true,createdAt:new Date(Date.now()-1000*60*60).toISOString(),userId:'user3',actionData:{userId:'user3'}}];setState(prev=>{const unreadCount=mockNotifications.filter(n=>!n.isRead).length;return Object.assign({},prev,{notifications:mockNotifications,unreadCount});});};return{notifications:state.notifications,unreadCount:state.unreadCount,addNotification,markAsRead,markAllAsRead,clearNotifications,sendLocalNotification,createMockNotifications};});","map":{"version":3,"names":["useState","useEffect","AsyncStorage","createContextHook","NotificationProvider","useNotifications","state","setState","notifications","unreadCount","loadNotifications","stored","getItem","JSON","parse","filter","n","isRead","length","prev","Object","assign","error","console","saveNotifications","setItem","stringify","addNotification","notification","newNotifications","markAsRead","notificationId","updatedNotifications","map","id","markAllAsRead","clearNotifications","removeItem","handleNotificationPress","data","log","type","sendLocalNotification","title","body","Date","now","toString","message","createdAt","toISOString","userId","actionData","createMockNotifications","mockNotifications","postId","conversationId"],"sources":["/home/user/rork-vibesync-458/hooks/notification-store.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport createContextHook from '@nkzw/create-context-hook';\nimport { Notification } from '@/types';\n\ninterface NotificationState {\n  notifications: Notification[];\n  unreadCount: number;\n}\n\nexport const [NotificationProvider, useNotifications] = createContextHook(() => {\n  const [state, setState] = useState<NotificationState>({\n    notifications: [],\n    unreadCount: 0,\n  });\n\n  useEffect(() => {\n    loadNotifications();\n  }, []);\n\n\n\n  const loadNotifications = async () => {\n    try {\n      const stored = await AsyncStorage.getItem('notifications');\n      if (stored) {\n        const notifications: Notification[] = JSON.parse(stored);\n        const unreadCount = notifications.filter(n => !n.isRead).length;\n        setState(prev => ({ ...prev, notifications, unreadCount }));\n      }\n    } catch (error) {\n      console.error('Error loading notifications:', error);\n    }\n  };\n\n  const saveNotifications = async (notifications: Notification[]) => {\n    try {\n      await AsyncStorage.setItem('notifications', JSON.stringify(notifications));\n    } catch (error) {\n      console.error('Error saving notifications:', error);\n    }\n  };\n\n  const addNotification = (notification: Notification) => {\n    setState(prev => {\n      const newNotifications = [notification, ...prev.notifications];\n      const unreadCount = newNotifications.filter(n => !n.isRead).length;\n      saveNotifications(newNotifications);\n      return {\n        ...prev,\n        notifications: newNotifications,\n        unreadCount,\n      };\n    });\n  };\n\n  const markAsRead = (notificationId: string) => {\n    setState(prev => {\n      const updatedNotifications = prev.notifications.map(n =>\n        n.id === notificationId ? { ...n, isRead: true } : n\n      );\n      const unreadCount = updatedNotifications.filter(n => !n.isRead).length;\n      saveNotifications(updatedNotifications);\n      return {\n        ...prev,\n        notifications: updatedNotifications,\n        unreadCount,\n      };\n    });\n  };\n\n  const markAllAsRead = () => {\n    setState(prev => {\n      const updatedNotifications = prev.notifications.map(n => ({ ...n, isRead: true }));\n      saveNotifications(updatedNotifications);\n      return {\n        ...prev,\n        notifications: updatedNotifications,\n        unreadCount: 0,\n      };\n    });\n  };\n\n  const clearNotifications = () => {\n    setState(prev => ({ ...prev, notifications: [], unreadCount: 0 }));\n    AsyncStorage.removeItem('notifications');\n  };\n\n  const handleNotificationPress = (data: any) => {\n    console.log('Notification pressed with data:', data);\n    // Handle navigation based on notification type\n    if (data?.type === 'message') {\n      // Navigate to messages\n    } else if (data?.type === 'like') {\n      // Navigate to post\n    } else if (data?.type === 'follow') {\n      // Navigate to profile\n    }\n  };\n\n  const sendLocalNotification = async (title: string, body: string, data?: any) => {\n    console.log('Local notification:', { title, body, data });\n    addNotification({\n      id: Date.now().toString(),\n      title,\n      message: body,\n      type: 'general',\n      isRead: false,\n      createdAt: new Date().toISOString(),\n      userId: data?.userId || 'system',\n      actionData: data,\n    });\n  };\n\n  // Mock notifications for demo\n  const createMockNotifications = () => {\n    const mockNotifications: Notification[] = [\n      {\n        id: '1',\n        title: 'New Like',\n        message: 'John liked your post',\n        type: 'like',\n        isRead: false,\n        createdAt: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\n        userId: 'user1',\n        actionData: { postId: 'post1' },\n      },\n      {\n        id: '2',\n        title: 'New Message',\n        message: 'Sarah sent you a message',\n        type: 'message',\n        isRead: false,\n        createdAt: new Date(Date.now() - 1000 * 60 * 15).toISOString(),\n        userId: 'user2',\n        actionData: { conversationId: 'conv1' },\n      },\n      {\n        id: '3',\n        title: 'New Follower',\n        message: 'Mike started following you',\n        type: 'follow',\n        isRead: true,\n        createdAt: new Date(Date.now() - 1000 * 60 * 60).toISOString(),\n        userId: 'user3',\n        actionData: { userId: 'user3' },\n      },\n    ];\n\n    setState(prev => {\n      const unreadCount = mockNotifications.filter(n => !n.isRead).length;\n      return {\n        ...prev,\n        notifications: mockNotifications,\n        unreadCount,\n      };\n    });\n  };\n\n  return {\n    notifications: state.notifications,\n    unreadCount: state.unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    clearNotifications,\n    sendLocalNotification,\n    createMockNotifications,\n  };\n});"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}