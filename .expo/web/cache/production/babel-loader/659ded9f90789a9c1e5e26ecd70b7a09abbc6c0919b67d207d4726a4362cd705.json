{"ast":null,"code":"import{useState,useEffect}from'react';import AsyncStorage from'@react-native-async-storage/async-storage';import createContextHook from'@nkzw/create-context-hook';const STORAGE_KEY='@vibesync_gamification';const PERFECT_SCORE=10.0;const VERIFICATION_THRESHOLD=9.5;export const[GamificationProvider,useGamification]=createContextHook(()=>{const[state,setState]=useState({vibeScore:5.0,badges:[],achievements:[],invites:[],totalInvites:0,acceptedInvites:0,level:1,xp:0,nextLevelXp:100,streak:0,lastActiveDate:new Date().toISOString()});useEffect(()=>{loadGamificationData();},[]);useEffect(()=>{saveGamificationData();},[state]);const loadGamificationData=async()=>{try{const stored=await AsyncStorage.getItem(STORAGE_KEY);if(stored){setState(JSON.parse(stored));}}catch(error){console.error('[Gamification] Error loading data:',error);}};const saveGamificationData=async()=>{try{await AsyncStorage.setItem(STORAGE_KEY,JSON.stringify(state));}catch(error){console.error('[Gamification] Error saving data:',error);}};const updateVibeScore=delta=>{setState(prev=>{const newScore=Math.max(0,Math.min(10,prev.vibeScore+delta));const newBadges=[...prev.badges];if(newScore>=PERFECT_SCORE&&!prev.badges.find(b=>b.id==='perfect_10')){newBadges.push({id:'perfect_10',name:'Perfect 10',description:'Achieved a perfect vibe score of 10.0',icon:'ðŸ’œ',color:'#8B5CF6',type:'achievement',earnedAt:new Date().toISOString()});}if(newScore>=VERIFICATION_THRESHOLD&&!prev.badges.find(b=>b.id==='verified')){newBadges.push({id:'verified',name:'Verified',description:'Verified account with high vibe score',icon:'âœ“',color:'#3B82F6',type:'verification',earnedAt:new Date().toISOString()});}return Object.assign({},prev,{vibeScore:newScore,badges:newBadges});});};const sendInvite=async username=>{try{const newInvite={id:`invite_${Date.now()}`,invitedUserId:`user_${Date.now()}`,invitedUsername:username,status:'pending',sentAt:new Date().toISOString(),vibeScoreBonus:0.1};setState(prev=>Object.assign({},prev,{invites:[...prev.invites,newInvite],totalInvites:prev.totalInvites+1}));console.log('[Gamification] Invite sent to:',username);return true;}catch(error){console.error('[Gamification] Error sending invite:',error);return false;}};const acceptInvite=inviteId=>{setState(prev=>{const invites=prev.invites.map(invite=>{if(invite.id===inviteId&&invite.status==='pending'){return Object.assign({},invite,{status:'accepted',acceptedAt:new Date().toISOString()});}return invite;});const acceptedCount=invites.filter(i=>i.status==='accepted').length;const vibeScoreBonus=0.1;return Object.assign({},prev,{invites,acceptedInvites:acceptedCount,vibeScore:Math.min(10,prev.vibeScore+vibeScoreBonus)});});};const completeAchievement=achievementId=>{setState(prev=>{const achievements=prev.achievements.map(achievement=>{if(achievement.id===achievementId&&!achievement.completed){return Object.assign({},achievement,{completed:true,completedAt:new Date().toISOString(),progress:achievement.total});}return achievement;});const completedAchievement=achievements.find(a=>a.id===achievementId);const xpGain=completedAchievement?.reward||0;const newXp=prev.xp+xpGain;const newLevel=Math.floor(newXp/prev.nextLevelXp)+1;return Object.assign({},prev,{achievements,xp:newXp,level:newLevel});});};const updateAchievementProgress=(achievementId,progress)=>{setState(prev=>Object.assign({},prev,{achievements:prev.achievements.map(achievement=>{if(achievement.id===achievementId){const newProgress=Math.min(achievement.total,progress);const completed=newProgress>=achievement.total;return Object.assign({},achievement,{progress:newProgress,completed,completedAt:completed?new Date().toISOString():undefined});}return achievement;})}));};const addXP=amount=>{setState(prev=>{const newXp=prev.xp+amount;let newLevel=prev.level;let nextLevelXp=prev.nextLevelXp;while(newXp>=nextLevelXp){newLevel++;nextLevelXp=newLevel*100;}return Object.assign({},prev,{xp:newXp,level:newLevel,nextLevelXp});});};const updateStreak=()=>{const today=new Date().toDateString();const lastActive=new Date(state.lastActiveDate).toDateString();if(today!==lastActive){const yesterday=new Date();yesterday.setDate(yesterday.getDate()-1);const wasYesterday=yesterday.toDateString()===lastActive;setState(prev=>Object.assign({},prev,{streak:wasYesterday?prev.streak+1:1,lastActiveDate:new Date().toISOString()}));}};const earnBadge=badge=>{setState(prev=>{if(prev.badges.find(b=>b.id===badge.id)){return prev;}return Object.assign({},prev,{badges:[...prev.badges,Object.assign({},badge,{earnedAt:new Date().toISOString()})]});});};const hasPerfectScore=()=>state.vibeScore>=PERFECT_SCORE;const isVerified=()=>state.badges.some(b=>b.id==='verified');const hasBadge=badgeId=>state.badges.some(b=>b.id===badgeId);return Object.assign({},state,{updateVibeScore,sendInvite,acceptInvite,completeAchievement,updateAchievementProgress,addXP,updateStreak,earnBadge,hasPerfectScore,isVerified,hasBadge});});","map":{"version":3,"names":["useState","useEffect","AsyncStorage","createContextHook","STORAGE_KEY","PERFECT_SCORE","VERIFICATION_THRESHOLD","GamificationProvider","useGamification","state","setState","vibeScore","badges","achievements","invites","totalInvites","acceptedInvites","level","xp","nextLevelXp","streak","lastActiveDate","Date","toISOString","loadGamificationData","saveGamificationData","stored","getItem","JSON","parse","error","console","setItem","stringify","updateVibeScore","delta","prev","newScore","Math","max","min","newBadges","find","b","id","push","name","description","icon","color","type","earnedAt","Object","assign","sendInvite","username","newInvite","now","invitedUserId","invitedUsername","status","sentAt","vibeScoreBonus","log","acceptInvite","inviteId","map","invite","acceptedAt","acceptedCount","filter","i","length","completeAchievement","achievementId","achievement","completed","completedAt","progress","total","completedAchievement","a","xpGain","reward","newXp","newLevel","floor","updateAchievementProgress","newProgress","undefined","addXP","amount","updateStreak","today","toDateString","lastActive","yesterday","setDate","getDate","wasYesterday","earnBadge","badge","hasPerfectScore","isVerified","some","hasBadge","badgeId"],"sources":["/home/user/rork-vibesync-458/hooks/gamification-store.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport createContextHook from '@nkzw/create-context-hook';\n\nexport interface Badge {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  color: string;\n  type: 'verification' | 'achievement' | 'special';\n  earnedAt?: string;\n}\n\nexport interface Achievement {\n  id: string;\n  title: string;\n  description: string;\n  progress: number;\n  total: number;\n  reward: number;\n  icon: string;\n  completed: boolean;\n  completedAt?: string;\n}\n\nexport interface Invite {\n  id: string;\n  invitedUserId: string;\n  invitedUsername: string;\n  status: 'pending' | 'accepted' | 'registered';\n  sentAt: string;\n  acceptedAt?: string;\n  vibeScoreBonus: number;\n}\n\nexport interface GamificationState {\n  vibeScore: number;\n  badges: Badge[];\n  achievements: Achievement[];\n  invites: Invite[];\n  totalInvites: number;\n  acceptedInvites: number;\n  level: number;\n  xp: number;\n  nextLevelXp: number;\n  streak: number;\n  lastActiveDate: string;\n}\n\nconst STORAGE_KEY = '@vibesync_gamification';\nconst PERFECT_SCORE = 10.0;\nconst VERIFICATION_THRESHOLD = 9.5;\n\nexport const [GamificationProvider, useGamification] = createContextHook(() => {\n  const [state, setState] = useState<GamificationState>({\n    vibeScore: 5.0,\n    badges: [],\n    achievements: [],\n    invites: [],\n    totalInvites: 0,\n    acceptedInvites: 0,\n    level: 1,\n    xp: 0,\n    nextLevelXp: 100,\n    streak: 0,\n    lastActiveDate: new Date().toISOString(),\n  });\n\n  useEffect(() => {\n    loadGamificationData();\n  }, []);\n\n  useEffect(() => {\n    saveGamificationData();\n  }, [state]);\n\n  const loadGamificationData = async () => {\n    try {\n      const stored = await AsyncStorage.getItem(STORAGE_KEY);\n      if (stored) {\n        setState(JSON.parse(stored));\n      }\n    } catch (error) {\n      console.error('[Gamification] Error loading data:', error);\n    }\n  };\n\n  const saveGamificationData = async () => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(state));\n    } catch (error) {\n      console.error('[Gamification] Error saving data:', error);\n    }\n  };\n\n  const updateVibeScore = (delta: number) => {\n    setState(prev => {\n      const newScore = Math.max(0, Math.min(10, prev.vibeScore + delta));\n      const newBadges = [...prev.badges];\n\n      if (newScore >= PERFECT_SCORE && !prev.badges.find(b => b.id === 'perfect_10')) {\n        newBadges.push({\n          id: 'perfect_10',\n          name: 'Perfect 10',\n          description: 'Achieved a perfect vibe score of 10.0',\n          icon: 'ðŸ’œ',\n          color: '#8B5CF6',\n          type: 'achievement',\n          earnedAt: new Date().toISOString(),\n        });\n      }\n\n      if (newScore >= VERIFICATION_THRESHOLD && !prev.badges.find(b => b.id === 'verified')) {\n        newBadges.push({\n          id: 'verified',\n          name: 'Verified',\n          description: 'Verified account with high vibe score',\n          icon: 'âœ“',\n          color: '#3B82F6',\n          type: 'verification',\n          earnedAt: new Date().toISOString(),\n        });\n      }\n\n      return {\n        ...prev,\n        vibeScore: newScore,\n        badges: newBadges,\n      };\n    });\n  };\n\n  const sendInvite = async (username: string): Promise<boolean> => {\n    try {\n      const newInvite: Invite = {\n        id: `invite_${Date.now()}`,\n        invitedUserId: `user_${Date.now()}`,\n        invitedUsername: username,\n        status: 'pending',\n        sentAt: new Date().toISOString(),\n        vibeScoreBonus: 0.1,\n      };\n\n      setState(prev => ({\n        ...prev,\n        invites: [...prev.invites, newInvite],\n        totalInvites: prev.totalInvites + 1,\n      }));\n\n      console.log('[Gamification] Invite sent to:', username);\n      return true;\n    } catch (error) {\n      console.error('[Gamification] Error sending invite:', error);\n      return false;\n    }\n  };\n\n  const acceptInvite = (inviteId: string) => {\n    setState(prev => {\n      const invites = prev.invites.map(invite => {\n        if (invite.id === inviteId && invite.status === 'pending') {\n          return {\n            ...invite,\n            status: 'accepted' as const,\n            acceptedAt: new Date().toISOString(),\n          };\n        }\n        return invite;\n      });\n\n      const acceptedCount = invites.filter(i => i.status === 'accepted').length;\n      const vibeScoreBonus = 0.1;\n\n      return {\n        ...prev,\n        invites,\n        acceptedInvites: acceptedCount,\n        vibeScore: Math.min(10, prev.vibeScore + vibeScoreBonus),\n      };\n    });\n  };\n\n  const completeAchievement = (achievementId: string) => {\n    setState(prev => {\n      const achievements = prev.achievements.map(achievement => {\n        if (achievement.id === achievementId && !achievement.completed) {\n          return {\n            ...achievement,\n            completed: true,\n            completedAt: new Date().toISOString(),\n            progress: achievement.total,\n          };\n        }\n        return achievement;\n      });\n\n      const completedAchievement = achievements.find(a => a.id === achievementId);\n      const xpGain = completedAchievement?.reward || 0;\n      const newXp = prev.xp + xpGain;\n      const newLevel = Math.floor(newXp / prev.nextLevelXp) + 1;\n\n      return {\n        ...prev,\n        achievements,\n        xp: newXp,\n        level: newLevel,\n      };\n    });\n  };\n\n  const updateAchievementProgress = (achievementId: string, progress: number) => {\n    setState(prev => ({\n      ...prev,\n      achievements: prev.achievements.map(achievement => {\n        if (achievement.id === achievementId) {\n          const newProgress = Math.min(achievement.total, progress);\n          const completed = newProgress >= achievement.total;\n          \n          return {\n            ...achievement,\n            progress: newProgress,\n            completed,\n            completedAt: completed ? new Date().toISOString() : undefined,\n          };\n        }\n        return achievement;\n      }),\n    }));\n  };\n\n  const addXP = (amount: number) => {\n    setState(prev => {\n      const newXp = prev.xp + amount;\n      let newLevel = prev.level;\n      let nextLevelXp = prev.nextLevelXp;\n\n      while (newXp >= nextLevelXp) {\n        newLevel++;\n        nextLevelXp = newLevel * 100;\n      }\n\n      return {\n        ...prev,\n        xp: newXp,\n        level: newLevel,\n        nextLevelXp,\n      };\n    });\n  };\n\n  const updateStreak = () => {\n    const today = new Date().toDateString();\n    const lastActive = new Date(state.lastActiveDate).toDateString();\n\n    if (today !== lastActive) {\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      const wasYesterday = yesterday.toDateString() === lastActive;\n\n      setState(prev => ({\n        ...prev,\n        streak: wasYesterday ? prev.streak + 1 : 1,\n        lastActiveDate: new Date().toISOString(),\n      }));\n    }\n  };\n\n  const earnBadge = (badge: Badge) => {\n    setState(prev => {\n      if (prev.badges.find(b => b.id === badge.id)) {\n        return prev;\n      }\n\n      return {\n        ...prev,\n        badges: [...prev.badges, { ...badge, earnedAt: new Date().toISOString() }],\n      };\n    });\n  };\n\n  const hasPerfectScore = () => state.vibeScore >= PERFECT_SCORE;\n  const isVerified = () => state.badges.some(b => b.id === 'verified');\n  const hasBadge = (badgeId: string) => state.badges.some(b => b.id === badgeId);\n\n  return {\n    ...state,\n    updateVibeScore,\n    sendInvite,\n    acceptInvite,\n    completeAchievement,\n    updateAchievementProgress,\n    addXP,\n    updateStreak,\n    earnBadge,\n    hasPerfectScore,\n    isVerified,\n    hasBadge,\n  };\n});\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,MAAO,CAAAC,YAAY,KAAM,2CAA2C,CACpE,MAAO,CAAAC,iBAAiB,KAAM,2BAA2B,CAgDzD,KAAM,CAAAC,WAAW,CAAG,wBAAwB,CAC5C,KAAM,CAAAC,aAAa,CAAG,IAAI,CAC1B,KAAM,CAAAC,sBAAsB,CAAG,GAAG,CAElC,MAAO,MAAM,CAACC,oBAAoB,CAAEC,eAAe,CAAC,CAAGL,iBAAiB,CAAC,IAAM,CAC7E,KAAM,CAACM,KAAK,CAAEC,QAAQ,CAAC,CAAGV,QAAQ,CAAoB,CACpDW,SAAS,CAAE,GAAG,CACdC,MAAM,CAAE,EAAE,CACVC,YAAY,CAAE,EAAE,CAChBC,OAAO,CAAE,EAAE,CACXC,YAAY,CAAE,CAAC,CACfC,eAAe,CAAE,CAAC,CAClBC,KAAK,CAAE,CAAC,CACRC,EAAE,CAAE,CAAC,CACLC,WAAW,CAAE,GAAG,CAChBC,MAAM,CAAE,CAAC,CACTC,cAAc,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACzC,CAAC,CAAC,CAEFtB,SAAS,CAAC,IAAM,CACduB,oBAAoB,CAAC,CAAC,CACxB,CAAC,CAAE,EAAE,CAAC,CAENvB,SAAS,CAAC,IAAM,CACdwB,oBAAoB,CAAC,CAAC,CACxB,CAAC,CAAE,CAAChB,KAAK,CAAC,CAAC,CAEX,KAAM,CAAAe,oBAAoB,CAAG,KAAAA,CAAA,GAAY,CACvC,GAAI,CACF,KAAM,CAAAE,MAAM,CAAG,KAAM,CAAAxB,YAAY,CAACyB,OAAO,CAACvB,WAAW,CAAC,CACtD,GAAIsB,MAAM,CAAE,CACVhB,QAAQ,CAACkB,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,CAAC,CAC9B,CACF,CAAE,MAAOI,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,CAAEA,KAAK,CAAC,CAC5D,CACF,CAAC,CAED,KAAM,CAAAL,oBAAoB,CAAG,KAAAA,CAAA,GAAY,CACvC,GAAI,CACF,KAAM,CAAAvB,YAAY,CAAC8B,OAAO,CAAC5B,WAAW,CAAEwB,IAAI,CAACK,SAAS,CAACxB,KAAK,CAAC,CAAC,CAChE,CAAE,MAAOqB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CAC3D,CACF,CAAC,CAED,KAAM,CAAAI,eAAe,CAAIC,KAAa,EAAK,CACzCzB,QAAQ,CAAC0B,IAAI,EAAI,CACf,KAAM,CAAAC,QAAQ,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAED,IAAI,CAACE,GAAG,CAAC,EAAE,CAAEJ,IAAI,CAACzB,SAAS,CAAGwB,KAAK,CAAC,CAAC,CAClE,KAAM,CAAAM,SAAS,CAAG,CAAC,GAAGL,IAAI,CAACxB,MAAM,CAAC,CAElC,GAAIyB,QAAQ,EAAIhC,aAAa,EAAI,CAAC+B,IAAI,CAACxB,MAAM,CAAC8B,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACC,EAAE,GAAK,YAAY,CAAC,CAAE,CAC9EH,SAAS,CAACI,IAAI,CAAC,CACbD,EAAE,CAAE,YAAY,CAChBE,IAAI,CAAE,YAAY,CAClBC,WAAW,CAAE,uCAAuC,CACpDC,IAAI,CAAE,IAAI,CACVC,KAAK,CAAE,SAAS,CAChBC,IAAI,CAAE,aAAa,CACnBC,QAAQ,CAAE,GAAI,CAAA7B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACnC,CAAC,CAAC,CACJ,CAEA,GAAIc,QAAQ,EAAI/B,sBAAsB,EAAI,CAAC8B,IAAI,CAACxB,MAAM,CAAC8B,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACC,EAAE,GAAK,UAAU,CAAC,CAAE,CACrFH,SAAS,CAACI,IAAI,CAAC,CACbD,EAAE,CAAE,UAAU,CACdE,IAAI,CAAE,UAAU,CAChBC,WAAW,CAAE,uCAAuC,CACpDC,IAAI,CAAE,GAAG,CACTC,KAAK,CAAE,SAAS,CAChBC,IAAI,CAAE,cAAc,CACpBC,QAAQ,CAAE,GAAI,CAAA7B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACnC,CAAC,CAAC,CACJ,CAEA,OAAA6B,MAAA,CAAAC,MAAA,IACKjB,IAAI,EACPzB,SAAS,CAAE0B,QAAQ,CACnBzB,MAAM,CAAE6B,SAAS,GAErB,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAa,UAAU,CAAG,KAAO,CAAAC,QAAgB,EAAuB,CAC/D,GAAI,CACF,KAAM,CAAAC,SAAiB,CAAG,CACxBZ,EAAE,CAAE,UAAUtB,IAAI,CAACmC,GAAG,CAAC,CAAC,EAAE,CAC1BC,aAAa,CAAE,QAAQpC,IAAI,CAACmC,GAAG,CAAC,CAAC,EAAE,CACnCE,eAAe,CAAEJ,QAAQ,CACzBK,MAAM,CAAE,SAAS,CACjBC,MAAM,CAAE,GAAI,CAAAvC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAChCuC,cAAc,CAAE,GAClB,CAAC,CAEDpD,QAAQ,CAAC0B,IAAI,EAAAgB,MAAA,CAAAC,MAAA,IACRjB,IAAI,EACPtB,OAAO,CAAE,CAAC,GAAGsB,IAAI,CAACtB,OAAO,CAAE0C,SAAS,CAAC,CACrCzC,YAAY,CAAEqB,IAAI,CAACrB,YAAY,CAAG,CAAC,EACnC,CAAC,CAEHgB,OAAO,CAACgC,GAAG,CAAC,gCAAgC,CAAER,QAAQ,CAAC,CACvD,MAAO,KAAI,CACb,CAAE,MAAOzB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,CAAEA,KAAK,CAAC,CAC5D,MAAO,MAAK,CACd,CACF,CAAC,CAED,KAAM,CAAAkC,YAAY,CAAIC,QAAgB,EAAK,CACzCvD,QAAQ,CAAC0B,IAAI,EAAI,CACf,KAAM,CAAAtB,OAAO,CAAGsB,IAAI,CAACtB,OAAO,CAACoD,GAAG,CAACC,MAAM,EAAI,CACzC,GAAIA,MAAM,CAACvB,EAAE,GAAKqB,QAAQ,EAAIE,MAAM,CAACP,MAAM,GAAK,SAAS,CAAE,CACzD,OAAAR,MAAA,CAAAC,MAAA,IACKc,MAAM,EACTP,MAAM,CAAE,UAAmB,CAC3BQ,UAAU,CAAE,GAAI,CAAA9C,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAExC,CACA,MAAO,CAAA4C,MAAM,CACf,CAAC,CAAC,CAEF,KAAM,CAAAE,aAAa,CAAGvD,OAAO,CAACwD,MAAM,CAACC,CAAC,EAAIA,CAAC,CAACX,MAAM,GAAK,UAAU,CAAC,CAACY,MAAM,CACzE,KAAM,CAAAV,cAAc,CAAG,GAAG,CAE1B,OAAAV,MAAA,CAAAC,MAAA,IACKjB,IAAI,EACPtB,OAAO,CACPE,eAAe,CAAEqD,aAAa,CAC9B1D,SAAS,CAAE2B,IAAI,CAACE,GAAG,CAAC,EAAE,CAAEJ,IAAI,CAACzB,SAAS,CAAGmD,cAAc,CAAC,GAE5D,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAW,mBAAmB,CAAIC,aAAqB,EAAK,CACrDhE,QAAQ,CAAC0B,IAAI,EAAI,CACf,KAAM,CAAAvB,YAAY,CAAGuB,IAAI,CAACvB,YAAY,CAACqD,GAAG,CAACS,WAAW,EAAI,CACxD,GAAIA,WAAW,CAAC/B,EAAE,GAAK8B,aAAa,EAAI,CAACC,WAAW,CAACC,SAAS,CAAE,CAC9D,OAAAxB,MAAA,CAAAC,MAAA,IACKsB,WAAW,EACdC,SAAS,CAAE,IAAI,CACfC,WAAW,CAAE,GAAI,CAAAvD,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACrCuD,QAAQ,CAAEH,WAAW,CAACI,KAAK,GAE/B,CACA,MAAO,CAAAJ,WAAW,CACpB,CAAC,CAAC,CAEF,KAAM,CAAAK,oBAAoB,CAAGnE,YAAY,CAAC6B,IAAI,CAACuC,CAAC,EAAIA,CAAC,CAACrC,EAAE,GAAK8B,aAAa,CAAC,CAC3E,KAAM,CAAAQ,MAAM,CAAGF,oBAAoB,EAAEG,MAAM,EAAI,CAAC,CAChD,KAAM,CAAAC,KAAK,CAAGhD,IAAI,CAAClB,EAAE,CAAGgE,MAAM,CAC9B,KAAM,CAAAG,QAAQ,CAAG/C,IAAI,CAACgD,KAAK,CAACF,KAAK,CAAGhD,IAAI,CAACjB,WAAW,CAAC,CAAG,CAAC,CAEzD,OAAAiC,MAAA,CAAAC,MAAA,IACKjB,IAAI,EACPvB,YAAY,CACZK,EAAE,CAAEkE,KAAK,CACTnE,KAAK,CAAEoE,QAAQ,GAEnB,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAE,yBAAyB,CAAGA,CAACb,aAAqB,CAAEI,QAAgB,GAAK,CAC7EpE,QAAQ,CAAC0B,IAAI,EAAAgB,MAAA,CAAAC,MAAA,IACRjB,IAAI,EACPvB,YAAY,CAAEuB,IAAI,CAACvB,YAAY,CAACqD,GAAG,CAACS,WAAW,EAAI,CACjD,GAAIA,WAAW,CAAC/B,EAAE,GAAK8B,aAAa,CAAE,CACpC,KAAM,CAAAc,WAAW,CAAGlD,IAAI,CAACE,GAAG,CAACmC,WAAW,CAACI,KAAK,CAAED,QAAQ,CAAC,CACzD,KAAM,CAAAF,SAAS,CAAGY,WAAW,EAAIb,WAAW,CAACI,KAAK,CAElD,OAAA3B,MAAA,CAAAC,MAAA,IACKsB,WAAW,EACdG,QAAQ,CAAEU,WAAW,CACrBZ,SAAS,CACTC,WAAW,CAAED,SAAS,CAAG,GAAI,CAAAtD,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAGkE,SAAS,GAEjE,CACA,MAAO,CAAAd,WAAW,CACpB,CAAC,CAAC,EACF,CAAC,CACL,CAAC,CAED,KAAM,CAAAe,KAAK,CAAIC,MAAc,EAAK,CAChCjF,QAAQ,CAAC0B,IAAI,EAAI,CACf,KAAM,CAAAgD,KAAK,CAAGhD,IAAI,CAAClB,EAAE,CAAGyE,MAAM,CAC9B,GAAI,CAAAN,QAAQ,CAAGjD,IAAI,CAACnB,KAAK,CACzB,GAAI,CAAAE,WAAW,CAAGiB,IAAI,CAACjB,WAAW,CAElC,MAAOiE,KAAK,EAAIjE,WAAW,CAAE,CAC3BkE,QAAQ,EAAE,CACVlE,WAAW,CAAGkE,QAAQ,CAAG,GAAG,CAC9B,CAEA,OAAAjC,MAAA,CAAAC,MAAA,IACKjB,IAAI,EACPlB,EAAE,CAAEkE,KAAK,CACTnE,KAAK,CAAEoE,QAAQ,CACflE,WAAW,GAEf,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAyE,YAAY,CAAGA,CAAA,GAAM,CACzB,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAvE,IAAI,CAAC,CAAC,CAACwE,YAAY,CAAC,CAAC,CACvC,KAAM,CAAAC,UAAU,CAAG,GAAI,CAAAzE,IAAI,CAACb,KAAK,CAACY,cAAc,CAAC,CAACyE,YAAY,CAAC,CAAC,CAEhE,GAAID,KAAK,GAAKE,UAAU,CAAE,CACxB,KAAM,CAAAC,SAAS,CAAG,GAAI,CAAA1E,IAAI,CAAC,CAAC,CAC5B0E,SAAS,CAACC,OAAO,CAACD,SAAS,CAACE,OAAO,CAAC,CAAC,CAAG,CAAC,CAAC,CAC1C,KAAM,CAAAC,YAAY,CAAGH,SAAS,CAACF,YAAY,CAAC,CAAC,GAAKC,UAAU,CAE5DrF,QAAQ,CAAC0B,IAAI,EAAAgB,MAAA,CAAAC,MAAA,IACRjB,IAAI,EACPhB,MAAM,CAAE+E,YAAY,CAAG/D,IAAI,CAAChB,MAAM,CAAG,CAAC,CAAG,CAAC,CAC1CC,cAAc,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,EACxC,CAAC,CACL,CACF,CAAC,CAED,KAAM,CAAA6E,SAAS,CAAIC,KAAY,EAAK,CAClC3F,QAAQ,CAAC0B,IAAI,EAAI,CACf,GAAIA,IAAI,CAACxB,MAAM,CAAC8B,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACC,EAAE,GAAKyD,KAAK,CAACzD,EAAE,CAAC,CAAE,CAC5C,MAAO,CAAAR,IAAI,CACb,CAEA,OAAAgB,MAAA,CAAAC,MAAA,IACKjB,IAAI,EACPxB,MAAM,CAAE,CAAC,GAAGwB,IAAI,CAACxB,MAAM,CAAAwC,MAAA,CAAAC,MAAA,IAAOgD,KAAK,EAAElD,QAAQ,CAAE,GAAI,CAAA7B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG,GAE9E,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAA+E,eAAe,CAAGA,CAAA,GAAM7F,KAAK,CAACE,SAAS,EAAIN,aAAa,CAC9D,KAAM,CAAAkG,UAAU,CAAGA,CAAA,GAAM9F,KAAK,CAACG,MAAM,CAAC4F,IAAI,CAAC7D,CAAC,EAAIA,CAAC,CAACC,EAAE,GAAK,UAAU,CAAC,CACpE,KAAM,CAAA6D,QAAQ,CAAIC,OAAe,EAAKjG,KAAK,CAACG,MAAM,CAAC4F,IAAI,CAAC7D,CAAC,EAAIA,CAAC,CAACC,EAAE,GAAK8D,OAAO,CAAC,CAE9E,OAAAtD,MAAA,CAAAC,MAAA,IACK5C,KAAK,EACRyB,eAAe,CACfoB,UAAU,CACVU,YAAY,CACZS,mBAAmB,CACnBc,yBAAyB,CACzBG,KAAK,CACLE,YAAY,CACZQ,SAAS,CACTE,eAAe,CACfC,UAAU,CACVE,QAAQ,GAEZ,CAAC,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}