{"ast":null,"code":"const disableReactNativeMissingModuleHandling=!false&&(false||false);globalThis.__webpack_chunk_load__=id=>{return global[`${__METRO_GLOBAL_PREFIX__}__loadBundleAsync`](id);};globalThis.__webpack_require__=id=>{const original=ErrorUtils.reportFatalError;if(disableReactNativeMissingModuleHandling){ErrorUtils.reportFatalError=err=>{throw err;};}try{return global[`${__METRO_GLOBAL_PREFIX__}__r`](id);}finally{if(disableReactNativeMissingModuleHandling){ErrorUtils.reportFatalError=original;}}};","map":{"version":3,"names":["disableReactNativeMissingModuleHandling","globalThis","__webpack_chunk_load__","id","global","__METRO_GLOBAL_PREFIX__","__webpack_require__","original","ErrorUtils","reportFatalError","err"],"sources":["/home/user/rork-vibesync-458/node_modules/@expo/metro-runtime/rsc/runtime.js"],"sourcesContent":["/**\n * Copyright Â© 2024 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// React Native's error handling is full of bugs which cause the app to crash in production.\n// We'll disable their handling in production native builds to ensure missing modules are shown to the user.\nconst disableReactNativeMissingModuleHandling =\n  !__DEV__ && (process.env.EXPO_OS !== 'web' || typeof window === 'undefined');\n\nglobalThis.__webpack_chunk_load__ = (id) => {\n  return global[`${__METRO_GLOBAL_PREFIX__}__loadBundleAsync`](id);\n};\n\nglobalThis.__webpack_require__ = (id) => {\n  // This logic can be tested by running a production iOS build without virtual client boundaries. This will result in all split chunks being missing and\n  // errors being thrown on RSC load.\n\n  const original = ErrorUtils.reportFatalError;\n  if (disableReactNativeMissingModuleHandling) {\n    ErrorUtils.reportFatalError = (err) => {\n      // Throw the error so the __r function exits as expected. The error will then be caught by the nearest error boundary.\n      throw err;\n    };\n  }\n  try {\n    return global[`${__METRO_GLOBAL_PREFIX__}__r`](id);\n  } finally {\n    // Restore the original error handling.\n    if (disableReactNativeMissingModuleHandling) {\n      ErrorUtils.reportFatalError = original;\n    }\n  }\n};\n"],"mappings":"AASA,KAAM,CAAAA,uCAAuC,CAC3C,MAAQ,GAAK,YAA8D,CAAC,CAE9EC,UAAU,CAACC,sBAAsB,CAAIC,EAAE,EAAK,CAC1C,MAAO,CAAAC,MAAM,CAAC,GAAGC,uBAAuB,mBAAmB,CAAC,CAACF,EAAE,CAAC,CAClE,CAAC,CAEDF,UAAU,CAACK,mBAAmB,CAAIH,EAAE,EAAK,CAIvC,KAAM,CAAAI,QAAQ,CAAGC,UAAU,CAACC,gBAAgB,CAC5C,GAAIT,uCAAuC,CAAE,CAC3CQ,UAAU,CAACC,gBAAgB,CAAIC,GAAG,EAAK,CAErC,KAAM,CAAAA,GAAG,CACX,CAAC,CACH,CACA,GAAI,CACF,MAAO,CAAAN,MAAM,CAAC,GAAGC,uBAAuB,KAAK,CAAC,CAACF,EAAE,CAAC,CACpD,CAAC,OAAS,CAER,GAAIH,uCAAuC,CAAE,CAC3CQ,UAAU,CAACC,gBAAgB,CAAGF,QAAQ,CACxC,CACF,CACF,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"script","externalDependencies":[]}