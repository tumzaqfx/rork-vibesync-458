{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.getIgnoreList=exports.extrapolateGroups=exports.generateDynamic=void 0;exports.getRoutes=getRoutes;exports.getExactRoutes=getExactRoutes;const getRoutesCore_1=require(\"./getRoutesCore\");function getRoutes(contextModule,options={}){return(0,getRoutesCore_1.getRoutes)(contextModule,Object.assign({getSystemRoute({route,type},defaults){if(route===''&&type==='layout'){return{type:'layout',loadRoute:()=>({default:require('./views/Navigator').DefaultNavigator}),contextKey:'expo-router/build/views/Navigator.js',route:'',generated:true,dynamic:null,children:[]};}else if(route==='_sitemap'&&type==='route'){return{loadRoute(){const{Sitemap,getNavOptions}=require('./views/Sitemap');return{default:Sitemap,getNavOptions};},route:'_sitemap',type:'route',contextKey:'expo-router/build/views/Sitemap.js',generated:true,internal:true,dynamic:null,children:[]};}else if(route==='+not-found'&&type==='route'){return{loadRoute(){return{default:require('./views/Unmatched').Unmatched};},type:'route',route:'+not-found',contextKey:'expo-router/build/views/Unmatched.js',generated:true,internal:true,dynamic:[{name:'+not-found',deep:true,notFound:true}],children:[]};}else if((type==='redirect'||type==='rewrite')&&defaults){return Object.assign({},defaults,{loadRoute(){return require('./getRoutesRedirects').getRedirectModule(route);}});}throw new Error(`Unknown system route: ${route} and type: ${type}`);}},options));}function getExactRoutes(contextModule,options={}){return getRoutes(contextModule,Object.assign({},options,{skipGenerated:true}));}var getRoutesCore_2=require(\"./getRoutesCore\");Object.defineProperty(exports,\"generateDynamic\",{enumerable:true,get:function(){return getRoutesCore_2.generateDynamic;}});Object.defineProperty(exports,\"extrapolateGroups\",{enumerable:true,get:function(){return getRoutesCore_2.extrapolateGroups;}});Object.defineProperty(exports,\"getIgnoreList\",{enumerable:true,get:function(){return getRoutesCore_2.getIgnoreList;}});","map":{"version":3,"names":["exports","getRoutes","getExactRoutes","getRoutesCore_1","require","contextModule","options","Object","assign","getSystemRoute","route","type","defaults","loadRoute","default","DefaultNavigator","contextKey","generated","dynamic","children","Sitemap","getNavOptions","internal","Unmatched","name","deep","notFound","getRedirectModule","Error","skipGenerated","getRoutesCore_2","defineProperty","enumerable","get","generateDynamic","extrapolateGroups","getIgnoreList"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-router/src/getRoutes.ts"],"sourcesContent":["import type { RouteNode } from './Route';\nimport { getRoutes as getRoutesCore, type Options as OptionsCore } from './getRoutesCore';\nimport type { RequireContext } from './types';\n\nexport type Options = Omit<OptionsCore, 'getSystemRoute'>;\n/**\n * Given a Metro context module, return an array of nested routes.\n *\n * This is a two step process:\n *  1. Convert the RequireContext keys (file paths) into a directory tree.\n *      - This should extrapolate array syntax into multiple routes\n *      - Routes are given a specificity score\n *  2. Flatten the directory tree into routes\n *      - Routes in directories without _layout files are hoisted to the nearest _layout\n *      - The name of the route is relative to the nearest _layout\n *      - If multiple routes have the same name, the most specific route is used\n */\nexport function getRoutes(contextModule: RequireContext, options: Options = {}): RouteNode | null {\n  return getRoutesCore(contextModule, {\n    getSystemRoute({ route, type }, defaults) {\n      if (route === '' && type === 'layout') {\n        // Root layout when no layout is defined.\n        return {\n          type: 'layout',\n          loadRoute: () => ({\n            default: (require('./views/Navigator') as typeof import('./views/Navigator'))\n              .DefaultNavigator,\n          }),\n          // Generate a fake file name for the directory\n          contextKey: 'expo-router/build/views/Navigator.js',\n          route: '',\n          generated: true,\n          dynamic: null,\n          children: [],\n        };\n      } else if (route === '_sitemap' && type === 'route') {\n        return {\n          loadRoute() {\n            const { Sitemap, getNavOptions } = require('./views/Sitemap');\n            return { default: Sitemap, getNavOptions };\n          },\n          route: '_sitemap',\n          type: 'route',\n          contextKey: 'expo-router/build/views/Sitemap.js',\n          generated: true,\n          internal: true,\n          dynamic: null,\n          children: [],\n        };\n      } else if (route === '+not-found' && type === 'route') {\n        return {\n          loadRoute() {\n            return { default: require('./views/Unmatched').Unmatched };\n          },\n          type: 'route',\n          route: '+not-found',\n          contextKey: 'expo-router/build/views/Unmatched.js',\n          generated: true,\n          internal: true,\n          dynamic: [{ name: '+not-found', deep: true, notFound: true }],\n          children: [],\n        };\n      } else if ((type === 'redirect' || type === 'rewrite') && defaults) {\n        return {\n          ...defaults,\n          loadRoute() {\n            return require('./getRoutesRedirects').getRedirectModule(route);\n          },\n        };\n      }\n      throw new Error(`Unknown system route: ${route} and type: ${type}`);\n    },\n    ...options,\n  });\n}\n\nexport function getExactRoutes(\n  contextModule: RequireContext,\n  options: Options = {}\n): RouteNode | null {\n  return getRoutes(contextModule, {\n    ...options,\n    skipGenerated: true,\n  });\n}\n\nexport { generateDynamic, extrapolateGroups, getIgnoreList } from './getRoutesCore';\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}