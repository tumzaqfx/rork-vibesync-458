{"ast":null,"code":"import{createTRPCReact,createTRPCClient,httpBatchLink}from\"@trpc/react-query\";import superjson from\"superjson\";import Platform from\"react-native-web/dist/exports/Platform\";import'./vibe-sync-frontend-troubleshooting';export const trpc=createTRPCReact();let authToken;const getBaseUrl=()=>{const tunnelUrl=process.env.EXPO_PUBLIC_RORK_API_BASE_URL;const backendUrl=process.env.EXPO_PUBLIC_BACKEND_URL;if(tunnelUrl&&tunnelUrl.startsWith('https://')){console.log('[tRPC] ✅ Using tunnel URL (works on all platforms):',tunnelUrl);return tunnelUrl;}if(backendUrl){console.log('[tRPC] Using backend URL:',backendUrl);if(false&&backendUrl.includes('localhost')){console.warn('[tRPC] ⚠️  Warning: localhost may not work on physical devices. Use tunnel URL instead.');}return backendUrl;}console.error('[tRPC] ❌ No backend URL configured!');throw new Error(\"No base url found. Please set EXPO_PUBLIC_RORK_API_BASE_URL (tunnel) or EXPO_PUBLIC_BACKEND_URL\");};export const setAuthToken=token=>{authToken=token;console.log('[tRPC] Auth token updated:',token?'Token set':'Token cleared');};export const getAuthToken=()=>authToken;const createTRPCClientInstance=()=>{const baseUrl=getBaseUrl();const url=`${baseUrl}/api/trpc`;console.log('[tRPC] Creating client with URL:',url);return createTRPCClient({links:[httpBatchLink({url,transformer:superjson,headers(){const headers={'Content-Type':'application/json'};if(authToken){headers['authorization']=`Bearer ${authToken}`;}return headers;},async fetch(url,options){console.log('[tRPC] Fetching:',url);try{const response=await fetch(url,Object.assign({},options,{credentials:'include'}));if(!response.ok){console.error('[tRPC] ❌ HTTP Error:',response.status,response.statusText);if(response.status===404){const text=await response.text();console.error('[tRPC] 404 Response:',text.substring(0,200));throw new Error('Backend endpoint not found (404). '+'Please ensure the backend server is running on '+baseUrl);}}const contentType=response.headers.get('content-type');if(!contentType?.includes('application/json')){console.error('[tRPC] ❌ Backend returned non-JSON response:',contentType);console.error('[tRPC] Response status:',response.status);const text=await response.text();console.error('[tRPC] Response preview:',text.substring(0,200));throw new Error('Backend is not responding correctly. '+'Please ensure the backend server is running on '+baseUrl);}return response;}catch(error){if(error.message?.includes('Backend')){throw error;}console.error('[tRPC] ❌ Network error:',error.message);throw new Error('Cannot connect to backend server. '+'Please start the backend with: bun backend/server.ts');}}})]});};export const trpcClient=createTRPCClientInstance();","map":{"version":3,"names":["createTRPCReact","createTRPCClient","httpBatchLink","superjson","Platform","trpc","authToken","getBaseUrl","tunnelUrl","process","env","EXPO_PUBLIC_RORK_API_BASE_URL","backendUrl","EXPO_PUBLIC_BACKEND_URL","startsWith","console","log","includes","warn","error","Error","setAuthToken","token","getAuthToken","createTRPCClientInstance","baseUrl","url","links","transformer","headers","fetch","options","response","Object","assign","credentials","ok","status","statusText","text","substring","contentType","get","message","trpcClient"],"sources":["/home/user/rork-vibesync-458/lib/trpc.ts"],"sourcesContent":["import { createTRPCReact, createTRPCClient, httpBatchLink } from \"@trpc/react-query\";\nimport type { AppRouter } from \"@/backend/trpc/app-router\";\nimport superjson from \"superjson\";\nimport { Platform } from \"react-native\";\nimport './vibe-sync-frontend-troubleshooting';\n\nexport const trpc = createTRPCReact<AppRouter>();\n\nlet authToken: string | undefined;\n\nconst getBaseUrl = () => {\n  const tunnelUrl = process.env.EXPO_PUBLIC_RORK_API_BASE_URL;\n  const backendUrl = process.env.EXPO_PUBLIC_BACKEND_URL;\n  \n  if (tunnelUrl && tunnelUrl.startsWith('https://')) {\n    console.log('[tRPC] ✅ Using tunnel URL (works on all platforms):', tunnelUrl);\n    return tunnelUrl;\n  }\n  \n  if (backendUrl) {\n    console.log('[tRPC] Using backend URL:', backendUrl);\n    if (Platform.OS !== 'web' && backendUrl.includes('localhost')) {\n      console.warn('[tRPC] ⚠️  Warning: localhost may not work on physical devices. Use tunnel URL instead.');\n    }\n    return backendUrl;\n  }\n\n  console.error('[tRPC] ❌ No backend URL configured!');\n  throw new Error(\n    \"No base url found. Please set EXPO_PUBLIC_RORK_API_BASE_URL (tunnel) or EXPO_PUBLIC_BACKEND_URL\"\n  );\n};\n\nexport const setAuthToken = (token: string | undefined) => {\n  authToken = token;\n  console.log('[tRPC] Auth token updated:', token ? 'Token set' : 'Token cleared');\n};\n\nexport const getAuthToken = () => authToken;\n\nconst createTRPCClientInstance = () => {\n  const baseUrl = getBaseUrl();\n  const url = `${baseUrl}/api/trpc`;\n  \n  console.log('[tRPC] Creating client with URL:', url);\n  \n  return createTRPCClient<AppRouter>({\n    links: [\n      httpBatchLink({\n        url,\n        transformer: superjson,\n        headers() {\n          const headers: Record<string, string> = {\n            'Content-Type': 'application/json',\n          };\n          \n          if (authToken) {\n            headers['authorization'] = `Bearer ${authToken}`;\n          }\n          \n          return headers;\n        },\n        async fetch(url, options) {\n          console.log('[tRPC] Fetching:', url);\n          try {\n            const response = await fetch(url, {\n              ...options,\n              credentials: 'include',\n            });\n            \n            if (!response.ok) {\n              console.error('[tRPC] ❌ HTTP Error:', response.status, response.statusText);\n              \n              if (response.status === 404) {\n                const text = await response.text();\n                console.error('[tRPC] 404 Response:', text.substring(0, 200));\n                throw new Error(\n                  'Backend endpoint not found (404). ' +\n                  'Please ensure the backend server is running on ' + baseUrl\n                );\n              }\n            }\n            \n            const contentType = response.headers.get('content-type');\n            if (!contentType?.includes('application/json')) {\n              console.error('[tRPC] ❌ Backend returned non-JSON response:', contentType);\n              console.error('[tRPC] Response status:', response.status);\n              \n              const text = await response.text();\n              console.error('[tRPC] Response preview:', text.substring(0, 200));\n              \n              throw new Error(\n                'Backend is not responding correctly. ' +\n                'Please ensure the backend server is running on ' + baseUrl\n              );\n            }\n            \n            return response;\n          } catch (error: any) {\n            if (error.message?.includes('Backend')) {\n              throw error;\n            }\n            \n            console.error('[tRPC] ❌ Network error:', error.message);\n            throw new Error(\n              'Cannot connect to backend server. ' +\n              'Please start the backend with: bun backend/server.ts'\n            );\n          }\n        },\n      }),\n    ],\n  });\n};\n\nexport const trpcClient = createTRPCClientInstance();\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}