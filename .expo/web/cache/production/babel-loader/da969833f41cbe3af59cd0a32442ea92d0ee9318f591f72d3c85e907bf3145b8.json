{"ast":null,"code":"\"use strict\";import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"defaultStatus\"];import{nanoid}from'nanoid/non-secure';import{TabActions,TabRouter}from\"./TabRouter.js\";export const DrawerActions=Object.assign({},TabActions,{openDrawer(){return{type:'OPEN_DRAWER'};},closeDrawer(){return{type:'CLOSE_DRAWER'};},toggleDrawer(){return{type:'TOGGLE_DRAWER'};}});export function DrawerRouter(_ref){let{defaultStatus='closed'}=_ref,rest=_objectWithoutPropertiesLoose(_ref,_excluded);const router=TabRouter(rest);const isDrawerInHistory=state=>Boolean(state.history?.some(it=>it.type==='drawer'));const addDrawerToHistory=state=>{if(isDrawerInHistory(state)){return state;}return Object.assign({},state,{history:[...state.history,{type:'drawer',status:defaultStatus==='open'?'closed':'open'}]});};const removeDrawerFromHistory=state=>{if(!isDrawerInHistory(state)){return state;}return Object.assign({},state,{history:state.history.filter(it=>it.type!=='drawer')});};const openDrawer=state=>{if(defaultStatus==='open'){return removeDrawerFromHistory(state);}return addDrawerToHistory(state);};const closeDrawer=state=>{if(defaultStatus==='open'){return addDrawerToHistory(state);}return removeDrawerFromHistory(state);};return Object.assign({},router,{type:'drawer',getInitialState({routeNames,routeParamList,routeGetIdList}){const state=router.getInitialState({routeNames,routeParamList,routeGetIdList});return Object.assign({},state,{default:defaultStatus,stale:false,type:'drawer',key:`drawer-${nanoid()}`});},getRehydratedState(partialState,{routeNames,routeParamList,routeGetIdList}){if(partialState.stale===false){return partialState;}let state=router.getRehydratedState(partialState,{routeNames,routeParamList,routeGetIdList});if(isDrawerInHistory(partialState)){state=removeDrawerFromHistory(state);state=addDrawerToHistory(state);}return Object.assign({},state,{default:defaultStatus,type:'drawer',key:`drawer-${nanoid()}`});},getStateForRouteFocus(state,key){const result=router.getStateForRouteFocus(state,key);return closeDrawer(result);},getStateForAction(state,action,options){switch(action.type){case'OPEN_DRAWER':return openDrawer(state);case'CLOSE_DRAWER':return closeDrawer(state);case'TOGGLE_DRAWER':if(isDrawerInHistory(state)){return removeDrawerFromHistory(state);}return addDrawerToHistory(state);case'JUMP_TO':case'NAVIGATE':case'NAVIGATE_DEPRECATED':{const result=router.getStateForAction(state,action,options);if(result!=null&&result.index!==state.index){return closeDrawer(result);}return result;}case'GO_BACK':if(isDrawerInHistory(state)){return removeDrawerFromHistory(state);}return router.getStateForAction(state,action,options);default:return router.getStateForAction(state,action,options);}},actionCreators:DrawerActions});}","map":{"version":3,"names":["nanoid","TabActions","TabRouter","DrawerActions","Object","assign","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","_ref","defaultStatus","rest","_objectWithoutPropertiesLoose","_excluded","router","isDrawerInHistory","state","Boolean","history","some","it","addDrawerToHistory","status","removeDrawerFromHistory","filter","getInitialState","routeNames","routeParamList","routeGetIdList","default","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","index","actionCreators"],"sources":["/home/user/rork-vibesync-458/node_modules/@react-navigation/routers/src/DrawerRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport {\n  type TabActionHelpers,\n  TabActions,\n  type TabActionType,\n  type TabNavigationState,\n  TabRouter,\n  type TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n        case 'NAVIGATE_DEPRECATED': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}