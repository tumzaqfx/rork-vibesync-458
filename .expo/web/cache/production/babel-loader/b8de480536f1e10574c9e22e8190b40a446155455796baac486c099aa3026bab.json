{"ast":null,"code":"\"use strict\";import*as React from'react';export const NavigationBuilderContext=React.createContext({onDispatchAction:()=>undefined,onOptionsChange:()=>undefined,scheduleUpdate:()=>{throw new Error(\"Couldn't find a context for scheduling updates.\");},flushUpdates:()=>{throw new Error(\"Couldn't find a context for flushing updates.\");}});","map":{"version":3,"names":["React","NavigationBuilderContext","createContext","onDispatchAction","undefined","onOptionsChange","scheduleUpdate","Error","flushUpdates"],"sources":["/home/user/rork-vibesync-458/node_modules/@react-navigation/core/src/NavigationBuilderContext.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationHelpers } from './types';\n\nexport type ListenerMap = {\n  action: ChildActionListener;\n  focus: FocusedNavigationListener;\n};\n\nexport type KeyedListenerMap = {\n  getState: GetStateListener;\n  beforeRemove: ChildBeforeRemoveListener;\n};\n\nexport type AddListener = <T extends keyof ListenerMap>(\n  type: T,\n  listener: ListenerMap[T]\n) => void;\n\nexport type AddKeyedListener = <T extends keyof KeyedListenerMap>(\n  type: T,\n  key: string,\n  listener: KeyedListenerMap[T]\n) => void;\n\nexport type ChildActionListener = (\n  action: NavigationAction,\n  visitedNavigators?: Set<string>\n) => boolean;\n\nexport type FocusedNavigationCallback<T> = (\n  navigation: NavigationHelpers<ParamListBase>\n) => T;\n\nexport type FocusedNavigationListener = <T>(\n  callback: FocusedNavigationCallback<T>\n) => {\n  handled: boolean;\n  result: T;\n};\n\nexport type GetStateListener = () => NavigationState;\n\nexport type ChildBeforeRemoveListener = (action: NavigationAction) => boolean;\n\n/**\n * Context which holds the required helpers needed to build nested navigators.\n */\nexport const NavigationBuilderContext = React.createContext<{\n  onAction?: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  addListener?: AddListener;\n  addKeyedListener?: AddKeyedListener;\n  onRouteFocus?: (key: string) => void;\n  onDispatchAction: (action: NavigationAction, noop: boolean) => void;\n  onOptionsChange: (options: object) => void;\n  scheduleUpdate: (callback: () => void) => void;\n  flushUpdates: () => void;\n  stackRef?: React.MutableRefObject<string | undefined>;\n}>({\n  onDispatchAction: () => undefined,\n  onOptionsChange: () => undefined,\n  scheduleUpdate: () => {\n    throw new Error(\"Couldn't find a context for scheduling updates.\");\n  },\n  flushUpdates: () => {\n    throw new Error(\"Couldn't find a context for flushing updates.\");\n  },\n});\n"],"mappings":"aAKA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAgD9B,MAAO,MAAM,CAAAC,wBAAwB,CAAGD,KAAK,CAACE,aAAa,CAaxD,CACDC,gBAAgB,CAAEA,CAAA,GAAMC,SAAS,CACjCC,eAAe,CAAEA,CAAA,GAAMD,SAAS,CAChCE,cAAc,CAAEA,CAAA,GAAM,CACpB,KAAM,IAAI,CAAAC,KAAK,CAAC,iDAAiD,CAAC,CACpE,CAAC,CACDC,YAAY,CAAEA,CAAA,GAAM,CAClB,KAAM,IAAI,CAAAD,KAAK,CAAC,+CAA+C,CAAC,CAClE,CACF,CAAC,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}