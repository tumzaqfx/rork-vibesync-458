{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.resolveHref=void 0;exports.resolveHrefStringWithSegments=resolveHrefStringWithSegments;const resolveHref=href=>{if(typeof href==='string'){return(0,exports.resolveHref)({pathname:href});}const path=href.pathname??'';if(!href?.params){return path;}const{pathname,params}=createQualifiedPathname(path,Object.assign({},href.params));const paramsString=createQueryParams(params);return pathname+(paramsString?`?${paramsString}`:'');};exports.resolveHref=resolveHref;function resolveHrefStringWithSegments(href,{segments=[],params={}}={},{relativeToDirectory}={}){if(href.startsWith('.')){let base=segments?.map(segment=>{if(!segment.startsWith('['))return segment;if(segment.startsWith('[...')){segment=segment.slice(4,-1);const param=params[segment];if(Array.isArray(param)){return param.join('/');}else{return param?.split(',')?.join('/')??'';}}else{segment=segment.slice(1,-1);return params[segment];}}).filter(Boolean).join('/')??'/';if(relativeToDirectory){base=`${base}/`;}const url=new URL(href,`http://hostname/${base}`);href=`${url.pathname}${url.search}`;}return href;}function createQualifiedPathname(pathname,params){for(const[key,value='']of Object.entries(params)){const dynamicKey=`[${key}]`;const deepDynamicKey=`[...${key}]`;if(pathname.includes(dynamicKey)){pathname=pathname.replace(dynamicKey,encodeParam(value));}else if(pathname.includes(deepDynamicKey)){pathname=pathname.replace(deepDynamicKey,encodeParam(value));}else{continue;}delete params[key];}return{pathname,params};}function encodeParam(param){if(Array.isArray(param)){return param.map(p=>encodeParam(p)).join('/');}return encodeURIComponent(param.toString());}function createQueryParams(params){return Object.entries(params).filter(([,value])=>value!=null).map(([key,value])=>`${key}=${encodeURIComponent(value.toString())}`).join('&');}","map":{"version":3,"names":["exports","resolveHrefStringWithSegments","resolveHref","href","pathname","path","params","createQualifiedPathname","Object","assign","paramsString","createQueryParams","segments","relativeToDirectory","startsWith","base","map","segment","slice","param","Array","isArray","join","split","filter","Boolean","url","URL","search","key","value","entries","dynamicKey","deepDynamicKey","includes","replace","encodeParam","p","encodeURIComponent","toString"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-router/src/link/href.ts"],"sourcesContent":["import { UrlObject } from '../LocationProvider';\nimport { LinkToOptions } from '../global-state/routing';\nimport { Href } from '../types';\n\n/** Resolve an href object into a fully qualified, relative href. */\nexport const resolveHref = (href: Href): string => {\n  if (typeof href === 'string') {\n    return resolveHref({ pathname: href });\n  }\n  const path = href.pathname ?? '';\n  if (!href?.params) {\n    return path;\n  }\n  const { pathname, params } = createQualifiedPathname(path, {\n    ...href.params,\n  });\n  const paramsString = createQueryParams(params);\n  return pathname + (paramsString ? `?${paramsString}` : '');\n};\n\nexport function resolveHrefStringWithSegments(\n  href: string,\n  { segments = [], params = {} }: Partial<UrlObject> = {},\n  { relativeToDirectory }: LinkToOptions = {}\n) {\n  if (href.startsWith('.')) {\n    // Resolve base path by merging the current segments with the params\n    let base =\n      segments\n        ?.map((segment) => {\n          if (!segment.startsWith('[')) return segment;\n\n          if (segment.startsWith('[...')) {\n            segment = segment.slice(4, -1);\n            const param = params[segment];\n            if (Array.isArray(param)) {\n              return param.join('/');\n            } else {\n              return param?.split(',')?.join('/') ?? '';\n            }\n          } else {\n            segment = segment.slice(1, -1);\n            return params[segment];\n          }\n        })\n        .filter(Boolean)\n        .join('/') ?? '/';\n\n    if (relativeToDirectory) {\n      base = `${base}/`;\n    }\n\n    const url = new URL(href, `http://hostname/${base}`);\n\n    href = `${url.pathname}${url.search}`;\n  }\n\n  return href;\n}\n\nfunction createQualifiedPathname(\n  pathname: string,\n  params: Record<string, any>\n): { pathname: string; params: any } {\n  for (const [key, value = ''] of Object.entries(params)) {\n    const dynamicKey = `[${key}]`;\n    const deepDynamicKey = `[...${key}]`;\n    if (pathname.includes(dynamicKey)) {\n      pathname = pathname.replace(dynamicKey, encodeParam(value));\n    } else if (pathname.includes(deepDynamicKey)) {\n      pathname = pathname.replace(deepDynamicKey, encodeParam(value));\n    } else {\n      continue;\n    }\n\n    delete params[key];\n  }\n  return { pathname, params };\n}\n\nfunction encodeParam(param: any): string {\n  if (Array.isArray(param)) {\n    return param.map((p) => encodeParam(p)).join('/');\n  }\n\n  return encodeURIComponent(param.toString());\n}\n\nfunction createQueryParams(params: Record<string, any>): string {\n  return (\n    Object.entries(params)\n      // Allow nullish params\n      .filter(([, value]) => value != null)\n      .map(([key, value]) => `${key}=${encodeURIComponent(value.toString())}`)\n      .join('&')\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}