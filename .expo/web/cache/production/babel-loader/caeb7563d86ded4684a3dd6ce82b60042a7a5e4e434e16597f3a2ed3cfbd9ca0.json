{"ast":null,"code":"import{createPermissionHook}from'expo-modules-core';import CameraManager from'./ExpoCameraManager';export{default as CameraView}from'./CameraView';async function getCameraPermissionsAsync(){return CameraManager.getCameraPermissionsAsync();}async function requestCameraPermissionsAsync(){return CameraManager.requestCameraPermissionsAsync();}export const useCameraPermissions=createPermissionHook({getMethod:getCameraPermissionsAsync,requestMethod:requestCameraPermissionsAsync});async function getMicrophonePermissionsAsync(){return CameraManager.getMicrophonePermissionsAsync();}async function requestMicrophonePermissionsAsync(){return CameraManager.requestMicrophonePermissionsAsync();}export const useMicrophonePermissions=createPermissionHook({getMethod:getMicrophonePermissionsAsync,requestMethod:requestMicrophonePermissionsAsync});export async function scanFromURLAsync(url,barcodeTypes=['qr']){return CameraManager.scanFromURLAsync(url,barcodeTypes);}export*from'./Camera.types';export*from'./PictureRef';export const Camera={getCameraPermissionsAsync,requestCameraPermissionsAsync,getMicrophonePermissionsAsync,requestMicrophonePermissionsAsync,scanFromURLAsync};","map":{"version":3,"names":["createPermissionHook","CameraManager","default","CameraView","getCameraPermissionsAsync","requestCameraPermissionsAsync","useCameraPermissions","getMethod","requestMethod","getMicrophonePermissionsAsync","requestMicrophonePermissionsAsync","useMicrophonePermissions","scanFromURLAsync","url","barcodeTypes","Camera"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-camera/src/index.ts"],"sourcesContent":["import { createPermissionHook, PermissionResponse } from 'expo-modules-core';\n\nimport { BarcodeScanningResult, BarcodeType } from './Camera.types';\nimport CameraManager from './ExpoCameraManager';\n\nexport { default as CameraView } from './CameraView';\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing camera.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function getCameraPermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.getCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing camera.\n * On iOS this will require apps to specify an `NSCameraUsageDescription` entry in the **Info.plist**.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function requestCameraPermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.requestCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the camera.\n * This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = useCameraPermissions();\n * ```\n */\nexport const useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing microphone.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function getMicrophonePermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.getMicrophonePermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing the microphone.\n * On iOS this will require apps to specify an `NSMicrophoneUsageDescription` entry in the **Info.plist**.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function requestMicrophonePermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.requestMicrophonePermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the microphone.\n * This uses both `requestMicrophonePermissionsAsync` and `getMicrophonePermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Camera.useMicrophonePermissions();\n * ```\n */\nexport const useMicrophonePermissions = createPermissionHook({\n  getMethod: getMicrophonePermissionsAsync,\n  requestMethod: requestMicrophonePermissionsAsync,\n});\n\n/**\n * Scan bar codes from the image at the given URL.\n * @param url URL to get the image from.\n * @param barcodeTypes An array of bar code types. Defaults to all supported bar code types on\n * the platform.\n * > __Note:__ Only QR codes are supported on iOS.\n * On android, the barcode should take up the majority of the image for best results.\n * @return A possibly empty array of objects of the `BarcodeScanningResult` shape, where the type\n * refers to the barcode type that was scanned and the data is the information encoded in the barcode.\n */\nexport async function scanFromURLAsync(\n  url: string,\n  barcodeTypes: BarcodeType[] = ['qr']\n): Promise<BarcodeScanningResult[]> {\n  return CameraManager.scanFromURLAsync(url, barcodeTypes);\n}\n\nexport * from './Camera.types';\nexport * from './PictureRef';\n\n/**\n * @hidden\n */\nexport const Camera = {\n  getCameraPermissionsAsync,\n  requestCameraPermissionsAsync,\n  getMicrophonePermissionsAsync,\n  requestMicrophonePermissionsAsync,\n  scanFromURLAsync,\n};\n"],"mappings":"AAAA,OAASA,oBAAoB,KAA4B,mBAAmB,CAG5E,MAAO,CAAAC,aAAa,KAAM,qBAAqB,CAE/C,OAASC,OAAO,GAAI,CAAAC,UAAU,KAAQ,cAAc,CAOpD,cAAe,CAAAC,yBAAyBA,CAAA,EACtC,MAAO,CAAAH,aAAa,CAACG,yBAAyB,EAAE,CAClD,CAQA,cAAe,CAAAC,6BAA6BA,CAAA,EAC1C,MAAO,CAAAJ,aAAa,CAACI,6BAA6B,EAAE,CACtD,CAYA,MAAO,MAAM,CAAAC,oBAAoB,CAAGN,oBAAoB,CAAC,CACvDO,SAAS,CAAEH,yBAAyB,CACpCI,aAAa,CAAEH,6B,CAChB,CAAC,CAOF,cAAe,CAAAI,6BAA6BA,CAAA,EAC1C,MAAO,CAAAR,aAAa,CAACQ,6BAA6B,EAAE,CACtD,CAQA,cAAe,CAAAC,iCAAiCA,CAAA,EAC9C,MAAO,CAAAT,aAAa,CAACS,iCAAiC,EAAE,CAC1D,CAYA,MAAO,MAAM,CAAAC,wBAAwB,CAAGX,oBAAoB,CAAC,CAC3DO,SAAS,CAAEE,6BAA6B,CACxCD,aAAa,CAAEE,iC,CAChB,CAAC,CAYF,MAAO,eAAe,CAAAE,gBAAgBA,CACpCC,GAAW,CACXC,YAAA,CAA8B,CAAC,IAAI,CAAC,EAEpC,MAAO,CAAAb,aAAa,CAACW,gBAAgB,CAACC,GAAG,CAAEC,YAAY,CAAC,CAC1D,CAEA,WAAc,gBAAgB,CAC9B,WAAc,cAAc,CAK5B,MAAO,MAAM,CAAAC,MAAM,CAAG,CACpBX,yBAAyB,CACzBC,6BAA6B,CAC7BI,6BAA6B,CAC7BC,iCAAiC,CACjCE,gB,CACD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}