{"ast":null,"code":"import Platform from\"react-native-web/dist/exports/Platform\";export class PerformanceMonitor{static metrics=new Map();static MAX_METRICS=100;static startMeasure(name,metadata){const metric={name,startTime:Date.now(),metadata};this.metrics.set(name,metric);console.log(`[Performance] Started measuring: ${name}`);}static endMeasure(name){const metric=this.metrics.get(name);if(!metric){console.warn(`[Performance] No metric found for: ${name}`);return null;}metric.endTime=Date.now();metric.duration=metric.endTime-metric.startTime;console.log(`[Performance] ${name}: ${metric.duration}ms`,metric.metadata);if(this.metrics.size>this.MAX_METRICS){const firstKey=this.metrics.keys().next().value;if(firstKey){this.metrics.delete(firstKey);}}return metric.duration;}static getMetric(name){const metric=this.metrics.get(name);if(metric){this.metrics.delete(name);}return metric;}static getAllMetrics(){return Array.from(this.metrics.values());}static clearMetrics(){this.metrics.clear();console.log('[Performance] Metrics cleared');}static async measureAsync(name,fn,metadata){this.startMeasure(name,metadata);try{const result=await fn();this.endMeasure(name);return result;}catch(error){this.endMeasure(name);throw error;}}static measure(name,fn,metadata){this.startMeasure(name,metadata);try{const result=fn();this.endMeasure(name);return result;}catch(error){this.endMeasure(name);throw error;}}static getMemoryInfo(){if(true&&'memory'in performance){const memory=performance.memory;return{usedJSHeapSize:memory.usedJSHeapSize,totalJSHeapSize:memory.totalJSHeapSize,jsHeapSizeLimit:memory.jsHeapSizeLimit};}return null;}static logMemoryUsage(){const memory=this.getMemoryInfo();if(memory){const usedMB=(memory.usedJSHeapSize||0)/1024/1024;const totalMB=(memory.totalJSHeapSize||0)/1024/1024;console.log(`[Memory] Used: ${usedMB.toFixed(2)}MB / Total: ${totalMB.toFixed(2)}MB`);}}static getAverageMetric(name){const metrics=Array.from(this.metrics.values()).filter(m=>m.name===name&&m.duration);if(metrics.length===0)return null;const sum=metrics.reduce((acc,m)=>acc+(m.duration||0),0);return sum/metrics.length;}}export class ErrorTracker{static errors=[];static MAX_ERRORS=50;static trackError(error,context){const errorLog={message:error.message,stack:error.stack,timestamp:Date.now(),context};this.errors.push(errorLog);if(this.errors.length>this.MAX_ERRORS){this.errors.shift();}console.error('[Error Tracked]',errorLog);}static getErrors(){return[...this.errors];}static clearErrors(){this.errors=[];console.log('[Error Tracker] Errors cleared');}static getErrorCount(){return this.errors.length;}static getRecentErrors(count=10){return this.errors.slice(-count);}}export class AppHealthMonitor{static healthChecks=new Map();static lastCheckTime=Date.now();static registerHealthCheck(name,isHealthy){this.healthChecks.set(name,isHealthy);this.lastCheckTime=Date.now();if(!isHealthy){console.warn(`[Health Check] ${name} is unhealthy`);}}static getHealthStatus(){const checks={};let isHealthy=true;this.healthChecks.forEach((status,name)=>{checks[name]=status;if(!status)isHealthy=false;});return{isHealthy,checks,lastCheck:this.lastCheckTime};}static async runHealthChecks(){console.log('[Health Check] Running system health checks...');try{this.registerHealthCheck('memory',true);const memory=PerformanceMonitor.getMemoryInfo();if(memory&&memory.usedJSHeapSize&&memory.jsHeapSizeLimit){const usagePercent=memory.usedJSHeapSize/memory.jsHeapSizeLimit*100;this.registerHealthCheck('memory',usagePercent<90);}const errorCount=ErrorTracker.getErrorCount();this.registerHealthCheck('errors',errorCount<10);this.registerHealthCheck('performance',true);console.log('[Health Check] Completed',this.getHealthStatus());}catch(error){console.error('[Health Check] Failed to run health checks',error);}}}export function withPerformanceTracking(fn,name){return(...args)=>{const metricName=name||fn.name||'anonymous';return PerformanceMonitor.measure(metricName,()=>fn(...args));};}export function withAsyncPerformanceTracking(fn,name){return async(...args)=>{const metricName=name||fn.name||'anonymous';return await PerformanceMonitor.measureAsync(metricName,()=>fn(...args));};}","map":{"version":3,"names":["PerformanceMonitor","metrics","Map","MAX_METRICS","startMeasure","name","metadata","metric","startTime","Date","now","set","console","log","endMeasure","get","warn","endTime","duration","size","firstKey","keys","next","value","delete","getMetric","getAllMetrics","Array","from","values","clearMetrics","clear","measureAsync","fn","result","error","measure","getMemoryInfo","performance","memory","usedJSHeapSize","totalJSHeapSize","jsHeapSizeLimit","logMemoryUsage","usedMB","totalMB","toFixed","getAverageMetric","filter","m","length","sum","reduce","acc","ErrorTracker","errors","MAX_ERRORS","trackError","context","errorLog","message","stack","timestamp","push","shift","getErrors","clearErrors","getErrorCount","getRecentErrors","count","slice","AppHealthMonitor","healthChecks","lastCheckTime","registerHealthCheck","isHealthy","getHealthStatus","checks","forEach","status","lastCheck","runHealthChecks","usagePercent","errorCount","withPerformanceTracking","args","metricName","withAsyncPerformanceTracking"],"sources":["/home/user/rork-vibesync-458/utils/performance.ts"],"sourcesContent":["import { Platform } from 'react-native';\n\ninterface PerformanceMetric {\n  name: string;\n  startTime: number;\n  endTime?: number;\n  duration?: number;\n  metadata?: Record<string, any>;\n}\n\ninterface MemoryInfo {\n  usedJSHeapSize?: number;\n  totalJSHeapSize?: number;\n  jsHeapSizeLimit?: number;\n}\n\nexport class PerformanceMonitor {\n  private static metrics: Map<string, PerformanceMetric> = new Map();\n  private static readonly MAX_METRICS = 100;\n\n  static startMeasure(name: string, metadata?: Record<string, any>): void {\n    const metric: PerformanceMetric = {\n      name,\n      startTime: Date.now(),\n      metadata,\n    };\n    \n    this.metrics.set(name, metric);\n    console.log(`[Performance] Started measuring: ${name}`);\n  }\n\n  static endMeasure(name: string): number | null {\n    const metric = this.metrics.get(name);\n    \n    if (!metric) {\n      console.warn(`[Performance] No metric found for: ${name}`);\n      return null;\n    }\n\n    metric.endTime = Date.now();\n    metric.duration = metric.endTime - metric.startTime;\n\n    console.log(`[Performance] ${name}: ${metric.duration}ms`, metric.metadata);\n\n    if (this.metrics.size > this.MAX_METRICS) {\n      const firstKey = this.metrics.keys().next().value;\n      if (firstKey) {\n        this.metrics.delete(firstKey);\n      }\n    }\n\n    return metric.duration;\n  }\n\n  static getMetric(name: string): PerformanceMetric | undefined {\n    const metric = this.metrics.get(name);\n    if (metric) {\n      this.metrics.delete(name);\n    }\n    return metric;\n  }\n\n  static getAllMetrics(): PerformanceMetric[] {\n    return Array.from(this.metrics.values());\n  }\n\n  static clearMetrics(): void {\n    this.metrics.clear();\n    console.log('[Performance] Metrics cleared');\n  }\n\n  static async measureAsync<T>(\n    name: string,\n    fn: () => Promise<T>,\n    metadata?: Record<string, any>\n  ): Promise<T> {\n    this.startMeasure(name, metadata);\n    try {\n      const result = await fn();\n      this.endMeasure(name);\n      return result;\n    } catch (error) {\n      this.endMeasure(name);\n      throw error;\n    }\n  }\n\n  static measure<T>(\n    name: string,\n    fn: () => T,\n    metadata?: Record<string, any>\n  ): T {\n    this.startMeasure(name, metadata);\n    try {\n      const result = fn();\n      this.endMeasure(name);\n      return result;\n    } catch (error) {\n      this.endMeasure(name);\n      throw error;\n    }\n  }\n\n  static getMemoryInfo(): MemoryInfo | null {\n    if (Platform.OS === 'web' && 'memory' in performance) {\n      const memory = (performance as any).memory;\n      return {\n        usedJSHeapSize: memory.usedJSHeapSize,\n        totalJSHeapSize: memory.totalJSHeapSize,\n        jsHeapSizeLimit: memory.jsHeapSizeLimit,\n      };\n    }\n    return null;\n  }\n\n  static logMemoryUsage(): void {\n    const memory = this.getMemoryInfo();\n    if (memory) {\n      const usedMB = (memory.usedJSHeapSize || 0) / 1024 / 1024;\n      const totalMB = (memory.totalJSHeapSize || 0) / 1024 / 1024;\n      console.log(`[Memory] Used: ${usedMB.toFixed(2)}MB / Total: ${totalMB.toFixed(2)}MB`);\n    }\n  }\n\n  static getAverageMetric(name: string): number | null {\n    const metrics = Array.from(this.metrics.values()).filter(m => m.name === name && m.duration);\n    \n    if (metrics.length === 0) return null;\n\n    const sum = metrics.reduce((acc, m) => acc + (m.duration || 0), 0);\n    return sum / metrics.length;\n  }\n}\n\nexport class ErrorTracker {\n  private static errors: {\n    message: string;\n    stack?: string;\n    timestamp: number;\n    context?: Record<string, any>;\n  }[] = [];\n  private static readonly MAX_ERRORS = 50;\n\n  static trackError(error: Error, context?: Record<string, any>): void {\n    const errorLog = {\n      message: error.message,\n      stack: error.stack,\n      timestamp: Date.now(),\n      context,\n    };\n\n    this.errors.push(errorLog);\n\n    if (this.errors.length > this.MAX_ERRORS) {\n      this.errors.shift();\n    }\n\n    console.error('[Error Tracked]', errorLog);\n  }\n\n  static getErrors(): typeof ErrorTracker.errors {\n    return [...this.errors];\n  }\n\n  static clearErrors(): void {\n    this.errors = [];\n    console.log('[Error Tracker] Errors cleared');\n  }\n\n  static getErrorCount(): number {\n    return this.errors.length;\n  }\n\n  static getRecentErrors(count: number = 10): typeof ErrorTracker.errors {\n    return this.errors.slice(-count);\n  }\n}\n\nexport class AppHealthMonitor {\n  private static healthChecks: Map<string, boolean> = new Map();\n  private static lastCheckTime: number = Date.now();\n\n  static registerHealthCheck(name: string, isHealthy: boolean): void {\n    this.healthChecks.set(name, isHealthy);\n    this.lastCheckTime = Date.now();\n    \n    if (!isHealthy) {\n      console.warn(`[Health Check] ${name} is unhealthy`);\n    }\n  }\n\n  static getHealthStatus(): {\n    isHealthy: boolean;\n    checks: Record<string, boolean>;\n    lastCheck: number;\n  } {\n    const checks: Record<string, boolean> = {};\n    let isHealthy = true;\n\n    this.healthChecks.forEach((status, name) => {\n      checks[name] = status;\n      if (!status) isHealthy = false;\n    });\n\n    return {\n      isHealthy,\n      checks,\n      lastCheck: this.lastCheckTime,\n    };\n  }\n\n  static async runHealthChecks(): Promise<void> {\n    console.log('[Health Check] Running system health checks...');\n\n    try {\n      this.registerHealthCheck('memory', true);\n      \n      const memory = PerformanceMonitor.getMemoryInfo();\n      if (memory && memory.usedJSHeapSize && memory.jsHeapSizeLimit) {\n        const usagePercent = (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100;\n        this.registerHealthCheck('memory', usagePercent < 90);\n      }\n\n      const errorCount = ErrorTracker.getErrorCount();\n      this.registerHealthCheck('errors', errorCount < 10);\n\n      this.registerHealthCheck('performance', true);\n\n      console.log('[Health Check] Completed', this.getHealthStatus());\n    } catch (error) {\n      console.error('[Health Check] Failed to run health checks', error);\n    }\n  }\n}\n\nexport function withPerformanceTracking<T extends (...args: any[]) => any>(\n  fn: T,\n  name?: string\n): T {\n  return ((...args: any[]) => {\n    const metricName = name || fn.name || 'anonymous';\n    return PerformanceMonitor.measure(metricName, () => fn(...args));\n  }) as T;\n}\n\nexport function withAsyncPerformanceTracking<T extends (...args: any[]) => Promise<any>>(\n  fn: T,\n  name?: string\n): T {\n  return (async (...args: any[]) => {\n    const metricName = name || fn.name || 'anonymous';\n    return await PerformanceMonitor.measureAsync(metricName, () => fn(...args));\n  }) as T;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}