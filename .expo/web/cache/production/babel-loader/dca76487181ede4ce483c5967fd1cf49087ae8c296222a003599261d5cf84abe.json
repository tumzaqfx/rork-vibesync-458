{"ast":null,"code":"export var ContentType;(function(ContentType){ContentType[\"PLAIN_TEXT\"]=\"plain-text\";ContentType[\"HTML\"]=\"html\";ContentType[\"IMAGE\"]=\"image\";ContentType[\"URL\"]=\"url\";})(ContentType||(ContentType={}));export var StringFormat;(function(StringFormat){StringFormat[\"PLAIN_TEXT\"]=\"plainText\";StringFormat[\"HTML\"]=\"html\";})(StringFormat||(StringFormat={}));","map":{"version":3,"names":["ContentType","StringFormat"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-clipboard/src/Clipboard.types.ts"],"sourcesContent":["// @needsAudit\nexport type GetImageOptions = {\n  /**\n   * The format of the clipboard image to be converted to.\n   */\n  format: 'png' | 'jpeg';\n  /**\n   * Specify the quality of the returned image, between `0` and `1`. Defaults to `1` (highest quality).\n   * Applicable only when `format` is set to `jpeg`, ignored otherwise.\n   * @default 1\n   */\n  jpegQuality?: number;\n};\n\n// @needsAudit\nexport type ClipboardImage = {\n  /**\n   * A Base64-encoded string of the image data. Its format is dependent on the `format` option.\n   * You can use it directly as the source of an `Image` element.\n   *\n   * > **NOTE:** The string is already prepended with `data:image/png;base64,` or `data:image/jpeg;base64,` prefix.\n   * @example\n   * ```ts\n   * <Image\n   *   source={{ uri: clipboardImage.data }}\n   *   style={{ width: 200, height: 200 }}\n   * />\n   * ```\n   */\n  data: string;\n  /**\n   * Dimensions (`width` and `height`) of the image pasted from clipboard.\n   */\n  size: {\n    width: number;\n    height: number;\n  };\n};\n\n/**\n * Type used to define what type of data is stored in the clipboard.\n */\nexport enum ContentType {\n  PLAIN_TEXT = 'plain-text',\n  HTML = 'html',\n  IMAGE = 'image',\n  /**\n   * @platform iOS\n   */\n  URL = 'url',\n}\n\n/**\n * Type used to determine string format stored in the clipboard.\n */\nexport enum StringFormat {\n  PLAIN_TEXT = 'plainText',\n  HTML = 'html',\n}\n\nexport type GetStringOptions = {\n  /**\n   * The target format of the clipboard string to be converted to, if possible.\n   *\n   * @default StringFormat.PLAIN_TEXT\n   */\n  preferredFormat?: StringFormat;\n};\n\nexport type SetStringOptions = {\n  /**\n   * The input format of the provided string.\n   * Adjusting this option can help other applications interpret copied string properly.\n   *\n   * @default StringFormat.PLAIN_TEXT\n   */\n  inputFormat?: StringFormat;\n};\n\nexport type AcceptedContentType = 'plain-text' | 'image' | 'url' | 'html';\n\nexport type CornerStyleType = 'dynamic' | 'fixed' | 'capsule' | 'large' | 'medium' | 'small';\n\nexport type DisplayModeType = 'iconAndLabel' | 'iconOnly' | 'labelOnly';\n\nexport type PasteEventPayload = TextPasteEvent | ImagePasteEvent;\n\nexport type TextPasteEvent = {\n  text: string;\n  type: 'text';\n};\n\nexport type ImagePasteEvent = {\n  type: 'image';\n} & ClipboardImage;\n"],"mappings":"AA0CA,UAAY,CAAAA,WAQX,CARD,UAAYA,WAAW,EACrBA,WAAA,2BAAyB,CACzBA,WAAA,eAAa,CACbA,WAAA,iBAAe,CAIfA,WAAA,aAAW,CACb,CAAC,EARWA,WAAW,GAAXA,WAAW,MAavB,UAAY,CAAAC,YAGX,CAHD,UAAYA,YAAY,EACtBA,YAAA,0BAAwB,CACxBA,YAAA,eAAa,CACf,CAAC,EAHWA,YAAY,GAAZA,YAAY","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}