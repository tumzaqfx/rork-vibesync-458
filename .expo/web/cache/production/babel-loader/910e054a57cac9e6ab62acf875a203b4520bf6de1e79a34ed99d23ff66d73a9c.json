{"ast":null,"code":"import createContextHook from'@nkzw/create-context-hook';import{useState,useCallback}from'react';import{mockThreads}from'@/mocks/threads';export const[ThreadProvider,useThreads]=createContextHook(()=>{const[threads,setThreads]=useState(mockThreads);const[threadPosts,setThreadPosts]=useState({});const[comments,setComments]=useState({});const getThread=useCallback(threadId=>{return threads.find(t=>t.id===threadId);},[threads]);const getThreadByRootPost=useCallback(postId=>{return threads.find(t=>t.rootPostId===postId);},[threads]);const getThreadPosts=useCallback(threadId=>{return threadPosts[threadId]||[];},[threadPosts]);const addToThread=useCallback((threadId,post)=>{const newPost=Object.assign({},post,{id:`thread-post-${Date.now()}`,createdAt:new Date().toISOString(),likes:0,comments:0,revibes:0,saves:0,isLiked:false,isRevibed:false,isSaved:false});setThreadPosts(prev=>Object.assign({},prev,{[threadId]:[...(prev[threadId]||[]),newPost]}));setThreads(prev=>prev.map(thread=>{if(thread.id===threadId){return Object.assign({},thread,{posts:[...thread.posts,newPost],totalEngagement:thread.totalEngagement+1});}return thread;}));console.log('Added post to thread:',threadId,newPost);},[]);const createThread=useCallback(rootPost=>{const newThread={id:`thread-${Date.now()}`,rootPostId:rootPost.id,posts:[rootPost],totalEngagement:0,isCollaborative:false,isTrending:false,vibeScore:0};setThreads(prev=>[...prev,newThread]);console.log('Created new thread:',newThread);return newThread;},[]);const toggleThreadPostLike=useCallback((threadId,postId)=>{setThreadPosts(prev=>Object.assign({},prev,{[threadId]:prev[threadId]?.map(post=>{if(post.id===postId){return Object.assign({},post,{isLiked:!post.isLiked,likes:post.isLiked?post.likes-1:post.likes+1});}return post;})||[]}));setThreads(prev=>prev.map(thread=>{if(thread.id===threadId){return Object.assign({},thread,{posts:thread.posts.map(post=>{if(post.id===postId){return Object.assign({},post,{isLiked:!post.isLiked,likes:post.isLiked?post.likes-1:post.likes+1});}return post;})});}return thread;}));},[]);const getComments=useCallback(postId=>{return comments[postId]||[];},[comments]);const addComment=useCallback((postId,comment)=>{const newComment=Object.assign({},comment,{id:`comment-${Date.now()}`,createdAt:new Date().toISOString(),likes:0,replies:[],isLiked:false});setComments(prev=>Object.assign({},prev,{[postId]:[...(prev[postId]||[]),newComment]}));console.log('Added comment to post:',postId,newComment);},[]);const addReply=useCallback((postId,commentId,reply,parentReplyId)=>{const newReply=Object.assign({},reply,{id:`reply-${Date.now()}`,createdAt:new Date().toISOString(),likes:0,replies:[],isLiked:false,parentReplyId:parentReplyId||null});setComments(prev=>{const postComments=prev[postId]||[];const addReplyToComment=comments=>{return comments.map(comment=>{if(comment.id===commentId&&!parentReplyId){return Object.assign({},comment,{replies:[...comment.replies,newReply]});}if(comment.replies.length>0){return Object.assign({},comment,{replies:addReplyToReply(comment.replies)});}return comment;});};const addReplyToReply=replies=>{return replies.map(r=>{if(r.id===parentReplyId&&newReply.depth<=3){return Object.assign({},r,{replies:[...r.replies,newReply]});}if(r.replies.length>0){return Object.assign({},r,{replies:addReplyToReply(r.replies)});}return r;});};return Object.assign({},prev,{[postId]:addReplyToComment(postComments)});});console.log('Added reply to comment:',commentId,newReply);},[]);const toggleCommentLike=useCallback((postId,commentId)=>{setComments(prev=>Object.assign({},prev,{[postId]:prev[postId]?.map(comment=>{if(comment.id===commentId){return Object.assign({},comment,{isLiked:!comment.isLiked,likes:comment.isLiked?comment.likes-1:comment.likes+1});}return comment;})||[]}));},[]);const toggleReplyLike=useCallback((postId,replyId)=>{setComments(prev=>{const postComments=prev[postId]||[];const toggleInReplies=replies=>{return replies.map(reply=>{if(reply.id===replyId){return Object.assign({},reply,{isLiked:!reply.isLiked,likes:reply.isLiked?reply.likes-1:reply.likes+1});}if(reply.replies.length>0){return Object.assign({},reply,{replies:toggleInReplies(reply.replies)});}return reply;});};return Object.assign({},prev,{[postId]:postComments.map(comment=>Object.assign({},comment,{replies:toggleInReplies(comment.replies)}))});});},[]);const makeCollaborative=useCallback((threadId,collaboratorId)=>{setThreads(prev=>prev.map(thread=>{if(thread.id===threadId){return Object.assign({},thread,{isCollaborative:true,collaborators:[...(thread.collaborators||[]),collaboratorId]});}return thread;}));},[]);return{threads,getThread,getThreadByRootPost,getThreadPosts,addToThread,createThread,toggleThreadPostLike,getComments,addComment,addReply,toggleCommentLike,toggleReplyLike,makeCollaborative};});","map":{"version":3,"names":["createContextHook","useState","useCallback","mockThreads","ThreadProvider","useThreads","threads","setThreads","threadPosts","setThreadPosts","comments","setComments","getThread","threadId","find","t","id","getThreadByRootPost","postId","rootPostId","getThreadPosts","addToThread","post","newPost","Object","assign","Date","now","createdAt","toISOString","likes","revibes","saves","isLiked","isRevibed","isSaved","prev","map","thread","posts","totalEngagement","console","log","createThread","rootPost","newThread","isCollaborative","isTrending","vibeScore","toggleThreadPostLike","getComments","addComment","comment","newComment","replies","addReply","commentId","reply","parentReplyId","newReply","postComments","addReplyToComment","length","addReplyToReply","r","depth","toggleCommentLike","toggleReplyLike","replyId","toggleInReplies","makeCollaborative","collaboratorId","collaborators"],"sources":["/home/user/rork-vibesync-458/hooks/thread-store.ts"],"sourcesContent":["import createContextHook from '@nkzw/create-context-hook';\nimport { useState, useCallback } from 'react';\nimport { Thread, ThreadPost, ThreadComment, CommentReply } from '@/types/thread';\nimport { mockThreads } from '@/mocks/threads';\n\nexport const [ThreadProvider, useThreads] = createContextHook(() => {\n  const [threads, setThreads] = useState<Thread[]>(mockThreads);\n  const [threadPosts, setThreadPosts] = useState<Record<string, ThreadPost[]>>({});\n  const [comments, setComments] = useState<Record<string, ThreadComment[]>>({});\n\n  const getThread = useCallback((threadId: string) => {\n    return threads.find(t => t.id === threadId);\n  }, [threads]);\n\n  const getThreadByRootPost = useCallback((postId: string) => {\n    return threads.find(t => t.rootPostId === postId);\n  }, [threads]);\n\n  const getThreadPosts = useCallback((threadId: string) => {\n    return threadPosts[threadId] || [];\n  }, [threadPosts]);\n\n  const addToThread = useCallback((\n    threadId: string,\n    post: Omit<ThreadPost, 'id' | 'createdAt' | 'likes' | 'comments' | 'revibes' | 'saves' | 'isLiked' | 'isRevibed' | 'isSaved'>\n  ) => {\n    const newPost: ThreadPost = {\n      ...post,\n      id: `thread-post-${Date.now()}`,\n      createdAt: new Date().toISOString(),\n      likes: 0,\n      comments: 0,\n      revibes: 0,\n      saves: 0,\n      isLiked: false,\n      isRevibed: false,\n      isSaved: false,\n    };\n\n    setThreadPosts(prev => ({\n      ...prev,\n      [threadId]: [...(prev[threadId] || []), newPost],\n    }));\n\n    setThreads(prev => prev.map(thread => {\n      if (thread.id === threadId) {\n        return {\n          ...thread,\n          posts: [...thread.posts, newPost],\n          totalEngagement: thread.totalEngagement + 1,\n        };\n      }\n      return thread;\n    }));\n\n    console.log('Added post to thread:', threadId, newPost);\n  }, []);\n\n  const createThread = useCallback((rootPost: ThreadPost) => {\n    const newThread: Thread = {\n      id: `thread-${Date.now()}`,\n      rootPostId: rootPost.id,\n      posts: [rootPost],\n      totalEngagement: 0,\n      isCollaborative: false,\n      isTrending: false,\n      vibeScore: 0,\n    };\n\n    setThreads(prev => [...prev, newThread]);\n    console.log('Created new thread:', newThread);\n    return newThread;\n  }, []);\n\n  const toggleThreadPostLike = useCallback((threadId: string, postId: string) => {\n    setThreadPosts(prev => ({\n      ...prev,\n      [threadId]: prev[threadId]?.map(post => {\n        if (post.id === postId) {\n          return {\n            ...post,\n            isLiked: !post.isLiked,\n            likes: post.isLiked ? post.likes - 1 : post.likes + 1,\n          };\n        }\n        return post;\n      }) || [],\n    }));\n\n    setThreads(prev => prev.map(thread => {\n      if (thread.id === threadId) {\n        return {\n          ...thread,\n          posts: thread.posts.map(post => {\n            if (post.id === postId) {\n              return {\n                ...post,\n                isLiked: !post.isLiked,\n                likes: post.isLiked ? post.likes - 1 : post.likes + 1,\n              };\n            }\n            return post;\n          }),\n        };\n      }\n      return thread;\n    }));\n  }, []);\n\n  const getComments = useCallback((postId: string) => {\n    return comments[postId] || [];\n  }, [comments]);\n\n  const addComment = useCallback((\n    postId: string,\n    comment: Omit<ThreadComment, 'id' | 'createdAt' | 'likes' | 'replies' | 'isLiked'>\n  ) => {\n    const newComment: ThreadComment = {\n      ...comment,\n      id: `comment-${Date.now()}`,\n      createdAt: new Date().toISOString(),\n      likes: 0,\n      replies: [],\n      isLiked: false,\n    };\n\n    setComments(prev => ({\n      ...prev,\n      [postId]: [...(prev[postId] || []), newComment],\n    }));\n\n    console.log('Added comment to post:', postId, newComment);\n  }, []);\n\n  const addReply = useCallback((\n    postId: string,\n    commentId: string,\n    reply: Omit<CommentReply, 'id' | 'createdAt' | 'likes' | 'replies' | 'isLiked'>,\n    parentReplyId?: string\n  ) => {\n    const newReply: CommentReply = {\n      ...reply,\n      id: `reply-${Date.now()}`,\n      createdAt: new Date().toISOString(),\n      likes: 0,\n      replies: [],\n      isLiked: false,\n      parentReplyId: parentReplyId || null,\n    };\n\n    setComments(prev => {\n      const postComments = prev[postId] || [];\n      \n      const addReplyToComment = (comments: ThreadComment[]): ThreadComment[] => {\n        return comments.map(comment => {\n          if (comment.id === commentId && !parentReplyId) {\n            return {\n              ...comment,\n              replies: [...comment.replies, newReply],\n            };\n          }\n          \n          if (comment.replies.length > 0) {\n            return {\n              ...comment,\n              replies: addReplyToReply(comment.replies),\n            };\n          }\n          \n          return comment;\n        });\n      };\n\n      const addReplyToReply = (replies: CommentReply[]): CommentReply[] => {\n        return replies.map(r => {\n          if (r.id === parentReplyId && newReply.depth <= 3) {\n            return {\n              ...r,\n              replies: [...r.replies, newReply],\n            };\n          }\n          \n          if (r.replies.length > 0) {\n            return {\n              ...r,\n              replies: addReplyToReply(r.replies),\n            };\n          }\n          \n          return r;\n        });\n      };\n\n      return {\n        ...prev,\n        [postId]: addReplyToComment(postComments),\n      };\n    });\n\n    console.log('Added reply to comment:', commentId, newReply);\n  }, []);\n\n  const toggleCommentLike = useCallback((postId: string, commentId: string) => {\n    setComments(prev => ({\n      ...prev,\n      [postId]: prev[postId]?.map(comment => {\n        if (comment.id === commentId) {\n          return {\n            ...comment,\n            isLiked: !comment.isLiked,\n            likes: comment.isLiked ? comment.likes - 1 : comment.likes + 1,\n          };\n        }\n        return comment;\n      }) || [],\n    }));\n  }, []);\n\n  const toggleReplyLike = useCallback((postId: string, replyId: string) => {\n    setComments(prev => {\n      const postComments = prev[postId] || [];\n      \n      const toggleInReplies = (replies: CommentReply[]): CommentReply[] => {\n        return replies.map(reply => {\n          if (reply.id === replyId) {\n            return {\n              ...reply,\n              isLiked: !reply.isLiked,\n              likes: reply.isLiked ? reply.likes - 1 : reply.likes + 1,\n            };\n          }\n          \n          if (reply.replies.length > 0) {\n            return {\n              ...reply,\n              replies: toggleInReplies(reply.replies),\n            };\n          }\n          \n          return reply;\n        });\n      };\n\n      return {\n        ...prev,\n        [postId]: postComments.map(comment => ({\n          ...comment,\n          replies: toggleInReplies(comment.replies),\n        })),\n      };\n    });\n  }, []);\n\n  const makeCollaborative = useCallback((threadId: string, collaboratorId: string) => {\n    setThreads(prev => prev.map(thread => {\n      if (thread.id === threadId) {\n        return {\n          ...thread,\n          isCollaborative: true,\n          collaborators: [...(thread.collaborators || []), collaboratorId],\n        };\n      }\n      return thread;\n    }));\n  }, []);\n\n  return {\n    threads,\n    getThread,\n    getThreadByRootPost,\n    getThreadPosts,\n    addToThread,\n    createThread,\n    toggleThreadPostLike,\n    getComments,\n    addComment,\n    addReply,\n    toggleCommentLike,\n    toggleReplyLike,\n    makeCollaborative,\n  };\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}