{"ast":null,"code":"import{useState,useEffect}from'react';import AsyncStorage from'@react-native-async-storage/async-storage';import createContextHook from'@nkzw/create-context-hook';import{useAuth}from'./auth-store';import{SecurityUtils}from'@/utils/security';import{OfflineQueue}from'@/utils/offline-cache';import{ErrorTracker}from'@/utils/performance';export const[MessagingProvider,useMessaging]=createContextHook(()=>{const{user}=useAuth();const[state,setState]=useState({conversations:[],activeConversation:null,unreadCount:0,screenshotProtectionEnabled:false,screenshotAttempts:new Map()});useEffect(()=>{loadConversations();},[user]);const loadConversations=async()=>{try{const stored=await AsyncStorage.getItem('conversations');if(stored){const decrypted=await SecurityUtils.decryptData(stored);const conversations=JSON.parse(decrypted);const unreadCount=conversations.reduce((sum,conv)=>sum+conv.unreadCount,0);setState(prev=>Object.assign({},prev,{conversations,unreadCount}));console.log('[Messaging] Conversations loaded and decrypted');}else{createMockConversations();}}catch(error){console.error('[Messaging] Error loading conversations:',error);ErrorTracker.trackError(error);createMockConversations();}};const saveConversations=async conversations=>{try{const encrypted=await SecurityUtils.encryptData(JSON.stringify(conversations));await AsyncStorage.setItem('conversations',encrypted);console.log('[Messaging] Conversations saved securely');}catch(error){console.error('[Messaging] Error saving conversations:',error);ErrorTracker.trackError(error);}};const sendMessage=async(conversationId,content,type='text',options)=>{if(!user)return;try{const encryptedContent=await SecurityUtils.encryptData(content);const newMessage={id:Date.now().toString(),senderId:user.id,recipientId:'',content:encryptedContent,type,timestamp:new Date().toISOString(),isRead:false,isViewOnce:options?.isViewOnce,allowReplay:options?.allowReplay,maxReplays:options?.maxReplays,replayCount:0,mediaUrl:options?.mediaUrl,duration:options?.duration,isExpired:false,screenshotAttempts:[]};await OfflineQueue.enqueue({type:'SEND_MESSAGE',payload:{conversationId,message:newMessage},timestamp:Date.now()});setState(prev=>{const updatedConversations=prev.conversations.map(conv=>{if(conv.id===conversationId){const updatedConv=Object.assign({},conv,{lastMessage:newMessage,updatedAt:newMessage.timestamp});return updatedConv;}return conv;});saveConversations(updatedConversations);return Object.assign({},prev,{conversations:updatedConversations});});console.log('[Messaging] Message sent and encrypted',options?.isViewOnce?'(View Once)':'');}catch(error){console.error('[Messaging] Error sending message:',error);ErrorTracker.trackError(error,{conversationId});}};const markConversationAsRead=conversationId=>{setState(prev=>{const updatedConversations=prev.conversations.map(conv=>conv.id===conversationId?Object.assign({},conv,{unreadCount:0}):conv);const unreadCount=updatedConversations.reduce((sum,conv)=>sum+conv.unreadCount,0);saveConversations(updatedConversations);return Object.assign({},prev,{conversations:updatedConversations,unreadCount});});};const setActiveConversation=conversation=>{setState(prev=>Object.assign({},prev,{activeConversation:conversation}));if(conversation){markConversationAsRead(conversation.id);}};const createConversation=participant=>{if(!user)throw new Error('User not authenticated');const newConversation={id:Date.now().toString(),participants:[user,participant],lastMessage:{id:'',senderId:'',recipientId:'',content:'',type:'text',timestamp:new Date().toISOString(),isRead:true},unreadCount:0,updatedAt:new Date().toISOString()};setState(prev=>{const updatedConversations=[newConversation,...prev.conversations];saveConversations(updatedConversations);return Object.assign({},prev,{conversations:updatedConversations});});return newConversation;};const createMockConversations=()=>{if(!user)return;const mockConversations=[{id:'1',participants:[user,{id:'user2',username:'sarah_music',displayName:'Sarah Johnson',profileImage:'https://images.unsplash.com/photo-1494790108755-2616b612b786?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',isVerified:true,followers:1200,following:450,followersCount:1200,followingCount:450,posts:89}],lastMessage:{id:'msg1',senderId:'user2',recipientId:user.id,content:'Hey! Love your latest post about that new track ðŸŽµ',type:'text',timestamp:new Date(Date.now()-1000*60*15).toISOString(),isRead:false},unreadCount:2,updatedAt:new Date(Date.now()-1000*60*15).toISOString()},{id:'2',participants:[user,{id:'user3',username:'mike_beats',displayName:'Mike Rodriguez',profileImage:'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',isVerified:false,followers:890,following:320,followersCount:890,followingCount:320,posts:156}],lastMessage:{id:'msg2',senderId:user.id,recipientId:'user3',content:'Thanks for the collaboration idea!',type:'text',timestamp:new Date(Date.now()-1000*60*60*2).toISOString(),isRead:true},unreadCount:0,updatedAt:new Date(Date.now()-1000*60*60*2).toISOString()}];const unreadCount=mockConversations.reduce((sum,conv)=>sum+conv.unreadCount,0);setState(prev=>Object.assign({},prev,{conversations:mockConversations,unreadCount}));saveConversations(mockConversations);};const markMessageAsViewed=messageId=>{setState(prev=>{const updatedConversations=prev.conversations.map(conv=>{if(conv.lastMessage.id===messageId){return Object.assign({},conv,{lastMessage:Object.assign({},conv.lastMessage,{viewedAt:new Date().toISOString(),replayCount:(conv.lastMessage.replayCount||0)+1})});}return conv;});saveConversations(updatedConversations);return Object.assign({},prev,{conversations:updatedConversations});});console.log('[Messaging] Message marked as viewed:',messageId);};const markMessageAsExpired=messageId=>{setState(prev=>{const updatedConversations=prev.conversations.map(conv=>{if(conv.lastMessage.id===messageId){return Object.assign({},conv,{lastMessage:Object.assign({},conv.lastMessage,{isExpired:true})});}return conv;});saveConversations(updatedConversations);return Object.assign({},prev,{conversations:updatedConversations});});console.log('[Messaging] Message marked as expired:',messageId);};const recordScreenshotAttempt=(messageId,attempterId)=>{setState(prev=>{const attempts=new Map(prev.screenshotAttempts);const currentCount=attempts.get(messageId)||0;attempts.set(messageId,currentCount+1);const updatedConversations=prev.conversations.map(conv=>{if(conv.lastMessage.id===messageId){const screenshotAttempts=conv.lastMessage.screenshotAttempts||[];return Object.assign({},conv,{lastMessage:Object.assign({},conv.lastMessage,{screenshotAttempts:[...screenshotAttempts,{timestamp:new Date().toISOString(),attempterId}]})});}return conv;});saveConversations(updatedConversations);console.log('[Messaging] Screenshot attempt recorded for message:',messageId);return Object.assign({},prev,{conversations:updatedConversations,screenshotAttempts:attempts});});};const setScreenshotProtection=enabled=>{setState(prev=>Object.assign({},prev,{screenshotProtectionEnabled:enabled}));console.log('[Messaging] Screenshot protection:',enabled?'enabled':'disabled');};return{conversations:state.conversations,activeConversation:state.activeConversation,unreadCount:state.unreadCount,screenshotProtectionEnabled:state.screenshotProtectionEnabled,sendMessage,markConversationAsRead,setActiveConversation,createConversation,createMockConversations,markMessageAsViewed,markMessageAsExpired,recordScreenshotAttempt,setScreenshotProtection};});","map":{"version":3,"names":["useState","useEffect","AsyncStorage","createContextHook","useAuth","SecurityUtils","OfflineQueue","ErrorTracker","MessagingProvider","useMessaging","user","state","setState","conversations","activeConversation","unreadCount","screenshotProtectionEnabled","screenshotAttempts","Map","loadConversations","stored","getItem","decrypted","decryptData","JSON","parse","reduce","sum","conv","prev","Object","assign","console","log","createMockConversations","error","trackError","saveConversations","encrypted","encryptData","stringify","setItem","sendMessage","conversationId","content","type","options","encryptedContent","newMessage","id","Date","now","toString","senderId","recipientId","timestamp","toISOString","isRead","isViewOnce","allowReplay","maxReplays","replayCount","mediaUrl","duration","isExpired","enqueue","payload","message","updatedConversations","map","updatedConv","lastMessage","updatedAt","markConversationAsRead","setActiveConversation","conversation","createConversation","participant","Error","newConversation","participants","mockConversations","username","displayName","profileImage","isVerified","followers","following","followersCount","followingCount","posts","markMessageAsViewed","messageId","viewedAt","markMessageAsExpired","recordScreenshotAttempt","attempterId","attempts","currentCount","get","set","setScreenshotProtection","enabled"],"sources":["/home/user/rork-vibesync-458/hooks/messaging-store.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport createContextHook from '@nkzw/create-context-hook';\n\nimport { Message, Conversation, User } from '@/types';\nimport { useAuth } from './auth-store';\nimport { SecurityUtils } from '@/utils/security';\nimport { OfflineQueue } from '@/utils/offline-cache';\nimport { ErrorTracker } from '@/utils/performance';\n\ninterface MessagingState {\n  conversations: Conversation[];\n  activeConversation: Conversation | null;\n  unreadCount: number;\n  screenshotProtectionEnabled: boolean;\n  screenshotAttempts: Map<string, number>;\n}\n\nexport const [MessagingProvider, useMessaging] = createContextHook(() => {\n  const { user } = useAuth();\n  \n  const [state, setState] = useState<MessagingState>({\n    conversations: [],\n    activeConversation: null,\n    unreadCount: 0,\n    screenshotProtectionEnabled: false,\n    screenshotAttempts: new Map(),\n  });\n\n  useEffect(() => {\n    loadConversations();\n  }, [user]);\n\n  const loadConversations = async () => {\n    try {\n      const stored = await AsyncStorage.getItem('conversations');\n      if (stored) {\n        const decrypted = await SecurityUtils.decryptData(stored);\n        const conversations: Conversation[] = JSON.parse(decrypted);\n        const unreadCount = conversations.reduce((sum, conv) => sum + conv.unreadCount, 0);\n        setState(prev => ({ ...prev, conversations, unreadCount }));\n        console.log('[Messaging] Conversations loaded and decrypted');\n      } else {\n        createMockConversations();\n      }\n    } catch (error) {\n      console.error('[Messaging] Error loading conversations:', error);\n      ErrorTracker.trackError(error as Error);\n      createMockConversations();\n    }\n  };\n\n  const saveConversations = async (conversations: Conversation[]) => {\n    try {\n      const encrypted = await SecurityUtils.encryptData(JSON.stringify(conversations));\n      await AsyncStorage.setItem('conversations', encrypted);\n      console.log('[Messaging] Conversations saved securely');\n    } catch (error) {\n      console.error('[Messaging] Error saving conversations:', error);\n      ErrorTracker.trackError(error as Error);\n    }\n  };\n\n  const sendMessage = async (\n    conversationId: string, \n    content: string, \n    type: 'text' | 'image' | 'audio' | 'video' | 'voice' = 'text',\n    options?: {\n      isViewOnce?: boolean;\n      allowReplay?: boolean;\n      maxReplays?: number;\n      mediaUrl?: string;\n      duration?: number;\n    }\n  ) => {\n    if (!user) return;\n\n    try {\n      const encryptedContent = await SecurityUtils.encryptData(content);\n      \n      const newMessage: Message = {\n        id: Date.now().toString(),\n        senderId: user.id,\n        recipientId: '',\n        content: encryptedContent,\n        type,\n        timestamp: new Date().toISOString(),\n        isRead: false,\n        isViewOnce: options?.isViewOnce,\n        allowReplay: options?.allowReplay,\n        maxReplays: options?.maxReplays,\n        replayCount: 0,\n        mediaUrl: options?.mediaUrl,\n        duration: options?.duration,\n        isExpired: false,\n        screenshotAttempts: [],\n      };\n\n      await OfflineQueue.enqueue({\n        type: 'SEND_MESSAGE',\n        payload: { conversationId, message: newMessage },\n        timestamp: Date.now(),\n      });\n\n      setState(prev => {\n        const updatedConversations = prev.conversations.map(conv => {\n          if (conv.id === conversationId) {\n            const updatedConv = {\n              ...conv,\n              lastMessage: newMessage,\n              updatedAt: newMessage.timestamp,\n            };\n            return updatedConv;\n          }\n          return conv;\n        });\n\n        saveConversations(updatedConversations);\n        return { ...prev, conversations: updatedConversations };\n      });\n\n      console.log('[Messaging] Message sent and encrypted', options?.isViewOnce ? '(View Once)' : '');\n    } catch (error) {\n      console.error('[Messaging] Error sending message:', error);\n      ErrorTracker.trackError(error as Error, { conversationId });\n    }\n  };\n\n  const markConversationAsRead = (conversationId: string) => {\n    setState(prev => {\n      const updatedConversations = prev.conversations.map(conv =>\n        conv.id === conversationId ? { ...conv, unreadCount: 0 } : conv\n      );\n      const unreadCount = updatedConversations.reduce((sum, conv) => sum + conv.unreadCount, 0);\n      \n      saveConversations(updatedConversations);\n      return {\n        ...prev,\n        conversations: updatedConversations,\n        unreadCount,\n      };\n    });\n  };\n\n  const setActiveConversation = (conversation: Conversation | null) => {\n    setState(prev => ({ ...prev, activeConversation: conversation }));\n    if (conversation) {\n      markConversationAsRead(conversation.id);\n    }\n  };\n\n  const createConversation = (participant: User): Conversation => {\n    if (!user) throw new Error('User not authenticated');\n\n    const newConversation: Conversation = {\n      id: Date.now().toString(),\n      participants: [user, participant],\n      lastMessage: {\n        id: '',\n        senderId: '',\n        recipientId: '',\n        content: '',\n        type: 'text',\n        timestamp: new Date().toISOString(),\n        isRead: true,\n      },\n      unreadCount: 0,\n      updatedAt: new Date().toISOString(),\n    };\n\n    setState(prev => {\n      const updatedConversations = [newConversation, ...prev.conversations];\n      saveConversations(updatedConversations);\n      return { ...prev, conversations: updatedConversations };\n    });\n\n    return newConversation;\n  };\n\n  const createMockConversations = () => {\n    if (!user) return;\n\n    const mockConversations: Conversation[] = [\n      {\n        id: '1',\n        participants: [\n          user,\n          {\n            id: 'user2',\n            username: 'sarah_music',\n            displayName: 'Sarah Johnson',\n            profileImage: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            isVerified: true,\n            followers: 1200,\n            following: 450,\n            followersCount: 1200,\n            followingCount: 450,\n            posts: 89,\n          }\n        ],\n        lastMessage: {\n          id: 'msg1',\n          senderId: 'user2',\n          recipientId: user.id,\n          content: 'Hey! Love your latest post about that new track ðŸŽµ',\n          type: 'text',\n          timestamp: new Date(Date.now() - 1000 * 60 * 15).toISOString(),\n          isRead: false,\n        },\n        unreadCount: 2,\n        updatedAt: new Date(Date.now() - 1000 * 60 * 15).toISOString(),\n      },\n      {\n        id: '2',\n        participants: [\n          user,\n          {\n            id: 'user3',\n            username: 'mike_beats',\n            displayName: 'Mike Rodriguez',\n            profileImage: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80',\n            isVerified: false,\n            followers: 890,\n            following: 320,\n            followersCount: 890,\n            followingCount: 320,\n            posts: 156,\n          }\n        ],\n        lastMessage: {\n          id: 'msg2',\n          senderId: user.id,\n          recipientId: 'user3',\n          content: 'Thanks for the collaboration idea!',\n          type: 'text',\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(),\n          isRead: true,\n        },\n        unreadCount: 0,\n        updatedAt: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(),\n      },\n    ];\n\n    const unreadCount = mockConversations.reduce((sum, conv) => sum + conv.unreadCount, 0);\n    setState(prev => ({ ...prev, conversations: mockConversations, unreadCount }));\n    saveConversations(mockConversations);\n  };\n\n  const markMessageAsViewed = (messageId: string) => {\n    setState(prev => {\n      const updatedConversations = prev.conversations.map(conv => {\n        if (conv.lastMessage.id === messageId) {\n          return {\n            ...conv,\n            lastMessage: {\n              ...conv.lastMessage,\n              viewedAt: new Date().toISOString(),\n              replayCount: (conv.lastMessage.replayCount || 0) + 1,\n            },\n          };\n        }\n        return conv;\n      });\n      \n      saveConversations(updatedConversations);\n      return { ...prev, conversations: updatedConversations };\n    });\n    console.log('[Messaging] Message marked as viewed:', messageId);\n  };\n\n  const markMessageAsExpired = (messageId: string) => {\n    setState(prev => {\n      const updatedConversations = prev.conversations.map(conv => {\n        if (conv.lastMessage.id === messageId) {\n          return {\n            ...conv,\n            lastMessage: {\n              ...conv.lastMessage,\n              isExpired: true,\n            },\n          };\n        }\n        return conv;\n      });\n      \n      saveConversations(updatedConversations);\n      return { ...prev, conversations: updatedConversations };\n    });\n    console.log('[Messaging] Message marked as expired:', messageId);\n  };\n\n  const recordScreenshotAttempt = (messageId: string, attempterId: string) => {\n    setState(prev => {\n      const attempts = new Map(prev.screenshotAttempts);\n      const currentCount = attempts.get(messageId) || 0;\n      attempts.set(messageId, currentCount + 1);\n\n      const updatedConversations = prev.conversations.map(conv => {\n        if (conv.lastMessage.id === messageId) {\n          const screenshotAttempts = conv.lastMessage.screenshotAttempts || [];\n          return {\n            ...conv,\n            lastMessage: {\n              ...conv.lastMessage,\n              screenshotAttempts: [\n                ...screenshotAttempts,\n                {\n                  timestamp: new Date().toISOString(),\n                  attempterId,\n                },\n              ],\n            },\n          };\n        }\n        return conv;\n      });\n      \n      saveConversations(updatedConversations);\n      console.log('[Messaging] Screenshot attempt recorded for message:', messageId);\n      \n      return { \n        ...prev, \n        conversations: updatedConversations,\n        screenshotAttempts: attempts,\n      };\n    });\n  };\n\n  const setScreenshotProtection = (enabled: boolean) => {\n    setState(prev => ({ ...prev, screenshotProtectionEnabled: enabled }));\n    console.log('[Messaging] Screenshot protection:', enabled ? 'enabled' : 'disabled');\n  };\n\n  return {\n    conversations: state.conversations,\n    activeConversation: state.activeConversation,\n    unreadCount: state.unreadCount,\n    screenshotProtectionEnabled: state.screenshotProtectionEnabled,\n    sendMessage,\n    markConversationAsRead,\n    setActiveConversation,\n    createConversation,\n    createMockConversations,\n    markMessageAsViewed,\n    markMessageAsExpired,\n    recordScreenshotAttempt,\n    setScreenshotProtection,\n  };\n});"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}