{"ast":null,"code":"\"use strict\";import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";function _toPropertyKey(t){var i=_toPrimitive(t,\"string\");return\"symbol\"==typeof i?i:i+\"\";}function _toPrimitive(t,r){if(\"object\"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||\"default\");if(\"object\"!=typeof i)return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\");}return(\"string\"===r?String:Number)(t);}import*as React from'react';import{NavigationBuilderContext}from\"./NavigationBuilderContext.js\";import{NavigationContext}from\"./NavigationContext.js\";import{NavigationRouteContext}from\"./NavigationRouteContext.js\";import{SceneView}from\"./SceneView.js\";import{ThemeContext}from\"./theming/ThemeContext.js\";import{useNavigationCache}from\"./useNavigationCache.js\";import{useRouteCache}from\"./useRouteCache.js\";import{jsx as _jsx}from\"react/jsx-runtime\";export function useDescriptors({state,screens,navigation,screenOptions,screenLayout,onAction,getState,setState,addListener,addKeyedListener,onRouteFocus,router,emitter}){const theme=React.useContext(ThemeContext);const[options,setOptions]=React.useState({});const{onDispatchAction,onOptionsChange,scheduleUpdate,flushUpdates,stackRef}=React.useContext(NavigationBuilderContext);const context=React.useMemo(()=>({navigation,onAction,addListener,addKeyedListener,onRouteFocus,onDispatchAction,onOptionsChange,scheduleUpdate,flushUpdates,stackRef}),[navigation,onAction,addListener,addKeyedListener,onRouteFocus,onDispatchAction,onOptionsChange,scheduleUpdate,flushUpdates,stackRef]);const{base,navigations}=useNavigationCache({state,getState,navigation,setOptions,router,emitter});const routes=useRouteCache(state.routes);const getOptions=(route,navigation,overrides)=>{const config=screens[route.name];const screen=config.props;const optionsList=[screenOptions,...(config.options?config.options.filter(Boolean):[]),screen.options,overrides];return optionsList.reduce((acc,curr)=>Object.assign(acc,typeof curr!=='function'?curr:curr({route,navigation,theme})),{});};const render=(route,navigation,customOptions,routeState)=>{const config=screens[route.name];const screen=config.props;const clearOptions=()=>setOptions(o=>{if(route.key in o){const _route$key=route.key,rest=_objectWithoutPropertiesLoose(o,[_route$key].map(_toPropertyKey));return rest;}return o;});const layout=screen.layout??config.layout??screenLayout;let element=_jsx(SceneView,{navigation:navigation,route:route,screen:screen,routeState:routeState,getState:getState,setState:setState,options:customOptions,clearOptions:clearOptions});if(layout!=null){element=layout({route,navigation,theme,children:element});}return _jsx(NavigationBuilderContext.Provider,{value:context,children:_jsx(NavigationContext.Provider,{value:navigation,children:_jsx(NavigationRouteContext.Provider,{value:route,children:element})})},route.key);};const descriptors=routes.reduce((acc,route,i)=>{const navigation=navigations[route.key];const customOptions=getOptions(route,navigation,options[route.key]);const element=render(route,navigation,customOptions,state.routes[i].state);acc[route.key]={route,navigation,render(){return element;},options:customOptions};return acc;},{});const describe=(route,placeholder)=>{if(!placeholder){if(!(route.key in descriptors)){throw new Error(`Couldn't find a route with the key ${route.key}.`);}return descriptors[route.key];}const navigation=base;const customOptions=getOptions(route,navigation,{});const element=render(route,navigation,customOptions,undefined);return{route,navigation,render(){return element;},options:customOptions};};return{describe,descriptors};}","map":{"version":3,"names":["React","NavigationBuilderContext","NavigationContext","NavigationRouteContext","SceneView","ThemeContext","useNavigationCache","useRouteCache","jsx","_jsx","useDescriptors","state","screens","navigation","screenOptions","screenLayout","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","theme","useContext","options","setOptions","useState","onDispatchAction","onOptionsChange","scheduleUpdate","flushUpdates","stackRef","context","useMemo","base","navigations","routes","getOptions","route","overrides","config","name","screen","props","optionsList","filter","Boolean","reduce","acc","curr","Object","assign","render","customOptions","routeState","clearOptions","o","key","_route$key","rest","_objectWithoutPropertiesLoose","map","_toPropertyKey","layout","element","children","Provider","value","descriptors","i","describe","placeholder","Error","undefined"],"sources":["/home/user/rork-vibesync-458/node_modules/@react-navigation/core/src/useDescriptors.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport {\n  type AddKeyedListener,\n  type AddListener,\n  NavigationBuilderContext,\n} from './NavigationBuilderContext';\nimport { NavigationContext } from './NavigationContext';\nimport { NavigationRouteContext } from './NavigationRouteContext';\nimport { SceneView } from './SceneView';\nimport { ThemeContext } from './theming/ThemeContext';\nimport type {\n  Descriptor,\n  EventMapBase,\n  NavigationHelpers,\n  NavigationProp,\n  RouteConfig,\n  RouteProp,\n} from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport { useNavigationCache } from './useNavigationCache';\nimport { useRouteCache } from './useRouteCache';\n\nexport type ScreenConfigWithParent<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase,\n> = {\n  keys: (string | undefined)[];\n  options: (ScreenOptionsOrCallback<ScreenOptions> | undefined)[] | undefined;\n  layout: ScreenLayout | undefined;\n  props: RouteConfig<\n    ParamListBase,\n    string,\n    State,\n    ScreenOptions,\n    EventMap,\n    unknown\n  >;\n};\n\ntype ScreenLayout = (props: {\n  route: RouteProp<ParamListBase, string>;\n  navigation: any;\n  theme: ReactNavigation.Theme;\n  children: React.ReactElement;\n}) => React.ReactElement;\n\ntype ScreenOptionsOrCallback<ScreenOptions extends {}> =\n  | ScreenOptions\n  | ((props: {\n      route: RouteProp<ParamListBase, string>;\n      navigation: any;\n      theme: ReactNavigation.Theme;\n    }) => ScreenOptions);\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase,\n> = {\n  state: State;\n  screens: Record<\n    string,\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions: ScreenOptionsOrCallback<ScreenOptions> | undefined;\n  screenLayout: ScreenLayout | undefined;\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport function useDescriptors<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase,\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  screenLayout,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const theme = React.useContext(ThemeContext);\n  const [options, setOptions] = React.useState<Record<string, ScreenOptions>>(\n    {}\n  );\n  const {\n    onDispatchAction,\n    onOptionsChange,\n    scheduleUpdate,\n    flushUpdates,\n    stackRef,\n  } = React.useContext(NavigationBuilderContext);\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      scheduleUpdate,\n      flushUpdates,\n      stackRef,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      scheduleUpdate,\n      flushUpdates,\n      stackRef,\n    ]\n  );\n\n  const { base, navigations } = useNavigationCache<\n    State,\n    ScreenOptions,\n    EventMap,\n    ActionHelpers\n  >({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  const getOptions = (\n    route: RouteProp<ParamListBase, string>,\n    navigation: NavigationProp<\n      ParamListBase,\n      string,\n      string | undefined,\n      State,\n      ScreenOptions,\n      EventMap\n    >,\n    overrides: Record<string, ScreenOptions>\n  ) => {\n    const config = screens[route.name];\n    const screen = config.props;\n\n    const optionsList = [\n      // The default `screenOptions` passed to the navigator\n      screenOptions,\n      // The `screenOptions` props passed to `Group` elements\n      ...((config.options\n        ? config.options.filter(Boolean)\n        : []) as ScreenOptionsOrCallback<ScreenOptions>[]),\n      // The `options` prop passed to `Screen` elements,\n      screen.options,\n      // The options set via `navigation.setOptions`\n      overrides,\n    ];\n\n    return optionsList.reduce<ScreenOptions>(\n      (acc, curr) =>\n        Object.assign(\n          acc,\n          // @ts-expect-error: we check for function but TS still complains\n          typeof curr !== 'function' ? curr : curr({ route, navigation, theme })\n        ),\n      {} as ScreenOptions\n    );\n  };\n\n  const render = (\n    route: RouteProp<ParamListBase, string>,\n    navigation: NavigationProp<\n      ParamListBase,\n      string,\n      string | undefined,\n      State,\n      ScreenOptions,\n      EventMap\n    >,\n    customOptions: ScreenOptions,\n    routeState: NavigationState | PartialState<NavigationState> | undefined\n  ) => {\n    const config = screens[route.name];\n    const screen = config.props;\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    const layout =\n      // The `layout` prop passed to `Screen` elements,\n      screen.layout ??\n      // The `screenLayout` props passed to `Group` elements\n      config.layout ??\n      // The default `screenLayout` passed to the navigator\n      screenLayout;\n\n    let element = (\n      <SceneView\n        navigation={navigation}\n        route={route}\n        screen={screen}\n        routeState={routeState}\n        getState={getState}\n        setState={setState}\n        options={customOptions}\n        clearOptions={clearOptions}\n      />\n    );\n\n    if (layout != null) {\n      element = layout({\n        route,\n        navigation,\n        // @ts-expect-error: in practice `theme` will be defined\n        theme,\n        children: element,\n      });\n    }\n\n    return (\n      <NavigationBuilderContext.Provider key={route.key} value={context}>\n        <NavigationContext.Provider value={navigation}>\n          <NavigationRouteContext.Provider value={route}>\n            {element}\n          </NavigationRouteContext.Provider>\n        </NavigationContext.Provider>\n      </NavigationBuilderContext.Provider>\n    );\n  };\n\n  const descriptors = routes.reduce<\n    Record<\n      string,\n      Descriptor<\n        ScreenOptions,\n        NavigationProp<\n          ParamListBase,\n          string,\n          string | undefined,\n          State,\n          ScreenOptions,\n          EventMap\n        > &\n          ActionHelpers,\n        RouteProp<ParamListBase>\n      >\n    >\n  >((acc, route, i) => {\n    const navigation = navigations[route.key];\n    const customOptions = getOptions(route, navigation, options[route.key]);\n    const element = render(\n      route,\n      navigation,\n      customOptions,\n      state.routes[i].state\n    );\n\n    acc[route.key] = {\n      route,\n      // @ts-expect-error: it's missing action helpers, fix later\n      navigation,\n      render() {\n        return element;\n      },\n      options: customOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n\n  /**\n   * Create a descriptor object for a route.\n   *\n   * @param route Route object for which the descriptor should be created\n   * @param placeholder Whether the descriptor should be a placeholder, e.g. for a route not yet in the state\n   * @returns Descriptor object\n   */\n  const describe = (route: RouteProp<ParamListBase>, placeholder: boolean) => {\n    if (!placeholder) {\n      if (!(route.key in descriptors)) {\n        throw new Error(`Couldn't find a route with the key ${route.key}.`);\n      }\n\n      return descriptors[route.key];\n    }\n\n    const navigation = base;\n    const customOptions = getOptions(route, navigation, {});\n    const element = render(route, navigation, customOptions, undefined);\n\n    return {\n      route,\n      navigation,\n      render() {\n        return element;\n      },\n      options: customOptions as ScreenOptions,\n    };\n  };\n\n  return {\n    describe,\n    descriptors,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}