{"ast":null,"code":"import createHandler from'./createHandler';import{baseGestureHandlerProps}from'./gestureHandlerCommon';export const longPressGestureHandlerProps=['minDurationMs','maxDist','numberOfPointers'];export const longPressHandlerName='LongPressGestureHandler';export const LongPressGestureHandler=createHandler({name:longPressHandlerName,allowedProps:[...baseGestureHandlerProps,...longPressGestureHandlerProps],config:{shouldCancelWhenOutside:true}});","map":{"version":3,"names":["createHandler","baseGestureHandlerProps","longPressGestureHandlerProps","longPressHandlerName","LongPressGestureHandler","name","allowedProps","config","shouldCancelWhenOutside"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-gesture-handler/lib/module/handlers/LongPressGestureHandler.ts"],"sourcesContent":["import { LongPressGestureHandlerEventPayload } from './GestureHandlerEventPayload';\nimport createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const longPressGestureHandlerProps = [\n  'minDurationMs',\n  'maxDist',\n  'numberOfPointers',\n] as const;\n\nexport interface LongPressGestureConfig {\n  /**\n   * Minimum time, expressed in milliseconds, that a finger must remain pressed on\n   * the corresponding view. The default value is 500.\n   */\n  minDurationMs?: number;\n\n  /**\n   * Maximum distance, expressed in points, that defines how far the finger is\n   * allowed to travel during a long press gesture. If the finger travels\n   * further than the defined distance and the handler hasn't yet activated, it\n   * will fail to recognize the gesture. The default value is 10.\n   */\n  maxDist?: number;\n\n  /**\n   * Determine exact number of points required to handle the long press gesture.\n   */\n  numberOfPointers?: number;\n}\n\n/**\n * @deprecated LongPressGestureHandler will be removed in the future version of Gesture Handler. Use `Gesture.LongPress()` instead.\n */\nexport interface LongPressGestureHandlerProps\n  extends BaseGestureHandlerProps<LongPressGestureHandlerEventPayload>,\n    LongPressGestureConfig {}\n\nexport const longPressHandlerName = 'LongPressGestureHandler';\n\n/**\n * @deprecated LongPressGestureHandler will be removed in the future version of Gesture Handler. Use `Gesture.LongPress()` instead.\n */\nexport type LongPressGestureHandler = typeof LongPressGestureHandler;\n\n/**\n * @deprecated LongPressGestureHandler will be removed in the future version of Gesture Handler. Use `Gesture.LongPress()` instead.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const LongPressGestureHandler = createHandler<\n  LongPressGestureHandlerProps,\n  LongPressGestureHandlerEventPayload\n>({\n  name: longPressHandlerName,\n  allowedProps: [\n    ...baseGestureHandlerProps,\n    ...longPressGestureHandlerProps,\n  ] as const,\n  config: {\n    shouldCancelWhenOutside: true,\n  },\n});\n"],"mappings":"AACA,MAAO,CAAAA,aAAP,KAA0B,iBAA1B,CACA,OAEEC,uBAFF,KAGO,wBAHP,CAKA,MAAO,MAAM,CAAAC,4BAA4B,CAAG,CAC1C,eAD0C,CAE1C,SAF0C,CAG1C,kBAH0C,CAArC,CAkCP,MAAO,MAAM,CAAAC,oBAAoB,CAAG,yBAA7B,CAWP,MAAO,MAAM,CAAAC,uBAAuB,CAAGJ,aAAa,CAGlD,CACAK,IAAI,CAAEF,oBADN,CAEAG,YAAY,CAAE,CACZ,GAAGL,uBADS,CAEZ,GAAGC,4BAFS,CAFd,CAMAK,MAAM,CAAE,CACNC,uBAAuB,CAAE,IADnB,CANR,CAHkD,CAA7C","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}