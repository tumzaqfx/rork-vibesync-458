{"ast":null,"code":"import{useState,useEffect,useMemo,useCallback}from'react';import createContextHook from'@nkzw/create-context-hook';import{mockTrendingTopics}from'@/mocks/trending';import{mockPosts}from'@/mocks/posts';const DEFAULT_WEIGHTS={engagement:0.4,hashtag:0.25,mentions:0.15,recency:0.15,events:0.05};const calculateTrendingScore=(post,weights=DEFAULT_WEIGHTS)=>{const now=Date.now();const postTime=new Date(post.timestamp).getTime();const ageInHours=(now-postTime)/(1000*60*60);const engagementScore=(post.likes+post.comments*2+post.shares*3)/100;const hashtagCount=(post.content.match(/#\\w+/g)||[]).length;const hashtagScore=Math.min(hashtagCount*10,50);const mentionCount=(post.content.match(/@\\w+/g)||[]).length;const mentionScore=Math.min(mentionCount*5,30);const recencyScore=Math.max(0,100-ageInHours*2);const eventScore=post.isBoosted?50:0;const totalScore=engagementScore*weights.engagement+hashtagScore*weights.hashtag+mentionScore*weights.mentions+recencyScore*weights.recency+eventScore*weights.events;return Math.min(100,totalScore);};const calculateVelocity=post=>{const now=Date.now();const postTime=new Date(post.timestamp).getTime();const ageInMinutes=(now-postTime)/(1000*60);if(ageInMinutes<1)return 0;const totalEngagement=post.likes+post.comments+post.shares;const velocity=totalEngagement/ageInMinutes;return velocity;};export const[TrendingProvider,useTrending]=createContextHook(()=>{const[topics,setTopics]=useState(mockTrendingTopics);const[filters,setFilters]=useState({category:'for_you',timeRange:'24h'});const[weights]=useState(DEFAULT_WEIGHTS);const[lastRefresh,setLastRefresh]=useState(new Date());const[isRefreshing,setIsRefreshing]=useState(false);const[newTrendsCount,setNewTrendsCount]=useState(0);const[hasNewTrends,setHasNewTrends]=useState(false);const[pendingTopics,setPendingTopics]=useState([]);const calculatePostTrendingData=useCallback(post=>{const trendingScore=calculateTrendingScore(post,weights);const velocity=calculateVelocity(post);let category='for_you';if(post.content.includes('#music')||post.content.includes('ðŸŽµ')){category='music';}else if(post.content.includes('#event')||post.isBoosted){category='events';}else if(post.video||post.image){category='content';}else if(post.views>10000){category='global';}return Object.assign({},post,{trendingScore,trendingRank:0,trendingCategory:category,velocity});},[weights]);const trendingPosts=useMemo(()=>{const postsWithTrending=mockPosts.map(calculatePostTrendingData);let filtered=postsWithTrending;if(filters.category&&filters.category!=='for_you'){filtered=filtered.filter(post=>post.trendingCategory===filters.category);}if(filters.timeRange){const now=Date.now();const timeRanges={'1h':1*60*60*1000,'6h':6*60*60*1000,'24h':24*60*60*1000,'7d':7*24*60*60*1000};const maxAge=timeRanges[filters.timeRange]||timeRanges['24h'];filtered=filtered.filter(post=>{const postTime=new Date(post.timestamp).getTime();return now-postTime<=maxAge;});}const sorted=filtered.sort((a,b)=>b.trendingScore-a.trendingScore);return sorted.map((post,index)=>Object.assign({},post,{trendingRank:index+1}));},[filters,calculatePostTrendingData]);const filteredTopics=useMemo(()=>{let filtered=topics;if(filters.category){if(filters.category==='for_you'){filtered=topics;}else{filtered=topics.filter(topic=>topic.category===filters.category);}}if(filters.location){filtered=filtered.filter(topic=>topic.location===filters.location||topic.location==='Global'||topic.location==='Worldwide');}return filtered.sort((a,b)=>b.trendingScore-a.trendingScore);},[topics,filters]);const getTopicsByCategory=useCallback(category=>{if(!category||category==='for_you'){return topics.sort((a,b)=>b.trendingScore-a.trendingScore);}return topics.filter(topic=>topic.category===category).sort((a,b)=>b.trendingScore-a.trendingScore);},[topics]);const getPostsByCategory=useCallback(category=>{if(!category||category==='for_you'){return trendingPosts;}return trendingPosts.filter(post=>post.trendingCategory===category);},[trendingPosts]);const generateNewTrends=useCallback(()=>{const newTrends=[];const numNewTrends=Math.floor(Math.random()*3)+1;const categories=['music','content','events','local','global'];const statuses=['breaking','peaking'];const locations=['Johannesburg','Cape Town','Durban','Pretoria','Global'];for(let i=0;i<numNewTrends;i++){const category=categories[Math.floor(Math.random()*categories.length)];const status=statuses[Math.floor(Math.random()*statuses.length)];const location=locations[Math.floor(Math.random()*locations.length)];const newTrend={id:`trend_${Date.now()}_${i}`,title:`New Trending Topic ${Date.now()}`,category,posts:Math.floor(Math.random()*50000)+10000,engagement:Math.floor(Math.random()*500000)+100000,location,hashtag:`#Trend${Date.now()}`,description:'Fresh trending topic just emerged',trendingScore:Math.random()*20+80,velocity:Math.random()*10+10,recencyScore:Math.random()*10+90,status,createdAt:new Date().toISOString(),lastUpdated:new Date().toISOString()};newTrends.push(newTrend);}return newTrends;},[]);const checkForNewTrends=useCallback(async()=>{console.log('ðŸ”¥ Auto-checking for new trends...');const updatedTopics=topics.map(topic=>{const velocityChange=(Math.random()-0.5)*5;const newVelocity=Math.max(0,topic.velocity+velocityChange);const scoreChange=(Math.random()-0.5)*3;const newScore=Math.max(0,Math.min(100,topic.trendingScore+scoreChange));let newStatus=topic.status;if(newVelocity>15&&newScore>90){newStatus='breaking';}else if(newVelocity>10&&newScore>80){newStatus='peaking';}else if(newVelocity<5){newStatus='fading';}else{newStatus='stable';}return Object.assign({},topic,{lastUpdated:new Date().toISOString(),trendingScore:newScore,velocity:newVelocity,status:newStatus});});const newTrends=generateNewTrends();if(newTrends.length>0){console.log(`âš¡ Found ${newTrends.length} new trending topics`);setPendingTopics(prev=>[...newTrends,...prev]);setNewTrendsCount(prev=>prev+newTrends.length);setHasNewTrends(true);}setTopics(updatedTopics);},[topics,generateNewTrends]);const refreshTrending=useCallback(async(showLoading=true)=>{if(showLoading){setIsRefreshing(true);}console.log('ðŸ”„ Refreshing trending topics...');await new Promise(resolve=>setTimeout(resolve,800));const updatedTopics=topics.map(topic=>{const velocityChange=(Math.random()-0.5)*5;const newVelocity=Math.max(0,topic.velocity+velocityChange);const scoreChange=(Math.random()-0.5)*3;const newScore=Math.max(0,Math.min(100,topic.trendingScore+scoreChange));let newStatus=topic.status;if(newVelocity>15&&newScore>90){newStatus='breaking';}else if(newVelocity>10&&newScore>80){newStatus='peaking';}else if(newVelocity<5){newStatus='fading';}else{newStatus='stable';}return Object.assign({},topic,{lastUpdated:new Date().toISOString(),trendingScore:newScore,velocity:newVelocity,status:newStatus});});const allTopics=[...pendingTopics,...updatedTopics];const sortedTopics=allTopics.sort((a,b)=>b.trendingScore-a.trendingScore);setTopics(sortedTopics);setPendingTopics([]);setNewTrendsCount(0);setHasNewTrends(false);setLastRefresh(new Date());if(showLoading){setIsRefreshing(false);}console.log('âœ… Trending refreshed successfully');},[topics,pendingTopics]);const loadNewTrends=useCallback(async()=>{console.log(`ðŸ“¥ Loading ${pendingTopics.length} new trends...`);const allTopics=[...pendingTopics,...topics];const sortedTopics=allTopics.sort((a,b)=>b.trendingScore-a.trendingScore);setTopics(sortedTopics);setPendingTopics([]);setNewTrendsCount(0);setHasNewTrends(false);setLastRefresh(new Date());},[pendingTopics,topics]);const updateFilters=useCallback(newFilters=>{setFilters(prev=>Object.assign({},prev,newFilters));},[]);const getBreakingTopics=useCallback(()=>{return topics.filter(topic=>topic.status==='breaking').sort((a,b)=>b.velocity-a.velocity).slice(0,5);},[topics]);const getPeakingTopics=useCallback(()=>{return topics.filter(topic=>topic.status==='peaking').sort((a,b)=>b.trendingScore-a.trendingScore).slice(0,10);},[topics]);useEffect(()=>{const interval=setInterval(()=>{checkForNewTrends();},60000);return()=>clearInterval(interval);},[checkForNewTrends]);return useMemo(()=>({topics:filteredTopics,trendingTopics:filteredTopics,trendingPosts,filters,weights,lastRefresh,isRefreshing,newTrendsCount,hasNewTrends,updateFilters,refreshTrending,loadNewTrends,getTopicsByCategory,getPostsByCategory,getBreakingTopics,getPeakingTopics}),[filteredTopics,trendingPosts,filters,weights,lastRefresh,isRefreshing,newTrendsCount,hasNewTrends,updateFilters,refreshTrending,loadNewTrends,getTopicsByCategory,getPostsByCategory,getBreakingTopics,getPeakingTopics]);});","map":{"version":3,"names":["useState","useEffect","useMemo","useCallback","createContextHook","mockTrendingTopics","mockPosts","DEFAULT_WEIGHTS","engagement","hashtag","mentions","recency","events","calculateTrendingScore","post","weights","now","Date","postTime","timestamp","getTime","ageInHours","engagementScore","likes","comments","shares","hashtagCount","content","match","length","hashtagScore","Math","min","mentionCount","mentionScore","recencyScore","max","eventScore","isBoosted","totalScore","calculateVelocity","ageInMinutes","totalEngagement","velocity","TrendingProvider","useTrending","topics","setTopics","filters","setFilters","category","timeRange","lastRefresh","setLastRefresh","isRefreshing","setIsRefreshing","newTrendsCount","setNewTrendsCount","hasNewTrends","setHasNewTrends","pendingTopics","setPendingTopics","calculatePostTrendingData","trendingScore","includes","video","image","views","Object","assign","trendingRank","trendingCategory","trendingPosts","postsWithTrending","map","filtered","filter","timeRanges","maxAge","sorted","sort","a","b","index","filteredTopics","topic","location","getTopicsByCategory","getPostsByCategory","generateNewTrends","newTrends","numNewTrends","floor","random","categories","statuses","locations","i","status","newTrend","id","title","posts","description","createdAt","toISOString","lastUpdated","push","checkForNewTrends","console","log","updatedTopics","velocityChange","newVelocity","scoreChange","newScore","newStatus","prev","refreshTrending","showLoading","Promise","resolve","setTimeout","allTopics","sortedTopics","loadNewTrends","updateFilters","newFilters","getBreakingTopics","slice","getPeakingTopics","interval","setInterval","clearInterval","trendingTopics"],"sources":["/home/user/rork-vibesync-458/hooks/trending-store.ts"],"sourcesContent":["import { useState, useEffect, useMemo, useCallback } from 'react';\nimport createContextHook from '@nkzw/create-context-hook';\nimport {\n  TrendingTopic,\n  TrendingPost,\n  TrendingWeights,\n  TrendingFilters,\n  Post,\n} from '@/types';\nimport { mockTrendingTopics } from '@/mocks/trending';\nimport { mockPosts } from '@/mocks/posts';\n\nconst DEFAULT_WEIGHTS: TrendingWeights = {\n  engagement: 0.4,\n  hashtag: 0.25,\n  mentions: 0.15,\n  recency: 0.15,\n  events: 0.05,\n};\n\nconst calculateTrendingScore = (\n  post: Post,\n  weights: TrendingWeights = DEFAULT_WEIGHTS\n): number => {\n  const now = Date.now();\n  const postTime = new Date(post.timestamp).getTime();\n  const ageInHours = (now - postTime) / (1000 * 60 * 60);\n  \n  const engagementScore = (post.likes + post.comments * 2 + post.shares * 3) / 100;\n  \n  const hashtagCount = (post.content.match(/#\\w+/g) || []).length;\n  const hashtagScore = Math.min(hashtagCount * 10, 50);\n  \n  const mentionCount = (post.content.match(/@\\w+/g) || []).length;\n  const mentionScore = Math.min(mentionCount * 5, 30);\n  \n  const recencyScore = Math.max(0, 100 - ageInHours * 2);\n  \n  const eventScore = post.isBoosted ? 50 : 0;\n  \n  const totalScore =\n    engagementScore * weights.engagement +\n    hashtagScore * weights.hashtag +\n    mentionScore * weights.mentions +\n    recencyScore * weights.recency +\n    eventScore * weights.events;\n  \n  return Math.min(100, totalScore);\n};\n\nconst calculateVelocity = (post: Post): number => {\n  const now = Date.now();\n  const postTime = new Date(post.timestamp).getTime();\n  const ageInMinutes = (now - postTime) / (1000 * 60);\n  \n  if (ageInMinutes < 1) return 0;\n  \n  const totalEngagement = post.likes + post.comments + post.shares;\n  const velocity = totalEngagement / ageInMinutes;\n  \n  return velocity;\n};\n\nexport const [TrendingProvider, useTrending] = createContextHook(() => {\n  const [topics, setTopics] = useState<TrendingTopic[]>(mockTrendingTopics);\n  const [filters, setFilters] = useState<TrendingFilters>({\n    category: 'for_you',\n    timeRange: '24h',\n  });\n  const [weights] = useState<TrendingWeights>(DEFAULT_WEIGHTS);\n  const [lastRefresh, setLastRefresh] = useState<Date>(new Date());\n  const [isRefreshing, setIsRefreshing] = useState<boolean>(false);\n  const [newTrendsCount, setNewTrendsCount] = useState<number>(0);\n  const [hasNewTrends, setHasNewTrends] = useState<boolean>(false);\n  const [pendingTopics, setPendingTopics] = useState<TrendingTopic[]>([]);\n\n  const calculatePostTrendingData = useCallback(\n    (post: Post): TrendingPost => {\n      const trendingScore = calculateTrendingScore(post, weights);\n      const velocity = calculateVelocity(post);\n      \n      let category: TrendingPost['trendingCategory'] = 'for_you';\n      if (post.content.includes('#music') || post.content.includes('ðŸŽµ')) {\n        category = 'music';\n      } else if (post.content.includes('#event') || post.isBoosted) {\n        category = 'events';\n      } else if (post.video || post.image) {\n        category = 'content';\n      } else if (post.views > 10000) {\n        category = 'global';\n      }\n      \n      return {\n        ...post,\n        trendingScore,\n        trendingRank: 0,\n        trendingCategory: category,\n        velocity,\n      };\n    },\n    [weights]\n  );\n\n  const trendingPosts = useMemo(() => {\n    const postsWithTrending = mockPosts.map(calculatePostTrendingData);\n    \n    let filtered = postsWithTrending;\n    \n    if (filters.category && filters.category !== 'for_you') {\n      filtered = filtered.filter(\n        (post) => post.trendingCategory === filters.category\n      );\n    }\n    \n    if (filters.timeRange) {\n      const now = Date.now();\n      const timeRanges: Record<string, number> = {\n        '1h': 1 * 60 * 60 * 1000,\n        '6h': 6 * 60 * 60 * 1000,\n        '24h': 24 * 60 * 60 * 1000,\n        '7d': 7 * 24 * 60 * 60 * 1000,\n      };\n      \n      const maxAge = timeRanges[filters.timeRange] || timeRanges['24h'];\n      \n      filtered = filtered.filter((post) => {\n        const postTime = new Date(post.timestamp).getTime();\n        return now - postTime <= maxAge;\n      });\n    }\n    \n    const sorted = filtered.sort((a, b) => b.trendingScore - a.trendingScore);\n    \n    return sorted.map((post, index) => ({\n      ...post,\n      trendingRank: index + 1,\n    }));\n  }, [filters, calculatePostTrendingData]);\n\n  const filteredTopics = useMemo(() => {\n    let filtered = topics;\n    \n    if (filters.category) {\n      if (filters.category === 'for_you') {\n        filtered = topics;\n      } else {\n        filtered = topics.filter((topic) => topic.category === filters.category);\n      }\n    }\n    \n    if (filters.location) {\n      filtered = filtered.filter(\n        (topic) =>\n          topic.location === filters.location ||\n          topic.location === 'Global' ||\n          topic.location === 'Worldwide'\n      );\n    }\n    \n    return filtered.sort((a, b) => b.trendingScore - a.trendingScore);\n  }, [topics, filters]);\n\n  const getTopicsByCategory = useCallback(\n    (category: TrendingFilters['category']) => {\n      if (!category || category === 'for_you') {\n        return topics.sort((a, b) => b.trendingScore - a.trendingScore);\n      }\n      \n      return topics\n        .filter((topic) => topic.category === category)\n        .sort((a, b) => b.trendingScore - a.trendingScore);\n    },\n    [topics]\n  );\n\n  const getPostsByCategory = useCallback(\n    (category: TrendingFilters['category']) => {\n      if (!category || category === 'for_you') {\n        return trendingPosts;\n      }\n      \n      return trendingPosts.filter((post) => post.trendingCategory === category);\n    },\n    [trendingPosts]\n  );\n\n  const generateNewTrends = useCallback((): TrendingTopic[] => {\n    const newTrends: TrendingTopic[] = [];\n    const numNewTrends = Math.floor(Math.random() * 3) + 1;\n\n    const categories: TrendingTopic['category'][] = ['music', 'content', 'events', 'local', 'global'];\n    const statuses: TrendingTopic['status'][] = ['breaking', 'peaking'];\n    const locations = ['Johannesburg', 'Cape Town', 'Durban', 'Pretoria', 'Global'];\n\n    for (let i = 0; i < numNewTrends; i++) {\n      const category = categories[Math.floor(Math.random() * categories.length)];\n      const status = statuses[Math.floor(Math.random() * statuses.length)];\n      const location = locations[Math.floor(Math.random() * locations.length)];\n      \n      const newTrend: TrendingTopic = {\n        id: `trend_${Date.now()}_${i}`,\n        title: `New Trending Topic ${Date.now()}`,\n        category,\n        posts: Math.floor(Math.random() * 50000) + 10000,\n        engagement: Math.floor(Math.random() * 500000) + 100000,\n        location,\n        hashtag: `#Trend${Date.now()}`,\n        description: 'Fresh trending topic just emerged',\n        trendingScore: Math.random() * 20 + 80,\n        velocity: Math.random() * 10 + 10,\n        recencyScore: Math.random() * 10 + 90,\n        status,\n        createdAt: new Date().toISOString(),\n        lastUpdated: new Date().toISOString(),\n      };\n\n      newTrends.push(newTrend);\n    }\n\n    return newTrends;\n  }, []);\n\n  const checkForNewTrends = useCallback(async () => {\n    console.log('ðŸ”¥ Auto-checking for new trends...');\n    \n    const updatedTopics = topics.map((topic) => {\n      const velocityChange = (Math.random() - 0.5) * 5;\n      const newVelocity = Math.max(0, topic.velocity + velocityChange);\n      const scoreChange = (Math.random() - 0.5) * 3;\n      const newScore = Math.max(0, Math.min(100, topic.trendingScore + scoreChange));\n      \n      let newStatus = topic.status;\n      if (newVelocity > 15 && newScore > 90) {\n        newStatus = 'breaking';\n      } else if (newVelocity > 10 && newScore > 80) {\n        newStatus = 'peaking';\n      } else if (newVelocity < 5) {\n        newStatus = 'fading';\n      } else {\n        newStatus = 'stable';\n      }\n\n      return {\n        ...topic,\n        lastUpdated: new Date().toISOString(),\n        trendingScore: newScore,\n        velocity: newVelocity,\n        status: newStatus,\n      };\n    });\n\n    const newTrends = generateNewTrends();\n    \n    if (newTrends.length > 0) {\n      console.log(`âš¡ Found ${newTrends.length} new trending topics`);\n      setPendingTopics(prev => [...newTrends, ...prev]);\n      setNewTrendsCount(prev => prev + newTrends.length);\n      setHasNewTrends(true);\n    }\n\n    setTopics(updatedTopics);\n  }, [topics, generateNewTrends]);\n\n  const refreshTrending = useCallback(async (showLoading: boolean = true) => {\n    if (showLoading) {\n      setIsRefreshing(true);\n    }\n    \n    console.log('ðŸ”„ Refreshing trending topics...');\n    \n    await new Promise((resolve) => setTimeout(resolve, 800));\n    \n    const updatedTopics = topics.map((topic) => {\n      const velocityChange = (Math.random() - 0.5) * 5;\n      const newVelocity = Math.max(0, topic.velocity + velocityChange);\n      const scoreChange = (Math.random() - 0.5) * 3;\n      const newScore = Math.max(0, Math.min(100, topic.trendingScore + scoreChange));\n      \n      let newStatus = topic.status;\n      if (newVelocity > 15 && newScore > 90) {\n        newStatus = 'breaking';\n      } else if (newVelocity > 10 && newScore > 80) {\n        newStatus = 'peaking';\n      } else if (newVelocity < 5) {\n        newStatus = 'fading';\n      } else {\n        newStatus = 'stable';\n      }\n\n      return {\n        ...topic,\n        lastUpdated: new Date().toISOString(),\n        trendingScore: newScore,\n        velocity: newVelocity,\n        status: newStatus,\n      };\n    });\n    \n    const allTopics = [...pendingTopics, ...updatedTopics];\n    const sortedTopics = allTopics.sort((a, b) => b.trendingScore - a.trendingScore);\n    \n    setTopics(sortedTopics);\n    setPendingTopics([]);\n    setNewTrendsCount(0);\n    setHasNewTrends(false);\n    setLastRefresh(new Date());\n    \n    if (showLoading) {\n      setIsRefreshing(false);\n    }\n    \n    console.log('âœ… Trending refreshed successfully');\n  }, [topics, pendingTopics]);\n\n  const loadNewTrends = useCallback(async () => {\n    console.log(`ðŸ“¥ Loading ${pendingTopics.length} new trends...`);\n    \n    const allTopics = [...pendingTopics, ...topics];\n    const sortedTopics = allTopics.sort((a, b) => b.trendingScore - a.trendingScore);\n    \n    setTopics(sortedTopics);\n    setPendingTopics([]);\n    setNewTrendsCount(0);\n    setHasNewTrends(false);\n    setLastRefresh(new Date());\n  }, [pendingTopics, topics]);\n\n  const updateFilters = useCallback((newFilters: Partial<TrendingFilters>) => {\n    setFilters((prev) => ({ ...prev, ...newFilters }));\n  }, []);\n\n  const getBreakingTopics = useCallback(() => {\n    return topics\n      .filter((topic) => topic.status === 'breaking')\n      .sort((a, b) => b.velocity - a.velocity)\n      .slice(0, 5);\n  }, [topics]);\n\n  const getPeakingTopics = useCallback(() => {\n    return topics\n      .filter((topic) => topic.status === 'peaking')\n      .sort((a, b) => b.trendingScore - a.trendingScore)\n      .slice(0, 10);\n  }, [topics]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      checkForNewTrends();\n    }, 60000);\n    \n    return () => clearInterval(interval);\n  }, [checkForNewTrends]);\n\n  return useMemo(\n    () => ({\n      topics: filteredTopics,\n      trendingTopics: filteredTopics,\n      trendingPosts,\n      filters,\n      weights,\n      lastRefresh,\n      isRefreshing,\n      newTrendsCount,\n      hasNewTrends,\n      updateFilters,\n      refreshTrending,\n      loadNewTrends,\n      getTopicsByCategory,\n      getPostsByCategory,\n      getBreakingTopics,\n      getPeakingTopics,\n    }),\n    [\n      filteredTopics,\n      trendingPosts,\n      filters,\n      weights,\n      lastRefresh,\n      isRefreshing,\n      newTrendsCount,\n      hasNewTrends,\n      updateFilters,\n      refreshTrending,\n      loadNewTrends,\n      getTopicsByCategory,\n      getPostsByCategory,\n      getBreakingTopics,\n      getPeakingTopics,\n    ]\n  );\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}