{"ast":null,"code":"const supportsFullscreenAPI=element=>'requestFullscreen'in element;const supportsWebkitFullscreenAPI=element=>'webkitEnterFullScreen'in element;const supportsMsFullscreenAPI=element=>'msRequestFullscreen'in element;const supportsWebkitFullscreenChangeEvent=()=>supportsEvent('video','webkitfullscreenchange');function addEventListener(element,eventName,listener){element.addEventListener(eventName,listener);return()=>element.removeEventListener(eventName,listener);}const supportsEvent=(elementName,eventName)=>{const element=document.createElement(elementName);element.setAttribute('on'+eventName,'return;');return typeof element['on'+eventName]==='function';};export async function requestFullscreen(element){if(supportsFullscreenAPI(element)){return element.requestFullscreen();}else if(supportsWebkitFullscreenAPI(element)){element['webkitEnterFullScreen']?.();}else if(supportsMsFullscreenAPI(element)){element['msRequestFullscreen']?.();}else{throw new Error('Fullscreen not supported');}}export async function exitFullscreen(element){if(supportsFullscreenAPI(element)){return document.exitFullscreen();}else if(supportsWebkitFullscreenAPI(element)){element['webkitExitFullScreen']?.();}else if(supportsMsFullscreenAPI(element)){document['msExitFullscreen']?.();}else{throw new Error('Fullscreen not supported');}}export function addFullscreenListener(element,callback){if(supportsFullscreenAPI(element)){return addEventListener(element,'fullscreenchange',event=>callback(document.fullscreenElement===event.target));}else if(supportsWebkitFullscreenAPI(element)&&supportsWebkitFullscreenChangeEvent()){return addEventListener(element,'webkitfullscreenchange',event=>callback(document['webkitFullscreenElement']===event.target));}else if(supportsWebkitFullscreenAPI(element)){const removeBeginListener=addEventListener(element,'webkitbeginfullscreen',()=>callback(true));const removeEndListener=addEventListener(element,'webkitendfullscreen',()=>callback(false));return()=>{removeBeginListener();removeEndListener();};}else if(supportsMsFullscreenAPI(element)){return addEventListener(document,'MSFullscreenChange',event=>callback(document['msFullscreenElement']===event.target));}else{return()=>{};}}","map":{"version":3,"names":["supportsFullscreenAPI","element","supportsWebkitFullscreenAPI","supportsMsFullscreenAPI","supportsWebkitFullscreenChangeEvent","supportsEvent","addEventListener","eventName","listener","removeEventListener","elementName","document","createElement","setAttribute","requestFullscreen","Error","exitFullscreen","addFullscreenListener","callback","event","fullscreenElement","target","removeBeginListener","removeEndListener"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-av/src/FullscreenUtils.web.ts"],"sourcesContent":["declare global {\n  interface Document {\n    fullscreenElement?: Element | null;\n    msFullscreenElement?: Element | null;\n    webkitFullscreenElement?: Element | null;\n    msExitFullscreen?(): void;\n  }\n}\n\n/**\n * Detect if the browser supports the standard fullscreen API on the given\n * element:\n * https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\n */\nconst supportsFullscreenAPI = (element: HTMLMediaElement): boolean =>\n  'requestFullscreen' in element;\n\ninterface WebkitFullscreenElement extends HTMLMediaElement {\n  webkitExitFullScreen?(): void;\n  webkitEnterFullScreen?(): void;\n}\n\n/**\n * Detect if the browser supports the non-standard webkit fullscreen API on the\n * given element (looking at you, Safari).\n */\nconst supportsWebkitFullscreenAPI = (\n  element: HTMLMediaElement\n): element is WebkitFullscreenElement => 'webkitEnterFullScreen' in element;\n\ninterface IEFullscreenElement extends HTMLMediaElement {\n  msRequestFullscreen?(): void;\n}\n\n/**\n * Detect if the browser supports the non-standard ms fullscreen API on the\n * given element (looking at you, IE11).\n */\nconst supportsMsFullscreenAPI = (element: HTMLMediaElement): element is IEFullscreenElement =>\n  'msRequestFullscreen' in element;\n\n/**\n * Detect if the browser supports the `webkitFullscreenChange` event. This is\n * a non-standard event added to Safari on macOS by Apple:\n * https://developer.apple.com/documentation/webkitjs/document/1631998-onwebkitfullscreenchange\n */\nconst supportsWebkitFullscreenChangeEvent = (): boolean =>\n  supportsEvent('video', 'webkitfullscreenchange');\n\n/**\n * A helper that adds an event listener to an element. The key value-add over\n * the native addEventListener is that it returns a function that will remove\n * the event listener. This allows the setup and teardown logic for a listener\n * to be easily colocated.\n */\nfunction addEventListener(\n  element: Document | HTMLElement,\n  eventName: string,\n  listener: EventListenerOrEventListenerObject\n): () => any {\n  element.addEventListener(eventName, listener);\n  return () => element.removeEventListener(eventName, listener);\n}\n\n/**\n * Detect if the browser supports an event on a particular element type.\n */\nconst supportsEvent = (elementName: string, eventName: string): boolean => {\n  // Detect if the browser supports the event by attempting to add a handler\n  // attribute for that event to the provided element. If the event is supported\n  // then the browser will accept the attribute and report the type of the\n  // attribute as \"function\". See: https://stackoverflow.com/a/4562426/2747759\n  const element = document.createElement(elementName);\n  element.setAttribute('on' + eventName, 'return;');\n  return typeof element[('on' + eventName) as keyof Element] === 'function';\n};\n\n/**\n * Switches a video element into fullscreen.\n */\nexport async function requestFullscreen(element: HTMLMediaElement): Promise<void> {\n  if (supportsFullscreenAPI(element)) {\n    return element.requestFullscreen();\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['webkitEnterFullScreen']?.();\n  } else if (supportsMsFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['msRequestFullscreen']?.();\n  } else {\n    throw new Error('Fullscreen not supported');\n  }\n}\n\n/**\n * Switches a video element out of fullscreen.\n */\n\nexport async function exitFullscreen(element: HTMLMediaElement): Promise<void> {\n  if (supportsFullscreenAPI(element)) {\n    return document.exitFullscreen();\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    element['webkitExitFullScreen']?.();\n  } else if (supportsMsFullscreenAPI(element)) {\n    // This API is synchronous so no need to return the result\n    document['msExitFullscreen']?.();\n  } else {\n    throw new Error('Fullscreen not supported');\n  }\n}\n\n/**\n * Listens for fullscreen change events on a video element. The provided\n * callback will be called with `true` when the video is switched into\n * fullscreen and `false` when the video is switched out of fullscreen.\n */\nexport function addFullscreenListener(\n  element: HTMLVideoElement,\n  callback: (isFullscreen: boolean) => void\n): () => any {\n  if (supportsFullscreenAPI(element)) {\n    // Used by browsers that support the official spec\n    return addEventListener(element, 'fullscreenchange', (event) =>\n      callback(document.fullscreenElement === event.target)\n    );\n  } else if (supportsWebkitFullscreenAPI(element) && supportsWebkitFullscreenChangeEvent()) {\n    // Used by Safari on macOS\n    return addEventListener(element, 'webkitfullscreenchange', (event) =>\n      callback(document['webkitFullscreenElement'] === event.target)\n    );\n  } else if (supportsWebkitFullscreenAPI(element)) {\n    // Used by Safari on iOS\n    const removeBeginListener = addEventListener(element, 'webkitbeginfullscreen', () =>\n      callback(true)\n    );\n    const removeEndListener = addEventListener(element, 'webkitendfullscreen', () =>\n      callback(false)\n    );\n    return () => {\n      removeBeginListener();\n      removeEndListener();\n    };\n  } else if (supportsMsFullscreenAPI(element)) {\n    // Used by IE11\n    return addEventListener(document, 'MSFullscreenChange', (event) =>\n      callback(document['msFullscreenElement'] === event.target)\n    );\n  } else {\n    return () => {};\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}