{"ast":null,"code":"\"use strict\";import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"emit\"];import{CommonActions}from'@react-navigation/routers';import*as React from'react';import{NavigationBuilderContext}from\"./NavigationBuilderContext.js\";export function useNavigationCache({state,getState,navigation,setOptions,router,emitter}){const{stackRef}=React.useContext(NavigationBuilderContext);const base=React.useMemo(()=>{const rest=_objectWithoutPropertiesLoose(navigation,_excluded);const actions=Object.assign({},router.actionCreators,CommonActions);const dispatch=()=>{throw new Error('Actions cannot be dispatched from a placeholder screen.');};const helpers=Object.keys(actions).reduce((acc,name)=>{acc[name]=dispatch;return acc;},{});return Object.assign({},rest,helpers,{addListener:()=>{return()=>{};},removeListener:()=>{},dispatch,getParent:id=>{if(id!==undefined&&id===rest.getId()){return base;}return rest.getParent(id);},setOptions:()=>{throw new Error('Options cannot be set from a placeholder screen.');},isFocused:()=>false});},[navigation,router.actionCreators]);const cache=React.useMemo(()=>({current:{}}),[base,getState,navigation,setOptions,emitter]);cache.current=state.routes.reduce((acc,route)=>{const previous=cache.current[route.key];if(previous){acc[route.key]=previous;}else{const dispatch=thunk=>{const action=typeof thunk==='function'?thunk(getState()):thunk;if(action!=null){navigation.dispatch(Object.assign({source:route.key},action));}};const withStack=callback=>{let isStackSet=false;try{if(false&&stackRef&&!stackRef.current){stackRef.current=new Error().stack;isStackSet=true;}callback();}finally{if(isStackSet&&stackRef){stackRef.current=undefined;}}};const actions=Object.assign({},router.actionCreators,CommonActions);const helpers=Object.keys(actions).reduce((acc,name)=>{acc[name]=(...args)=>withStack(()=>dispatch(actions[name](...args)));return acc;},{});acc[route.key]=Object.assign({},base,helpers,emitter.create(route.key),{dispatch:thunk=>withStack(()=>dispatch(thunk)),getParent:id=>{if(id!==undefined&&id===base.getId()){return acc[route.key];}return base.getParent(id);},setOptions:options=>{setOptions(o=>Object.assign({},o,{[route.key]:Object.assign({},o[route.key],options)}));},isFocused:()=>{const state=base.getState();if(state.routes[state.index].key!==route.key){return false;}return navigation?navigation.isFocused():true;}});}return acc;},{});return{base,navigations:cache.current};}","map":{"version":3,"names":["CommonActions","React","NavigationBuilderContext","useNavigationCache","state","getState","navigation","setOptions","router","emitter","stackRef","useContext","base","useMemo","rest","_objectWithoutPropertiesLoose","_excluded","actions","Object","assign","actionCreators","dispatch","Error","helpers","keys","reduce","acc","name","addListener","removeListener","getParent","id","undefined","getId","isFocused","cache","current","routes","route","previous","key","thunk","action","source","withStack","callback","isStackSet","stack","args","create","options","o","index","navigations"],"sources":["/home/user/rork-vibesync-458/node_modules/@react-navigation/core/src/useNavigationCache.tsx"],"sourcesContent":["import {\n  CommonActions,\n  type NavigationAction,\n  type NavigationState,\n  type ParamListBase,\n  type Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport { NavigationBuilderContext } from './NavigationBuilderContext';\nimport type { NavigationHelpers, NavigationProp } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>,\n> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (\n      options: Record<string, ScreenOptions>\n    ) => Record<string, ScreenOptions>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\ntype NavigationItem<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>,\n> = NavigationProp<\n  ParamListBase,\n  string,\n  string | undefined,\n  State,\n  ScreenOptions,\n  EventMap\n>;\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>,\n> = Record<string, NavigationItem<State, ScreenOptions, EventMap>>;\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>,\n  ActionHelpers extends Record<string, () => void>,\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const { stackRef } = React.useContext(NavigationBuilderContext);\n\n  const base = React.useMemo((): NavigationItem<\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    ActionHelpers => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { emit, ...rest } = navigation;\n\n    const actions = {\n      ...router.actionCreators,\n      ...CommonActions,\n    };\n\n    const dispatch = () => {\n      throw new Error(\n        'Actions cannot be dispatched from a placeholder screen.'\n      );\n    };\n\n    const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n      (acc, name) => {\n        acc[name] = dispatch;\n\n        return acc;\n      },\n      {}\n    ) as ActionHelpers;\n\n    return {\n      ...rest,\n      ...helpers,\n      addListener: () => {\n        // Event listeners are not supported for placeholder screens\n\n        return () => {\n          // Empty function\n        };\n      },\n      removeListener: () => {\n        // Event listeners are not supported for placeholder screens\n      },\n      dispatch,\n      getParent: (id?: string) => {\n        if (id !== undefined && id === rest.getId()) {\n          return base;\n        }\n\n        return rest.getParent(id);\n      },\n      setOptions: () => {\n        throw new Error('Options cannot be set from a placeholder screen.');\n      },\n      isFocused: () => false,\n    };\n  }, [navigation, router.actionCreators]);\n\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions, EventMap> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [base, getState, navigation, setOptions, emitter]\n  );\n\n  cache.current = state.routes.reduce<\n    NavigationCache<State, ScreenOptions, EventMap>\n  >((acc, route) => {\n    const previous = cache.current[route.key];\n\n    type Thunk =\n      | NavigationAction\n      | ((state: State) => NavigationAction | null | undefined);\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      const dispatch = (thunk: Thunk) => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({ source: route.key, ...action });\n        }\n      };\n\n      const withStack = (callback: () => void) => {\n        let isStackSet = false;\n\n        try {\n          if (\n            process.env.NODE_ENV !== 'production' &&\n            stackRef &&\n            !stackRef.current\n          ) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      const actions = {\n        ...router.actionCreators,\n        ...CommonActions,\n      };\n\n      const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n        (acc, name) => {\n          acc[name] = (...args: any) =>\n            withStack(() =>\n              // @ts-expect-error: name is a valid key, but TypeScript is dumb\n              dispatch(actions[name](...args))\n            );\n\n          return acc;\n        },\n        {}\n      );\n\n      acc[route.key] = {\n        ...base,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...(emitter.create(route.key) as any),\n        dispatch: (thunk: Thunk) => withStack(() => dispatch(thunk)),\n        getParent: (id?: string) => {\n          if (id !== undefined && id === base.getId()) {\n            // If the passed id is the same as the current navigation id,\n            // we return the cached navigation object for the relevant route\n            return acc[route.key];\n          }\n\n          return base.getParent(id);\n        },\n        setOptions: (options: object) => {\n          setOptions((o) => ({\n            ...o,\n            [route.key]: { ...o[route.key], ...options },\n          }));\n        },\n        isFocused: () => {\n          const state = base.getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n          return navigation ? navigation.isFocused() : true;\n        },\n      };\n    }\n\n    return acc;\n  }, {});\n\n  return {\n    base,\n    navigations: cache.current,\n  };\n}\n"],"mappings":"qIAAA,OACEA,aAAa,KAKR,2BAA2B,CAClC,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAE9B,OAASC,wBAAwB,KAAQ,+BAA4B,CA8CrE,MAAO,SAAS,CAAAC,kBAAkBA,CAKhC,CACAC,KAAK,CACLC,QAAQ,CACRC,UAAU,CACVC,UAAU,CACVC,MAAM,CACNC,OACuC,CAAC,CAAE,CAC1C,KAAM,CAAEC,QAAS,CAAC,CAAGT,KAAK,CAACU,UAAU,CAACT,wBAAwB,CAAC,CAE/D,KAAM,CAAAU,IAAI,CAAGX,KAAK,CAACY,OAAO,CAAC,IAKR,CAEjB,KAAiB,CAAAC,IAAA,CAAAC,6BAAA,CAAST,UAAU,CAAAU,SAAA,EAEpC,KAAM,CAAAC,OAAO,CAAAC,MAAA,CAAAC,MAAA,IACRX,MAAM,CAACY,cAAc,CACrBpB,aAAA,CACJ,CAED,KAAM,CAAAqB,QAAQ,CAAGA,CAAA,GAAM,CACrB,KAAM,IAAI,CAAAC,KAAK,CACb,yDACF,CAAC,CACH,CAAC,CAED,KAAM,CAAAC,OAAO,CAAGL,MAAM,CAACM,IAAI,CAACP,OAAO,CAAC,CAACQ,MAAM,CACzC,CAACC,GAAG,CAAEC,IAAI,GAAK,CACbD,GAAG,CAACC,IAAI,CAAC,CAAGN,QAAQ,CAEpB,MAAO,CAAAK,GAAG,CACZ,CAAC,CACD,CAAC,CACH,CAAkB,CAElB,OAAAR,MAAA,CAAAC,MAAA,IACKL,IAAI,CACJS,OAAO,EACVK,WAAW,CAAEA,CAAA,GAAM,CAGjB,MAAO,IAAM,CACX,CACD,CACH,CAAC,CACDC,cAAc,CAAEA,CAAA,GAAM,CACpB,CACD,CACDR,QAAQ,CACRS,SAAS,CAAGC,EAAW,EAAK,CAC1B,GAAIA,EAAE,GAAKC,SAAS,EAAID,EAAE,GAAKjB,IAAI,CAACmB,KAAK,CAAC,CAAC,CAAE,CAC3C,MAAO,CAAArB,IAAI,CACb,CAEA,MAAO,CAAAE,IAAI,CAACgB,SAAS,CAACC,EAAE,CAAC,CAC3B,CAAC,CACDxB,UAAU,CAAEA,CAAA,GAAM,CAChB,KAAM,IAAI,CAAAe,KAAK,CAAC,kDAAkD,CAAC,CACrE,CAAC,CACDY,SAAS,CAAEA,CAAA,GAAM,QAErB,CAAC,CAAE,CAAC5B,UAAU,CAAEE,MAAM,CAACY,cAAc,CAAC,CAAC,CAKvC,KAAM,CAAAe,KAAK,CAAGlC,KAAK,CAACY,OAAO,CACzB,KAAO,CAAEuB,OAAO,CAAE,CAAC,CAAqD,CAAC,CAAC,CAE1E,CAACxB,IAAI,CAAEP,QAAQ,CAAEC,UAAU,CAAEC,UAAU,CAAEE,OAAO,CAClD,CAAC,CAED0B,KAAK,CAACC,OAAO,CAAGhC,KAAK,CAACiC,MAAM,CAACZ,MAAM,CAEjC,CAACC,GAAG,CAAEY,KAAK,GAAK,CAChB,KAAM,CAAAC,QAAQ,CAAGJ,KAAK,CAACC,OAAO,CAACE,KAAK,CAACE,GAAG,CAAC,CAMzC,GAAID,QAAQ,CAAE,CAEZb,GAAG,CAACY,KAAK,CAACE,GAAG,CAAC,CAAGD,QAAQ,CAC3B,CAAC,IAAM,CACL,KAAM,CAAAlB,QAAQ,CAAIoB,KAAY,EAAK,CACjC,KAAM,CAAAC,MAAM,CAAG,MAAO,CAAAD,KAAK,GAAK,UAAU,CAAGA,KAAK,CAACpC,QAAQ,CAAC,CAAC,CAAC,CAAGoC,KAAK,CAEtE,GAAIC,MAAM,EAAI,IAAI,CAAE,CAClBpC,UAAU,CAACe,QAAQ,CAAAH,MAAA,CAAAC,MAAA,EAAGwB,MAAM,CAAEL,KAAK,CAACE,GAAG,EAAKE,MAAA,CAAQ,CAAC,CACvD,CACF,CAAC,CAED,KAAM,CAAAE,SAAS,CAAIC,QAAoB,EAAK,CAC1C,GAAI,CAAAC,UAAU,CAAG,KAAK,CAEtB,GAAI,CACF,GACE,OACApC,QAAQ,EACR,CAACA,QAAQ,CAAC0B,OAAO,CACjB,CAEA1B,QAAQ,CAAC0B,OAAO,CAAG,GAAI,CAAAd,KAAK,CAAC,CAAC,CAACyB,KAAK,CACpCD,UAAU,CAAG,IAAI,CACnB,CAEAD,QAAQ,CAAC,CAAC,CACZ,CAAC,OAAS,CACR,GAAIC,UAAU,EAAIpC,QAAQ,CAAE,CAC1BA,QAAQ,CAAC0B,OAAO,CAAGJ,SAAS,CAC9B,CACF,CACF,CAAC,CAED,KAAM,CAAAf,OAAO,CAAAC,MAAA,CAAAC,MAAA,IACRX,MAAM,CAACY,cAAc,CACrBpB,aAAA,CACJ,CAED,KAAM,CAAAuB,OAAO,CAAGL,MAAM,CAACM,IAAI,CAACP,OAAO,CAAC,CAACQ,MAAM,CACzC,CAACC,GAAG,CAAEC,IAAI,GAAK,CACbD,GAAG,CAACC,IAAI,CAAC,CAAG,CAAC,GAAGqB,IAAS,GACvBJ,SAAS,CAAC,IAERvB,QAAQ,CAACJ,OAAO,CAACU,IAAI,CAAC,CAAC,GAAGqB,IAAI,CAAC,CACjC,CAAC,CAEH,MAAO,CAAAtB,GAAG,CACZ,CAAC,CACD,CAAC,CACH,CAAC,CAEDA,GAAG,CAACY,KAAK,CAACE,GAAG,CAAC,CAAAtB,MAAA,CAAAC,MAAA,IACTP,IAAI,CACJW,OAAO,CAENd,OAAO,CAACwC,MAAM,CAACX,KAAK,CAACE,GAAG,CAAS,EACrCnB,QAAQ,CAAGoB,KAAY,EAAKG,SAAS,CAAC,IAAMvB,QAAQ,CAACoB,KAAK,CAAC,CAAC,CAC5DX,SAAS,CAAGC,EAAW,EAAK,CAC1B,GAAIA,EAAE,GAAKC,SAAS,EAAID,EAAE,GAAKnB,IAAI,CAACqB,KAAK,CAAC,CAAC,CAAE,CAG3C,MAAO,CAAAP,GAAG,CAACY,KAAK,CAACE,GAAG,CAAC,CACvB,CAEA,MAAO,CAAA5B,IAAI,CAACkB,SAAS,CAACC,EAAE,CAAC,CAC3B,CAAC,CACDxB,UAAU,CAAG2C,OAAe,EAAK,CAC/B3C,UAAU,CAAE4C,CAAC,EAAAjC,MAAA,CAAAC,MAAA,IACRgC,CAAC,EACJ,CAACb,KAAK,CAACE,GAAG,EAAAtB,MAAA,CAAAC,MAAA,IAAQgC,CAAC,CAACb,KAAK,CAACE,GAAG,CAAC,CAAKU,OAAA,CAAQ,EAC3C,CAAC,CACL,CAAC,CACDhB,SAAS,CAAEA,CAAA,GAAM,CACf,KAAM,CAAA9B,KAAK,CAAGQ,IAAI,CAACP,QAAQ,CAAC,CAAC,CAE7B,GAAID,KAAK,CAACiC,MAAM,CAACjC,KAAK,CAACgD,KAAK,CAAC,CAACZ,GAAG,GAAKF,KAAK,CAACE,GAAG,CAAE,CAC/C,MAAO,MAAK,CACd,CAIA,MAAO,CAAAlC,UAAU,CAAGA,UAAU,CAAC4B,SAAS,CAAC,CAAC,CAAG,IAAI,CACnD,GACD,CACH,CAEA,MAAO,CAAAR,GAAG,CACZ,CAAC,CAAE,CAAC,CAAC,CAAC,CAEN,MAAO,CACLd,IAAI,CACJyC,WAAW,CAAElB,KAAK,CAACC,OACrB,CAAC,CACH","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}