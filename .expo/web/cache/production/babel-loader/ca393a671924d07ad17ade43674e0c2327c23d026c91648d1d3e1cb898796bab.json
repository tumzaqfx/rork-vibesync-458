{"ast":null,"code":"\"use strict\";import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"state\",\"screen\",\"params\",\"initial\"];import*as React from'react';import{EnsureSingleNavigator}from\"./EnsureSingleNavigator.js\";import{NavigationFocusedRouteStateContext}from\"./NavigationFocusedRouteStateContext.js\";import{NavigationStateContext}from\"./NavigationStateContext.js\";import{StaticContainer}from\"./StaticContainer.js\";import{useOptionsGetters}from\"./useOptionsGetters.js\";import{jsx as _jsx}from\"react/jsx-runtime\";export function SceneView({screen,route,navigation,routeState,getState,setState,options,clearOptions}){const navigatorKeyRef=React.useRef();const getKey=React.useCallback(()=>navigatorKeyRef.current,[]);const{addOptionsGetter}=useOptionsGetters({key:route.key,options,navigation});const setKey=React.useCallback(key=>{navigatorKeyRef.current=key;},[]);const getCurrentState=React.useCallback(()=>{const state=getState();const currentRoute=state.routes.find(r=>r.key===route.key);return currentRoute?currentRoute.state:undefined;},[getState,route.key]);const setCurrentState=React.useCallback(child=>{const state=getState();setState(Object.assign({},state,{routes:state.routes.map(r=>{if(r.key!==route.key){return r;}const nextRoute=Object.assign({},r,{state:child});if(nextRoute.params&&('state'in nextRoute.params&&typeof nextRoute.params.state==='object'&&nextRoute.params.state!==null||'screen'in nextRoute.params&&typeof nextRoute.params.screen==='string')){const _nextRoute$params=nextRoute.params,rest=_objectWithoutPropertiesLoose(_nextRoute$params,_excluded);if(Object.keys(rest).length){nextRoute.params=rest;}else{delete nextRoute.params;}}return nextRoute;})}));},[getState,route.key,setState]);const isInitialRef=React.useRef(true);React.useEffect(()=>{isInitialRef.current=false;});React.useEffect(()=>{return clearOptions;},[]);const getIsInitial=React.useCallback(()=>isInitialRef.current,[]);const parentFocusedRouteState=React.useContext(NavigationFocusedRouteStateContext);const focusedRouteState=React.useMemo(()=>{const state={routes:[{key:route.key,name:route.name,params:route.params,path:route.path}]};const addState=parent=>{const parentRoute=parent?.routes[0];if(parentRoute){return{routes:[Object.assign({},parentRoute,{state:addState(parentRoute.state)})]};}return state;};return addState(parentFocusedRouteState);},[parentFocusedRouteState,route.key,route.name,route.params,route.path]);const context=React.useMemo(()=>({state:routeState,getState:getCurrentState,setState:setCurrentState,getKey,setKey,getIsInitial,addOptionsGetter}),[routeState,getCurrentState,setCurrentState,getKey,setKey,getIsInitial,addOptionsGetter]);const ScreenComponent=screen.getComponent?screen.getComponent():screen.component;return _jsx(NavigationStateContext.Provider,{value:context,children:_jsx(NavigationFocusedRouteStateContext.Provider,{value:focusedRouteState,children:_jsx(EnsureSingleNavigator,{children:_jsx(StaticContainer,{name:screen.name,render:ScreenComponent||screen.children,navigation:navigation,route:route,children:ScreenComponent!==undefined?_jsx(ScreenComponent,{navigation:navigation,route:route}):screen.children!==undefined?screen.children({navigation,route}):null})})})});}","map":{"version":3,"names":["React","EnsureSingleNavigator","NavigationFocusedRouteStateContext","NavigationStateContext","StaticContainer","useOptionsGetters","jsx","_jsx","SceneView","screen","route","navigation","routeState","getState","setState","options","clearOptions","navigatorKeyRef","useRef","getKey","useCallback","current","addOptionsGetter","key","setKey","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","Object","assign","map","nextRoute","params","_nextRoute$params","rest","_objectWithoutPropertiesLoose","_excluded","keys","length","isInitialRef","useEffect","getIsInitial","parentFocusedRouteState","useContext","focusedRouteState","useMemo","name","path","addState","parent","parentRoute","context","ScreenComponent","getComponent","component","Provider","value","children","render"],"sources":["/home/user/rork-vibesync-458/node_modules/@react-navigation/core/src/SceneView.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport { EnsureSingleNavigator } from './EnsureSingleNavigator';\nimport {\n  type FocusedRouteState,\n  NavigationFocusedRouteStateContext,\n} from './NavigationFocusedRouteStateContext';\nimport { NavigationStateContext } from './NavigationStateContext';\nimport { StaticContainer } from './StaticContainer';\nimport type { NavigationProp, RouteConfigComponent } from './types';\nimport { useOptionsGetters } from './useOptionsGetters';\n\ntype Props<State extends NavigationState, ScreenOptions extends {}> = {\n  screen: RouteConfigComponent<ParamListBase, string> & { name: string };\n  navigation: NavigationProp<\n    ParamListBase,\n    string,\n    string | undefined,\n    State,\n    ScreenOptions\n  >;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n  clearOptions: () => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {},\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n  clearOptions,\n}: Props<State, ScreenOptions>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) => {\n          if (r.key !== route.key) {\n            return r;\n          }\n\n          const nextRoute = { ...r, state: child };\n\n          // Before updating the state, cleanup any nested screen and state\n          // This will avoid the navigator trying to handle them again\n          if (\n            nextRoute.params &&\n            (('state' in nextRoute.params &&\n              typeof nextRoute.params.state === 'object' &&\n              nextRoute.params.state !== null) ||\n              ('screen' in nextRoute.params &&\n                typeof nextRoute.params.screen === 'string'))\n          ) {\n            // @ts-expect-error: we don't have correct type for params\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { state, screen, params, initial, ...rest } =\n              nextRoute.params;\n\n            if (Object.keys(rest).length) {\n              nextRoute.params = rest;\n            } else {\n              delete nextRoute.params;\n            }\n          }\n\n          return nextRoute;\n        }),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  // Clear options set by this screen when it is unmounted\n  React.useEffect(() => {\n    return clearOptions;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const parentFocusedRouteState = React.useContext(\n    NavigationFocusedRouteStateContext\n  );\n\n  const focusedRouteState = React.useMemo(() => {\n    const state: FocusedRouteState = {\n      routes: [\n        {\n          key: route.key,\n          name: route.name,\n          params: route.params,\n          path: route.path,\n        },\n      ],\n    };\n\n    // Add our state to the innermost route of the parent state\n    const addState = (\n      parent: FocusedRouteState | undefined\n    ): FocusedRouteState => {\n      const parentRoute = parent?.routes[0];\n\n      if (parentRoute) {\n        return {\n          routes: [\n            {\n              ...parentRoute,\n              state: addState(parentRoute.state),\n            },\n          ],\n        };\n      }\n\n      return state;\n    };\n\n    return addState(parentFocusedRouteState);\n  }, [\n    parentFocusedRouteState,\n    route.key,\n    route.name,\n    route.params,\n    route.path,\n  ]);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <NavigationFocusedRouteStateContext.Provider value={focusedRouteState}>\n        <EnsureSingleNavigator>\n          <StaticContainer\n            name={screen.name}\n            render={ScreenComponent || screen.children}\n            navigation={navigation}\n            route={route}\n          >\n            {ScreenComponent !== undefined ? (\n              <ScreenComponent navigation={navigation} route={route} />\n            ) : screen.children !== undefined ? (\n              screen.children({ navigation, route })\n            ) : null}\n          </StaticContainer>\n        </EnsureSingleNavigator>\n      </NavigationFocusedRouteStateContext.Provider>\n    </NavigationStateContext.Provider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}