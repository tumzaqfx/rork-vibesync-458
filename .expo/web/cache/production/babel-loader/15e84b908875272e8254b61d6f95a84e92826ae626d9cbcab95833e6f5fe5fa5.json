{"ast":null,"code":"import React from'react';import createElement from\"react-native-web/dist/exports/createElement\";import{prepare}from'./utils/prepare';import{convertInt32ColorToRGBA}from'./utils/convertInt32Color';import{camelCaseToDashed,hasTouchableProperty,remeasure}from'./utils';import SvgTouchableMixin from'../lib/SvgTouchableMixin';export class WebShape extends React.Component{prepareProps(props){return props;}elementRef=React.createRef();lastMergedProps={};setNativeProps(props){const merged=Object.assign({},this.props,this.lastMergedProps,props.style);this.lastMergedProps=merged;const clean=prepare(this,this.prepareProps(merged));const current=this.elementRef.current;if(current){for(const cleanAttribute of Object.keys(clean)){const cleanValue=clean[cleanAttribute];switch(cleanAttribute){case'ref':case'children':break;case'style':for(const partialStyle of[].concat(clean.style??[])){Object.assign(current.style,partialStyle);}break;case'fill':if(cleanValue&&typeof cleanValue==='object'){const value=cleanValue;current.setAttribute('fill',convertInt32ColorToRGBA(value.payload));}break;case'stroke':if(cleanValue&&typeof cleanValue==='object'){const value=cleanValue;current.setAttribute('stroke',convertInt32ColorToRGBA(value.payload));}break;default:current.setAttribute(camelCaseToDashed(cleanAttribute),cleanValue);break;}}}}constructor(props){super(props);if(hasTouchableProperty(props)){SvgTouchableMixin(this);}this._remeasureMetricsOnActivation=remeasure.bind(this);}render(){if(!this.tag){throw new Error('When extending `WebShape` you need to overwrite either `tag` or `render`!');}this.lastMergedProps={};return createElement(this.tag,prepare(this,this.prepareProps(this.props)));}}","map":{"version":3,"names":["React","createElement","prepare","convertInt32ColorToRGBA","camelCaseToDashed","hasTouchableProperty","remeasure","SvgTouchableMixin","WebShape","Component","prepareProps","props","elementRef","createRef","lastMergedProps","setNativeProps","merged","Object","assign","style","clean","current","cleanAttribute","keys","cleanValue","partialStyle","concat","value","setAttribute","payload","constructor","_remeasureMetricsOnActivation","bind","render","tag","Error"],"sources":["/home/user/rork-vibesync-458/node_modules/react-native-svg/src/web/WebShape.ts"],"sourcesContent":["import React from 'react';\nimport {\n  GestureResponderEvent,\n  // @ts-ignore it is not seen in exports\n  unstable_createElement as createElement,\n} from 'react-native';\n\nimport { BaseProps } from './types';\nimport { prepare } from './utils/prepare';\nimport { convertInt32ColorToRGBA } from './utils/convertInt32Color';\nimport { camelCaseToDashed, hasTouchableProperty, remeasure } from './utils';\nimport SvgTouchableMixin from '../lib/SvgTouchableMixin';\n\nexport class WebShape<\n  P extends BaseProps = BaseProps,\n> extends React.Component<P> {\n  [x: string]: unknown;\n  protected tag?: React.ElementType;\n  protected prepareProps(props: P) {\n    return props;\n  }\n\n  elementRef =\n    React.createRef<SVGElement>() as React.MutableRefObject<SVGElement | null>;\n\n  lastMergedProps: Partial<P> = {};\n\n  /**\n   * disclaimer: I am not sure why the props are wrapped in a `style` attribute here, but that's how reanimated calls it\n   */\n  setNativeProps(props: { style: P }) {\n    const merged = Object.assign(\n      {},\n      this.props,\n      this.lastMergedProps,\n      props.style\n    );\n    this.lastMergedProps = merged;\n    const clean = prepare(this, this.prepareProps(merged));\n    const current = this.elementRef.current;\n    if (current) {\n      for (const cleanAttribute of Object.keys(clean)) {\n        const cleanValue = clean[cleanAttribute as keyof typeof clean];\n        switch (cleanAttribute) {\n          case 'ref':\n          case 'children':\n            break;\n          case 'style':\n            // style can be an object here or an array, so we convert it to an array and assign each element\n            for (const partialStyle of ([] as unknown[]).concat(\n              clean.style ?? []\n            )) {\n              Object.assign(current.style, partialStyle);\n            }\n            break;\n          case 'fill':\n            if (cleanValue && typeof cleanValue === 'object') {\n              const value = cleanValue as { payload: number };\n              current.setAttribute(\n                'fill',\n                convertInt32ColorToRGBA(value.payload)\n              );\n            }\n            break;\n          case 'stroke':\n            if (cleanValue && typeof cleanValue === 'object') {\n              const value = cleanValue as { payload: number };\n              current.setAttribute(\n                'stroke',\n                convertInt32ColorToRGBA(value.payload)\n              );\n            }\n            break;\n          default:\n            // apply all other incoming prop updates as attributes on the node\n            // same logic as in https://github.com/software-mansion/react-native-reanimated/blob/d04720c82f5941532991b235787285d36d717247/src/reanimated2/js-reanimated/index.ts#L38-L39\n            // @ts-expect-error TODO: fix this\n            current.setAttribute(camelCaseToDashed(cleanAttribute), cleanValue);\n            break;\n        }\n      }\n    }\n  }\n\n  _remeasureMetricsOnActivation: () => void;\n  touchableHandleStartShouldSetResponder?: (\n    e: GestureResponderEvent\n  ) => boolean;\n\n  touchableHandleResponderMove?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderGrant?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderRelease?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderTerminate?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderTerminationRequest?: (\n    e: GestureResponderEvent\n  ) => boolean;\n\n  constructor(props: P) {\n    super(props);\n\n    // Do not attach touchable mixin handlers if SVG element doesn't have a touchable prop\n    if (hasTouchableProperty(props)) {\n      SvgTouchableMixin(this);\n    }\n\n    this._remeasureMetricsOnActivation = remeasure.bind(this);\n  }\n\n  render(): JSX.Element {\n    if (!this.tag) {\n      throw new Error(\n        'When extending `WebShape` you need to overwrite either `tag` or `render`!'\n      );\n    }\n    this.lastMergedProps = {};\n    return createElement(\n      this.tag,\n      prepare(this, this.prepareProps(this.props))\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}