{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.matchDynamicName=matchDynamicName;exports.matchDeepDynamicRouteName=matchDeepDynamicRouteName;exports.testNotFound=testNotFound;exports.matchGroupName=matchGroupName;exports.matchLastGroupName=matchLastGroupName;exports.matchArrayGroupName=matchArrayGroupName;exports.getNameFromFilePath=getNameFromFilePath;exports.getContextKey=getContextKey;exports.removeSupportedExtensions=removeSupportedExtensions;exports.removeFileSystemExtensions=removeFileSystemExtensions;exports.removeFileSystemDots=removeFileSystemDots;exports.stripGroupSegmentsFromPath=stripGroupSegmentsFromPath;exports.stripInvisibleSegmentsFromPath=stripInvisibleSegmentsFromPath;exports.isTypedRoute=isTypedRoute;function matchDynamicName(name){return name.match(/^\\[([^[\\](?:\\.\\.\\.)]+?)\\]$/)?.[1];}function matchDeepDynamicRouteName(name){return name.match(/^\\[\\.\\.\\.([^/]+?)\\]$/)?.[1];}function testNotFound(name){return /\\+not-found$/.test(name);}function matchGroupName(name){return name.match(/^(?:[^\\\\(\\\\)])*?\\(([^\\\\/]+)\\).*?$/)?.[1];}function matchLastGroupName(name){return name.match(/.*(?:\\/|^)\\(([^\\\\/\\s]+)\\)[^\\s]*$/)?.[1];}function matchArrayGroupName(name){return name.match(/(?:[^\\\\(\\\\)])*?\\(([^\\\\/]+,[^\\\\/]+)\\).*?$/)?.[1];}function getNameFromFilePath(name){return removeSupportedExtensions(removeFileSystemDots(name));}function getContextKey(name){const normal='/'+getNameFromFilePath(name);if(!normal.endsWith('_layout')){return normal;}return normal.replace(/\\/?_layout$/,'');}function removeSupportedExtensions(name){return name.replace(/(\\+api)?\\.[jt]sx?$/g,'');}function removeFileSystemExtensions(name){return name.replace(/\\.[jt]sx?$/g,'');}function removeFileSystemDots(filePath){return filePath.replace(/^(?:\\.\\.?\\/)+/g,'');}function stripGroupSegmentsFromPath(path){return path.split('/').reduce((acc,v)=>{if(matchGroupName(v)==null){acc.push(v);}return acc;},[]).join('/');}function stripInvisibleSegmentsFromPath(path){return stripGroupSegmentsFromPath(path).replace(/\\/?index$/,'');}function isTypedRoute(name){return!name.startsWith('+')&&name.match(/(_layout|[^/]*?\\+[^/]*?)\\.[tj]sx?$/)===null;}","map":{"version":3,"names":["exports","matchDynamicName","matchDeepDynamicRouteName","testNotFound","matchGroupName","matchLastGroupName","matchArrayGroupName","getNameFromFilePath","getContextKey","removeSupportedExtensions","removeFileSystemExtensions","removeFileSystemDots","stripGroupSegmentsFromPath","stripInvisibleSegmentsFromPath","isTypedRoute","name","match","test","normal","endsWith","replace","filePath","path","split","reduce","acc","v","push","join","startsWith"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-router/src/matchers.tsx"],"sourcesContent":["/** Match `[page]` -> `page` */\nexport function matchDynamicName(name: string): string | undefined {\n  // Don't match `...` or `[` or `]` inside the brackets\n  // eslint-disable-next-line no-useless-escape\n  return name.match(/^\\[([^[\\](?:\\.\\.\\.)]+?)\\]$/)?.[1];\n}\n\n/** Match `[...page]` -> `page` */\nexport function matchDeepDynamicRouteName(name: string): string | undefined {\n  return name.match(/^\\[\\.\\.\\.([^/]+?)\\]$/)?.[1];\n}\n\n/** Test `/` -> `page` */\nexport function testNotFound(name: string): boolean {\n  return /\\+not-found$/.test(name);\n}\n\n/** Match `(page)` -> `page` */\nexport function matchGroupName(name: string): string | undefined {\n  return name.match(/^(?:[^\\\\(\\\\)])*?\\(([^\\\\/]+)\\).*?$/)?.[1];\n}\n\n/** Match `(app)/(page)` -> `page` */\nexport function matchLastGroupName(name: string): string | undefined {\n  return name.match(/.*(?:\\/|^)\\(([^\\\\/\\s]+)\\)[^\\s]*$/)?.[1];\n}\n\n/** Match the first array group name `(a,b,c)/(d,c)` -> `'a,b,c'` */\nexport function matchArrayGroupName(name: string) {\n  return name.match(/(?:[^\\\\(\\\\)])*?\\(([^\\\\/]+,[^\\\\/]+)\\).*?$/)?.[1];\n}\n\nexport function getNameFromFilePath(name: string): string {\n  return removeSupportedExtensions(removeFileSystemDots(name));\n}\n\nexport function getContextKey(name: string): string {\n  // The root path is `` (empty string) so always prepend `/` to ensure\n  // there is some value.\n  const normal = '/' + getNameFromFilePath(name);\n  if (!normal.endsWith('_layout')) {\n    return normal;\n  }\n  return normal.replace(/\\/?_layout$/, '');\n}\n\n/** Remove `.js`, `.ts`, `.jsx`, `.tsx`, and the +api suffix */\nexport function removeSupportedExtensions(name: string): string {\n  return name.replace(/(\\+api)?\\.[jt]sx?$/g, '');\n}\n\n/** Remove `.js`, `.ts`, `.jsx`, `.tsx` */\nexport function removeFileSystemExtensions(name: string): string {\n  return name.replace(/\\.[jt]sx?$/g, '');\n}\n\n// Remove any amount of `./` and `../` from the start of the string\nexport function removeFileSystemDots(filePath: string): string {\n  return filePath.replace(/^(?:\\.\\.?\\/)+/g, '');\n}\n\nexport function stripGroupSegmentsFromPath(path: string): string {\n  return path\n    .split('/')\n    .reduce((acc, v) => {\n      if (matchGroupName(v) == null) {\n        acc.push(v);\n      }\n      return acc;\n    }, [] as string[])\n    .join('/');\n}\n\nexport function stripInvisibleSegmentsFromPath(path: string): string {\n  return stripGroupSegmentsFromPath(path).replace(/\\/?index$/, '');\n}\n\n/**\n * Match:\n *  - _layout files, +html, +not-found, string+api, etc\n *  - Routes can still use `+`, but it cannot be in the last segment.\n */\nexport function isTypedRoute(name: string) {\n  return !name.startsWith('+') && name.match(/(_layout|[^/]*?\\+[^/]*?)\\.[tj]sx?$/) === null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}