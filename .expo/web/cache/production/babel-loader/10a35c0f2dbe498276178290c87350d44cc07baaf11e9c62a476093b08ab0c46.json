{"ast":null,"code":"import{getContext}from'../utils.web';function sizeFromAngle(width,height,angle){const radians=angle*Math.PI/180;let c=Math.cos(radians);let s=Math.sin(radians);if(s<0){s=-s;}if(c<0){c=-c;}return{width:height*s+width*c,height:height*c+width*s};}export default(canvas,degrees)=>{const{width,height}=sizeFromAngle(canvas.width,canvas.height,degrees);const result=document.createElement('canvas');result.width=width;result.height=height;const context=getContext(result);context.translate(result.width/2,result.height/2);const radians=degrees*Math.PI/180;context.rotate(radians);context.drawImage(canvas,-canvas.width/2,-canvas.height/2,canvas.width,canvas.height);return result;};","map":{"version":3,"names":["getContext","sizeFromAngle","width","height","angle","radians","Math","PI","c","cos","s","sin","canvas","degrees","result","document","createElement","context","translate","rotate","drawImage"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-image-manipulator/src/web/actions/RotateAction.web.ts"],"sourcesContent":["import { ActionRotate } from '../../ImageManipulator.types';\nimport { getContext } from '../utils.web';\n\nfunction sizeFromAngle(\n  width: number,\n  height: number,\n  angle: number\n): { width: number; height: number } {\n  const radians = (angle * Math.PI) / 180;\n  let c = Math.cos(radians);\n  let s = Math.sin(radians);\n  if (s < 0) {\n    s = -s;\n  }\n  if (c < 0) {\n    c = -c;\n  }\n  return { width: height * s + width * c, height: height * c + width * s };\n}\n\nexport default (canvas: HTMLCanvasElement, degrees: ActionRotate['rotate']) => {\n  const { width, height } = sizeFromAngle(canvas.width, canvas.height, degrees);\n\n  const result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n\n  const context = getContext(result);\n\n  // Set the origin to the center of the image\n  context.translate(result.width / 2, result.height / 2);\n\n  // Rotate the canvas around the origin\n  const radians = (degrees * Math.PI) / 180;\n  context.rotate(radians);\n\n  // Draw the image\n  context.drawImage(canvas, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\n\n  return result;\n};\n"],"mappings":"AACA,OAASA,UAAU,KAAQ,cAAc,CAEzC,QAAS,CAAAC,aAAaA,CACpBC,KAAa,CACbC,MAAc,CACdC,KAAa,CACsB,CACnC,KAAM,CAAAC,OAAO,CAAID,KAAK,CAAGE,IAAI,CAACC,EAAE,CAAI,GAAG,CACvC,GAAI,CAAAC,CAAC,CAAGF,IAAI,CAACG,GAAG,CAACJ,OAAO,CAAC,CACzB,GAAI,CAAAK,CAAC,CAAGJ,IAAI,CAACK,GAAG,CAACN,OAAO,CAAC,CACzB,GAAIK,CAAC,CAAG,CAAC,CAAE,CACTA,CAAC,CAAG,CAACA,CAAC,CACR,CACA,GAAIF,CAAC,CAAG,CAAC,CAAE,CACTA,CAAC,CAAG,CAACA,CAAC,CACR,CACA,MAAO,CAAEN,KAAK,CAAEC,MAAM,CAAGO,CAAC,CAAGR,KAAK,CAAGM,CAAC,CAAEL,MAAM,CAAEA,MAAM,CAAGK,CAAC,CAAGN,KAAK,CAAGQ,CAAE,CAAC,CAC1E,CAEA,cAAe,CAACE,MAAyB,CAAEC,OAA+B,GAAK,CAC7E,KAAM,CAAEX,KAAK,CAAEC,MAAO,CAAC,CAAGF,aAAa,CAACW,MAAM,CAACV,KAAK,CAAEU,MAAM,CAACT,MAAM,CAAEU,OAAO,CAAC,CAE7E,KAAM,CAAAC,MAAM,CAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CAC/CF,MAAM,CAACZ,KAAK,CAAGA,KAAK,CACpBY,MAAM,CAACX,MAAM,CAAGA,MAAM,CAEtB,KAAM,CAAAc,OAAO,CAAGjB,UAAU,CAACc,MAAM,CAAC,CAGlCG,OAAO,CAACC,SAAS,CAACJ,MAAM,CAACZ,KAAK,CAAG,CAAC,CAAEY,MAAM,CAACX,MAAM,CAAG,CAAC,CAAC,CAGtD,KAAM,CAAAE,OAAO,CAAIQ,OAAO,CAAGP,IAAI,CAACC,EAAE,CAAI,GAAG,CACzCU,OAAO,CAACE,MAAM,CAACd,OAAO,CAAC,CAGvBY,OAAO,CAACG,SAAS,CAACR,MAAM,CAAE,CAACA,MAAM,CAACV,KAAK,CAAG,CAAC,CAAE,CAACU,MAAM,CAACT,MAAM,CAAG,CAAC,CAAES,MAAM,CAACV,KAAK,CAAEU,MAAM,CAACT,MAAM,CAAC,CAE7F,MAAO,CAAAW,MAAM,CACf,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}