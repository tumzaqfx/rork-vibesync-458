{"ast":null,"code":"\"use strict\";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||(\"get\"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function(){return m[k];}};}Object.defineProperty(o,k2,desc);}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(){var ownKeys=function(o){ownKeys=Object.getOwnPropertyNames||function(o){var ar=[];for(var k in o)if(Object.prototype.hasOwnProperty.call(o,k))ar[ar.length]=k;return ar;};return ownKeys(o);};return function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k=ownKeys(mod),i=0;i<k.length;i++)if(k[i]!==\"default\")__createBinding(result,mod,k[i]);__setModuleDefault(result,mod);return result;};}();Object.defineProperty(exports,\"__esModule\",{value:true});exports.navigate=navigate;exports.reload=reload;exports.prefetch=prefetch;exports.push=push;exports.dismiss=dismiss;exports.dismissTo=dismissTo;exports.replace=replace;exports.dismissAll=dismissAll;exports.goBack=goBack;exports.canGoBack=canGoBack;exports.canDismiss=canDismiss;exports.setParams=setParams;exports.linkTo=linkTo;const dom_1=require(\"expo/dom\");const Linking=__importStar(require(\"expo-linking\"));const react_native_1=require(\"react-native-web/dist/index\");const router_store_1=require(\"./router-store\");const emitDomEvent_1=require(\"../domComponents/emitDomEvent\");const getRoutesRedirects_1=require(\"../getRoutesRedirects\");const href_1=require(\"../link/href\");const matchers_1=require(\"../matchers\");const url_1=require(\"../utils/url\");function assertIsReady(){if(!router_store_1.store.navigationRef.isReady()){throw new Error('Attempted to navigate before mounting the Root Layout component. Ensure the Root Layout component is rendering a Slot, or other navigator on the first render.');}}function navigate(url,options){return linkTo((0,href_1.resolveHref)(url),Object.assign({},options,{event:'NAVIGATE'}));}function reload(){throw new Error('The reload method is not implemented in the client-side router yet.');}function prefetch(href,options){return linkTo((0,href_1.resolveHref)(href),Object.assign({},options,{event:'PRELOAD'}));}function push(url,options){return linkTo((0,href_1.resolveHref)(url),Object.assign({},options,{event:'PUSH'}));}function dismiss(count=1){if((0,emitDomEvent_1.emitDomDismiss)(count)){return;}router_store_1.store.navigationRef?.dispatch({type:'POP',payload:{count}});}function dismissTo(href,options){return linkTo((0,href_1.resolveHref)(href),Object.assign({},options,{event:'POP_TO'}));}function replace(url,options){return linkTo((0,href_1.resolveHref)(url),Object.assign({},options,{event:'REPLACE'}));}function dismissAll(){if((0,emitDomEvent_1.emitDomDismissAll)()){return;}router_store_1.store.navigationRef?.dispatch({type:'POP_TO_TOP'});}function goBack(){if((0,emitDomEvent_1.emitDomGoBack)()){return;}assertIsReady();router_store_1.store.navigationRef?.current?.goBack();}function canGoBack(){if(dom_1.IS_DOM){throw new Error('canGoBack imperative method is not supported. Pass the property to the DOM component instead.');}if(!router_store_1.store.navigationRef.isReady()){return false;}return router_store_1.store.navigationRef?.current?.canGoBack()??false;}function canDismiss(){if(dom_1.IS_DOM){throw new Error('canDismiss imperative method is not supported. Pass the property to the DOM component instead.');}let state=router_store_1.store.state;while(state){if(state.type==='stack'&&state.routes.length>1){return true;}if(state.index===undefined)return false;state=state.routes?.[state.index]?.state;}return false;}function setParams(params={}){if((0,emitDomEvent_1.emitDomSetParams)(params)){return;}assertIsReady();return(router_store_1.store.navigationRef?.current?.setParams)(params);}function linkTo(originalHref,options={}){originalHref=typeof originalHref=='string'?originalHref:(0,href_1.resolveHref)(originalHref);let href=originalHref;if((0,emitDomEvent_1.emitDomLinkEvent)(href,options)){return;}if((0,url_1.shouldLinkExternally)(href)){if(href.startsWith('//')&&react_native_1.Platform.OS!=='web'){href=`https:${href}`;}Linking.openURL(href);return;}assertIsReady();const navigationRef=router_store_1.store.navigationRef.current;if(navigationRef==null){throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");}if(!router_store_1.store.linking){throw new Error('Attempted to link to route when no routes are present');}if(href==='..'||href==='../'){navigationRef.goBack();return;}const rootState=navigationRef.getRootState();href=(0,href_1.resolveHrefStringWithSegments)(href,router_store_1.store.getRouteInfo(),options);href=(0,getRoutesRedirects_1.applyRedirects)(href,router_store_1.store.redirects);if(!href){return;}const state=router_store_1.store.linking.getStateFromPath(href,router_store_1.store.linking.config);if(!state||state.routes.length===0){console.error('Could not generate a valid navigation state for the given path: '+href);return;}return navigationRef.dispatch(getNavigateAction(state,rootState,options.event,options.withAnchor,options.dangerouslySingular));}function getNavigateAction(actionState,navigationState,type='NAVIGATE',withAnchor,singular){let actionStateRoute;while(actionState&&navigationState){const stateRoute=navigationState.routes[navigationState.index];actionStateRoute=actionState.routes[actionState.routes.length-1];const childState=actionStateRoute.state;const nextNavigationState=stateRoute.state;const dynamicName=(0,matchers_1.matchDynamicName)(actionStateRoute.name);const didActionAndCurrentStateDiverge=actionStateRoute.name!==stateRoute.name||!childState||!nextNavigationState||dynamicName&&actionStateRoute.params?.[dynamicName]!==stateRoute.params?.[dynamicName];if(didActionAndCurrentStateDiverge){break;}actionState=childState;navigationState=nextNavigationState;}const rootPayload={params:{}};let payload=rootPayload;let params=payload.params;while(actionStateRoute){Object.assign(params,Object.assign({},payload.params,actionStateRoute.params));payload.screen=actionStateRoute.name;payload.params=Object.assign({},params);delete payload.params['screen'];payload=payload.params;params=payload;actionStateRoute=actionStateRoute.state?.routes[actionStateRoute.state?.routes.length-1];}if(type==='PUSH'&&navigationState.type!=='stack'){type='NAVIGATE';}else if(navigationState.type==='expo-tab'){type='JUMP_TO';}else if(type==='REPLACE'&&(navigationState.type==='tab'||navigationState.type==='drawer')){type='JUMP_TO';}if(withAnchor!==undefined){if(rootPayload.params.initial){if(false){console.warn(`The parameter 'initial' is a reserved parameter name in React Navigation`);}}rootPayload.params.initial=!withAnchor;}return{type,target:navigationState.key,payload:{name:rootPayload.screen,params:rootPayload.params,singular}};}","map":{"version":3,"names":["exports","navigate","reload","prefetch","push","dismiss","dismissTo","replace","dismissAll","goBack","canGoBack","canDismiss","setParams","linkTo","dom_1","require","Linking","__importStar","react_native_1","router_store_1","emitDomEvent_1","getRoutesRedirects_1","href_1","matchers_1","url_1","assertIsReady","store","navigationRef","isReady","Error","url","options","resolveHref","Object","assign","event","href","count","emitDomDismiss","dispatch","type","payload","emitDomDismissAll","emitDomGoBack","current","IS_DOM","state","routes","length","index","undefined","params","emitDomSetParams","originalHref","emitDomLinkEvent","shouldLinkExternally","startsWith","Platform","OS","openURL","linking","rootState","getRootState","resolveHrefStringWithSegments","getRouteInfo","applyRedirects","redirects","getStateFromPath","config","console","error","getNavigateAction","withAnchor","dangerouslySingular","actionState","navigationState","singular","actionStateRoute","stateRoute","childState","nextNavigationState","dynamicName","matchDynamicName","name","didActionAndCurrentStateDiverge","rootPayload","screen","initial","warn","target","key"],"sources":["/home/user/rork-vibesync-458/node_modules/expo-router/src/global-state/routing.ts"],"sourcesContent":["import { type NavigationState, PartialRoute } from '@react-navigation/native';\nimport { IS_DOM } from 'expo/dom';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'react-native';\n\nimport { store } from './router-store';\nimport {\n  emitDomDismiss,\n  emitDomDismissAll,\n  emitDomGoBack,\n  emitDomLinkEvent,\n  emitDomSetParams,\n} from '../domComponents/emitDomEvent';\nimport { ResultState } from '../fork/getStateFromPath';\nimport { applyRedirects } from '../getRoutesRedirects';\nimport { resolveHref, resolveHrefStringWithSegments } from '../link/href';\nimport { matchDynamicName } from '../matchers';\nimport { Href } from '../types';\nimport { SingularOptions } from '../useScreens';\nimport { shouldLinkExternally } from '../utils/url';\n\nfunction assertIsReady() {\n  if (!store.navigationRef.isReady()) {\n    throw new Error(\n      'Attempted to navigate before mounting the Root Layout component. Ensure the Root Layout component is rendering a Slot, or other navigator on the first render.'\n    );\n  }\n}\n\nexport type NavigationOptions = Omit<LinkToOptions, 'event'>;\n\nexport function navigate(url: Href, options?: NavigationOptions) {\n  return linkTo(resolveHref(url), { ...options, event: 'NAVIGATE' });\n}\n\nexport function reload() {\n  // TODO(EvanBacon): add `reload` support.\n  throw new Error('The reload method is not implemented in the client-side router yet.');\n}\n\nexport function prefetch(href: Href, options?: NavigationOptions) {\n  return linkTo(resolveHref(href), { ...options, event: 'PRELOAD' });\n}\n\nexport function push(url: Href, options?: NavigationOptions) {\n  return linkTo(resolveHref(url), { ...options, event: 'PUSH' });\n}\n\nexport function dismiss(count: number = 1) {\n  if (emitDomDismiss(count)) {\n    return;\n  }\n\n  store.navigationRef?.dispatch({ type: 'POP', payload: { count } });\n}\n\nexport function dismissTo(href: Href, options?: NavigationOptions) {\n  return linkTo(resolveHref(href), { ...options, event: 'POP_TO' });\n}\n\nexport function replace(url: Href, options?: NavigationOptions) {\n  return linkTo(resolveHref(url), { ...options, event: 'REPLACE' });\n}\n\nexport function dismissAll() {\n  if (emitDomDismissAll()) {\n    return;\n  }\n  store.navigationRef?.dispatch({ type: 'POP_TO_TOP' });\n}\n\nexport function goBack() {\n  if (emitDomGoBack()) {\n    return;\n  }\n  assertIsReady();\n  store.navigationRef?.current?.goBack();\n}\n\nexport function canGoBack(): boolean {\n  if (IS_DOM) {\n    throw new Error(\n      'canGoBack imperative method is not supported. Pass the property to the DOM component instead.'\n    );\n  }\n  // Return a default value here if the navigation hasn't mounted yet.\n  // This can happen if the user calls `canGoBack` from the Root Layout route\n  // before mounting a navigator. This behavior exists due to React Navigation being dynamically\n  // constructed at runtime. We can get rid of this in the future if we use\n  // the static configuration internally.\n  if (!store.navigationRef.isReady()) {\n    return false;\n  }\n  return store.navigationRef?.current?.canGoBack() ?? false;\n}\n\nexport function canDismiss(): boolean {\n  if (IS_DOM) {\n    throw new Error(\n      'canDismiss imperative method is not supported. Pass the property to the DOM component instead.'\n    );\n  }\n  let state = store.state;\n\n  // Keep traversing down the state tree until we find a stack navigator that we can pop\n  while (state) {\n    if (state.type === 'stack' && state.routes.length > 1) {\n      return true;\n    }\n    if (state.index === undefined) return false;\n\n    state = state.routes?.[state.index]?.state as any;\n  }\n\n  return false;\n}\n\nexport function setParams(\n  params: Record<string, undefined | string | number | (string | number)[]> = {}\n) {\n  if (emitDomSetParams(params)) {\n    return;\n  }\n  assertIsReady();\n  return (store.navigationRef?.current?.setParams as any)(params);\n}\n\nexport type LinkToOptions = {\n  event?: string;\n\n  /**\n   * Relative URL references are either relative to the directory or the document. By default, relative paths are relative to the document.\n   * @see: [MDN's documentation on Resolving relative references to a URL](https://developer.mozilla.org/en-US/docs/Web/API/URL_API/Resolving_relative_references).\n   */\n  relativeToDirectory?: boolean;\n\n  /**\n   * Include the anchor when navigating to a new navigator\n   */\n  withAnchor?: boolean;\n\n  /**\n   * When navigating in a Stack, remove all screen from the history that match the singular condition\n   *\n   * If used with `push`, the history will be filtered even if no navigation occurs.\n   */\n  dangerouslySingular?: SingularOptions;\n};\n\nexport function linkTo(originalHref: Href, options: LinkToOptions = {}) {\n  originalHref = typeof originalHref == 'string' ? originalHref : resolveHref(originalHref);\n  let href: string | undefined | null = originalHref;\n\n  if (emitDomLinkEvent(href, options)) {\n    return;\n  }\n\n  if (shouldLinkExternally(href)) {\n    if (href.startsWith('//') && Platform.OS !== 'web') {\n      href = `https:${href}`;\n    }\n\n    Linking.openURL(href);\n    return;\n  }\n\n  assertIsReady();\n  const navigationRef = store.navigationRef.current;\n\n  if (navigationRef == null) {\n    throw new Error(\n      \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n    );\n  }\n\n  if (!store.linking) {\n    throw new Error('Attempted to link to route when no routes are present');\n  }\n\n  if (href === '..' || href === '../') {\n    navigationRef.goBack();\n    return;\n  }\n\n  const rootState = navigationRef.getRootState();\n\n  href = resolveHrefStringWithSegments(href, store.getRouteInfo(), options);\n  href = applyRedirects(href, store.redirects);\n\n  // If the href is undefined, it means that the redirect has already been handled the navigation\n  if (!href) {\n    return;\n  }\n\n  const state = store.linking.getStateFromPath!(href, store.linking.config);\n\n  if (!state || state.routes.length === 0) {\n    console.error('Could not generate a valid navigation state for the given path: ' + href);\n    return;\n  }\n\n  return navigationRef.dispatch(\n    getNavigateAction(\n      state,\n      rootState,\n      options.event,\n      options.withAnchor,\n      options.dangerouslySingular\n    )\n  );\n}\n\nfunction getNavigateAction(\n  actionState: ResultState,\n  navigationState: NavigationState,\n  type = 'NAVIGATE',\n  withAnchor?: boolean,\n  singular?: SingularOptions\n) {\n  /**\n   * We need to find the deepest navigator where the action and current state diverge, If they do not diverge, the\n   * lowest navigator is the target.\n   *\n   * By default React Navigation will target the current navigator, but this doesn't work for all actions\n   * For example:\n   *  - /deeply/nested/route -> /top-level-route the target needs to be the top-level navigator\n   *  - /stack/nestedStack/page -> /stack1/nestedStack/other-page needs to target the nestedStack navigator\n   *\n   * This matching needs to done by comparing the route names and the dynamic path, for example\n   * - /1/page -> /2/anotherPage needs to target the /[id] navigator\n   *\n   * Other parameters such as search params and hash are not evaluated.\n   */\n  let actionStateRoute: PartialRoute<any> | undefined;\n\n  // Traverse the state tree comparing the current state and the action state until we find where they diverge\n  while (actionState && navigationState) {\n    const stateRoute = navigationState.routes[navigationState.index];\n\n    actionStateRoute = actionState.routes[actionState.routes.length - 1];\n\n    const childState: any = actionStateRoute.state;\n    const nextNavigationState = stateRoute.state;\n\n    const dynamicName = matchDynamicName(actionStateRoute.name);\n\n    const didActionAndCurrentStateDiverge =\n      actionStateRoute.name !== stateRoute.name ||\n      !childState ||\n      !nextNavigationState ||\n      // @ts-expect-error: TODO(@kitten): This isn't properly typed, so the index access fails\n      (dynamicName && actionStateRoute.params?.[dynamicName] !== stateRoute.params?.[dynamicName]);\n\n    if (didActionAndCurrentStateDiverge) {\n      break;\n    }\n\n    actionState = childState;\n    navigationState = nextNavigationState as NavigationState;\n  }\n\n  /*\n   * We found the target navigator, but the payload is in the incorrect format\n   * We need to convert the action state to a payload that can be dispatched\n   */\n  const rootPayload: Record<string, any> = { params: {} };\n  let payload = rootPayload;\n  let params = payload.params;\n\n  // The root level of payload is a bit weird, its params are in the child object\n  while (actionStateRoute) {\n    Object.assign(params, { ...payload.params, ...actionStateRoute.params });\n    // Assign the screen name to the payload\n    payload.screen = actionStateRoute.name;\n    // Merge the params, ensuring that we create a new object\n    payload.params = { ...params };\n\n    // Params don't include the screen, thats a separate attribute\n    delete payload.params['screen'];\n\n    // Continue down the payload tree\n    // Initially these values are separate, but React Nav merges them after the first layer\n    payload = payload.params;\n    params = payload;\n\n    actionStateRoute = actionStateRoute.state?.routes[actionStateRoute.state?.routes.length - 1];\n  }\n\n  if (type === 'PUSH' && navigationState.type !== 'stack') {\n    type = 'NAVIGATE';\n  } else if (navigationState.type === 'expo-tab') {\n    type = 'JUMP_TO';\n  } else if (\n    type === 'REPLACE' &&\n    (navigationState.type === 'tab' || navigationState.type === 'drawer')\n  ) {\n    type = 'JUMP_TO';\n  }\n\n  if (withAnchor !== undefined) {\n    if (rootPayload.params.initial) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(`The parameter 'initial' is a reserved parameter name in React Navigation`);\n      }\n    }\n    /*\n     * The logic for initial can seen backwards depending on your perspective\n     *   True: The initialRouteName is not loaded. The incoming screen is the initial screen (default)\n     *   False: The initialRouteName is loaded. THe incoming screen is placed after the initialRouteName\n     *\n     * withAnchor flips the perspective.\n     *   True: You want the initialRouteName to load.\n     *   False: You do not want the initialRouteName to load.\n     */\n    rootPayload.params.initial = !withAnchor;\n  }\n\n  return {\n    type,\n    target: navigationState.key,\n    payload: {\n      // key: rootPayload.key,\n      name: rootPayload.screen,\n      params: rootPayload.params,\n      singular,\n    },\n  };\n}\n"],"mappings":"+jCA+BAA,OAAA,CAAAC,QAAA,CAAAA,QAAA,CAIAD,OAAA,CAAAE,MAAA,CAAAA,MAAA,CAKAF,OAAA,CAAAG,QAAA,CAAAA,QAAA,CAIAH,OAAA,CAAAI,IAAA,CAAAA,IAAA,CAIAJ,OAAA,CAAAK,OAAA,CAAAA,OAAA,CAQAL,OAAA,CAAAM,SAAA,CAAAA,SAAA,CAIAN,OAAA,CAAAO,OAAA,CAAAA,OAAA,CAIAP,OAAA,CAAAQ,UAAA,CAAAA,UAAA,CAOAR,OAAA,CAAAS,MAAA,CAAAA,MAAA,CAQAT,OAAA,CAAAU,SAAA,CAAAA,SAAA,CAiBAV,OAAA,CAAAW,UAAA,CAAAA,UAAA,CAqBAX,OAAA,CAAAY,SAAA,CAAAA,SAAA,CAgCAZ,OAAA,CAAAa,MAAA,CAAAA,MAAA,CApJA,MAAAC,KAAA,CAAAC,OAAA,aACA,MAAAC,OAAA,CAAAC,YAAA,CAAAF,OAAA,kBAAwC,MAAAG,cAAA,CAAAH,OAAA,gCAGxC,MAAAI,cAAA,CAAAJ,OAAA,mBACA,MAAAK,cAAA,CAAAL,OAAA,kCAQA,MAAAM,oBAAA,CAAAN,OAAA,0BACA,MAAAO,MAAA,CAAAP,OAAA,iBACA,MAAAQ,UAAA,CAAAR,OAAA,gBAGA,MAAAS,KAAA,CAAAT,OAAA,iBAEA,QAAS,CAAAU,aAAaA,CAAA,EACpB,GAAI,CAACN,cAAA,CAAAO,KAAK,CAACC,aAAa,CAACC,OAAO,EAAE,CAAE,CAClC,KAAM,IAAI,CAAAC,KAAK,CACb,gKAAgK,CACjK,CACH,CACF,CAIA,QAAgB,CAAA5B,QAAQA,CAAC6B,GAAS,CAAEC,OAA2B,EAC7D,MAAO,CAAAlB,MAAM,CAAC,GAAAS,MAAA,CAAAU,WAAW,EAACF,GAAG,CAAC,CAAAG,MAAA,CAAAC,MAAA,IAAOH,OAAO,EAAEI,KAAK,CAAE,UAAU,EAAE,CAAC,CACpE,CAEA,QAAgB,CAAAjC,MAAMA,CAAA,EAEpB,KAAM,IAAI,CAAA2B,KAAK,CAAC,qEAAqE,CAAC,CACxF,CAEA,QAAgB,CAAA1B,QAAQA,CAACiC,IAAU,CAAEL,OAA2B,EAC9D,MAAO,CAAAlB,MAAM,CAAC,GAAAS,MAAA,CAAAU,WAAW,EAACI,IAAI,CAAC,CAAAH,MAAA,CAAAC,MAAA,IAAOH,OAAO,EAAEI,KAAK,CAAE,SAAS,EAAE,CAAC,CACpE,CAEA,QAAgB,CAAA/B,IAAIA,CAAC0B,GAAS,CAAEC,OAA2B,EACzD,MAAO,CAAAlB,MAAM,CAAC,GAAAS,MAAA,CAAAU,WAAW,EAACF,GAAG,CAAC,CAAAG,MAAA,CAAAC,MAAA,IAAOH,OAAO,EAAEI,KAAK,CAAE,MAAM,EAAE,CAAC,CAChE,CAEA,QAAgB,CAAA9B,OAAOA,CAACgC,KAAA,CAAgB,CAAC,EACvC,GAAI,GAAAjB,cAAA,CAAAkB,cAAc,EAACD,KAAK,CAAC,CAAE,CACzB,OACF,CAEAlB,cAAA,CAAAO,KAAK,CAACC,aAAa,EAAEY,QAAQ,CAAC,CAAEC,IAAI,CAAE,KAAK,CAAEC,OAAO,CAAE,CAAEJ,KAAK,CAAE,CAAE,CAAC,CACpE,CAEA,QAAgB,CAAA/B,SAASA,CAAC8B,IAAU,CAAEL,OAA2B,EAC/D,MAAO,CAAAlB,MAAM,CAAC,GAAAS,MAAA,CAAAU,WAAW,EAACI,IAAI,CAAC,CAAAH,MAAA,CAAAC,MAAA,IAAOH,OAAO,EAAEI,KAAK,CAAE,QAAQ,EAAE,CAAC,CACnE,CAEA,QAAgB,CAAA5B,OAAOA,CAACuB,GAAS,CAAEC,OAA2B,EAC5D,MAAO,CAAAlB,MAAM,CAAC,GAAAS,MAAA,CAAAU,WAAW,EAACF,GAAG,CAAC,CAAAG,MAAA,CAAAC,MAAA,IAAOH,OAAO,EAAEI,KAAK,CAAE,SAAS,EAAE,CAAC,CACnE,CAEA,QAAgB,CAAA3B,UAAUA,CAAA,EACxB,GAAI,GAAAY,cAAA,CAAAsB,iBAAiB,GAAE,CAAE,CACvB,OACF,CACAvB,cAAA,CAAAO,KAAK,CAACC,aAAa,EAAEY,QAAQ,CAAC,CAAEC,IAAI,CAAE,YAAY,CAAE,CAAC,CACvD,CAEA,QAAgB,CAAA/B,MAAMA,CAAA,EACpB,GAAI,GAAAW,cAAA,CAAAuB,aAAa,GAAE,CAAE,CACnB,OACF,CACAlB,aAAa,EAAE,CACfN,cAAA,CAAAO,KAAK,CAACC,aAAa,EAAEiB,OAAO,EAAEnC,MAAM,EAAE,CACxC,CAEA,QAAgB,CAAAC,SAASA,CAAA,EACvB,GAAII,KAAA,CAAA+B,MAAM,CAAE,CACV,KAAM,IAAI,CAAAhB,KAAK,CACb,+FAA+F,CAChG,CACH,CAMA,GAAI,CAACV,cAAA,CAAAO,KAAK,CAACC,aAAa,CAACC,OAAO,EAAE,CAAE,CAClC,MAAO,MAAK,CACd,CACA,MAAO,CAAAT,cAAA,CAAAO,KAAK,CAACC,aAAa,EAAEiB,OAAO,EAAElC,SAAS,EAAE,EAAI,KAAK,CAC3D,CAEA,QAAgB,CAAAC,UAAUA,CAAA,EACxB,GAAIG,KAAA,CAAA+B,MAAM,CAAE,CACV,KAAM,IAAI,CAAAhB,KAAK,CACb,gGAAgG,CACjG,CACH,CACA,GAAI,CAAAiB,KAAK,CAAG3B,cAAA,CAAAO,KAAK,CAACoB,KAAK,CAGvB,MAAOA,KAAK,CAAE,CACZ,GAAIA,KAAK,CAACN,IAAI,GAAK,OAAO,EAAIM,KAAK,CAACC,MAAM,CAACC,MAAM,CAAG,CAAC,CAAE,CACrD,MAAO,KAAI,CACb,CACA,GAAIF,KAAK,CAACG,KAAK,GAAKC,SAAS,CAAE,MAAO,MAAK,CAE3CJ,KAAK,CAAGA,KAAK,CAACC,MAAM,GAAGD,KAAK,CAACG,KAAK,CAAC,EAAEH,KAAY,CACnD,CAEA,MAAO,MAAK,CACd,CAEA,QAAgB,CAAAlC,SAASA,CACvBuC,MAAA,CAA4E,EAAE,EAE9E,GAAI,GAAA/B,cAAA,CAAAgC,gBAAgB,EAACD,MAAM,CAAC,CAAE,CAC5B,OACF,CACA1B,aAAa,EAAE,CACf,MAAO,CAACN,cAAA,CAAAO,KAAK,CAACC,aAAa,EAAEiB,OAAO,EAAEhC,SAAiB,EAACuC,MAAM,CAAC,CACjE,CAwBA,QAAgB,CAAAtC,MAAMA,CAACwC,YAAkB,CAAEtB,OAAA,CAAyB,EAAE,EACpEsB,YAAY,CAAG,MAAO,CAAAA,YAAY,EAAI,QAAQ,CAAGA,YAAY,CAAG,GAAA/B,MAAA,CAAAU,WAAW,EAACqB,YAAY,CAAC,CACzF,GAAI,CAAAjB,IAAI,CAA8BiB,YAAY,CAElD,GAAI,GAAAjC,cAAA,CAAAkC,gBAAgB,EAAClB,IAAI,CAAEL,OAAO,CAAC,CAAE,CACnC,OACF,CAEA,GAAI,GAAAP,KAAA,CAAA+B,oBAAoB,EAACnB,IAAI,CAAC,CAAE,CAC9B,GAAIA,IAAI,CAACoB,UAAU,CAAC,IAAI,CAAC,EAAItC,cAAA,CAAAuC,QAAQ,CAACC,EAAE,GAAK,KAAK,CAAE,CAClDtB,IAAI,CAAG,SAASA,IAAI,EAAE,CACxB,CAEApB,OAAO,CAAC2C,OAAO,CAACvB,IAAI,CAAC,CACrB,OACF,CAEAX,aAAa,EAAE,CACf,KAAM,CAAAE,aAAa,CAAGR,cAAA,CAAAO,KAAK,CAACC,aAAa,CAACiB,OAAO,CAEjD,GAAIjB,aAAa,EAAI,IAAI,CAAE,CACzB,KAAM,IAAI,CAAAE,KAAK,CACb,kFAAkF,CACnF,CACH,CAEA,GAAI,CAACV,cAAA,CAAAO,KAAK,CAACkC,OAAO,CAAE,CAClB,KAAM,IAAI,CAAA/B,KAAK,CAAC,uDAAuD,CAAC,CAC1E,CAEA,GAAIO,IAAI,GAAK,IAAI,EAAIA,IAAI,GAAK,KAAK,CAAE,CACnCT,aAAa,CAAClB,MAAM,EAAE,CACtB,OACF,CAEA,KAAM,CAAAoD,SAAS,CAAGlC,aAAa,CAACmC,YAAY,EAAE,CAE9C1B,IAAI,CAAG,GAAAd,MAAA,CAAAyC,6BAA6B,EAAC3B,IAAI,CAAEjB,cAAA,CAAAO,KAAK,CAACsC,YAAY,EAAE,CAAEjC,OAAO,CAAC,CACzEK,IAAI,CAAG,GAAAf,oBAAA,CAAA4C,cAAc,EAAC7B,IAAI,CAAEjB,cAAA,CAAAO,KAAK,CAACwC,SAAS,CAAC,CAG5C,GAAI,CAAC9B,IAAI,CAAE,CACT,OACF,CAEA,KAAM,CAAAU,KAAK,CAAG3B,cAAA,CAAAO,KAAK,CAACkC,OAAO,CAACO,gBAAiB,CAAC/B,IAAI,CAAEjB,cAAA,CAAAO,KAAK,CAACkC,OAAO,CAACQ,MAAM,CAAC,CAEzE,GAAI,CAACtB,KAAK,EAAIA,KAAK,CAACC,MAAM,CAACC,MAAM,GAAK,CAAC,CAAE,CACvCqB,OAAO,CAACC,KAAK,CAAC,kEAAkE,CAAGlC,IAAI,CAAC,CACxF,OACF,CAEA,MAAO,CAAAT,aAAa,CAACY,QAAQ,CAC3BgC,iBAAiB,CACfzB,KAAK,CACLe,SAAS,CACT9B,OAAO,CAACI,KAAK,CACbJ,OAAO,CAACyC,UAAU,CAClBzC,OAAO,CAAC0C,mBAAmB,CAC5B,CACF,CACH,CAEA,QAAS,CAAAF,iBAAiBA,CACxBG,WAAwB,CACxBC,eAAgC,CAChCnC,IAAI,CAAG,UAAU,CACjBgC,UAAoB,CACpBI,QAA0B,EAgB1B,GAAI,CAAAC,gBAA+C,CAGnD,MAAOH,WAAW,EAAIC,eAAe,CAAE,CACrC,KAAM,CAAAG,UAAU,CAAGH,eAAe,CAAC5B,MAAM,CAAC4B,eAAe,CAAC1B,KAAK,CAAC,CAEhE4B,gBAAgB,CAAGH,WAAW,CAAC3B,MAAM,CAAC2B,WAAW,CAAC3B,MAAM,CAACC,MAAM,CAAG,CAAC,CAAC,CAEpE,KAAM,CAAA+B,UAAU,CAAQF,gBAAgB,CAAC/B,KAAK,CAC9C,KAAM,CAAAkC,mBAAmB,CAAGF,UAAU,CAAChC,KAAK,CAE5C,KAAM,CAAAmC,WAAW,CAAG,GAAA1D,UAAA,CAAA2D,gBAAgB,EAACL,gBAAgB,CAACM,IAAI,CAAC,CAE3D,KAAM,CAAAC,+BAA+B,CACnCP,gBAAgB,CAACM,IAAI,GAAKL,UAAU,CAACK,IAAI,EACzC,CAACJ,UAAU,EACX,CAACC,mBAAmB,EAEnBC,WAAW,EAAIJ,gBAAgB,CAAC1B,MAAM,GAAG8B,WAAW,CAAC,GAAKH,UAAU,CAAC3B,MAAM,GAAG8B,WAAW,CAAE,CAE9F,GAAIG,+BAA+B,CAAE,CACnC,MACF,CAEAV,WAAW,CAAGK,UAAU,CACxBJ,eAAe,CAAGK,mBAAsC,CAC1D,CAMA,KAAM,CAAAK,WAAW,CAAwB,CAAElC,MAAM,CAAE,EAAE,CAAE,CACvD,GAAI,CAAAV,OAAO,CAAG4C,WAAW,CACzB,GAAI,CAAAlC,MAAM,CAAGV,OAAO,CAACU,MAAM,CAG3B,MAAO0B,gBAAgB,CAAE,CACvB5C,MAAM,CAACC,MAAM,CAACiB,MAAM,CAAAlB,MAAA,CAAAC,MAAA,IAAOO,OAAO,CAACU,MAAM,CAAK0B,gBAAgB,CAAC1B,MAAM,CAAE,CAAC,CAExEV,OAAO,CAAC6C,MAAM,CAAGT,gBAAgB,CAACM,IAAI,CAEtC1C,OAAO,CAACU,MAAM,CAAAlB,MAAA,CAAAC,MAAA,IAAQiB,MAAM,CAAE,CAG9B,MAAO,CAAAV,OAAO,CAACU,MAAM,CAAC,QAAQ,CAAC,CAI/BV,OAAO,CAAGA,OAAO,CAACU,MAAM,CACxBA,MAAM,CAAGV,OAAO,CAEhBoC,gBAAgB,CAAGA,gBAAgB,CAAC/B,KAAK,EAAEC,MAAM,CAAC8B,gBAAgB,CAAC/B,KAAK,EAAEC,MAAM,CAACC,MAAM,CAAG,CAAC,CAAC,CAC9F,CAEA,GAAIR,IAAI,GAAK,MAAM,EAAImC,eAAe,CAACnC,IAAI,GAAK,OAAO,CAAE,CACvDA,IAAI,CAAG,UAAU,CACnB,CAAC,IAAM,IAAImC,eAAe,CAACnC,IAAI,GAAK,UAAU,CAAE,CAC9CA,IAAI,CAAG,SAAS,CAClB,CAAC,IAAM,IACLA,IAAI,GAAK,SAAS,GACjBmC,eAAe,CAACnC,IAAI,GAAK,KAAK,EAAImC,eAAe,CAACnC,IAAI,GAAK,QAAQ,CAAC,CACrE,CACAA,IAAI,CAAG,SAAS,CAClB,CAEA,GAAIgC,UAAU,GAAKtB,SAAS,CAAE,CAC5B,GAAImC,WAAW,CAAClC,MAAM,CAACoC,OAAO,CAAE,CAC9B,SAA2C,CACzClB,OAAO,CAACmB,IAAI,CAAC,0EAA0E,CAAC,CAC1F,CACF,CAUAH,WAAW,CAAClC,MAAM,CAACoC,OAAO,CAAG,CAACf,UAAU,CAC1C,CAEA,MAAO,CACLhC,IAAI,CACJiD,MAAM,CAAEd,eAAe,CAACe,GAAG,CAC3BjD,OAAO,CAAE,CAEP0C,IAAI,CAAEE,WAAW,CAACC,MAAM,CACxBnC,MAAM,CAAEkC,WAAW,CAAClC,MAAM,CAC1ByB,Q,EAEH,CACH","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}